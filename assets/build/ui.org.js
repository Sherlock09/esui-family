define('underscore/underscore', [
    'require',
    'exports',
    'module'
], function (require, exports, module) {
    (function () {
        var root = this;
        var previousUnderscore = root._;
        var breaker = {};
        var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
        var push = ArrayProto.push, slice = ArrayProto.slice, concat = ArrayProto.concat, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty;
        var nativeForEach = ArrayProto.forEach, nativeMap = ArrayProto.map, nativeReduce = ArrayProto.reduce, nativeReduceRight = ArrayProto.reduceRight, nativeFilter = ArrayProto.filter, nativeEvery = ArrayProto.every, nativeSome = ArrayProto.some, nativeIndexOf = ArrayProto.indexOf, nativeLastIndexOf = ArrayProto.lastIndexOf, nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeBind = FuncProto.bind;
        var _ = function (obj) {
            if (obj instanceof _)
                return obj;
            if (!(this instanceof _))
                return new _(obj);
            this._wrapped = obj;
        };
        if (typeof exports !== 'undefined') {
            if (typeof module !== 'undefined' && module.exports) {
                exports = module.exports = _;
            }
            exports._ = _;
        } else {
            root._ = _;
        }
        _.VERSION = '1.5.2';
        var each = _.each = _.forEach = function (obj, iterator, context) {
                if (obj == null)
                    return;
                if (nativeForEach && obj.forEach === nativeForEach) {
                    obj.forEach(iterator, context);
                } else if (obj.length === +obj.length) {
                    for (var i = 0, length = obj.length; i < length; i++) {
                        if (iterator.call(context, obj[i], i, obj) === breaker)
                            return;
                    }
                } else {
                    var keys = _.keys(obj);
                    for (var i = 0, length = keys.length; i < length; i++) {
                        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker)
                            return;
                    }
                }
            };
        _.map = _.collect = function (obj, iterator, context) {
            var results = [];
            if (obj == null)
                return results;
            if (nativeMap && obj.map === nativeMap)
                return obj.map(iterator, context);
            each(obj, function (value, index, list) {
                results.push(iterator.call(context, value, index, list));
            });
            return results;
        };
        var reduceError = 'Reduce of empty array with no initial value';
        _.reduce = _.foldl = _.inject = function (obj, iterator, memo, context) {
            var initial = arguments.length > 2;
            if (obj == null)
                obj = [];
            if (nativeReduce && obj.reduce === nativeReduce) {
                if (context)
                    iterator = _.bind(iterator, context);
                return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
            }
            each(obj, function (value, index, list) {
                if (!initial) {
                    memo = value;
                    initial = true;
                } else {
                    memo = iterator.call(context, memo, value, index, list);
                }
            });
            if (!initial)
                throw new TypeError(reduceError);
            return memo;
        };
        _.reduceRight = _.foldr = function (obj, iterator, memo, context) {
            var initial = arguments.length > 2;
            if (obj == null)
                obj = [];
            if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
                if (context)
                    iterator = _.bind(iterator, context);
                return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
            }
            var length = obj.length;
            if (length !== +length) {
                var keys = _.keys(obj);
                length = keys.length;
            }
            each(obj, function (value, index, list) {
                index = keys ? keys[--length] : --length;
                if (!initial) {
                    memo = obj[index];
                    initial = true;
                } else {
                    memo = iterator.call(context, memo, obj[index], index, list);
                }
            });
            if (!initial)
                throw new TypeError(reduceError);
            return memo;
        };
        _.find = _.detect = function (obj, iterator, context) {
            var result;
            any(obj, function (value, index, list) {
                if (iterator.call(context, value, index, list)) {
                    result = value;
                    return true;
                }
            });
            return result;
        };
        _.filter = _.select = function (obj, iterator, context) {
            var results = [];
            if (obj == null)
                return results;
            if (nativeFilter && obj.filter === nativeFilter)
                return obj.filter(iterator, context);
            each(obj, function (value, index, list) {
                if (iterator.call(context, value, index, list))
                    results.push(value);
            });
            return results;
        };
        _.reject = function (obj, iterator, context) {
            return _.filter(obj, function (value, index, list) {
                return !iterator.call(context, value, index, list);
            }, context);
        };
        _.every = _.all = function (obj, iterator, context) {
            iterator || (iterator = _.identity);
            var result = true;
            if (obj == null)
                return result;
            if (nativeEvery && obj.every === nativeEvery)
                return obj.every(iterator, context);
            each(obj, function (value, index, list) {
                if (!(result = result && iterator.call(context, value, index, list)))
                    return breaker;
            });
            return !!result;
        };
        var any = _.some = _.any = function (obj, iterator, context) {
                iterator || (iterator = _.identity);
                var result = false;
                if (obj == null)
                    return result;
                if (nativeSome && obj.some === nativeSome)
                    return obj.some(iterator, context);
                each(obj, function (value, index, list) {
                    if (result || (result = iterator.call(context, value, index, list)))
                        return breaker;
                });
                return !!result;
            };
        _.contains = _.include = function (obj, target) {
            if (obj == null)
                return false;
            if (nativeIndexOf && obj.indexOf === nativeIndexOf)
                return obj.indexOf(target) != -1;
            return any(obj, function (value) {
                return value === target;
            });
        };
        _.invoke = function (obj, method) {
            var args = slice.call(arguments, 2);
            var isFunc = _.isFunction(method);
            return _.map(obj, function (value) {
                return (isFunc ? method : value[method]).apply(value, args);
            });
        };
        _.pluck = function (obj, key) {
            return _.map(obj, function (value) {
                return value[key];
            });
        };
        _.where = function (obj, attrs, first) {
            if (_.isEmpty(attrs))
                return first ? void 0 : [];
            return _[first ? 'find' : 'filter'](obj, function (value) {
                for (var key in attrs) {
                    if (attrs[key] !== value[key])
                        return false;
                }
                return true;
            });
        };
        _.findWhere = function (obj, attrs) {
            return _.where(obj, attrs, true);
        };
        _.max = function (obj, iterator, context) {
            if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
                return Math.max.apply(Math, obj);
            }
            if (!iterator && _.isEmpty(obj))
                return -Infinity;
            var result = {
                    computed: -Infinity,
                    value: -Infinity
                };
            each(obj, function (value, index, list) {
                var computed = iterator ? iterator.call(context, value, index, list) : value;
                computed > result.computed && (result = {
                    value: value,
                    computed: computed
                });
            });
            return result.value;
        };
        _.min = function (obj, iterator, context) {
            if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
                return Math.min.apply(Math, obj);
            }
            if (!iterator && _.isEmpty(obj))
                return Infinity;
            var result = {
                    computed: Infinity,
                    value: Infinity
                };
            each(obj, function (value, index, list) {
                var computed = iterator ? iterator.call(context, value, index, list) : value;
                computed < result.computed && (result = {
                    value: value,
                    computed: computed
                });
            });
            return result.value;
        };
        _.shuffle = function (obj) {
            var rand;
            var index = 0;
            var shuffled = [];
            each(obj, function (value) {
                rand = _.random(index++);
                shuffled[index - 1] = shuffled[rand];
                shuffled[rand] = value;
            });
            return shuffled;
        };
        _.sample = function (obj, n, guard) {
            if (arguments.length < 2 || guard) {
                return obj[_.random(obj.length - 1)];
            }
            return _.shuffle(obj).slice(0, Math.max(0, n));
        };
        var lookupIterator = function (value) {
            return _.isFunction(value) ? value : function (obj) {
                return obj[value];
            };
        };
        _.sortBy = function (obj, value, context) {
            var iterator = lookupIterator(value);
            return _.pluck(_.map(obj, function (value, index, list) {
                return {
                    value: value,
                    index: index,
                    criteria: iterator.call(context, value, index, list)
                };
            }).sort(function (left, right) {
                var a = left.criteria;
                var b = right.criteria;
                if (a !== b) {
                    if (a > b || a === void 0)
                        return 1;
                    if (a < b || b === void 0)
                        return -1;
                }
                return left.index - right.index;
            }), 'value');
        };
        var group = function (behavior) {
            return function (obj, value, context) {
                var result = {};
                var iterator = value == null ? _.identity : lookupIterator(value);
                each(obj, function (value, index) {
                    var key = iterator.call(context, value, index, obj);
                    behavior(result, key, value);
                });
                return result;
            };
        };
        _.groupBy = group(function (result, key, value) {
            (_.has(result, key) ? result[key] : result[key] = []).push(value);
        });
        _.indexBy = group(function (result, key, value) {
            result[key] = value;
        });
        _.countBy = group(function (result, key) {
            _.has(result, key) ? result[key]++ : result[key] = 1;
        });
        _.sortedIndex = function (array, obj, iterator, context) {
            iterator = iterator == null ? _.identity : lookupIterator(iterator);
            var value = iterator.call(context, obj);
            var low = 0, high = array.length;
            while (low < high) {
                var mid = low + high >>> 1;
                iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
            }
            return low;
        };
        _.toArray = function (obj) {
            if (!obj)
                return [];
            if (_.isArray(obj))
                return slice.call(obj);
            if (obj.length === +obj.length)
                return _.map(obj, _.identity);
            return _.values(obj);
        };
        _.size = function (obj) {
            if (obj == null)
                return 0;
            return obj.length === +obj.length ? obj.length : _.keys(obj).length;
        };
        _.first = _.head = _.take = function (array, n, guard) {
            if (array == null)
                return void 0;
            return n == null || guard ? array[0] : slice.call(array, 0, n);
        };
        _.initial = function (array, n, guard) {
            return slice.call(array, 0, array.length - (n == null || guard ? 1 : n));
        };
        _.last = function (array, n, guard) {
            if (array == null)
                return void 0;
            if (n == null || guard) {
                return array[array.length - 1];
            } else {
                return slice.call(array, Math.max(array.length - n, 0));
            }
        };
        _.rest = _.tail = _.drop = function (array, n, guard) {
            return slice.call(array, n == null || guard ? 1 : n);
        };
        _.compact = function (array) {
            return _.filter(array, _.identity);
        };
        var flatten = function (input, shallow, output) {
            if (shallow && _.every(input, _.isArray)) {
                return concat.apply(output, input);
            }
            each(input, function (value) {
                if (_.isArray(value) || _.isArguments(value)) {
                    shallow ? push.apply(output, value) : flatten(value, shallow, output);
                } else {
                    output.push(value);
                }
            });
            return output;
        };
        _.flatten = function (array, shallow) {
            return flatten(array, shallow, []);
        };
        _.without = function (array) {
            return _.difference(array, slice.call(arguments, 1));
        };
        _.uniq = _.unique = function (array, isSorted, iterator, context) {
            if (_.isFunction(isSorted)) {
                context = iterator;
                iterator = isSorted;
                isSorted = false;
            }
            var initial = iterator ? _.map(array, iterator, context) : array;
            var results = [];
            var seen = [];
            each(initial, function (value, index) {
                if (isSorted ? !index || seen[seen.length - 1] !== value : !_.contains(seen, value)) {
                    seen.push(value);
                    results.push(array[index]);
                }
            });
            return results;
        };
        _.union = function () {
            return _.uniq(_.flatten(arguments, true));
        };
        _.intersection = function (array) {
            var rest = slice.call(arguments, 1);
            return _.filter(_.uniq(array), function (item) {
                return _.every(rest, function (other) {
                    return _.indexOf(other, item) >= 0;
                });
            });
        };
        _.difference = function (array) {
            var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
            return _.filter(array, function (value) {
                return !_.contains(rest, value);
            });
        };
        _.zip = function () {
            var length = _.max(_.pluck(arguments, 'length').concat(0));
            var results = new Array(length);
            for (var i = 0; i < length; i++) {
                results[i] = _.pluck(arguments, '' + i);
            }
            return results;
        };
        _.object = function (list, values) {
            if (list == null)
                return {};
            var result = {};
            for (var i = 0, length = list.length; i < length; i++) {
                if (values) {
                    result[list[i]] = values[i];
                } else {
                    result[list[i][0]] = list[i][1];
                }
            }
            return result;
        };
        _.indexOf = function (array, item, isSorted) {
            if (array == null)
                return -1;
            var i = 0, length = array.length;
            if (isSorted) {
                if (typeof isSorted == 'number') {
                    i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
                } else {
                    i = _.sortedIndex(array, item);
                    return array[i] === item ? i : -1;
                }
            }
            if (nativeIndexOf && array.indexOf === nativeIndexOf)
                return array.indexOf(item, isSorted);
            for (; i < length; i++)
                if (array[i] === item)
                    return i;
            return -1;
        };
        _.lastIndexOf = function (array, item, from) {
            if (array == null)
                return -1;
            var hasIndex = from != null;
            if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
                return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
            }
            var i = hasIndex ? from : array.length;
            while (i--)
                if (array[i] === item)
                    return i;
            return -1;
        };
        _.range = function (start, stop, step) {
            if (arguments.length <= 1) {
                stop = start || 0;
                start = 0;
            }
            step = arguments[2] || 1;
            var length = Math.max(Math.ceil((stop - start) / step), 0);
            var idx = 0;
            var range = new Array(length);
            while (idx < length) {
                range[idx++] = start;
                start += step;
            }
            return range;
        };
        var ctor = function () {
        };
        _.bind = function (func, context) {
            var args, bound;
            if (nativeBind && func.bind === nativeBind)
                return nativeBind.apply(func, slice.call(arguments, 1));
            if (!_.isFunction(func))
                throw new TypeError();
            args = slice.call(arguments, 2);
            return bound = function () {
                if (!(this instanceof bound))
                    return func.apply(context, args.concat(slice.call(arguments)));
                ctor.prototype = func.prototype;
                var self = new ctor();
                ctor.prototype = null;
                var result = func.apply(self, args.concat(slice.call(arguments)));
                if (Object(result) === result)
                    return result;
                return self;
            };
        };
        _.partial = function (func) {
            var args = slice.call(arguments, 1);
            return function () {
                return func.apply(this, args.concat(slice.call(arguments)));
            };
        };
        _.bindAll = function (obj) {
            var funcs = slice.call(arguments, 1);
            if (funcs.length === 0)
                throw new Error('bindAll must be passed function names');
            each(funcs, function (f) {
                obj[f] = _.bind(obj[f], obj);
            });
            return obj;
        };
        _.memoize = function (func, hasher) {
            var memo = {};
            hasher || (hasher = _.identity);
            return function () {
                var key = hasher.apply(this, arguments);
                return _.has(memo, key) ? memo[key] : memo[key] = func.apply(this, arguments);
            };
        };
        _.delay = function (func, wait) {
            var args = slice.call(arguments, 2);
            return setTimeout(function () {
                return func.apply(null, args);
            }, wait);
        };
        _.defer = function (func) {
            return _.delay.apply(_, [
                func,
                1
            ].concat(slice.call(arguments, 1)));
        };
        _.throttle = function (func, wait, options) {
            var context, args, result;
            var timeout = null;
            var previous = 0;
            options || (options = {});
            var later = function () {
                previous = options.leading === false ? 0 : new Date();
                timeout = null;
                result = func.apply(context, args);
            };
            return function () {
                var now = new Date();
                if (!previous && options.leading === false)
                    previous = now;
                var remaining = wait - (now - previous);
                context = this;
                args = arguments;
                if (remaining <= 0) {
                    clearTimeout(timeout);
                    timeout = null;
                    previous = now;
                    result = func.apply(context, args);
                } else if (!timeout && options.trailing !== false) {
                    timeout = setTimeout(later, remaining);
                }
                return result;
            };
        };
        _.debounce = function (func, wait, immediate) {
            var timeout, args, context, timestamp, result;
            return function () {
                context = this;
                args = arguments;
                timestamp = new Date();
                var later = function () {
                    var last = new Date() - timestamp;
                    if (last < wait) {
                        timeout = setTimeout(later, wait - last);
                    } else {
                        timeout = null;
                        if (!immediate)
                            result = func.apply(context, args);
                    }
                };
                var callNow = immediate && !timeout;
                if (!timeout) {
                    timeout = setTimeout(later, wait);
                }
                if (callNow)
                    result = func.apply(context, args);
                return result;
            };
        };
        _.once = function (func) {
            var ran = false, memo;
            return function () {
                if (ran)
                    return memo;
                ran = true;
                memo = func.apply(this, arguments);
                func = null;
                return memo;
            };
        };
        _.wrap = function (func, wrapper) {
            return function () {
                var args = [func];
                push.apply(args, arguments);
                return wrapper.apply(this, args);
            };
        };
        _.compose = function () {
            var funcs = arguments;
            return function () {
                var args = arguments;
                for (var i = funcs.length - 1; i >= 0; i--) {
                    args = [funcs[i].apply(this, args)];
                }
                return args[0];
            };
        };
        _.after = function (times, func) {
            return function () {
                if (--times < 1) {
                    return func.apply(this, arguments);
                }
            };
        };
        _.keys = nativeKeys || function (obj) {
            if (obj !== Object(obj))
                throw new TypeError('Invalid object');
            var keys = [];
            for (var key in obj)
                if (_.has(obj, key))
                    keys.push(key);
            return keys;
        };
        _.values = function (obj) {
            var keys = _.keys(obj);
            var length = keys.length;
            var values = new Array(length);
            for (var i = 0; i < length; i++) {
                values[i] = obj[keys[i]];
            }
            return values;
        };
        _.pairs = function (obj) {
            var keys = _.keys(obj);
            var length = keys.length;
            var pairs = new Array(length);
            for (var i = 0; i < length; i++) {
                pairs[i] = [
                    keys[i],
                    obj[keys[i]]
                ];
            }
            return pairs;
        };
        _.invert = function (obj) {
            var result = {};
            var keys = _.keys(obj);
            for (var i = 0, length = keys.length; i < length; i++) {
                result[obj[keys[i]]] = keys[i];
            }
            return result;
        };
        _.functions = _.methods = function (obj) {
            var names = [];
            for (var key in obj) {
                if (_.isFunction(obj[key]))
                    names.push(key);
            }
            return names.sort();
        };
        _.extend = function (obj) {
            each(slice.call(arguments, 1), function (source) {
                if (source) {
                    for (var prop in source) {
                        obj[prop] = source[prop];
                    }
                }
            });
            return obj;
        };
        _.pick = function (obj) {
            var copy = {};
            var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
            each(keys, function (key) {
                if (key in obj)
                    copy[key] = obj[key];
            });
            return copy;
        };
        _.omit = function (obj) {
            var copy = {};
            var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
            for (var key in obj) {
                if (!_.contains(keys, key))
                    copy[key] = obj[key];
            }
            return copy;
        };
        _.defaults = function (obj) {
            each(slice.call(arguments, 1), function (source) {
                if (source) {
                    for (var prop in source) {
                        if (obj[prop] === void 0)
                            obj[prop] = source[prop];
                    }
                }
            });
            return obj;
        };
        _.clone = function (obj) {
            if (!_.isObject(obj))
                return obj;
            return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
        };
        _.tap = function (obj, interceptor) {
            interceptor(obj);
            return obj;
        };
        var eq = function (a, b, aStack, bStack) {
            if (a === b)
                return a !== 0 || 1 / a == 1 / b;
            if (a == null || b == null)
                return a === b;
            if (a instanceof _)
                a = a._wrapped;
            if (b instanceof _)
                b = b._wrapped;
            var className = toString.call(a);
            if (className != toString.call(b))
                return false;
            switch (className) {
            case '[object String]':
                return a == String(b);
            case '[object Number]':
                return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b;
            case '[object Date]':
            case '[object Boolean]':
                return +a == +b;
            case '[object RegExp]':
                return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
            }
            if (typeof a != 'object' || typeof b != 'object')
                return false;
            var length = aStack.length;
            while (length--) {
                if (aStack[length] == a)
                    return bStack[length] == b;
            }
            var aCtor = a.constructor, bCtor = b.constructor;
            if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor)) {
                return false;
            }
            aStack.push(a);
            bStack.push(b);
            var size = 0, result = true;
            if (className == '[object Array]') {
                size = a.length;
                result = size == b.length;
                if (result) {
                    while (size--) {
                        if (!(result = eq(a[size], b[size], aStack, bStack)))
                            break;
                    }
                }
            } else {
                for (var key in a) {
                    if (_.has(a, key)) {
                        size++;
                        if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack)))
                            break;
                    }
                }
                if (result) {
                    for (key in b) {
                        if (_.has(b, key) && !size--)
                            break;
                    }
                    result = !size;
                }
            }
            aStack.pop();
            bStack.pop();
            return result;
        };
        _.isEqual = function (a, b) {
            return eq(a, b, [], []);
        };
        _.isEmpty = function (obj) {
            if (obj == null)
                return true;
            if (_.isArray(obj) || _.isString(obj))
                return obj.length === 0;
            for (var key in obj)
                if (_.has(obj, key))
                    return false;
            return true;
        };
        _.isElement = function (obj) {
            return !!(obj && obj.nodeType === 1);
        };
        _.isArray = nativeIsArray || function (obj) {
            return toString.call(obj) == '[object Array]';
        };
        _.isObject = function (obj) {
            return obj === Object(obj);
        };
        each([
            'Arguments',
            'Function',
            'String',
            'Number',
            'Date',
            'RegExp'
        ], function (name) {
            _['is' + name] = function (obj) {
                return toString.call(obj) == '[object ' + name + ']';
            };
        });
        if (!_.isArguments(arguments)) {
            _.isArguments = function (obj) {
                return !!(obj && _.has(obj, 'callee'));
            };
        }
        if (typeof /./ !== 'function') {
            _.isFunction = function (obj) {
                return typeof obj === 'function';
            };
        }
        _.isFinite = function (obj) {
            return isFinite(obj) && !isNaN(parseFloat(obj));
        };
        _.isNaN = function (obj) {
            return _.isNumber(obj) && obj != +obj;
        };
        _.isBoolean = function (obj) {
            return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
        };
        _.isNull = function (obj) {
            return obj === null;
        };
        _.isUndefined = function (obj) {
            return obj === void 0;
        };
        _.has = function (obj, key) {
            return hasOwnProperty.call(obj, key);
        };
        _.noConflict = function () {
            root._ = previousUnderscore;
            return this;
        };
        _.identity = function (value) {
            return value;
        };
        _.times = function (n, iterator, context) {
            var accum = Array(Math.max(0, n));
            for (var i = 0; i < n; i++)
                accum[i] = iterator.call(context, i);
            return accum;
        };
        _.random = function (min, max) {
            if (max == null) {
                max = min;
                min = 0;
            }
            return min + Math.floor(Math.random() * (max - min + 1));
        };
        var entityMap = {
                escape: {
                    '&': '&amp;',
                    '<': '&lt;',
                    '>': '&gt;',
                    '"': '&quot;',
                    '\'': '&#x27;'
                }
            };
        entityMap.unescape = _.invert(entityMap.escape);
        var entityRegexes = {
                escape: new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
                unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
            };
        _.each([
            'escape',
            'unescape'
        ], function (method) {
            _[method] = function (string) {
                if (string == null)
                    return '';
                return ('' + string).replace(entityRegexes[method], function (match) {
                    return entityMap[method][match];
                });
            };
        });
        _.result = function (object, property) {
            if (object == null)
                return void 0;
            var value = object[property];
            return _.isFunction(value) ? value.call(object) : value;
        };
        _.mixin = function (obj) {
            each(_.functions(obj), function (name) {
                var func = _[name] = obj[name];
                _.prototype[name] = function () {
                    var args = [this._wrapped];
                    push.apply(args, arguments);
                    return result.call(this, func.apply(_, args));
                };
            });
        };
        var idCounter = 0;
        _.uniqueId = function (prefix) {
            var id = ++idCounter + '';
            return prefix ? prefix + id : id;
        };
        _.templateSettings = {
            evaluate: /<%([\s\S]+?)%>/g,
            interpolate: /<%=([\s\S]+?)%>/g,
            escape: /<%-([\s\S]+?)%>/g
        };
        var noMatch = /(.)^/;
        var escapes = {
                '\'': '\'',
                '\\': '\\',
                '\r': 'r',
                '\n': 'n',
                '\t': 't',
                '\u2028': 'u2028',
                '\u2029': 'u2029'
            };
        var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
        _.template = function (text, data, settings) {
            var render;
            settings = _.defaults({}, settings, _.templateSettings);
            var matcher = new RegExp([
                    (settings.escape || noMatch).source,
                    (settings.interpolate || noMatch).source,
                    (settings.evaluate || noMatch).source
                ].join('|') + '|$', 'g');
            var index = 0;
            var source = '__p+=\'';
            text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
                source += text.slice(index, offset).replace(escaper, function (match) {
                    return '\\' + escapes[match];
                });
                if (escape) {
                    source += '\'+\n((__t=(' + escape + '))==null?\'\':_.escape(__t))+\n\'';
                }
                if (interpolate) {
                    source += '\'+\n((__t=(' + interpolate + '))==null?\'\':__t)+\n\'';
                }
                if (evaluate) {
                    source += '\';\n' + evaluate + '\n__p+=\'';
                }
                index = offset + match.length;
                return match;
            });
            source += '\';\n';
            if (!settings.variable)
                source = 'with(obj||{}){\n' + source + '}\n';
            source = 'var __t,__p=\'\',__j=Array.prototype.join,' + 'print=function(){__p+=__j.call(arguments,\'\');};\n' + source + 'return __p;\n';
            try {
                render = new Function(settings.variable || 'obj', '_', source);
            } catch (e) {
                e.source = source;
                throw e;
            }
            if (data)
                return render(data, _);
            var template = function (data) {
                return render.call(this, data, _);
            };
            template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';
            return template;
        };
        _.chain = function (obj) {
            return _(obj).chain();
        };
        var result = function (obj) {
            return this._chain ? _(obj).chain() : obj;
        };
        _.mixin(_);
        each([
            'pop',
            'push',
            'reverse',
            'shift',
            'sort',
            'splice',
            'unshift'
        ], function (name) {
            var method = ArrayProto[name];
            _.prototype[name] = function () {
                var obj = this._wrapped;
                method.apply(obj, arguments);
                if ((name == 'shift' || name == 'splice') && obj.length === 0)
                    delete obj[0];
                return result.call(this, obj);
            };
        });
        each([
            'concat',
            'join',
            'slice'
        ], function (name) {
            var method = ArrayProto[name];
            _.prototype[name] = function () {
                return result.call(this, method.apply(this._wrapped, arguments));
            };
        });
        _.extend(_.prototype, {
            chain: function () {
                this._chain = true;
                return this;
            },
            value: function () {
                return this._wrapped;
            }
        });
    }.call(this));
});

define('underscore', ['underscore/underscore'], function ( main ) { return main; });

(function (window, undefined) {
    var readyList, rootjQuery, core_strundefined = typeof undefined, document = window.document, location = window.location, _jQuery = window.jQuery, _$ = window.$, class2type = {}, core_deletedIds = [], core_version = '1.9.1', core_concat = core_deletedIds.concat, core_push = core_deletedIds.push, core_slice = core_deletedIds.slice, core_indexOf = core_deletedIds.indexOf, core_toString = class2type.toString, core_hasOwn = class2type.hasOwnProperty, core_trim = core_version.trim, jQuery = function (selector, context) {
            return new jQuery.fn.init(selector, context, rootjQuery);
        }, core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source, core_rnotwhite = /\S+/g, rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, rquickExpr = /^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/, rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/, rvalidchars = /^[\],:{}\s]*$/, rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g, rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g, rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g, rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi, fcamelCase = function (all, letter) {
            return letter.toUpperCase();
        }, completed = function (event) {
            if (document.addEventListener || event.type === 'load' || document.readyState === 'complete') {
                detach();
                jQuery.ready();
            }
        }, detach = function () {
            if (document.addEventListener) {
                document.removeEventListener('DOMContentLoaded', completed, false);
                window.removeEventListener('load', completed, false);
            } else {
                document.detachEvent('onreadystatechange', completed);
                window.detachEvent('onload', completed);
            }
        };
    jQuery.fn = jQuery.prototype = {
        jquery: core_version,
        constructor: jQuery,
        init: function (selector, context, rootjQuery) {
            var match, elem;
            if (!selector) {
                return this;
            }
            if (typeof selector === 'string') {
                if (selector.charAt(0) === '<' && selector.charAt(selector.length - 1) === '>' && selector.length >= 3) {
                    match = [
                        null,
                        selector,
                        null
                    ];
                } else {
                    match = rquickExpr.exec(selector);
                }
                if (match && (match[1] || !context)) {
                    if (match[1]) {
                        context = context instanceof jQuery ? context[0] : context;
                        jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
                        if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
                            for (match in context) {
                                if (jQuery.isFunction(this[match])) {
                                    this[match](context[match]);
                                } else {
                                    this.attr(match, context[match]);
                                }
                            }
                        }
                        return this;
                    } else {
                        elem = document.getElementById(match[2]);
                        if (elem && elem.parentNode) {
                            if (elem.id !== match[2]) {
                                return rootjQuery.find(selector);
                            }
                            this.length = 1;
                            this[0] = elem;
                        }
                        this.context = document;
                        this.selector = selector;
                        return this;
                    }
                } else if (!context || context.jquery) {
                    return (context || rootjQuery).find(selector);
                } else {
                    return this.constructor(context).find(selector);
                }
            } else if (selector.nodeType) {
                this.context = this[0] = selector;
                this.length = 1;
                return this;
            } else if (jQuery.isFunction(selector)) {
                return rootjQuery.ready(selector);
            }
            if (selector.selector !== undefined) {
                this.selector = selector.selector;
                this.context = selector.context;
            }
            return jQuery.makeArray(selector, this);
        },
        selector: '',
        length: 0,
        size: function () {
            return this.length;
        },
        toArray: function () {
            return core_slice.call(this);
        },
        get: function (num) {
            return num == null ? this.toArray() : num < 0 ? this[this.length + num] : this[num];
        },
        pushStack: function (elems) {
            var ret = jQuery.merge(this.constructor(), elems);
            ret.prevObject = this;
            ret.context = this.context;
            return ret;
        },
        each: function (callback, args) {
            return jQuery.each(this, callback, args);
        },
        ready: function (fn) {
            jQuery.ready.promise().done(fn);
            return this;
        },
        slice: function () {
            return this.pushStack(core_slice.apply(this, arguments));
        },
        first: function () {
            return this.eq(0);
        },
        last: function () {
            return this.eq(-1);
        },
        eq: function (i) {
            var len = this.length, j = +i + (i < 0 ? len : 0);
            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
        },
        map: function (callback) {
            return this.pushStack(jQuery.map(this, function (elem, i) {
                return callback.call(elem, i, elem);
            }));
        },
        end: function () {
            return this.prevObject || this.constructor(null);
        },
        push: core_push,
        sort: [].sort,
        splice: [].splice
    };
    jQuery.fn.init.prototype = jQuery.fn;
    jQuery.extend = jQuery.fn.extend = function () {
        var src, copyIsArray, copy, name, options, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
        if (typeof target === 'boolean') {
            deep = target;
            target = arguments[1] || {};
            i = 2;
        }
        if (typeof target !== 'object' && !jQuery.isFunction(target)) {
            target = {};
        }
        if (length === i) {
            target = this;
            --i;
        }
        for (; i < length; i++) {
            if ((options = arguments[i]) != null) {
                for (name in options) {
                    src = target[name];
                    copy = options[name];
                    if (target === copy) {
                        continue;
                    }
                    if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
                        if (copyIsArray) {
                            copyIsArray = false;
                            clone = src && jQuery.isArray(src) ? src : [];
                        } else {
                            clone = src && jQuery.isPlainObject(src) ? src : {};
                        }
                        target[name] = jQuery.extend(deep, clone, copy);
                    } else if (copy !== undefined) {
                        target[name] = copy;
                    }
                }
            }
        }
        return target;
    };
    jQuery.extend({
        noConflict: function (deep) {
            if (window.$ === jQuery) {
                window.$ = _$;
            }
            if (deep && window.jQuery === jQuery) {
                window.jQuery = _jQuery;
            }
            return jQuery;
        },
        isReady: false,
        readyWait: 1,
        holdReady: function (hold) {
            if (hold) {
                jQuery.readyWait++;
            } else {
                jQuery.ready(true);
            }
        },
        ready: function (wait) {
            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
                return;
            }
            if (!document.body) {
                return setTimeout(jQuery.ready);
            }
            jQuery.isReady = true;
            if (wait !== true && --jQuery.readyWait > 0) {
                return;
            }
            readyList.resolveWith(document, [jQuery]);
            if (jQuery.fn.trigger) {
                jQuery(document).trigger('ready').off('ready');
            }
        },
        isFunction: function (obj) {
            return jQuery.type(obj) === 'function';
        },
        isArray: Array.isArray || function (obj) {
            return jQuery.type(obj) === 'array';
        },
        isWindow: function (obj) {
            return obj != null && obj == obj.window;
        },
        isNumeric: function (obj) {
            return !isNaN(parseFloat(obj)) && isFinite(obj);
        },
        type: function (obj) {
            if (obj == null) {
                return String(obj);
            }
            return typeof obj === 'object' || typeof obj === 'function' ? class2type[core_toString.call(obj)] || 'object' : typeof obj;
        },
        isPlainObject: function (obj) {
            if (!obj || jQuery.type(obj) !== 'object' || obj.nodeType || jQuery.isWindow(obj)) {
                return false;
            }
            try {
                if (obj.constructor && !core_hasOwn.call(obj, 'constructor') && !core_hasOwn.call(obj.constructor.prototype, 'isPrototypeOf')) {
                    return false;
                }
            } catch (e) {
                return false;
            }
            var key;
            for (key in obj) {
            }
            return key === undefined || core_hasOwn.call(obj, key);
        },
        isEmptyObject: function (obj) {
            var name;
            for (name in obj) {
                return false;
            }
            return true;
        },
        error: function (msg) {
            throw new Error(msg);
        },
        parseHTML: function (data, context, keepScripts) {
            if (!data || typeof data !== 'string') {
                return null;
            }
            if (typeof context === 'boolean') {
                keepScripts = context;
                context = false;
            }
            context = context || document;
            var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
            if (parsed) {
                return [context.createElement(parsed[1])];
            }
            parsed = jQuery.buildFragment([data], context, scripts);
            if (scripts) {
                jQuery(scripts).remove();
            }
            return jQuery.merge([], parsed.childNodes);
        },
        parseJSON: function (data) {
            if (window.JSON && window.JSON.parse) {
                return window.JSON.parse(data);
            }
            if (data === null) {
                return data;
            }
            if (typeof data === 'string') {
                data = jQuery.trim(data);
                if (data) {
                    if (rvalidchars.test(data.replace(rvalidescape, '@').replace(rvalidtokens, ']').replace(rvalidbraces, ''))) {
                        return new Function('return ' + data)();
                    }
                }
            }
            jQuery.error('Invalid JSON: ' + data);
        },
        parseXML: function (data) {
            var xml, tmp;
            if (!data || typeof data !== 'string') {
                return null;
            }
            try {
                if (window.DOMParser) {
                    tmp = new DOMParser();
                    xml = tmp.parseFromString(data, 'text/xml');
                } else {
                    xml = new ActiveXObject('Microsoft.XMLDOM');
                    xml.async = 'false';
                    xml.loadXML(data);
                }
            } catch (e) {
                xml = undefined;
            }
            if (!xml || !xml.documentElement || xml.getElementsByTagName('parsererror').length) {
                jQuery.error('Invalid XML: ' + data);
            }
            return xml;
        },
        noop: function () {
        },
        globalEval: function (data) {
            if (data && jQuery.trim(data)) {
                (window.execScript || function (data) {
                    window['eval'].call(window, data);
                })(data);
            }
        },
        camelCase: function (string) {
            return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase);
        },
        nodeName: function (elem, name) {
            return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
        },
        each: function (obj, callback, args) {
            var value, i = 0, length = obj.length, isArray = isArraylike(obj);
            if (args) {
                if (isArray) {
                    for (; i < length; i++) {
                        value = callback.apply(obj[i], args);
                        if (value === false) {
                            break;
                        }
                    }
                } else {
                    for (i in obj) {
                        value = callback.apply(obj[i], args);
                        if (value === false) {
                            break;
                        }
                    }
                }
            } else {
                if (isArray) {
                    for (; i < length; i++) {
                        value = callback.call(obj[i], i, obj[i]);
                        if (value === false) {
                            break;
                        }
                    }
                } else {
                    for (i in obj) {
                        value = callback.call(obj[i], i, obj[i]);
                        if (value === false) {
                            break;
                        }
                    }
                }
            }
            return obj;
        },
        trim: core_trim && !core_trim.call('\uFEFF\xA0') ? function (text) {
            return text == null ? '' : core_trim.call(text);
        } : function (text) {
            return text == null ? '' : (text + '').replace(rtrim, '');
        },
        makeArray: function (arr, results) {
            var ret = results || [];
            if (arr != null) {
                if (isArraylike(Object(arr))) {
                    jQuery.merge(ret, typeof arr === 'string' ? [arr] : arr);
                } else {
                    core_push.call(ret, arr);
                }
            }
            return ret;
        },
        inArray: function (elem, arr, i) {
            var len;
            if (arr) {
                if (core_indexOf) {
                    return core_indexOf.call(arr, elem, i);
                }
                len = arr.length;
                i = i ? i < 0 ? Math.max(0, len + i) : i : 0;
                for (; i < len; i++) {
                    if (i in arr && arr[i] === elem) {
                        return i;
                    }
                }
            }
            return -1;
        },
        merge: function (first, second) {
            var l = second.length, i = first.length, j = 0;
            if (typeof l === 'number') {
                for (; j < l; j++) {
                    first[i++] = second[j];
                }
            } else {
                while (second[j] !== undefined) {
                    first[i++] = second[j++];
                }
            }
            first.length = i;
            return first;
        },
        grep: function (elems, callback, inv) {
            var retVal, ret = [], i = 0, length = elems.length;
            inv = !!inv;
            for (; i < length; i++) {
                retVal = !!callback(elems[i], i);
                if (inv !== retVal) {
                    ret.push(elems[i]);
                }
            }
            return ret;
        },
        map: function (elems, callback, arg) {
            var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];
            if (isArray) {
                for (; i < length; i++) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret[ret.length] = value;
                    }
                }
            } else {
                for (i in elems) {
                    value = callback(elems[i], i, arg);
                    if (value != null) {
                        ret[ret.length] = value;
                    }
                }
            }
            return core_concat.apply([], ret);
        },
        guid: 1,
        proxy: function (fn, context) {
            var args, proxy, tmp;
            if (typeof context === 'string') {
                tmp = fn[context];
                context = fn;
                fn = tmp;
            }
            if (!jQuery.isFunction(fn)) {
                return undefined;
            }
            args = core_slice.call(arguments, 2);
            proxy = function () {
                return fn.apply(context || this, args.concat(core_slice.call(arguments)));
            };
            proxy.guid = fn.guid = fn.guid || jQuery.guid++;
            return proxy;
        },
        access: function (elems, fn, key, value, chainable, emptyGet, raw) {
            var i = 0, length = elems.length, bulk = key == null;
            if (jQuery.type(key) === 'object') {
                chainable = true;
                for (i in key) {
                    jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
                }
            } else if (value !== undefined) {
                chainable = true;
                if (!jQuery.isFunction(value)) {
                    raw = true;
                }
                if (bulk) {
                    if (raw) {
                        fn.call(elems, value);
                        fn = null;
                    } else {
                        bulk = fn;
                        fn = function (elem, key, value) {
                            return bulk.call(jQuery(elem), value);
                        };
                    }
                }
                if (fn) {
                    for (; i < length; i++) {
                        fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
                    }
                }
            }
            return chainable ? elems : bulk ? fn.call(elems) : length ? fn(elems[0], key) : emptyGet;
        },
        now: function () {
            return new Date().getTime();
        }
    });
    jQuery.ready.promise = function (obj) {
        if (!readyList) {
            readyList = jQuery.Deferred();
            if (document.readyState === 'complete') {
                setTimeout(jQuery.ready);
            } else if (document.addEventListener) {
                document.addEventListener('DOMContentLoaded', completed, false);
                window.addEventListener('load', completed, false);
            } else {
                document.attachEvent('onreadystatechange', completed);
                window.attachEvent('onload', completed);
                var top = false;
                try {
                    top = window.frameElement == null && document.documentElement;
                } catch (e) {
                }
                if (top && top.doScroll) {
                    (function doScrollCheck() {
                        if (!jQuery.isReady) {
                            try {
                                top.doScroll('left');
                            } catch (e) {
                                return setTimeout(doScrollCheck, 50);
                            }
                            detach();
                            jQuery.ready();
                        }
                    }());
                }
            }
        }
        return readyList.promise(obj);
    };
    jQuery.each('Boolean Number String Function Array Date RegExp Object Error'.split(' '), function (i, name) {
        class2type['[object ' + name + ']'] = name.toLowerCase();
    });
    function isArraylike(obj) {
        var length = obj.length, type = jQuery.type(obj);
        if (jQuery.isWindow(obj)) {
            return false;
        }
        if (obj.nodeType === 1 && length) {
            return true;
        }
        return type === 'array' || type !== 'function' && (length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj);
    }
    rootjQuery = jQuery(document);
    var optionsCache = {};
    function createOptions(options) {
        var object = optionsCache[options] = {};
        jQuery.each(options.match(core_rnotwhite) || [], function (_, flag) {
            object[flag] = true;
        });
        return object;
    }
    jQuery.Callbacks = function (options) {
        options = typeof options === 'string' ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
        var firing, memory, fired, firingLength, firingIndex, firingStart, list = [], stack = !options.once && [], fire = function (data) {
                memory = options.memory && data;
                fired = true;
                firingIndex = firingStart || 0;
                firingStart = 0;
                firingLength = list.length;
                firing = true;
                for (; list && firingIndex < firingLength; firingIndex++) {
                    if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
                        memory = false;
                        break;
                    }
                }
                firing = false;
                if (list) {
                    if (stack) {
                        if (stack.length) {
                            fire(stack.shift());
                        }
                    } else if (memory) {
                        list = [];
                    } else {
                        self.disable();
                    }
                }
            }, self = {
                add: function () {
                    if (list) {
                        var start = list.length;
                        (function add(args) {
                            jQuery.each(args, function (_, arg) {
                                var type = jQuery.type(arg);
                                if (type === 'function') {
                                    if (!options.unique || !self.has(arg)) {
                                        list.push(arg);
                                    }
                                } else if (arg && arg.length && type !== 'string') {
                                    add(arg);
                                }
                            });
                        }(arguments));
                        if (firing) {
                            firingLength = list.length;
                        } else if (memory) {
                            firingStart = start;
                            fire(memory);
                        }
                    }
                    return this;
                },
                remove: function () {
                    if (list) {
                        jQuery.each(arguments, function (_, arg) {
                            var index;
                            while ((index = jQuery.inArray(arg, list, index)) > -1) {
                                list.splice(index, 1);
                                if (firing) {
                                    if (index <= firingLength) {
                                        firingLength--;
                                    }
                                    if (index <= firingIndex) {
                                        firingIndex--;
                                    }
                                }
                            }
                        });
                    }
                    return this;
                },
                has: function (fn) {
                    return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
                },
                empty: function () {
                    list = [];
                    return this;
                },
                disable: function () {
                    list = stack = memory = undefined;
                    return this;
                },
                disabled: function () {
                    return !list;
                },
                lock: function () {
                    stack = undefined;
                    if (!memory) {
                        self.disable();
                    }
                    return this;
                },
                locked: function () {
                    return !stack;
                },
                fireWith: function (context, args) {
                    args = args || [];
                    args = [
                        context,
                        args.slice ? args.slice() : args
                    ];
                    if (list && (!fired || stack)) {
                        if (firing) {
                            stack.push(args);
                        } else {
                            fire(args);
                        }
                    }
                    return this;
                },
                fire: function () {
                    self.fireWith(this, arguments);
                    return this;
                },
                fired: function () {
                    return !!fired;
                }
            };
        return self;
    };
    jQuery.extend({
        Deferred: function (func) {
            var tuples = [
                    [
                        'resolve',
                        'done',
                        jQuery.Callbacks('once memory'),
                        'resolved'
                    ],
                    [
                        'reject',
                        'fail',
                        jQuery.Callbacks('once memory'),
                        'rejected'
                    ],
                    [
                        'notify',
                        'progress',
                        jQuery.Callbacks('memory')
                    ]
                ], state = 'pending', promise = {
                    state: function () {
                        return state;
                    },
                    always: function () {
                        deferred.done(arguments).fail(arguments);
                        return this;
                    },
                    then: function () {
                        var fns = arguments;
                        return jQuery.Deferred(function (newDefer) {
                            jQuery.each(tuples, function (i, tuple) {
                                var action = tuple[0], fn = jQuery.isFunction(fns[i]) && fns[i];
                                deferred[tuple[1]](function () {
                                    var returned = fn && fn.apply(this, arguments);
                                    if (returned && jQuery.isFunction(returned.promise)) {
                                        returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                                    } else {
                                        newDefer[action + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
                                    }
                                });
                            });
                            fns = null;
                        }).promise();
                    },
                    promise: function (obj) {
                        return obj != null ? jQuery.extend(obj, promise) : promise;
                    }
                }, deferred = {};
            promise.pipe = promise.then;
            jQuery.each(tuples, function (i, tuple) {
                var list = tuple[2], stateString = tuple[3];
                promise[tuple[1]] = list.add;
                if (stateString) {
                    list.add(function () {
                        state = stateString;
                    }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
                }
                deferred[tuple[0]] = function () {
                    deferred[tuple[0] + 'With'](this === deferred ? promise : this, arguments);
                    return this;
                };
                deferred[tuple[0] + 'With'] = list.fireWith;
            });
            promise.promise(deferred);
            if (func) {
                func.call(deferred, deferred);
            }
            return deferred;
        },
        when: function (subordinate) {
            var i = 0, resolveValues = core_slice.call(arguments), length = resolveValues.length, remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0, deferred = remaining === 1 ? subordinate : jQuery.Deferred(), updateFunc = function (i, contexts, values) {
                    return function (value) {
                        contexts[i] = this;
                        values[i] = arguments.length > 1 ? core_slice.call(arguments) : value;
                        if (values === progressValues) {
                            deferred.notifyWith(contexts, values);
                        } else if (!--remaining) {
                            deferred.resolveWith(contexts, values);
                        }
                    };
                }, progressValues, progressContexts, resolveContexts;
            if (length > 1) {
                progressValues = new Array(length);
                progressContexts = new Array(length);
                resolveContexts = new Array(length);
                for (; i < length; i++) {
                    if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
                        resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
                    } else {
                        --remaining;
                    }
                }
            }
            if (!remaining) {
                deferred.resolveWith(resolveContexts, resolveValues);
            }
            return deferred.promise();
        }
    });
    jQuery.support = function () {
        var support, all, a, input, select, fragment, opt, eventName, isSupported, i, div = document.createElement('div');
        div.setAttribute('className', 't');
        div.innerHTML = '  <link/><table></table><a href=\'/a\'>a</a><input type=\'checkbox\'/>';
        all = div.getElementsByTagName('*');
        a = div.getElementsByTagName('a')[0];
        if (!all || !a || !all.length) {
            return {};
        }
        select = document.createElement('select');
        opt = select.appendChild(document.createElement('option'));
        input = div.getElementsByTagName('input')[0];
        a.style.cssText = 'top:1px;float:left;opacity:.5';
        support = {
            getSetAttribute: div.className !== 't',
            leadingWhitespace: div.firstChild.nodeType === 3,
            tbody: !div.getElementsByTagName('tbody').length,
            htmlSerialize: !!div.getElementsByTagName('link').length,
            style: /top/.test(a.getAttribute('style')),
            hrefNormalized: a.getAttribute('href') === '/a',
            opacity: /^0.5/.test(a.style.opacity),
            cssFloat: !!a.style.cssFloat,
            checkOn: !!input.value,
            optSelected: opt.selected,
            enctype: !!document.createElement('form').enctype,
            html5Clone: document.createElement('nav').cloneNode(true).outerHTML !== '<:nav></:nav>',
            boxModel: document.compatMode === 'CSS1Compat',
            deleteExpando: true,
            noCloneEvent: true,
            inlineBlockNeedsLayout: false,
            shrinkWrapBlocks: false,
            reliableMarginRight: true,
            boxSizingReliable: true,
            pixelPosition: false
        };
        input.checked = true;
        support.noCloneChecked = input.cloneNode(true).checked;
        select.disabled = true;
        support.optDisabled = !opt.disabled;
        try {
            delete div.test;
        } catch (e) {
            support.deleteExpando = false;
        }
        input = document.createElement('input');
        input.setAttribute('value', '');
        support.input = input.getAttribute('value') === '';
        input.value = 't';
        input.setAttribute('type', 'radio');
        support.radioValue = input.value === 't';
        input.setAttribute('checked', 't');
        input.setAttribute('name', 't');
        fragment = document.createDocumentFragment();
        fragment.appendChild(input);
        support.appendChecked = input.checked;
        support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;
        if (div.attachEvent) {
            div.attachEvent('onclick', function () {
                support.noCloneEvent = false;
            });
            div.cloneNode(true).click();
        }
        for (i in {
                submit: true,
                change: true,
                focusin: true
            }) {
            div.setAttribute(eventName = 'on' + i, 't');
            support[i + 'Bubbles'] = eventName in window || div.attributes[eventName].expando === false;
        }
        div.style.backgroundClip = 'content-box';
        div.cloneNode(true).style.backgroundClip = '';
        support.clearCloneStyle = div.style.backgroundClip === 'content-box';
        jQuery(function () {
            var container, marginDiv, tds, divReset = 'padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;', body = document.getElementsByTagName('body')[0];
            if (!body) {
                return;
            }
            container = document.createElement('div');
            container.style.cssText = 'border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px';
            body.appendChild(container).appendChild(div);
            div.innerHTML = '<table><tr><td></td><td>t</td></tr></table>';
            tds = div.getElementsByTagName('td');
            tds[0].style.cssText = 'padding:0;margin:0;border:0;display:none';
            isSupported = tds[0].offsetHeight === 0;
            tds[0].style.display = '';
            tds[1].style.display = 'none';
            support.reliableHiddenOffsets = isSupported && tds[0].offsetHeight === 0;
            div.innerHTML = '';
            div.style.cssText = 'box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;';
            support.boxSizing = div.offsetWidth === 4;
            support.doesNotIncludeMarginInBodyOffset = body.offsetTop !== 1;
            if (window.getComputedStyle) {
                support.pixelPosition = (window.getComputedStyle(div, null) || {}).top !== '1%';
                support.boxSizingReliable = (window.getComputedStyle(div, null) || { width: '4px' }).width === '4px';
                marginDiv = div.appendChild(document.createElement('div'));
                marginDiv.style.cssText = div.style.cssText = divReset;
                marginDiv.style.marginRight = marginDiv.style.width = '0';
                div.style.width = '1px';
                support.reliableMarginRight = !parseFloat((window.getComputedStyle(marginDiv, null) || {}).marginRight);
            }
            if (typeof div.style.zoom !== core_strundefined) {
                div.innerHTML = '';
                div.style.cssText = divReset + 'width:1px;padding:1px;display:inline;zoom:1';
                support.inlineBlockNeedsLayout = div.offsetWidth === 3;
                div.style.display = 'block';
                div.innerHTML = '<div></div>';
                div.firstChild.style.width = '5px';
                support.shrinkWrapBlocks = div.offsetWidth !== 3;
                if (support.inlineBlockNeedsLayout) {
                    body.style.zoom = 1;
                }
            }
            body.removeChild(container);
            container = div = tds = marginDiv = null;
        });
        all = select = fragment = opt = a = input = null;
        return support;
    }();
    var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/, rmultiDash = /([A-Z])/g;
    function internalData(elem, name, data, pvt) {
        if (!jQuery.acceptData(elem)) {
            return;
        }
        var thisCache, ret, internalKey = jQuery.expando, getByName = typeof name === 'string', isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[internalKey] : elem[internalKey] && internalKey;
        if ((!id || !cache[id] || !pvt && !cache[id].data) && getByName && data === undefined) {
            return;
        }
        if (!id) {
            if (isNode) {
                elem[internalKey] = id = core_deletedIds.pop() || jQuery.guid++;
            } else {
                id = internalKey;
            }
        }
        if (!cache[id]) {
            cache[id] = {};
            if (!isNode) {
                cache[id].toJSON = jQuery.noop;
            }
        }
        if (typeof name === 'object' || typeof name === 'function') {
            if (pvt) {
                cache[id] = jQuery.extend(cache[id], name);
            } else {
                cache[id].data = jQuery.extend(cache[id].data, name);
            }
        }
        thisCache = cache[id];
        if (!pvt) {
            if (!thisCache.data) {
                thisCache.data = {};
            }
            thisCache = thisCache.data;
        }
        if (data !== undefined) {
            thisCache[jQuery.camelCase(name)] = data;
        }
        if (getByName) {
            ret = thisCache[name];
            if (ret == null) {
                ret = thisCache[jQuery.camelCase(name)];
            }
        } else {
            ret = thisCache;
        }
        return ret;
    }
    function internalRemoveData(elem, name, pvt) {
        if (!jQuery.acceptData(elem)) {
            return;
        }
        var i, l, thisCache, isNode = elem.nodeType, cache = isNode ? jQuery.cache : elem, id = isNode ? elem[jQuery.expando] : jQuery.expando;
        if (!cache[id]) {
            return;
        }
        if (name) {
            thisCache = pvt ? cache[id] : cache[id].data;
            if (thisCache) {
                if (!jQuery.isArray(name)) {
                    if (name in thisCache) {
                        name = [name];
                    } else {
                        name = jQuery.camelCase(name);
                        if (name in thisCache) {
                            name = [name];
                        } else {
                            name = name.split(' ');
                        }
                    }
                } else {
                    name = name.concat(jQuery.map(name, jQuery.camelCase));
                }
                for (i = 0, l = name.length; i < l; i++) {
                    delete thisCache[name[i]];
                }
                if (!(pvt ? isEmptyDataObject : jQuery.isEmptyObject)(thisCache)) {
                    return;
                }
            }
        }
        if (!pvt) {
            delete cache[id].data;
            if (!isEmptyDataObject(cache[id])) {
                return;
            }
        }
        if (isNode) {
            jQuery.cleanData([elem], true);
        } else if (jQuery.support.deleteExpando || cache != cache.window) {
            delete cache[id];
        } else {
            cache[id] = null;
        }
    }
    jQuery.extend({
        cache: {},
        expando: 'jQuery' + (core_version + Math.random()).replace(/\D/g, ''),
        noData: {
            embed: true,
            object: 'clsid:D27CDB6E-AE6D-11cf-96B8-444553540000',
            applet: true
        },
        hasData: function (elem) {
            elem = elem.nodeType ? jQuery.cache[elem[jQuery.expando]] : elem[jQuery.expando];
            return !!elem && !isEmptyDataObject(elem);
        },
        data: function (elem, name, data) {
            return internalData(elem, name, data);
        },
        removeData: function (elem, name) {
            return internalRemoveData(elem, name);
        },
        _data: function (elem, name, data) {
            return internalData(elem, name, data, true);
        },
        _removeData: function (elem, name) {
            return internalRemoveData(elem, name, true);
        },
        acceptData: function (elem) {
            if (elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9) {
                return false;
            }
            var noData = elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()];
            return !noData || noData !== true && elem.getAttribute('classid') === noData;
        }
    });
    jQuery.fn.extend({
        data: function (key, value) {
            var attrs, name, elem = this[0], i = 0, data = null;
            if (key === undefined) {
                if (this.length) {
                    data = jQuery.data(elem);
                    if (elem.nodeType === 1 && !jQuery._data(elem, 'parsedAttrs')) {
                        attrs = elem.attributes;
                        for (; i < attrs.length; i++) {
                            name = attrs[i].name;
                            if (!name.indexOf('data-')) {
                                name = jQuery.camelCase(name.slice(5));
                                dataAttr(elem, name, data[name]);
                            }
                        }
                        jQuery._data(elem, 'parsedAttrs', true);
                    }
                }
                return data;
            }
            if (typeof key === 'object') {
                return this.each(function () {
                    jQuery.data(this, key);
                });
            }
            return jQuery.access(this, function (value) {
                if (value === undefined) {
                    return elem ? dataAttr(elem, key, jQuery.data(elem, key)) : null;
                }
                this.each(function () {
                    jQuery.data(this, key, value);
                });
            }, null, value, arguments.length > 1, null, true);
        },
        removeData: function (key) {
            return this.each(function () {
                jQuery.removeData(this, key);
            });
        }
    });
    function dataAttr(elem, key, data) {
        if (data === undefined && elem.nodeType === 1) {
            var name = 'data-' + key.replace(rmultiDash, '-$1').toLowerCase();
            data = elem.getAttribute(name);
            if (typeof data === 'string') {
                try {
                    data = data === 'true' ? true : data === 'false' ? false : data === 'null' ? null : +data + '' === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
                } catch (e) {
                }
                jQuery.data(elem, key, data);
            } else {
                data = undefined;
            }
        }
        return data;
    }
    function isEmptyDataObject(obj) {
        var name;
        for (name in obj) {
            if (name === 'data' && jQuery.isEmptyObject(obj[name])) {
                continue;
            }
            if (name !== 'toJSON') {
                return false;
            }
        }
        return true;
    }
    jQuery.extend({
        queue: function (elem, type, data) {
            var queue;
            if (elem) {
                type = (type || 'fx') + 'queue';
                queue = jQuery._data(elem, type);
                if (data) {
                    if (!queue || jQuery.isArray(data)) {
                        queue = jQuery._data(elem, type, jQuery.makeArray(data));
                    } else {
                        queue.push(data);
                    }
                }
                return queue || [];
            }
        },
        dequeue: function (elem, type) {
            type = type || 'fx';
            var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function () {
                    jQuery.dequeue(elem, type);
                };
            if (fn === 'inprogress') {
                fn = queue.shift();
                startLength--;
            }
            hooks.cur = fn;
            if (fn) {
                if (type === 'fx') {
                    queue.unshift('inprogress');
                }
                delete hooks.stop;
                fn.call(elem, next, hooks);
            }
            if (!startLength && hooks) {
                hooks.empty.fire();
            }
        },
        _queueHooks: function (elem, type) {
            var key = type + 'queueHooks';
            return jQuery._data(elem, key) || jQuery._data(elem, key, {
                empty: jQuery.Callbacks('once memory').add(function () {
                    jQuery._removeData(elem, type + 'queue');
                    jQuery._removeData(elem, key);
                })
            });
        }
    });
    jQuery.fn.extend({
        queue: function (type, data) {
            var setter = 2;
            if (typeof type !== 'string') {
                data = type;
                type = 'fx';
                setter--;
            }
            if (arguments.length < setter) {
                return jQuery.queue(this[0], type);
            }
            return data === undefined ? this : this.each(function () {
                var queue = jQuery.queue(this, type, data);
                jQuery._queueHooks(this, type);
                if (type === 'fx' && queue[0] !== 'inprogress') {
                    jQuery.dequeue(this, type);
                }
            });
        },
        dequeue: function (type) {
            return this.each(function () {
                jQuery.dequeue(this, type);
            });
        },
        delay: function (time, type) {
            time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
            type = type || 'fx';
            return this.queue(type, function (next, hooks) {
                var timeout = setTimeout(next, time);
                hooks.stop = function () {
                    clearTimeout(timeout);
                };
            });
        },
        clearQueue: function (type) {
            return this.queue(type || 'fx', []);
        },
        promise: function (type, obj) {
            var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function () {
                    if (!--count) {
                        defer.resolveWith(elements, [elements]);
                    }
                };
            if (typeof type !== 'string') {
                obj = type;
                type = undefined;
            }
            type = type || 'fx';
            while (i--) {
                tmp = jQuery._data(elements[i], type + 'queueHooks');
                if (tmp && tmp.empty) {
                    count++;
                    tmp.empty.add(resolve);
                }
            }
            resolve();
            return defer.promise(obj);
        }
    });
    var nodeHook, boolHook, rclass = /[\t\r\n]/g, rreturn = /\r/g, rfocusable = /^(?:input|select|textarea|button|object)$/i, rclickable = /^(?:a|area)$/i, rboolean = /^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i, ruseDefault = /^(?:checked|selected)$/i, getSetAttribute = jQuery.support.getSetAttribute, getSetInput = jQuery.support.input;
    jQuery.fn.extend({
        attr: function (name, value) {
            return jQuery.access(this, jQuery.attr, name, value, arguments.length > 1);
        },
        removeAttr: function (name) {
            return this.each(function () {
                jQuery.removeAttr(this, name);
            });
        },
        prop: function (name, value) {
            return jQuery.access(this, jQuery.prop, name, value, arguments.length > 1);
        },
        removeProp: function (name) {
            name = jQuery.propFix[name] || name;
            return this.each(function () {
                try {
                    this[name] = undefined;
                    delete this[name];
                } catch (e) {
                }
            });
        },
        addClass: function (value) {
            var classes, elem, cur, clazz, j, i = 0, len = this.length, proceed = typeof value === 'string' && value;
            if (jQuery.isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).addClass(value.call(this, j, this.className));
                });
            }
            if (proceed) {
                classes = (value || '').match(core_rnotwhite) || [];
                for (; i < len; i++) {
                    elem = this[i];
                    cur = elem.nodeType === 1 && (elem.className ? (' ' + elem.className + ' ').replace(rclass, ' ') : ' ');
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            if (cur.indexOf(' ' + clazz + ' ') < 0) {
                                cur += clazz + ' ';
                            }
                        }
                        elem.className = jQuery.trim(cur);
                    }
                }
            }
            return this;
        },
        removeClass: function (value) {
            var classes, elem, cur, clazz, j, i = 0, len = this.length, proceed = arguments.length === 0 || typeof value === 'string' && value;
            if (jQuery.isFunction(value)) {
                return this.each(function (j) {
                    jQuery(this).removeClass(value.call(this, j, this.className));
                });
            }
            if (proceed) {
                classes = (value || '').match(core_rnotwhite) || [];
                for (; i < len; i++) {
                    elem = this[i];
                    cur = elem.nodeType === 1 && (elem.className ? (' ' + elem.className + ' ').replace(rclass, ' ') : '');
                    if (cur) {
                        j = 0;
                        while (clazz = classes[j++]) {
                            while (cur.indexOf(' ' + clazz + ' ') >= 0) {
                                cur = cur.replace(' ' + clazz + ' ', ' ');
                            }
                        }
                        elem.className = value ? jQuery.trim(cur) : '';
                    }
                }
            }
            return this;
        },
        toggleClass: function (value, stateVal) {
            var type = typeof value, isBool = typeof stateVal === 'boolean';
            if (jQuery.isFunction(value)) {
                return this.each(function (i) {
                    jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
                });
            }
            return this.each(function () {
                if (type === 'string') {
                    var className, i = 0, self = jQuery(this), state = stateVal, classNames = value.match(core_rnotwhite) || [];
                    while (className = classNames[i++]) {
                        state = isBool ? state : !self.hasClass(className);
                        self[state ? 'addClass' : 'removeClass'](className);
                    }
                } else if (type === core_strundefined || type === 'boolean') {
                    if (this.className) {
                        jQuery._data(this, '__className__', this.className);
                    }
                    this.className = this.className || value === false ? '' : jQuery._data(this, '__className__') || '';
                }
            });
        },
        hasClass: function (selector) {
            var className = ' ' + selector + ' ', i = 0, l = this.length;
            for (; i < l; i++) {
                if (this[i].nodeType === 1 && (' ' + this[i].className + ' ').replace(rclass, ' ').indexOf(className) >= 0) {
                    return true;
                }
            }
            return false;
        },
        val: function (value) {
            var ret, hooks, isFunction, elem = this[0];
            if (!arguments.length) {
                if (elem) {
                    hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
                    if (hooks && 'get' in hooks && (ret = hooks.get(elem, 'value')) !== undefined) {
                        return ret;
                    }
                    ret = elem.value;
                    return typeof ret === 'string' ? ret.replace(rreturn, '') : ret == null ? '' : ret;
                }
                return;
            }
            isFunction = jQuery.isFunction(value);
            return this.each(function (i) {
                var val, self = jQuery(this);
                if (this.nodeType !== 1) {
                    return;
                }
                if (isFunction) {
                    val = value.call(this, i, self.val());
                } else {
                    val = value;
                }
                if (val == null) {
                    val = '';
                } else if (typeof val === 'number') {
                    val += '';
                } else if (jQuery.isArray(val)) {
                    val = jQuery.map(val, function (value) {
                        return value == null ? '' : value + '';
                    });
                }
                hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
                if (!hooks || !('set' in hooks) || hooks.set(this, val, 'value') === undefined) {
                    this.value = val;
                }
            });
        }
    });
    jQuery.extend({
        valHooks: {
            option: {
                get: function (elem) {
                    var val = elem.attributes.value;
                    return !val || val.specified ? elem.value : elem.text;
                }
            },
            select: {
                get: function (elem) {
                    var value, option, options = elem.options, index = elem.selectedIndex, one = elem.type === 'select-one' || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0;
                    for (; i < max; i++) {
                        option = options[i];
                        if ((option.selected || i === index) && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute('disabled') === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, 'optgroup'))) {
                            value = jQuery(option).val();
                            if (one) {
                                return value;
                            }
                            values.push(value);
                        }
                    }
                    return values;
                },
                set: function (elem, value) {
                    var values = jQuery.makeArray(value);
                    jQuery(elem).find('option').each(function () {
                        this.selected = jQuery.inArray(jQuery(this).val(), values) >= 0;
                    });
                    if (!values.length) {
                        elem.selectedIndex = -1;
                    }
                    return values;
                }
            }
        },
        attr: function (elem, name, value) {
            var hooks, notxml, ret, nType = elem.nodeType;
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            if (typeof elem.getAttribute === core_strundefined) {
                return jQuery.prop(elem, name, value);
            }
            notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
            if (notxml) {
                name = name.toLowerCase();
                hooks = jQuery.attrHooks[name] || (rboolean.test(name) ? boolHook : nodeHook);
            }
            if (value !== undefined) {
                if (value === null) {
                    jQuery.removeAttr(elem, name);
                } else if (hooks && notxml && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                } else {
                    elem.setAttribute(name, value + '');
                    return value;
                }
            } else if (hooks && notxml && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
                return ret;
            } else {
                if (typeof elem.getAttribute !== core_strundefined) {
                    ret = elem.getAttribute(name);
                }
                return ret == null ? undefined : ret;
            }
        },
        removeAttr: function (elem, value) {
            var name, propName, i = 0, attrNames = value && value.match(core_rnotwhite);
            if (attrNames && elem.nodeType === 1) {
                while (name = attrNames[i++]) {
                    propName = jQuery.propFix[name] || name;
                    if (rboolean.test(name)) {
                        if (!getSetAttribute && ruseDefault.test(name)) {
                            elem[jQuery.camelCase('default-' + name)] = elem[propName] = false;
                        } else {
                            elem[propName] = false;
                        }
                    } else {
                        jQuery.attr(elem, name, '');
                    }
                    elem.removeAttribute(getSetAttribute ? name : propName);
                }
            }
        },
        attrHooks: {
            type: {
                set: function (elem, value) {
                    if (!jQuery.support.radioValue && value === 'radio' && jQuery.nodeName(elem, 'input')) {
                        var val = elem.value;
                        elem.setAttribute('type', value);
                        if (val) {
                            elem.value = val;
                        }
                        return value;
                    }
                }
            }
        },
        propFix: {
            tabindex: 'tabIndex',
            readonly: 'readOnly',
            'for': 'htmlFor',
            'class': 'className',
            maxlength: 'maxLength',
            cellspacing: 'cellSpacing',
            cellpadding: 'cellPadding',
            rowspan: 'rowSpan',
            colspan: 'colSpan',
            usemap: 'useMap',
            frameborder: 'frameBorder',
            contenteditable: 'contentEditable'
        },
        prop: function (elem, name, value) {
            var ret, hooks, notxml, nType = elem.nodeType;
            if (!elem || nType === 3 || nType === 8 || nType === 2) {
                return;
            }
            notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
            if (notxml) {
                name = jQuery.propFix[name] || name;
                hooks = jQuery.propHooks[name];
            }
            if (value !== undefined) {
                if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
                    return ret;
                } else {
                    return elem[name] = value;
                }
            } else {
                if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
                    return ret;
                } else {
                    return elem[name];
                }
            }
        },
        propHooks: {
            tabIndex: {
                get: function (elem) {
                    var attributeNode = elem.getAttributeNode('tabindex');
                    return attributeNode && attributeNode.specified ? parseInt(attributeNode.value, 10) : rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href ? 0 : undefined;
                }
            }
        }
    });
    boolHook = {
        get: function (elem, name) {
            var prop = jQuery.prop(elem, name), attr = typeof prop === 'boolean' && elem.getAttribute(name), detail = typeof prop === 'boolean' ? getSetInput && getSetAttribute ? attr != null : ruseDefault.test(name) ? elem[jQuery.camelCase('default-' + name)] : !!attr : elem.getAttributeNode(name);
            return detail && detail.value !== false ? name.toLowerCase() : undefined;
        },
        set: function (elem, value, name) {
            if (value === false) {
                jQuery.removeAttr(elem, name);
            } else if (getSetInput && getSetAttribute || !ruseDefault.test(name)) {
                elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name, name);
            } else {
                elem[jQuery.camelCase('default-' + name)] = elem[name] = true;
            }
            return name;
        }
    };
    if (!getSetInput || !getSetAttribute) {
        jQuery.attrHooks.value = {
            get: function (elem, name) {
                var ret = elem.getAttributeNode(name);
                return jQuery.nodeName(elem, 'input') ? elem.defaultValue : ret && ret.specified ? ret.value : undefined;
            },
            set: function (elem, value, name) {
                if (jQuery.nodeName(elem, 'input')) {
                    elem.defaultValue = value;
                } else {
                    return nodeHook && nodeHook.set(elem, value, name);
                }
            }
        };
    }
    if (!getSetAttribute) {
        nodeHook = jQuery.valHooks.button = {
            get: function (elem, name) {
                var ret = elem.getAttributeNode(name);
                return ret && (name === 'id' || name === 'name' || name === 'coords' ? ret.value !== '' : ret.specified) ? ret.value : undefined;
            },
            set: function (elem, value, name) {
                var ret = elem.getAttributeNode(name);
                if (!ret) {
                    elem.setAttributeNode(ret = elem.ownerDocument.createAttribute(name));
                }
                ret.value = value += '';
                return name === 'value' || value === elem.getAttribute(name) ? value : undefined;
            }
        };
        jQuery.attrHooks.contenteditable = {
            get: nodeHook.get,
            set: function (elem, value, name) {
                nodeHook.set(elem, value === '' ? false : value, name);
            }
        };
        jQuery.each([
            'width',
            'height'
        ], function (i, name) {
            jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {
                set: function (elem, value) {
                    if (value === '') {
                        elem.setAttribute(name, 'auto');
                        return value;
                    }
                }
            });
        });
    }
    if (!jQuery.support.hrefNormalized) {
        jQuery.each([
            'href',
            'src',
            'width',
            'height'
        ], function (i, name) {
            jQuery.attrHooks[name] = jQuery.extend(jQuery.attrHooks[name], {
                get: function (elem) {
                    var ret = elem.getAttribute(name, 2);
                    return ret == null ? undefined : ret;
                }
            });
        });
        jQuery.each([
            'href',
            'src'
        ], function (i, name) {
            jQuery.propHooks[name] = {
                get: function (elem) {
                    return elem.getAttribute(name, 4);
                }
            };
        });
    }
    if (!jQuery.support.style) {
        jQuery.attrHooks.style = {
            get: function (elem) {
                return elem.style.cssText || undefined;
            },
            set: function (elem, value) {
                return elem.style.cssText = value + '';
            }
        };
    }
    if (!jQuery.support.optSelected) {
        jQuery.propHooks.selected = jQuery.extend(jQuery.propHooks.selected, {
            get: function (elem) {
                var parent = elem.parentNode;
                if (parent) {
                    parent.selectedIndex;
                    if (parent.parentNode) {
                        parent.parentNode.selectedIndex;
                    }
                }
                return null;
            }
        });
    }
    if (!jQuery.support.enctype) {
        jQuery.propFix.enctype = 'encoding';
    }
    if (!jQuery.support.checkOn) {
        jQuery.each([
            'radio',
            'checkbox'
        ], function () {
            jQuery.valHooks[this] = {
                get: function (elem) {
                    return elem.getAttribute('value') === null ? 'on' : elem.value;
                }
            };
        });
    }
    jQuery.each([
        'radio',
        'checkbox'
    ], function () {
        jQuery.valHooks[this] = jQuery.extend(jQuery.valHooks[this], {
            set: function (elem, value) {
                if (jQuery.isArray(value)) {
                    return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
                }
            }
        });
    });
    var rformElems = /^(?:input|select|textarea)$/i, rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
    function returnTrue() {
        return true;
    }
    function returnFalse() {
        return false;
    }
    jQuery.event = {
        global: {},
        add: function (elem, types, handler, data, selector) {
            var tmp, events, t, handleObjIn, special, eventHandle, handleObj, handlers, type, namespaces, origType, elemData = jQuery._data(elem);
            if (!elemData) {
                return;
            }
            if (handler.handler) {
                handleObjIn = handler;
                handler = handleObjIn.handler;
                selector = handleObjIn.selector;
            }
            if (!handler.guid) {
                handler.guid = jQuery.guid++;
            }
            if (!(events = elemData.events)) {
                events = elemData.events = {};
            }
            if (!(eventHandle = elemData.handle)) {
                eventHandle = elemData.handle = function (e) {
                    return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ? jQuery.event.dispatch.apply(eventHandle.elem, arguments) : undefined;
                };
                eventHandle.elem = elem;
            }
            types = (types || '').match(core_rnotwhite) || [''];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || '').split('.').sort();
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                special = jQuery.event.special[type] || {};
                handleObj = jQuery.extend({
                    type: type,
                    origType: origType,
                    data: data,
                    handler: handler,
                    guid: handler.guid,
                    selector: selector,
                    needsContext: selector && jQuery.expr.match.needsContext.test(selector),
                    namespace: namespaces.join('.')
                }, handleObjIn);
                if (!(handlers = events[type])) {
                    handlers = events[type] = [];
                    handlers.delegateCount = 0;
                    if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
                        if (elem.addEventListener) {
                            elem.addEventListener(type, eventHandle, false);
                        } else if (elem.attachEvent) {
                            elem.attachEvent('on' + type, eventHandle);
                        }
                    }
                }
                if (special.add) {
                    special.add.call(elem, handleObj);
                    if (!handleObj.handler.guid) {
                        handleObj.handler.guid = handler.guid;
                    }
                }
                if (selector) {
                    handlers.splice(handlers.delegateCount++, 0, handleObj);
                } else {
                    handlers.push(handleObj);
                }
                jQuery.event.global[type] = true;
            }
            elem = null;
        },
        remove: function (elem, types, handler, selector, mappedTypes) {
            var j, handleObj, tmp, origCount, t, events, special, handlers, type, namespaces, origType, elemData = jQuery.hasData(elem) && jQuery._data(elem);
            if (!elemData || !(events = elemData.events)) {
                return;
            }
            types = (types || '').match(core_rnotwhite) || [''];
            t = types.length;
            while (t--) {
                tmp = rtypenamespace.exec(types[t]) || [];
                type = origType = tmp[1];
                namespaces = (tmp[2] || '').split('.').sort();
                if (!type) {
                    for (type in events) {
                        jQuery.event.remove(elem, type + types[t], handler, selector, true);
                    }
                    continue;
                }
                special = jQuery.event.special[type] || {};
                type = (selector ? special.delegateType : special.bindType) || type;
                handlers = events[type] || [];
                tmp = tmp[2] && new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)');
                origCount = j = handlers.length;
                while (j--) {
                    handleObj = handlers[j];
                    if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === '**' && handleObj.selector)) {
                        handlers.splice(j, 1);
                        if (handleObj.selector) {
                            handlers.delegateCount--;
                        }
                        if (special.remove) {
                            special.remove.call(elem, handleObj);
                        }
                    }
                }
                if (origCount && !handlers.length) {
                    if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
                        jQuery.removeEvent(elem, type, elemData.handle);
                    }
                    delete events[type];
                }
            }
            if (jQuery.isEmptyObject(events)) {
                delete elemData.handle;
                jQuery._removeData(elem, 'events');
            }
        },
        trigger: function (event, data, elem, onlyHandlers) {
            var handle, ontype, cur, bubbleType, special, tmp, i, eventPath = [elem || document], type = core_hasOwn.call(event, 'type') ? event.type : event, namespaces = core_hasOwn.call(event, 'namespace') ? event.namespace.split('.') : [];
            cur = tmp = elem = elem || document;
            if (elem.nodeType === 3 || elem.nodeType === 8) {
                return;
            }
            if (rfocusMorph.test(type + jQuery.event.triggered)) {
                return;
            }
            if (type.indexOf('.') >= 0) {
                namespaces = type.split('.');
                type = namespaces.shift();
                namespaces.sort();
            }
            ontype = type.indexOf(':') < 0 && 'on' + type;
            event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === 'object' && event);
            event.isTrigger = true;
            event.namespace = namespaces.join('.');
            event.namespace_re = event.namespace ? new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)') : null;
            event.result = undefined;
            if (!event.target) {
                event.target = elem;
            }
            data = data == null ? [event] : jQuery.makeArray(data, [event]);
            special = jQuery.event.special[type] || {};
            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
                return;
            }
            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
                bubbleType = special.delegateType || type;
                if (!rfocusMorph.test(bubbleType + type)) {
                    cur = cur.parentNode;
                }
                for (; cur; cur = cur.parentNode) {
                    eventPath.push(cur);
                    tmp = cur;
                }
                if (tmp === (elem.ownerDocument || document)) {
                    eventPath.push(tmp.defaultView || tmp.parentWindow || window);
                }
            }
            i = 0;
            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
                event.type = i > 1 ? bubbleType : special.bindType || type;
                handle = (jQuery._data(cur, 'events') || {})[event.type] && jQuery._data(cur, 'handle');
                if (handle) {
                    handle.apply(cur, data);
                }
                handle = ontype && cur[ontype];
                if (handle && jQuery.acceptData(cur) && handle.apply && handle.apply(cur, data) === false) {
                    event.preventDefault();
                }
            }
            event.type = type;
            if (!onlyHandlers && !event.isDefaultPrevented()) {
                if ((!special._default || special._default.apply(elem.ownerDocument, data) === false) && !(type === 'click' && jQuery.nodeName(elem, 'a')) && jQuery.acceptData(elem)) {
                    if (ontype && elem[type] && !jQuery.isWindow(elem)) {
                        tmp = elem[ontype];
                        if (tmp) {
                            elem[ontype] = null;
                        }
                        jQuery.event.triggered = type;
                        try {
                            elem[type]();
                        } catch (e) {
                        }
                        jQuery.event.triggered = undefined;
                        if (tmp) {
                            elem[ontype] = tmp;
                        }
                    }
                }
            }
            return event.result;
        },
        dispatch: function (event) {
            event = jQuery.event.fix(event);
            var i, ret, handleObj, matched, j, handlerQueue = [], args = core_slice.call(arguments), handlers = (jQuery._data(this, 'events') || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
            args[0] = event;
            event.delegateTarget = this;
            if (special.preDispatch && special.preDispatch.call(this, event) === false) {
                return;
            }
            handlerQueue = jQuery.event.handlers.call(this, event, handlers);
            i = 0;
            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
                event.currentTarget = matched.elem;
                j = 0;
                while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
                    if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
                        event.handleObj = handleObj;
                        event.data = handleObj.data;
                        ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
                        if (ret !== undefined) {
                            if ((event.result = ret) === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                        }
                    }
                }
            }
            if (special.postDispatch) {
                special.postDispatch.call(this, event);
            }
            return event.result;
        },
        handlers: function (event, handlers) {
            var sel, handleObj, matches, i, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
            if (delegateCount && cur.nodeType && (!event.button || event.type !== 'click')) {
                for (; cur != this; cur = cur.parentNode || this) {
                    if (cur.nodeType === 1 && (cur.disabled !== true || event.type !== 'click')) {
                        matches = [];
                        for (i = 0; i < delegateCount; i++) {
                            handleObj = handlers[i];
                            sel = handleObj.selector + ' ';
                            if (matches[sel] === undefined) {
                                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
                            }
                            if (matches[sel]) {
                                matches.push(handleObj);
                            }
                        }
                        if (matches.length) {
                            handlerQueue.push({
                                elem: cur,
                                handlers: matches
                            });
                        }
                    }
                }
            }
            if (delegateCount < handlers.length) {
                handlerQueue.push({
                    elem: this,
                    handlers: handlers.slice(delegateCount)
                });
            }
            return handlerQueue;
        },
        fix: function (event) {
            if (event[jQuery.expando]) {
                return event;
            }
            var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
            if (!fixHook) {
                this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
            }
            copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
            event = new jQuery.Event(originalEvent);
            i = copy.length;
            while (i--) {
                prop = copy[i];
                event[prop] = originalEvent[prop];
            }
            if (!event.target) {
                event.target = originalEvent.srcElement || document;
            }
            if (event.target.nodeType === 3) {
                event.target = event.target.parentNode;
            }
            event.metaKey = !!event.metaKey;
            return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
        },
        props: 'altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which'.split(' '),
        fixHooks: {},
        keyHooks: {
            props: 'char charCode key keyCode'.split(' '),
            filter: function (event, original) {
                if (event.which == null) {
                    event.which = original.charCode != null ? original.charCode : original.keyCode;
                }
                return event;
            }
        },
        mouseHooks: {
            props: 'button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement'.split(' '),
            filter: function (event, original) {
                var body, eventDoc, doc, button = original.button, fromElement = original.fromElement;
                if (event.pageX == null && original.clientX != null) {
                    eventDoc = event.target.ownerDocument || document;
                    doc = eventDoc.documentElement;
                    body = eventDoc.body;
                    event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
                    event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
                }
                if (!event.relatedTarget && fromElement) {
                    event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
                }
                if (!event.which && button !== undefined) {
                    event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
                }
                return event;
            }
        },
        special: {
            load: { noBubble: true },
            click: {
                trigger: function () {
                    if (jQuery.nodeName(this, 'input') && this.type === 'checkbox' && this.click) {
                        this.click();
                        return false;
                    }
                }
            },
            focus: {
                trigger: function () {
                    if (this !== document.activeElement && this.focus) {
                        try {
                            this.focus();
                            return false;
                        } catch (e) {
                        }
                    }
                },
                delegateType: 'focusin'
            },
            blur: {
                trigger: function () {
                    if (this === document.activeElement && this.blur) {
                        this.blur();
                        return false;
                    }
                },
                delegateType: 'focusout'
            },
            beforeunload: {
                postDispatch: function (event) {
                    if (event.result !== undefined) {
                        event.originalEvent.returnValue = event.result;
                    }
                }
            }
        },
        simulate: function (type, elem, event, bubble) {
            var e = jQuery.extend(new jQuery.Event(), event, {
                    type: type,
                    isSimulated: true,
                    originalEvent: {}
                });
            if (bubble) {
                jQuery.event.trigger(e, null, elem);
            } else {
                jQuery.event.dispatch.call(elem, e);
            }
            if (e.isDefaultPrevented()) {
                event.preventDefault();
            }
        }
    };
    jQuery.removeEvent = document.removeEventListener ? function (elem, type, handle) {
        if (elem.removeEventListener) {
            elem.removeEventListener(type, handle, false);
        }
    } : function (elem, type, handle) {
        var name = 'on' + type;
        if (elem.detachEvent) {
            if (typeof elem[name] === core_strundefined) {
                elem[name] = null;
            }
            elem.detachEvent(name, handle);
        }
    };
    jQuery.Event = function (src, props) {
        if (!(this instanceof jQuery.Event)) {
            return new jQuery.Event(src, props);
        }
        if (src && src.type) {
            this.originalEvent = src;
            this.type = src.type;
            this.isDefaultPrevented = src.defaultPrevented || src.returnValue === false || src.getPreventDefault && src.getPreventDefault() ? returnTrue : returnFalse;
        } else {
            this.type = src;
        }
        if (props) {
            jQuery.extend(this, props);
        }
        this.timeStamp = src && src.timeStamp || jQuery.now();
        this[jQuery.expando] = true;
    };
    jQuery.Event.prototype = {
        isDefaultPrevented: returnFalse,
        isPropagationStopped: returnFalse,
        isImmediatePropagationStopped: returnFalse,
        preventDefault: function () {
            var e = this.originalEvent;
            this.isDefaultPrevented = returnTrue;
            if (!e) {
                return;
            }
            if (e.preventDefault) {
                e.preventDefault();
            } else {
                e.returnValue = false;
            }
        },
        stopPropagation: function () {
            var e = this.originalEvent;
            this.isPropagationStopped = returnTrue;
            if (!e) {
                return;
            }
            if (e.stopPropagation) {
                e.stopPropagation();
            }
            e.cancelBubble = true;
        },
        stopImmediatePropagation: function () {
            this.isImmediatePropagationStopped = returnTrue;
            this.stopPropagation();
        }
    };
    jQuery.each({
        mouseenter: 'mouseover',
        mouseleave: 'mouseout'
    }, function (orig, fix) {
        jQuery.event.special[orig] = {
            delegateType: fix,
            bindType: fix,
            handle: function (event) {
                var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
                if (!related || related !== target && !jQuery.contains(target, related)) {
                    event.type = handleObj.origType;
                    ret = handleObj.handler.apply(this, arguments);
                    event.type = fix;
                }
                return ret;
            }
        };
    });
    if (!jQuery.support.submitBubbles) {
        jQuery.event.special.submit = {
            setup: function () {
                if (jQuery.nodeName(this, 'form')) {
                    return false;
                }
                jQuery.event.add(this, 'click._submit keypress._submit', function (e) {
                    var elem = e.target, form = jQuery.nodeName(elem, 'input') || jQuery.nodeName(elem, 'button') ? elem.form : undefined;
                    if (form && !jQuery._data(form, 'submitBubbles')) {
                        jQuery.event.add(form, 'submit._submit', function (event) {
                            event._submit_bubble = true;
                        });
                        jQuery._data(form, 'submitBubbles', true);
                    }
                });
            },
            postDispatch: function (event) {
                if (event._submit_bubble) {
                    delete event._submit_bubble;
                    if (this.parentNode && !event.isTrigger) {
                        jQuery.event.simulate('submit', this.parentNode, event, true);
                    }
                }
            },
            teardown: function () {
                if (jQuery.nodeName(this, 'form')) {
                    return false;
                }
                jQuery.event.remove(this, '._submit');
            }
        };
    }
    if (!jQuery.support.changeBubbles) {
        jQuery.event.special.change = {
            setup: function () {
                if (rformElems.test(this.nodeName)) {
                    if (this.type === 'checkbox' || this.type === 'radio') {
                        jQuery.event.add(this, 'propertychange._change', function (event) {
                            if (event.originalEvent.propertyName === 'checked') {
                                this._just_changed = true;
                            }
                        });
                        jQuery.event.add(this, 'click._change', function (event) {
                            if (this._just_changed && !event.isTrigger) {
                                this._just_changed = false;
                            }
                            jQuery.event.simulate('change', this, event, true);
                        });
                    }
                    return false;
                }
                jQuery.event.add(this, 'beforeactivate._change', function (e) {
                    var elem = e.target;
                    if (rformElems.test(elem.nodeName) && !jQuery._data(elem, 'changeBubbles')) {
                        jQuery.event.add(elem, 'change._change', function (event) {
                            if (this.parentNode && !event.isSimulated && !event.isTrigger) {
                                jQuery.event.simulate('change', this.parentNode, event, true);
                            }
                        });
                        jQuery._data(elem, 'changeBubbles', true);
                    }
                });
            },
            handle: function (event) {
                var elem = event.target;
                if (this !== elem || event.isSimulated || event.isTrigger || elem.type !== 'radio' && elem.type !== 'checkbox') {
                    return event.handleObj.handler.apply(this, arguments);
                }
            },
            teardown: function () {
                jQuery.event.remove(this, '._change');
                return !rformElems.test(this.nodeName);
            }
        };
    }
    if (!jQuery.support.focusinBubbles) {
        jQuery.each({
            focus: 'focusin',
            blur: 'focusout'
        }, function (orig, fix) {
            var attaches = 0, handler = function (event) {
                    jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
                };
            jQuery.event.special[fix] = {
                setup: function () {
                    if (attaches++ === 0) {
                        document.addEventListener(orig, handler, true);
                    }
                },
                teardown: function () {
                    if (--attaches === 0) {
                        document.removeEventListener(orig, handler, true);
                    }
                }
            };
        });
    }
    jQuery.fn.extend({
        on: function (types, selector, data, fn, one) {
            var type, origFn;
            if (typeof types === 'object') {
                if (typeof selector !== 'string') {
                    data = data || selector;
                    selector = undefined;
                }
                for (type in types) {
                    this.on(type, selector, data, types[type], one);
                }
                return this;
            }
            if (data == null && fn == null) {
                fn = selector;
                data = selector = undefined;
            } else if (fn == null) {
                if (typeof selector === 'string') {
                    fn = data;
                    data = undefined;
                } else {
                    fn = data;
                    data = selector;
                    selector = undefined;
                }
            }
            if (fn === false) {
                fn = returnFalse;
            } else if (!fn) {
                return this;
            }
            if (one === 1) {
                origFn = fn;
                fn = function (event) {
                    jQuery().off(event);
                    return origFn.apply(this, arguments);
                };
                fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
            }
            return this.each(function () {
                jQuery.event.add(this, types, fn, data, selector);
            });
        },
        one: function (types, selector, data, fn) {
            return this.on(types, selector, data, fn, 1);
        },
        off: function (types, selector, fn) {
            var handleObj, type;
            if (types && types.preventDefault && types.handleObj) {
                handleObj = types.handleObj;
                jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + '.' + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
                return this;
            }
            if (typeof types === 'object') {
                for (type in types) {
                    this.off(type, selector, types[type]);
                }
                return this;
            }
            if (selector === false || typeof selector === 'function') {
                fn = selector;
                selector = undefined;
            }
            if (fn === false) {
                fn = returnFalse;
            }
            return this.each(function () {
                jQuery.event.remove(this, types, fn, selector);
            });
        },
        bind: function (types, data, fn) {
            return this.on(types, null, data, fn);
        },
        unbind: function (types, fn) {
            return this.off(types, null, fn);
        },
        delegate: function (selector, types, data, fn) {
            return this.on(types, selector, data, fn);
        },
        undelegate: function (selector, types, fn) {
            return arguments.length === 1 ? this.off(selector, '**') : this.off(types, selector || '**', fn);
        },
        trigger: function (type, data) {
            return this.each(function () {
                jQuery.event.trigger(type, data, this);
            });
        },
        triggerHandler: function (type, data) {
            var elem = this[0];
            if (elem) {
                return jQuery.event.trigger(type, data, elem, true);
            }
        }
    });
    (function (window, undefined) {
        var i, cachedruns, Expr, getText, isXML, compile, hasDuplicate, outermostContext, setDocument, document, docElem, documentIsXML, rbuggyQSA, rbuggyMatches, matches, contains, sortOrder, expando = 'sizzle' + -new Date(), preferredDoc = window.document, support = {}, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), strundefined = typeof undefined, MAX_NEGATIVE = 1 << 31, arr = [], pop = arr.pop, push = arr.push, slice = arr.slice, indexOf = arr.indexOf || function (elem) {
                var i = 0, len = this.length;
                for (; i < len; i++) {
                    if (this[i] === elem) {
                        return i;
                    }
                }
                return -1;
            }, whitespace = '[\\x20\\t\\r\\n\\f]', characterEncoding = '(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+', identifier = characterEncoding.replace('w', 'w#'), operators = '([*^$|!~]?=)', attributes = '\\[' + whitespace + '*(' + characterEncoding + ')' + whitespace + '*(?:' + operators + whitespace + '*(?:([\'"])((?:\\\\.|[^\\\\])*?)\\3|(' + identifier + ')|)|)' + whitespace + '*\\]', pseudos = ':(' + characterEncoding + ')(?:\\((([\'"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|' + attributes.replace(3, 8) + ')*)|.*)\\)|)', rtrim = new RegExp('^' + whitespace + '+|((?:^|[^\\\\])(?:\\\\.)*)' + whitespace + '+$', 'g'), rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*'), rcombinators = new RegExp('^' + whitespace + '*([\\x20\\t\\r\\n\\f>+~])' + whitespace + '*'), rpseudo = new RegExp(pseudos), ridentifier = new RegExp('^' + identifier + '$'), matchExpr = {
                ID: new RegExp('^#(' + characterEncoding + ')'),
                CLASS: new RegExp('^\\.(' + characterEncoding + ')'),
                NAME: new RegExp('^\\[name=[\'"]?(' + characterEncoding + ')[\'"]?\\]'),
                TAG: new RegExp('^(' + characterEncoding.replace('w', 'w*') + ')'),
                ATTR: new RegExp('^' + attributes),
                PSEUDO: new RegExp('^' + pseudos),
                CHILD: new RegExp('^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' + whitespace + '*(even|odd|(([+-]|)(\\d*)n|)' + whitespace + '*(?:([+-]|)' + whitespace + '*(\\d+)|))' + whitespace + '*\\)|)', 'i'),
                needsContext: new RegExp('^' + whitespace + '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' + whitespace + '*((?:-\\d)?\\d*)' + whitespace + '*\\)|)(?=[^-]|$)', 'i')
            }, rsibling = /[\x20\t\r\n\f]*[+~]/, rnative = /^[^{]+\{\s*\[native code/, rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rescape = /'|\\/g, rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g, runescape = /\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g, funescape = function (_, escaped) {
                var high = '0x' + escaped - 65536;
                return high !== high ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
            };
        try {
            slice.call(preferredDoc.documentElement.childNodes, 0)[0].nodeType;
        } catch (e) {
            slice = function (i) {
                var elem, results = [];
                while (elem = this[i++]) {
                    results.push(elem);
                }
                return results;
            };
        }
        function isNative(fn) {
            return rnative.test(fn + '');
        }
        function createCache() {
            var cache, keys = [];
            return cache = function (key, value) {
                if (keys.push(key += ' ') > Expr.cacheLength) {
                    delete cache[keys.shift()];
                }
                return cache[key] = value;
            };
        }
        function markFunction(fn) {
            fn[expando] = true;
            return fn;
        }
        function assert(fn) {
            var div = document.createElement('div');
            try {
                return fn(div);
            } catch (e) {
                return false;
            } finally {
                div = null;
            }
        }
        function Sizzle(selector, context, results, seed) {
            var match, elem, m, nodeType, i, groups, old, nid, newContext, newSelector;
            if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
                setDocument(context);
            }
            context = context || document;
            results = results || [];
            if (!selector || typeof selector !== 'string') {
                return results;
            }
            if ((nodeType = context.nodeType) !== 1 && nodeType !== 9) {
                return [];
            }
            if (!documentIsXML && !seed) {
                if (match = rquickExpr.exec(selector)) {
                    if (m = match[1]) {
                        if (nodeType === 9) {
                            elem = context.getElementById(m);
                            if (elem && elem.parentNode) {
                                if (elem.id === m) {
                                    results.push(elem);
                                    return results;
                                }
                            } else {
                                return results;
                            }
                        } else {
                            if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                                results.push(elem);
                                return results;
                            }
                        }
                    } else if (match[2]) {
                        push.apply(results, slice.call(context.getElementsByTagName(selector), 0));
                        return results;
                    } else if ((m = match[3]) && support.getByClassName && context.getElementsByClassName) {
                        push.apply(results, slice.call(context.getElementsByClassName(m), 0));
                        return results;
                    }
                }
                if (support.qsa && !rbuggyQSA.test(selector)) {
                    old = true;
                    nid = expando;
                    newContext = context;
                    newSelector = nodeType === 9 && selector;
                    if (nodeType === 1 && context.nodeName.toLowerCase() !== 'object') {
                        groups = tokenize(selector);
                        if (old = context.getAttribute('id')) {
                            nid = old.replace(rescape, '\\$&');
                        } else {
                            context.setAttribute('id', nid);
                        }
                        nid = '[id=\'' + nid + '\'] ';
                        i = groups.length;
                        while (i--) {
                            groups[i] = nid + toSelector(groups[i]);
                        }
                        newContext = rsibling.test(selector) && context.parentNode || context;
                        newSelector = groups.join(',');
                    }
                    if (newSelector) {
                        try {
                            push.apply(results, slice.call(newContext.querySelectorAll(newSelector), 0));
                            return results;
                        } catch (qsaError) {
                        } finally {
                            if (!old) {
                                context.removeAttribute('id');
                            }
                        }
                    }
                }
            }
            return select(selector.replace(rtrim, '$1'), context, results, seed);
        }
        isXML = Sizzle.isXML = function (elem) {
            var documentElement = elem && (elem.ownerDocument || elem).documentElement;
            return documentElement ? documentElement.nodeName !== 'HTML' : false;
        };
        setDocument = Sizzle.setDocument = function (node) {
            var doc = node ? node.ownerDocument || node : preferredDoc;
            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
                return document;
            }
            document = doc;
            docElem = doc.documentElement;
            documentIsXML = isXML(doc);
            support.tagNameNoComments = assert(function (div) {
                div.appendChild(doc.createComment(''));
                return !div.getElementsByTagName('*').length;
            });
            support.attributes = assert(function (div) {
                div.innerHTML = '<select></select>';
                var type = typeof div.lastChild.getAttribute('multiple');
                return type !== 'boolean' && type !== 'string';
            });
            support.getByClassName = assert(function (div) {
                div.innerHTML = '<div class=\'hidden e\'></div><div class=\'hidden\'></div>';
                if (!div.getElementsByClassName || !div.getElementsByClassName('e').length) {
                    return false;
                }
                div.lastChild.className = 'e';
                return div.getElementsByClassName('e').length === 2;
            });
            support.getByName = assert(function (div) {
                div.id = expando + 0;
                div.innerHTML = '<a name=\'' + expando + '\'></a><div name=\'' + expando + '\'></div>';
                docElem.insertBefore(div, docElem.firstChild);
                var pass = doc.getElementsByName && doc.getElementsByName(expando).length === 2 + doc.getElementsByName(expando + 0).length;
                support.getIdNotName = !doc.getElementById(expando);
                docElem.removeChild(div);
                return pass;
            });
            Expr.attrHandle = assert(function (div) {
                div.innerHTML = '<a href=\'#\'></a>';
                return div.firstChild && typeof div.firstChild.getAttribute !== strundefined && div.firstChild.getAttribute('href') === '#';
            }) ? {} : {
                href: function (elem) {
                    return elem.getAttribute('href', 2);
                },
                type: function (elem) {
                    return elem.getAttribute('type');
                }
            };
            if (support.getIdNotName) {
                Expr.find['ID'] = function (id, context) {
                    if (typeof context.getElementById !== strundefined && !documentIsXML) {
                        var m = context.getElementById(id);
                        return m && m.parentNode ? [m] : [];
                    }
                };
                Expr.filter['ID'] = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                        return elem.getAttribute('id') === attrId;
                    };
                };
            } else {
                Expr.find['ID'] = function (id, context) {
                    if (typeof context.getElementById !== strundefined && !documentIsXML) {
                        var m = context.getElementById(id);
                        return m ? m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode('id').value === id ? [m] : undefined : [];
                    }
                };
                Expr.filter['ID'] = function (id) {
                    var attrId = id.replace(runescape, funescape);
                    return function (elem) {
                        var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode('id');
                        return node && node.value === attrId;
                    };
                };
            }
            Expr.find['TAG'] = support.tagNameNoComments ? function (tag, context) {
                if (typeof context.getElementsByTagName !== strundefined) {
                    return context.getElementsByTagName(tag);
                }
            } : function (tag, context) {
                var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
                if (tag === '*') {
                    while (elem = results[i++]) {
                        if (elem.nodeType === 1) {
                            tmp.push(elem);
                        }
                    }
                    return tmp;
                }
                return results;
            };
            Expr.find['NAME'] = support.getByName && function (tag, context) {
                if (typeof context.getElementsByName !== strundefined) {
                    return context.getElementsByName(name);
                }
            };
            Expr.find['CLASS'] = support.getByClassName && function (className, context) {
                if (typeof context.getElementsByClassName !== strundefined && !documentIsXML) {
                    return context.getElementsByClassName(className);
                }
            };
            rbuggyMatches = [];
            rbuggyQSA = [':focus'];
            if (support.qsa = isNative(doc.querySelectorAll)) {
                assert(function (div) {
                    div.innerHTML = '<select><option selected=\'\'></option></select>';
                    if (!div.querySelectorAll('[selected]').length) {
                        rbuggyQSA.push('\\[' + whitespace + '*(?:checked|disabled|ismap|multiple|readonly|selected|value)');
                    }
                    if (!div.querySelectorAll(':checked').length) {
                        rbuggyQSA.push(':checked');
                    }
                });
                assert(function (div) {
                    div.innerHTML = '<input type=\'hidden\' i=\'\'/>';
                    if (div.querySelectorAll('[i^=\'\']').length) {
                        rbuggyQSA.push('[*^$]=' + whitespace + '*(?:""|\'\')');
                    }
                    if (!div.querySelectorAll(':enabled').length) {
                        rbuggyQSA.push(':enabled', ':disabled');
                    }
                    div.querySelectorAll('*,:x');
                    rbuggyQSA.push(',.*:');
                });
            }
            if (support.matchesSelector = isNative(matches = docElem.matchesSelector || docElem.mozMatchesSelector || docElem.webkitMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
                assert(function (div) {
                    support.disconnectedMatch = matches.call(div, 'div');
                    matches.call(div, '[s!=\'\']:x');
                    rbuggyMatches.push('!=', pseudos);
                });
            }
            rbuggyQSA = new RegExp(rbuggyQSA.join('|'));
            rbuggyMatches = new RegExp(rbuggyMatches.join('|'));
            contains = isNative(docElem.contains) || docElem.compareDocumentPosition ? function (a, b) {
                var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
            } : function (a, b) {
                if (b) {
                    while (b = b.parentNode) {
                        if (b === a) {
                            return true;
                        }
                    }
                }
                return false;
            };
            sortOrder = docElem.compareDocumentPosition ? function (a, b) {
                var compare;
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                }
                if (compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition(b)) {
                    if (compare & 1 || a.parentNode && a.parentNode.nodeType === 11) {
                        if (a === doc || contains(preferredDoc, a)) {
                            return -1;
                        }
                        if (b === doc || contains(preferredDoc, b)) {
                            return 1;
                        }
                        return 0;
                    }
                    return compare & 4 ? -1 : 1;
                }
                return a.compareDocumentPosition ? -1 : 1;
            } : function (a, b) {
                var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
                if (a === b) {
                    hasDuplicate = true;
                    return 0;
                } else if (!aup || !bup) {
                    return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : 0;
                } else if (aup === bup) {
                    return siblingCheck(a, b);
                }
                cur = a;
                while (cur = cur.parentNode) {
                    ap.unshift(cur);
                }
                cur = b;
                while (cur = cur.parentNode) {
                    bp.unshift(cur);
                }
                while (ap[i] === bp[i]) {
                    i++;
                }
                return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
            };
            hasDuplicate = false;
            [
                0,
                0
            ].sort(sortOrder);
            support.detectDuplicates = hasDuplicate;
            return document;
        };
        Sizzle.matches = function (expr, elements) {
            return Sizzle(expr, null, null, elements);
        };
        Sizzle.matchesSelector = function (elem, expr) {
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            expr = expr.replace(rattributeQuotes, '=\'$1\']');
            if (support.matchesSelector && !documentIsXML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && !rbuggyQSA.test(expr)) {
                try {
                    var ret = matches.call(elem, expr);
                    if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
                        return ret;
                    }
                } catch (e) {
                }
            }
            return Sizzle(expr, document, null, [elem]).length > 0;
        };
        Sizzle.contains = function (context, elem) {
            if ((context.ownerDocument || context) !== document) {
                setDocument(context);
            }
            return contains(context, elem);
        };
        Sizzle.attr = function (elem, name) {
            var val;
            if ((elem.ownerDocument || elem) !== document) {
                setDocument(elem);
            }
            if (!documentIsXML) {
                name = name.toLowerCase();
            }
            if (val = Expr.attrHandle[name]) {
                return val(elem);
            }
            if (documentIsXML || support.attributes) {
                return elem.getAttribute(name);
            }
            return ((val = elem.getAttributeNode(name)) || elem.getAttribute(name)) && elem[name] === true ? name : val && val.specified ? val.value : null;
        };
        Sizzle.error = function (msg) {
            throw new Error('Syntax error, unrecognized expression: ' + msg);
        };
        Sizzle.uniqueSort = function (results) {
            var elem, duplicates = [], i = 1, j = 0;
            hasDuplicate = !support.detectDuplicates;
            results.sort(sortOrder);
            if (hasDuplicate) {
                for (; elem = results[i]; i++) {
                    if (elem === results[i - 1]) {
                        j = duplicates.push(i);
                    }
                }
                while (j--) {
                    results.splice(duplicates[j], 1);
                }
            }
            return results;
        };
        function siblingCheck(a, b) {
            var cur = b && a, diff = cur && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
            if (diff) {
                return diff;
            }
            if (cur) {
                while (cur = cur.nextSibling) {
                    if (cur === b) {
                        return -1;
                    }
                }
            }
            return a ? 1 : -1;
        }
        function createInputPseudo(type) {
            return function (elem) {
                var name = elem.nodeName.toLowerCase();
                return name === 'input' && elem.type === type;
            };
        }
        function createButtonPseudo(type) {
            return function (elem) {
                var name = elem.nodeName.toLowerCase();
                return (name === 'input' || name === 'button') && elem.type === type;
            };
        }
        function createPositionalPseudo(fn) {
            return markFunction(function (argument) {
                argument = +argument;
                return markFunction(function (seed, matches) {
                    var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
                    while (i--) {
                        if (seed[j = matchIndexes[i]]) {
                            seed[j] = !(matches[j] = seed[j]);
                        }
                    }
                });
            });
        }
        getText = Sizzle.getText = function (elem) {
            var node, ret = '', i = 0, nodeType = elem.nodeType;
            if (!nodeType) {
                for (; node = elem[i]; i++) {
                    ret += getText(node);
                }
            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
                if (typeof elem.textContent === 'string') {
                    return elem.textContent;
                } else {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        ret += getText(elem);
                    }
                }
            } else if (nodeType === 3 || nodeType === 4) {
                return elem.nodeValue;
            }
            return ret;
        };
        Expr = Sizzle.selectors = {
            cacheLength: 50,
            createPseudo: markFunction,
            match: matchExpr,
            find: {},
            relative: {
                '>': {
                    dir: 'parentNode',
                    first: true
                },
                ' ': { dir: 'parentNode' },
                '+': {
                    dir: 'previousSibling',
                    first: true
                },
                '~': { dir: 'previousSibling' }
            },
            preFilter: {
                ATTR: function (match) {
                    match[1] = match[1].replace(runescape, funescape);
                    match[3] = (match[4] || match[5] || '').replace(runescape, funescape);
                    if (match[2] === '~=') {
                        match[3] = ' ' + match[3] + ' ';
                    }
                    return match.slice(0, 4);
                },
                CHILD: function (match) {
                    match[1] = match[1].toLowerCase();
                    if (match[1].slice(0, 3) === 'nth') {
                        if (!match[3]) {
                            Sizzle.error(match[0]);
                        }
                        match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === 'even' || match[3] === 'odd'));
                        match[5] = +(match[7] + match[8] || match[3] === 'odd');
                    } else if (match[3]) {
                        Sizzle.error(match[0]);
                    }
                    return match;
                },
                PSEUDO: function (match) {
                    var excess, unquoted = !match[5] && match[2];
                    if (matchExpr['CHILD'].test(match[0])) {
                        return null;
                    }
                    if (match[4]) {
                        match[2] = match[4];
                    } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(')', unquoted.length - excess) - unquoted.length)) {
                        match[0] = match[0].slice(0, excess);
                        match[2] = unquoted.slice(0, excess);
                    }
                    return match.slice(0, 3);
                }
            },
            filter: {
                TAG: function (nodeName) {
                    if (nodeName === '*') {
                        return function () {
                            return true;
                        };
                    }
                    nodeName = nodeName.replace(runescape, funescape).toLowerCase();
                    return function (elem) {
                        return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
                    };
                },
                CLASS: function (className) {
                    var pattern = classCache[className + ' '];
                    return pattern || (pattern = new RegExp('(^|' + whitespace + ')' + className + '(' + whitespace + '|$)')) && classCache(className, function (elem) {
                        return pattern.test(elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute('class') || '');
                    });
                },
                ATTR: function (name, operator, check) {
                    return function (elem) {
                        var result = Sizzle.attr(elem, name);
                        if (result == null) {
                            return operator === '!=';
                        }
                        if (!operator) {
                            return true;
                        }
                        result += '';
                        return operator === '=' ? result === check : operator === '!=' ? result !== check : operator === '^=' ? check && result.indexOf(check) === 0 : operator === '*=' ? check && result.indexOf(check) > -1 : operator === '$=' ? check && result.slice(-check.length) === check : operator === '~=' ? (' ' + result + ' ').indexOf(check) > -1 : operator === '|=' ? result === check || result.slice(0, check.length + 1) === check + '-' : false;
                    };
                },
                CHILD: function (type, what, argument, first, last) {
                    var simple = type.slice(0, 3) !== 'nth', forward = type.slice(-4) !== 'last', ofType = what === 'of-type';
                    return first === 1 && last === 0 ? function (elem) {
                        return !!elem.parentNode;
                    } : function (elem, context, xml) {
                        var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? 'nextSibling' : 'previousSibling', parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType;
                        if (parent) {
                            if (simple) {
                                while (dir) {
                                    node = elem;
                                    while (node = node[dir]) {
                                        if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                                            return false;
                                        }
                                    }
                                    start = dir = type === 'only' && !start && 'nextSibling';
                                }
                                return true;
                            }
                            start = [forward ? parent.firstChild : parent.lastChild];
                            if (forward && useCache) {
                                outerCache = parent[expando] || (parent[expando] = {});
                                cache = outerCache[type] || [];
                                nodeIndex = cache[0] === dirruns && cache[1];
                                diff = cache[0] === dirruns && cache[2];
                                node = nodeIndex && parent.childNodes[nodeIndex];
                                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                    if (node.nodeType === 1 && ++diff && node === elem) {
                                        outerCache[type] = [
                                            dirruns,
                                            nodeIndex,
                                            diff
                                        ];
                                        break;
                                    }
                                }
                            } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                                diff = cache[1];
                            } else {
                                while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                                        if (useCache) {
                                            (node[expando] || (node[expando] = {}))[type] = [
                                                dirruns,
                                                diff
                                            ];
                                        }
                                        if (node === elem) {
                                            break;
                                        }
                                    }
                                }
                            }
                            diff -= last;
                            return diff === first || diff % first === 0 && diff / first >= 0;
                        }
                    };
                },
                PSEUDO: function (pseudo, argument) {
                    var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error('unsupported pseudo: ' + pseudo);
                    if (fn[expando]) {
                        return fn(argument);
                    }
                    if (fn.length > 1) {
                        args = [
                            pseudo,
                            pseudo,
                            '',
                            argument
                        ];
                        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
                            var idx, matched = fn(seed, argument), i = matched.length;
                            while (i--) {
                                idx = indexOf.call(seed, matched[i]);
                                seed[idx] = !(matches[idx] = matched[i]);
                            }
                        }) : function (elem) {
                            return fn(elem, 0, args);
                        };
                    }
                    return fn;
                }
            },
            pseudos: {
                not: markFunction(function (selector) {
                    var input = [], results = [], matcher = compile(selector.replace(rtrim, '$1'));
                    return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
                        var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
                        while (i--) {
                            if (elem = unmatched[i]) {
                                seed[i] = !(matches[i] = elem);
                            }
                        }
                    }) : function (elem, context, xml) {
                        input[0] = elem;
                        matcher(input, null, xml, results);
                        return !results.pop();
                    };
                }),
                has: markFunction(function (selector) {
                    return function (elem) {
                        return Sizzle(selector, elem).length > 0;
                    };
                }),
                contains: markFunction(function (text) {
                    return function (elem) {
                        return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
                    };
                }),
                lang: markFunction(function (lang) {
                    if (!ridentifier.test(lang || '')) {
                        Sizzle.error('unsupported lang: ' + lang);
                    }
                    lang = lang.replace(runescape, funescape).toLowerCase();
                    return function (elem) {
                        var elemLang;
                        do {
                            if (elemLang = documentIsXML ? elem.getAttribute('xml:lang') || elem.getAttribute('lang') : elem.lang) {
                                elemLang = elemLang.toLowerCase();
                                return elemLang === lang || elemLang.indexOf(lang + '-') === 0;
                            }
                        } while ((elem = elem.parentNode) && elem.nodeType === 1);
                        return false;
                    };
                }),
                target: function (elem) {
                    var hash = window.location && window.location.hash;
                    return hash && hash.slice(1) === elem.id;
                },
                root: function (elem) {
                    return elem === docElem;
                },
                focus: function (elem) {
                    return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
                },
                enabled: function (elem) {
                    return elem.disabled === false;
                },
                disabled: function (elem) {
                    return elem.disabled === true;
                },
                checked: function (elem) {
                    var nodeName = elem.nodeName.toLowerCase();
                    return nodeName === 'input' && !!elem.checked || nodeName === 'option' && !!elem.selected;
                },
                selected: function (elem) {
                    if (elem.parentNode) {
                        elem.parentNode.selectedIndex;
                    }
                    return elem.selected === true;
                },
                empty: function (elem) {
                    for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
                        if (elem.nodeName > '@' || elem.nodeType === 3 || elem.nodeType === 4) {
                            return false;
                        }
                    }
                    return true;
                },
                parent: function (elem) {
                    return !Expr.pseudos['empty'](elem);
                },
                header: function (elem) {
                    return rheader.test(elem.nodeName);
                },
                input: function (elem) {
                    return rinputs.test(elem.nodeName);
                },
                button: function (elem) {
                    var name = elem.nodeName.toLowerCase();
                    return name === 'input' && elem.type === 'button' || name === 'button';
                },
                text: function (elem) {
                    var attr;
                    return elem.nodeName.toLowerCase() === 'input' && elem.type === 'text' && ((attr = elem.getAttribute('type')) == null || attr.toLowerCase() === elem.type);
                },
                first: createPositionalPseudo(function () {
                    return [0];
                }),
                last: createPositionalPseudo(function (matchIndexes, length) {
                    return [length - 1];
                }),
                eq: createPositionalPseudo(function (matchIndexes, length, argument) {
                    return [argument < 0 ? argument + length : argument];
                }),
                even: createPositionalPseudo(function (matchIndexes, length) {
                    var i = 0;
                    for (; i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                odd: createPositionalPseudo(function (matchIndexes, length) {
                    var i = 1;
                    for (; i < length; i += 2) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                lt: createPositionalPseudo(function (matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; --i >= 0;) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                }),
                gt: createPositionalPseudo(function (matchIndexes, length, argument) {
                    var i = argument < 0 ? argument + length : argument;
                    for (; ++i < length;) {
                        matchIndexes.push(i);
                    }
                    return matchIndexes;
                })
            }
        };
        for (i in {
                radio: true,
                checkbox: true,
                file: true,
                password: true,
                image: true
            }) {
            Expr.pseudos[i] = createInputPseudo(i);
        }
        for (i in {
                submit: true,
                reset: true
            }) {
            Expr.pseudos[i] = createButtonPseudo(i);
        }
        function tokenize(selector, parseOnly) {
            var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + ' '];
            if (cached) {
                return parseOnly ? 0 : cached.slice(0);
            }
            soFar = selector;
            groups = [];
            preFilters = Expr.preFilter;
            while (soFar) {
                if (!matched || (match = rcomma.exec(soFar))) {
                    if (match) {
                        soFar = soFar.slice(match[0].length) || soFar;
                    }
                    groups.push(tokens = []);
                }
                matched = false;
                if (match = rcombinators.exec(soFar)) {
                    matched = match.shift();
                    tokens.push({
                        value: matched,
                        type: match[0].replace(rtrim, ' ')
                    });
                    soFar = soFar.slice(matched.length);
                }
                for (type in Expr.filter) {
                    if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
                        matched = match.shift();
                        tokens.push({
                            value: matched,
                            type: type,
                            matches: match
                        });
                        soFar = soFar.slice(matched.length);
                    }
                }
                if (!matched) {
                    break;
                }
            }
            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
        }
        function toSelector(tokens) {
            var i = 0, len = tokens.length, selector = '';
            for (; i < len; i++) {
                selector += tokens[i].value;
            }
            return selector;
        }
        function addCombinator(matcher, combinator, base) {
            var dir = combinator.dir, checkNonElements = base && dir === 'parentNode', doneName = done++;
            return combinator.first ? function (elem, context, xml) {
                while (elem = elem[dir]) {
                    if (elem.nodeType === 1 || checkNonElements) {
                        return matcher(elem, context, xml);
                    }
                }
            } : function (elem, context, xml) {
                var data, cache, outerCache, dirkey = dirruns + ' ' + doneName;
                if (xml) {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            if (matcher(elem, context, xml)) {
                                return true;
                            }
                        }
                    }
                } else {
                    while (elem = elem[dir]) {
                        if (elem.nodeType === 1 || checkNonElements) {
                            outerCache = elem[expando] || (elem[expando] = {});
                            if ((cache = outerCache[dir]) && cache[0] === dirkey) {
                                if ((data = cache[1]) === true || data === cachedruns) {
                                    return data === true;
                                }
                            } else {
                                cache = outerCache[dir] = [dirkey];
                                cache[1] = matcher(elem, context, xml) || cachedruns;
                                if (cache[1] === true) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            };
        }
        function elementMatcher(matchers) {
            return matchers.length > 1 ? function (elem, context, xml) {
                var i = matchers.length;
                while (i--) {
                    if (!matchers[i](elem, context, xml)) {
                        return false;
                    }
                }
                return true;
            } : matchers[0];
        }
        function condense(unmatched, map, filter, context, xml) {
            var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
            for (; i < len; i++) {
                if (elem = unmatched[i]) {
                    if (!filter || filter(elem, context, xml)) {
                        newUnmatched.push(elem);
                        if (mapped) {
                            map.push(i);
                        }
                    }
                }
            }
            return newUnmatched;
        }
        function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
            if (postFilter && !postFilter[expando]) {
                postFilter = setMatcher(postFilter);
            }
            if (postFinder && !postFinder[expando]) {
                postFinder = setMatcher(postFinder, postSelector);
            }
            return markFunction(function (seed, results, context, xml) {
                var temp, i, elem, preMap = [], postMap = [], preexisting = results.length, elems = seed || multipleContexts(selector || '*', context.nodeType ? [context] : context, []), matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
                if (matcher) {
                    matcher(matcherIn, matcherOut, context, xml);
                }
                if (postFilter) {
                    temp = condense(matcherOut, postMap);
                    postFilter(temp, [], context, xml);
                    i = temp.length;
                    while (i--) {
                        if (elem = temp[i]) {
                            matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
                        }
                    }
                }
                if (seed) {
                    if (postFinder || preFilter) {
                        if (postFinder) {
                            temp = [];
                            i = matcherOut.length;
                            while (i--) {
                                if (elem = matcherOut[i]) {
                                    temp.push(matcherIn[i] = elem);
                                }
                            }
                            postFinder(null, matcherOut = [], temp, xml);
                        }
                        i = matcherOut.length;
                        while (i--) {
                            if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {
                                seed[temp] = !(results[temp] = elem);
                            }
                        }
                    }
                } else {
                    matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
                    if (postFinder) {
                        postFinder(null, results, matcherOut, xml);
                    } else {
                        push.apply(results, matcherOut);
                    }
                }
            });
        }
        function matcherFromTokens(tokens) {
            var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[' '], i = leadingRelative ? 1 : 0, matchContext = addCombinator(function (elem) {
                    return elem === checkContext;
                }, implicitRelative, true), matchAnyContext = addCombinator(function (elem) {
                    return indexOf.call(checkContext, elem) > -1;
                }, implicitRelative, true), matchers = [function (elem, context, xml) {
                        return !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
                    }];
            for (; i < len; i++) {
                if (matcher = Expr.relative[tokens[i].type]) {
                    matchers = [addCombinator(elementMatcher(matchers), matcher)];
                } else {
                    matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
                    if (matcher[expando]) {
                        j = ++i;
                        for (; j < len; j++) {
                            if (Expr.relative[tokens[j].type]) {
                                break;
                            }
                        }
                        return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1)).replace(rtrim, '$1'), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
                    }
                    matchers.push(matcher);
                }
            }
            return elementMatcher(matchers);
        }
        function matcherFromGroupMatchers(elementMatchers, setMatchers) {
            var matcherCachedRuns = 0, bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function (seed, context, xml, results, expandContext) {
                    var elem, j, matcher, setMatched = [], matchedCount = 0, i = '0', unmatched = seed && [], outermost = expandContext != null, contextBackup = outermostContext, elems = seed || byElement && Expr.find['TAG']('*', expandContext && context.parentNode || context), dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1;
                    if (outermost) {
                        outermostContext = context !== document && context;
                        cachedruns = matcherCachedRuns;
                    }
                    for (; (elem = elems[i]) != null; i++) {
                        if (byElement && elem) {
                            j = 0;
                            while (matcher = elementMatchers[j++]) {
                                if (matcher(elem, context, xml)) {
                                    results.push(elem);
                                    break;
                                }
                            }
                            if (outermost) {
                                dirruns = dirrunsUnique;
                                cachedruns = ++matcherCachedRuns;
                            }
                        }
                        if (bySet) {
                            if (elem = !matcher && elem) {
                                matchedCount--;
                            }
                            if (seed) {
                                unmatched.push(elem);
                            }
                        }
                    }
                    matchedCount += i;
                    if (bySet && i !== matchedCount) {
                        j = 0;
                        while (matcher = setMatchers[j++]) {
                            matcher(unmatched, setMatched, context, xml);
                        }
                        if (seed) {
                            if (matchedCount > 0) {
                                while (i--) {
                                    if (!(unmatched[i] || setMatched[i])) {
                                        setMatched[i] = pop.call(results);
                                    }
                                }
                            }
                            setMatched = condense(setMatched);
                        }
                        push.apply(results, setMatched);
                        if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                            Sizzle.uniqueSort(results);
                        }
                    }
                    if (outermost) {
                        dirruns = dirrunsUnique;
                        outermostContext = contextBackup;
                    }
                    return unmatched;
                };
            return bySet ? markFunction(superMatcher) : superMatcher;
        }
        compile = Sizzle.compile = function (selector, group) {
            var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + ' '];
            if (!cached) {
                if (!group) {
                    group = tokenize(selector);
                }
                i = group.length;
                while (i--) {
                    cached = matcherFromTokens(group[i]);
                    if (cached[expando]) {
                        setMatchers.push(cached);
                    } else {
                        elementMatchers.push(cached);
                    }
                }
                cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
            }
            return cached;
        };
        function multipleContexts(selector, contexts, results) {
            var i = 0, len = contexts.length;
            for (; i < len; i++) {
                Sizzle(selector, contexts[i], results);
            }
            return results;
        }
        function select(selector, context, results, seed) {
            var i, tokens, token, type, find, match = tokenize(selector);
            if (!seed) {
                if (match.length === 1) {
                    tokens = match[0] = match[0].slice(0);
                    if (tokens.length > 2 && (token = tokens[0]).type === 'ID' && context.nodeType === 9 && !documentIsXML && Expr.relative[tokens[1].type]) {
                        context = Expr.find['ID'](token.matches[0].replace(runescape, funescape), context)[0];
                        if (!context) {
                            return results;
                        }
                        selector = selector.slice(tokens.shift().value.length);
                    }
                    i = matchExpr['needsContext'].test(selector) ? 0 : tokens.length;
                    while (i--) {
                        token = tokens[i];
                        if (Expr.relative[type = token.type]) {
                            break;
                        }
                        if (find = Expr.find[type]) {
                            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && context.parentNode || context)) {
                                tokens.splice(i, 1);
                                selector = seed.length && toSelector(tokens);
                                if (!selector) {
                                    push.apply(results, slice.call(seed, 0));
                                    return results;
                                }
                                break;
                            }
                        }
                    }
                }
            }
            compile(selector, match)(seed, context, documentIsXML, results, rsibling.test(selector));
            return results;
        }
        Expr.pseudos['nth'] = Expr.pseudos['eq'];
        function setFilters() {
        }
        Expr.filters = setFilters.prototype = Expr.pseudos;
        Expr.setFilters = new setFilters();
        setDocument();
        Sizzle.attr = jQuery.attr;
        jQuery.find = Sizzle;
        jQuery.expr = Sizzle.selectors;
        jQuery.expr[':'] = jQuery.expr.pseudos;
        jQuery.unique = Sizzle.uniqueSort;
        jQuery.text = Sizzle.getText;
        jQuery.isXMLDoc = Sizzle.isXML;
        jQuery.contains = Sizzle.contains;
    }(window));
    var runtil = /Until$/, rparentsprev = /^(?:parents|prev(?:Until|All))/, isSimple = /^.[^:#\[\.,]*$/, rneedsContext = jQuery.expr.match.needsContext, guaranteedUnique = {
            children: true,
            contents: true,
            next: true,
            prev: true
        };
    jQuery.fn.extend({
        find: function (selector) {
            var i, ret, self, len = this.length;
            if (typeof selector !== 'string') {
                self = this;
                return this.pushStack(jQuery(selector).filter(function () {
                    for (i = 0; i < len; i++) {
                        if (jQuery.contains(self[i], this)) {
                            return true;
                        }
                    }
                }));
            }
            ret = [];
            for (i = 0; i < len; i++) {
                jQuery.find(selector, this[i], ret);
            }
            ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
            ret.selector = (this.selector ? this.selector + ' ' : '') + selector;
            return ret;
        },
        has: function (target) {
            var i, targets = jQuery(target, this), len = targets.length;
            return this.filter(function () {
                for (i = 0; i < len; i++) {
                    if (jQuery.contains(this, targets[i])) {
                        return true;
                    }
                }
            });
        },
        not: function (selector) {
            return this.pushStack(winnow(this, selector, false));
        },
        filter: function (selector) {
            return this.pushStack(winnow(this, selector, true));
        },
        is: function (selector) {
            return !!selector && (typeof selector === 'string' ? rneedsContext.test(selector) ? jQuery(selector, this.context).index(this[0]) >= 0 : jQuery.filter(selector, this).length > 0 : this.filter(selector).length > 0);
        },
        closest: function (selectors, context) {
            var cur, i = 0, l = this.length, ret = [], pos = rneedsContext.test(selectors) || typeof selectors !== 'string' ? jQuery(selectors, context || this.context) : 0;
            for (; i < l; i++) {
                cur = this[i];
                while (cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11) {
                    if (pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors)) {
                        ret.push(cur);
                        break;
                    }
                    cur = cur.parentNode;
                }
            }
            return this.pushStack(ret.length > 1 ? jQuery.unique(ret) : ret);
        },
        index: function (elem) {
            if (!elem) {
                return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
            }
            if (typeof elem === 'string') {
                return jQuery.inArray(this[0], jQuery(elem));
            }
            return jQuery.inArray(elem.jquery ? elem[0] : elem, this);
        },
        add: function (selector, context) {
            var set = typeof selector === 'string' ? jQuery(selector, context) : jQuery.makeArray(selector && selector.nodeType ? [selector] : selector), all = jQuery.merge(this.get(), set);
            return this.pushStack(jQuery.unique(all));
        },
        addBack: function (selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        }
    });
    jQuery.fn.andSelf = jQuery.fn.addBack;
    function sibling(cur, dir) {
        do {
            cur = cur[dir];
        } while (cur && cur.nodeType !== 1);
        return cur;
    }
    jQuery.each({
        parent: function (elem) {
            var parent = elem.parentNode;
            return parent && parent.nodeType !== 11 ? parent : null;
        },
        parents: function (elem) {
            return jQuery.dir(elem, 'parentNode');
        },
        parentsUntil: function (elem, i, until) {
            return jQuery.dir(elem, 'parentNode', until);
        },
        next: function (elem) {
            return sibling(elem, 'nextSibling');
        },
        prev: function (elem) {
            return sibling(elem, 'previousSibling');
        },
        nextAll: function (elem) {
            return jQuery.dir(elem, 'nextSibling');
        },
        prevAll: function (elem) {
            return jQuery.dir(elem, 'previousSibling');
        },
        nextUntil: function (elem, i, until) {
            return jQuery.dir(elem, 'nextSibling', until);
        },
        prevUntil: function (elem, i, until) {
            return jQuery.dir(elem, 'previousSibling', until);
        },
        siblings: function (elem) {
            return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
        },
        children: function (elem) {
            return jQuery.sibling(elem.firstChild);
        },
        contents: function (elem) {
            return jQuery.nodeName(elem, 'iframe') ? elem.contentDocument || elem.contentWindow.document : jQuery.merge([], elem.childNodes);
        }
    }, function (name, fn) {
        jQuery.fn[name] = function (until, selector) {
            var ret = jQuery.map(this, fn, until);
            if (!runtil.test(name)) {
                selector = until;
            }
            if (selector && typeof selector === 'string') {
                ret = jQuery.filter(selector, ret);
            }
            ret = this.length > 1 && !guaranteedUnique[name] ? jQuery.unique(ret) : ret;
            if (this.length > 1 && rparentsprev.test(name)) {
                ret = ret.reverse();
            }
            return this.pushStack(ret);
        };
    });
    jQuery.extend({
        filter: function (expr, elems, not) {
            if (not) {
                expr = ':not(' + expr + ')';
            }
            return elems.length === 1 ? jQuery.find.matchesSelector(elems[0], expr) ? [elems[0]] : [] : jQuery.find.matches(expr, elems);
        },
        dir: function (elem, dir, until) {
            var matched = [], cur = elem[dir];
            while (cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {
                if (cur.nodeType === 1) {
                    matched.push(cur);
                }
                cur = cur[dir];
            }
            return matched;
        },
        sibling: function (n, elem) {
            var r = [];
            for (; n; n = n.nextSibling) {
                if (n.nodeType === 1 && n !== elem) {
                    r.push(n);
                }
            }
            return r;
        }
    });
    function winnow(elements, qualifier, keep) {
        qualifier = qualifier || 0;
        if (jQuery.isFunction(qualifier)) {
            return jQuery.grep(elements, function (elem, i) {
                var retVal = !!qualifier.call(elem, i, elem);
                return retVal === keep;
            });
        } else if (qualifier.nodeType) {
            return jQuery.grep(elements, function (elem) {
                return elem === qualifier === keep;
            });
        } else if (typeof qualifier === 'string') {
            var filtered = jQuery.grep(elements, function (elem) {
                    return elem.nodeType === 1;
                });
            if (isSimple.test(qualifier)) {
                return jQuery.filter(qualifier, filtered, !keep);
            } else {
                qualifier = jQuery.filter(qualifier, filtered);
            }
        }
        return jQuery.grep(elements, function (elem) {
            return jQuery.inArray(elem, qualifier) >= 0 === keep;
        });
    }
    function createSafeFragment(document) {
        var list = nodeNames.split('|'), safeFrag = document.createDocumentFragment();
        if (safeFrag.createElement) {
            while (list.length) {
                safeFrag.createElement(list.pop());
            }
        }
        return safeFrag;
    }
    var nodeNames = 'abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|' + 'header|hgroup|mark|meter|nav|output|progress|section|summary|time|video', rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g, rnoshimcache = new RegExp('<(?:' + nodeNames + ')[\\s/>]', 'i'), rleadingWhitespace = /^\s+/, rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rtbody = /<tbody/i, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style|link)/i, manipulation_rcheckableType = /^(?:checkbox|radio)$/i, rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /^$|\/(?:java|ecma)script/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, wrapMap = {
            option: [
                1,
                '<select multiple=\'multiple\'>',
                '</select>'
            ],
            legend: [
                1,
                '<fieldset>',
                '</fieldset>'
            ],
            area: [
                1,
                '<map>',
                '</map>'
            ],
            param: [
                1,
                '<object>',
                '</object>'
            ],
            thead: [
                1,
                '<table>',
                '</table>'
            ],
            tr: [
                2,
                '<table><tbody>',
                '</tbody></table>'
            ],
            col: [
                2,
                '<table><tbody></tbody><colgroup>',
                '</colgroup></table>'
            ],
            td: [
                3,
                '<table><tbody><tr>',
                '</tr></tbody></table>'
            ],
            _default: jQuery.support.htmlSerialize ? [
                0,
                '',
                ''
            ] : [
                1,
                'X<div>',
                '</div>'
            ]
        }, safeFragment = createSafeFragment(document), fragmentDiv = safeFragment.appendChild(document.createElement('div'));
    wrapMap.optgroup = wrapMap.option;
    wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
    wrapMap.th = wrapMap.td;
    jQuery.fn.extend({
        text: function (value) {
            return jQuery.access(this, function (value) {
                return value === undefined ? jQuery.text(this) : this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));
            }, null, value, arguments.length);
        },
        wrapAll: function (html) {
            if (jQuery.isFunction(html)) {
                return this.each(function (i) {
                    jQuery(this).wrapAll(html.call(this, i));
                });
            }
            if (this[0]) {
                var wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
                if (this[0].parentNode) {
                    wrap.insertBefore(this[0]);
                }
                wrap.map(function () {
                    var elem = this;
                    while (elem.firstChild && elem.firstChild.nodeType === 1) {
                        elem = elem.firstChild;
                    }
                    return elem;
                }).append(this);
            }
            return this;
        },
        wrapInner: function (html) {
            if (jQuery.isFunction(html)) {
                return this.each(function (i) {
                    jQuery(this).wrapInner(html.call(this, i));
                });
            }
            return this.each(function () {
                var self = jQuery(this), contents = self.contents();
                if (contents.length) {
                    contents.wrapAll(html);
                } else {
                    self.append(html);
                }
            });
        },
        wrap: function (html) {
            var isFunction = jQuery.isFunction(html);
            return this.each(function (i) {
                jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
            });
        },
        unwrap: function () {
            return this.parent().each(function () {
                if (!jQuery.nodeName(this, 'body')) {
                    jQuery(this).replaceWith(this.childNodes);
                }
            }).end();
        },
        append: function () {
            return this.domManip(arguments, true, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    this.appendChild(elem);
                }
            });
        },
        prepend: function () {
            return this.domManip(arguments, true, function (elem) {
                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
                    this.insertBefore(elem, this.firstChild);
                }
            });
        },
        before: function () {
            return this.domManip(arguments, false, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this);
                }
            });
        },
        after: function () {
            return this.domManip(arguments, false, function (elem) {
                if (this.parentNode) {
                    this.parentNode.insertBefore(elem, this.nextSibling);
                }
            });
        },
        remove: function (selector, keepData) {
            var elem, i = 0;
            for (; (elem = this[i]) != null; i++) {
                if (!selector || jQuery.filter(selector, [elem]).length > 0) {
                    if (!keepData && elem.nodeType === 1) {
                        jQuery.cleanData(getAll(elem));
                    }
                    if (elem.parentNode) {
                        if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
                            setGlobalEval(getAll(elem, 'script'));
                        }
                        elem.parentNode.removeChild(elem);
                    }
                }
            }
            return this;
        },
        empty: function () {
            var elem, i = 0;
            for (; (elem = this[i]) != null; i++) {
                if (elem.nodeType === 1) {
                    jQuery.cleanData(getAll(elem, false));
                }
                while (elem.firstChild) {
                    elem.removeChild(elem.firstChild);
                }
                if (elem.options && jQuery.nodeName(elem, 'select')) {
                    elem.options.length = 0;
                }
            }
            return this;
        },
        clone: function (dataAndEvents, deepDataAndEvents) {
            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
            return this.map(function () {
                return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
            });
        },
        html: function (value) {
            return jQuery.access(this, function (value) {
                var elem = this[0] || {}, i = 0, l = this.length;
                if (value === undefined) {
                    return elem.nodeType === 1 ? elem.innerHTML.replace(rinlinejQuery, '') : undefined;
                }
                if (typeof value === 'string' && !rnoInnerhtml.test(value) && (jQuery.support.htmlSerialize || !rnoshimcache.test(value)) && (jQuery.support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || [
                        '',
                        ''
                    ])[1].toLowerCase()]) {
                    value = value.replace(rxhtmlTag, '<$1></$2>');
                    try {
                        for (; i < l; i++) {
                            elem = this[i] || {};
                            if (elem.nodeType === 1) {
                                jQuery.cleanData(getAll(elem, false));
                                elem.innerHTML = value;
                            }
                        }
                        elem = 0;
                    } catch (e) {
                    }
                }
                if (elem) {
                    this.empty().append(value);
                }
            }, null, value, arguments.length);
        },
        replaceWith: function (value) {
            var isFunc = jQuery.isFunction(value);
            if (!isFunc && typeof value !== 'string') {
                value = jQuery(value).not(this).detach();
            }
            return this.domManip([value], true, function (elem) {
                var next = this.nextSibling, parent = this.parentNode;
                if (parent) {
                    jQuery(this).remove();
                    parent.insertBefore(elem, next);
                }
            });
        },
        detach: function (selector) {
            return this.remove(selector, true);
        },
        domManip: function (args, table, callback) {
            args = core_concat.apply([], args);
            var first, node, hasScripts, scripts, doc, fragment, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
            if (isFunction || !(l <= 1 || typeof value !== 'string' || jQuery.support.checkClone || !rchecked.test(value))) {
                return this.each(function (index) {
                    var self = set.eq(index);
                    if (isFunction) {
                        args[0] = value.call(this, index, table ? self.html() : undefined);
                    }
                    self.domManip(args, table, callback);
                });
            }
            if (l) {
                fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
                first = fragment.firstChild;
                if (fragment.childNodes.length === 1) {
                    fragment = first;
                }
                if (first) {
                    table = table && jQuery.nodeName(first, 'tr');
                    scripts = jQuery.map(getAll(fragment, 'script'), disableScript);
                    hasScripts = scripts.length;
                    for (; i < l; i++) {
                        node = fragment;
                        if (i !== iNoClone) {
                            node = jQuery.clone(node, true, true);
                            if (hasScripts) {
                                jQuery.merge(scripts, getAll(node, 'script'));
                            }
                        }
                        callback.call(table && jQuery.nodeName(this[i], 'table') ? findOrAppend(this[i], 'tbody') : this[i], node, i);
                    }
                    if (hasScripts) {
                        doc = scripts[scripts.length - 1].ownerDocument;
                        jQuery.map(scripts, restoreScript);
                        for (i = 0; i < hasScripts; i++) {
                            node = scripts[i];
                            if (rscriptType.test(node.type || '') && !jQuery._data(node, 'globalEval') && jQuery.contains(doc, node)) {
                                if (node.src) {
                                    jQuery.ajax({
                                        url: node.src,
                                        type: 'GET',
                                        dataType: 'script',
                                        async: false,
                                        global: false,
                                        'throws': true
                                    });
                                } else {
                                    jQuery.globalEval((node.text || node.textContent || node.innerHTML || '').replace(rcleanScript, ''));
                                }
                            }
                        }
                    }
                    fragment = first = null;
                }
            }
            return this;
        }
    });
    function findOrAppend(elem, tag) {
        return elem.getElementsByTagName(tag)[0] || elem.appendChild(elem.ownerDocument.createElement(tag));
    }
    function disableScript(elem) {
        var attr = elem.getAttributeNode('type');
        elem.type = (attr && attr.specified) + '/' + elem.type;
        return elem;
    }
    function restoreScript(elem) {
        var match = rscriptTypeMasked.exec(elem.type);
        if (match) {
            elem.type = match[1];
        } else {
            elem.removeAttribute('type');
        }
        return elem;
    }
    function setGlobalEval(elems, refElements) {
        var elem, i = 0;
        for (; (elem = elems[i]) != null; i++) {
            jQuery._data(elem, 'globalEval', !refElements || jQuery._data(refElements[i], 'globalEval'));
        }
    }
    function cloneCopyEvent(src, dest) {
        if (dest.nodeType !== 1 || !jQuery.hasData(src)) {
            return;
        }
        var type, i, l, oldData = jQuery._data(src), curData = jQuery._data(dest, oldData), events = oldData.events;
        if (events) {
            delete curData.handle;
            curData.events = {};
            for (type in events) {
                for (i = 0, l = events[type].length; i < l; i++) {
                    jQuery.event.add(dest, type, events[type][i]);
                }
            }
        }
        if (curData.data) {
            curData.data = jQuery.extend({}, curData.data);
        }
    }
    function fixCloneNodeIssues(src, dest) {
        var nodeName, e, data;
        if (dest.nodeType !== 1) {
            return;
        }
        nodeName = dest.nodeName.toLowerCase();
        if (!jQuery.support.noCloneEvent && dest[jQuery.expando]) {
            data = jQuery._data(dest);
            for (e in data.events) {
                jQuery.removeEvent(dest, e, data.handle);
            }
            dest.removeAttribute(jQuery.expando);
        }
        if (nodeName === 'script' && dest.text !== src.text) {
            disableScript(dest).text = src.text;
            restoreScript(dest);
        } else if (nodeName === 'object') {
            if (dest.parentNode) {
                dest.outerHTML = src.outerHTML;
            }
            if (jQuery.support.html5Clone && src.innerHTML && !jQuery.trim(dest.innerHTML)) {
                dest.innerHTML = src.innerHTML;
            }
        } else if (nodeName === 'input' && manipulation_rcheckableType.test(src.type)) {
            dest.defaultChecked = dest.checked = src.checked;
            if (dest.value !== src.value) {
                dest.value = src.value;
            }
        } else if (nodeName === 'option') {
            dest.defaultSelected = dest.selected = src.defaultSelected;
        } else if (nodeName === 'input' || nodeName === 'textarea') {
            dest.defaultValue = src.defaultValue;
        }
    }
    jQuery.each({
        appendTo: 'append',
        prependTo: 'prepend',
        insertBefore: 'before',
        insertAfter: 'after',
        replaceAll: 'replaceWith'
    }, function (name, original) {
        jQuery.fn[name] = function (selector) {
            var elems, i = 0, ret = [], insert = jQuery(selector), last = insert.length - 1;
            for (; i <= last; i++) {
                elems = i === last ? this : this.clone(true);
                jQuery(insert[i])[original](elems);
                core_push.apply(ret, elems.get());
            }
            return this.pushStack(ret);
        };
    });
    function getAll(context, tag) {
        var elems, elem, i = 0, found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName(tag || '*') : typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll(tag || '*') : undefined;
        if (!found) {
            for (found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++) {
                if (!tag || jQuery.nodeName(elem, tag)) {
                    found.push(elem);
                } else {
                    jQuery.merge(found, getAll(elem, tag));
                }
            }
        }
        return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], found) : found;
    }
    function fixDefaultChecked(elem) {
        if (manipulation_rcheckableType.test(elem.type)) {
            elem.defaultChecked = elem.checked;
        }
    }
    jQuery.extend({
        clone: function (elem, dataAndEvents, deepDataAndEvents) {
            var destElements, node, clone, i, srcElements, inPage = jQuery.contains(elem.ownerDocument, elem);
            if (jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test('<' + elem.nodeName + '>')) {
                clone = elem.cloneNode(true);
            } else {
                fragmentDiv.innerHTML = elem.outerHTML;
                fragmentDiv.removeChild(clone = fragmentDiv.firstChild);
            }
            if ((!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
                destElements = getAll(clone);
                srcElements = getAll(elem);
                for (i = 0; (node = srcElements[i]) != null; ++i) {
                    if (destElements[i]) {
                        fixCloneNodeIssues(node, destElements[i]);
                    }
                }
            }
            if (dataAndEvents) {
                if (deepDataAndEvents) {
                    srcElements = srcElements || getAll(elem);
                    destElements = destElements || getAll(clone);
                    for (i = 0; (node = srcElements[i]) != null; i++) {
                        cloneCopyEvent(node, destElements[i]);
                    }
                } else {
                    cloneCopyEvent(elem, clone);
                }
            }
            destElements = getAll(clone, 'script');
            if (destElements.length > 0) {
                setGlobalEval(destElements, !inPage && getAll(elem, 'script'));
            }
            destElements = srcElements = node = null;
            return clone;
        },
        buildFragment: function (elems, context, scripts, selection) {
            var j, elem, contains, tmp, tag, tbody, wrap, l = elems.length, safe = createSafeFragment(context), nodes = [], i = 0;
            for (; i < l; i++) {
                elem = elems[i];
                if (elem || elem === 0) {
                    if (jQuery.type(elem) === 'object') {
                        jQuery.merge(nodes, elem.nodeType ? [elem] : elem);
                    } else if (!rhtml.test(elem)) {
                        nodes.push(context.createTextNode(elem));
                    } else {
                        tmp = tmp || safe.appendChild(context.createElement('div'));
                        tag = (rtagName.exec(elem) || [
                            '',
                            ''
                        ])[1].toLowerCase();
                        wrap = wrapMap[tag] || wrapMap._default;
                        tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, '<$1></$2>') + wrap[2];
                        j = wrap[0];
                        while (j--) {
                            tmp = tmp.lastChild;
                        }
                        if (!jQuery.support.leadingWhitespace && rleadingWhitespace.test(elem)) {
                            nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));
                        }
                        if (!jQuery.support.tbody) {
                            elem = tag === 'table' && !rtbody.test(elem) ? tmp.firstChild : wrap[1] === '<table>' && !rtbody.test(elem) ? tmp : 0;
                            j = elem && elem.childNodes.length;
                            while (j--) {
                                if (jQuery.nodeName(tbody = elem.childNodes[j], 'tbody') && !tbody.childNodes.length) {
                                    elem.removeChild(tbody);
                                }
                            }
                        }
                        jQuery.merge(nodes, tmp.childNodes);
                        tmp.textContent = '';
                        while (tmp.firstChild) {
                            tmp.removeChild(tmp.firstChild);
                        }
                        tmp = safe.lastChild;
                    }
                }
            }
            if (tmp) {
                safe.removeChild(tmp);
            }
            if (!jQuery.support.appendChecked) {
                jQuery.grep(getAll(nodes, 'input'), fixDefaultChecked);
            }
            i = 0;
            while (elem = nodes[i++]) {
                if (selection && jQuery.inArray(elem, selection) !== -1) {
                    continue;
                }
                contains = jQuery.contains(elem.ownerDocument, elem);
                tmp = getAll(safe.appendChild(elem), 'script');
                if (contains) {
                    setGlobalEval(tmp);
                }
                if (scripts) {
                    j = 0;
                    while (elem = tmp[j++]) {
                        if (rscriptType.test(elem.type || '')) {
                            scripts.push(elem);
                        }
                    }
                }
            }
            tmp = null;
            return safe;
        },
        cleanData: function (elems, acceptData) {
            var elem, type, id, data, i = 0, internalKey = jQuery.expando, cache = jQuery.cache, deleteExpando = jQuery.support.deleteExpando, special = jQuery.event.special;
            for (; (elem = elems[i]) != null; i++) {
                if (acceptData || jQuery.acceptData(elem)) {
                    id = elem[internalKey];
                    data = id && cache[id];
                    if (data) {
                        if (data.events) {
                            for (type in data.events) {
                                if (special[type]) {
                                    jQuery.event.remove(elem, type);
                                } else {
                                    jQuery.removeEvent(elem, type, data.handle);
                                }
                            }
                        }
                        if (cache[id]) {
                            delete cache[id];
                            if (deleteExpando) {
                                delete elem[internalKey];
                            } else if (typeof elem.removeAttribute !== core_strundefined) {
                                elem.removeAttribute(internalKey);
                            } else {
                                elem[internalKey] = null;
                            }
                            core_deletedIds.push(id);
                        }
                    }
                }
            }
        }
    });
    var iframe, getStyles, curCSS, ralpha = /alpha\([^)]*\)/i, ropacity = /opacity\s*=\s*([^)]*)/, rposition = /^(top|right|bottom|left)$/, rdisplayswap = /^(none|table(?!-c[ea]).+)/, rmargin = /^margin/, rnumsplit = new RegExp('^(' + core_pnum + ')(.*)$', 'i'), rnumnonpx = new RegExp('^(' + core_pnum + ')(?!px)[a-z%]+$', 'i'), rrelNum = new RegExp('^([+-])=(' + core_pnum + ')', 'i'), elemdisplay = { BODY: 'block' }, cssShow = {
            position: 'absolute',
            visibility: 'hidden',
            display: 'block'
        }, cssNormalTransform = {
            letterSpacing: 0,
            fontWeight: 400
        }, cssExpand = [
            'Top',
            'Right',
            'Bottom',
            'Left'
        ], cssPrefixes = [
            'Webkit',
            'O',
            'Moz',
            'ms'
        ];
    function vendorPropName(style, name) {
        if (name in style) {
            return name;
        }
        var capName = name.charAt(0).toUpperCase() + name.slice(1), origName = name, i = cssPrefixes.length;
        while (i--) {
            name = cssPrefixes[i] + capName;
            if (name in style) {
                return name;
            }
        }
        return origName;
    }
    function isHidden(elem, el) {
        elem = el || elem;
        return jQuery.css(elem, 'display') === 'none' || !jQuery.contains(elem.ownerDocument, elem);
    }
    function showHide(elements, show) {
        var display, elem, hidden, values = [], index = 0, length = elements.length;
        for (; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            values[index] = jQuery._data(elem, 'olddisplay');
            display = elem.style.display;
            if (show) {
                if (!values[index] && display === 'none') {
                    elem.style.display = '';
                }
                if (elem.style.display === '' && isHidden(elem)) {
                    values[index] = jQuery._data(elem, 'olddisplay', css_defaultDisplay(elem.nodeName));
                }
            } else {
                if (!values[index]) {
                    hidden = isHidden(elem);
                    if (display && display !== 'none' || !hidden) {
                        jQuery._data(elem, 'olddisplay', hidden ? display : jQuery.css(elem, 'display'));
                    }
                }
            }
        }
        for (index = 0; index < length; index++) {
            elem = elements[index];
            if (!elem.style) {
                continue;
            }
            if (!show || elem.style.display === 'none' || elem.style.display === '') {
                elem.style.display = show ? values[index] || '' : 'none';
            }
        }
        return elements;
    }
    jQuery.fn.extend({
        css: function (name, value) {
            return jQuery.access(this, function (elem, name, value) {
                var len, styles, map = {}, i = 0;
                if (jQuery.isArray(name)) {
                    styles = getStyles(elem);
                    len = name.length;
                    for (; i < len; i++) {
                        map[name[i]] = jQuery.css(elem, name[i], false, styles);
                    }
                    return map;
                }
                return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
            }, name, value, arguments.length > 1);
        },
        show: function () {
            return showHide(this, true);
        },
        hide: function () {
            return showHide(this);
        },
        toggle: function (state) {
            var bool = typeof state === 'boolean';
            return this.each(function () {
                if (bool ? state : isHidden(this)) {
                    jQuery(this).show();
                } else {
                    jQuery(this).hide();
                }
            });
        }
    });
    jQuery.extend({
        cssHooks: {
            opacity: {
                get: function (elem, computed) {
                    if (computed) {
                        var ret = curCSS(elem, 'opacity');
                        return ret === '' ? '1' : ret;
                    }
                }
            }
        },
        cssNumber: {
            columnCount: true,
            fillOpacity: true,
            fontWeight: true,
            lineHeight: true,
            opacity: true,
            orphans: true,
            widows: true,
            zIndex: true,
            zoom: true
        },
        cssProps: { 'float': jQuery.support.cssFloat ? 'cssFloat' : 'styleFloat' },
        style: function (elem, name, value, extra) {
            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
                return;
            }
            var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (value !== undefined) {
                type = typeof value;
                if (type === 'string' && (ret = rrelNum.exec(value))) {
                    value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
                    type = 'number';
                }
                if (value == null || type === 'number' && isNaN(value)) {
                    return;
                }
                if (type === 'number' && !jQuery.cssNumber[origName]) {
                    value += 'px';
                }
                if (!jQuery.support.clearCloneStyle && value === '' && name.indexOf('background') === 0) {
                    style[name] = 'inherit';
                }
                if (!hooks || !('set' in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
                    try {
                        style[name] = value;
                    } catch (e) {
                    }
                }
            } else {
                if (hooks && 'get' in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
                    return ret;
                }
                return style[name];
            }
        },
        css: function (elem, name, extra, styles) {
            var num, val, hooks, origName = jQuery.camelCase(name);
            name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
            if (hooks && 'get' in hooks) {
                val = hooks.get(elem, true, extra);
            }
            if (val === undefined) {
                val = curCSS(elem, name, styles);
            }
            if (val === 'normal' && name in cssNormalTransform) {
                val = cssNormalTransform[name];
            }
            if (extra === '' || extra) {
                num = parseFloat(val);
                return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
            }
            return val;
        },
        swap: function (elem, options, callback, args) {
            var ret, name, old = {};
            for (name in options) {
                old[name] = elem.style[name];
                elem.style[name] = options[name];
            }
            ret = callback.apply(elem, args || []);
            for (name in options) {
                elem.style[name] = old[name];
            }
            return ret;
        }
    });
    if (window.getComputedStyle) {
        getStyles = function (elem) {
            return window.getComputedStyle(elem, null);
        };
        curCSS = function (elem, name, _computed) {
            var width, minWidth, maxWidth, computed = _computed || getStyles(elem), ret = computed ? computed.getPropertyValue(name) || computed[name] : undefined, style = elem.style;
            if (computed) {
                if (ret === '' && !jQuery.contains(elem.ownerDocument, elem)) {
                    ret = jQuery.style(elem, name);
                }
                if (rnumnonpx.test(ret) && rmargin.test(name)) {
                    width = style.width;
                    minWidth = style.minWidth;
                    maxWidth = style.maxWidth;
                    style.minWidth = style.maxWidth = style.width = ret;
                    ret = computed.width;
                    style.width = width;
                    style.minWidth = minWidth;
                    style.maxWidth = maxWidth;
                }
            }
            return ret;
        };
    } else if (document.documentElement.currentStyle) {
        getStyles = function (elem) {
            return elem.currentStyle;
        };
        curCSS = function (elem, name, _computed) {
            var left, rs, rsLeft, computed = _computed || getStyles(elem), ret = computed ? computed[name] : undefined, style = elem.style;
            if (ret == null && style && style[name]) {
                ret = style[name];
            }
            if (rnumnonpx.test(ret) && !rposition.test(name)) {
                left = style.left;
                rs = elem.runtimeStyle;
                rsLeft = rs && rs.left;
                if (rsLeft) {
                    rs.left = elem.currentStyle.left;
                }
                style.left = name === 'fontSize' ? '1em' : ret;
                ret = style.pixelLeft + 'px';
                style.left = left;
                if (rsLeft) {
                    rs.left = rsLeft;
                }
            }
            return ret === '' ? 'auto' : ret;
        };
    }
    function setPositiveNumber(elem, value, subtract) {
        var matches = rnumsplit.exec(value);
        return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || 'px') : value;
    }
    function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
        var i = extra === (isBorderBox ? 'border' : 'content') ? 4 : name === 'width' ? 1 : 0, val = 0;
        for (; i < 4; i += 2) {
            if (extra === 'margin') {
                val += jQuery.css(elem, extra + cssExpand[i], true, styles);
            }
            if (isBorderBox) {
                if (extra === 'content') {
                    val -= jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
                }
                if (extra !== 'margin') {
                    val -= jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
                }
            } else {
                val += jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
                if (extra !== 'padding') {
                    val += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
                }
            }
        }
        return val;
    }
    function getWidthOrHeight(elem, name, extra) {
        var valueIsBorderBox = true, val = name === 'width' ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = jQuery.support.boxSizing && jQuery.css(elem, 'boxSizing', false, styles) === 'border-box';
        if (val <= 0 || val == null) {
            val = curCSS(elem, name, styles);
            if (val < 0 || val == null) {
                val = elem.style[name];
            }
            if (rnumnonpx.test(val)) {
                return val;
            }
            valueIsBorderBox = isBorderBox && (jQuery.support.boxSizingReliable || val === elem.style[name]);
            val = parseFloat(val) || 0;
        }
        return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? 'border' : 'content'), valueIsBorderBox, styles) + 'px';
    }
    function css_defaultDisplay(nodeName) {
        var doc = document, display = elemdisplay[nodeName];
        if (!display) {
            display = actualDisplay(nodeName, doc);
            if (display === 'none' || !display) {
                iframe = (iframe || jQuery('<iframe frameborder=\'0\' width=\'0\' height=\'0\'/>').css('cssText', 'display:block !important')).appendTo(doc.documentElement);
                doc = (iframe[0].contentWindow || iframe[0].contentDocument).document;
                doc.write('<!doctype html><html><body>');
                doc.close();
                display = actualDisplay(nodeName, doc);
                iframe.detach();
            }
            elemdisplay[nodeName] = display;
        }
        return display;
    }
    function actualDisplay(name, doc) {
        var elem = jQuery(doc.createElement(name)).appendTo(doc.body), display = jQuery.css(elem[0], 'display');
        elem.remove();
        return display;
    }
    jQuery.each([
        'height',
        'width'
    ], function (i, name) {
        jQuery.cssHooks[name] = {
            get: function (elem, computed, extra) {
                if (computed) {
                    return elem.offsetWidth === 0 && rdisplayswap.test(jQuery.css(elem, 'display')) ? jQuery.swap(elem, cssShow, function () {
                        return getWidthOrHeight(elem, name, extra);
                    }) : getWidthOrHeight(elem, name, extra);
                }
            },
            set: function (elem, value, extra) {
                var styles = extra && getStyles(elem);
                return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.support.boxSizing && jQuery.css(elem, 'boxSizing', false, styles) === 'border-box', styles) : 0);
            }
        };
    });
    if (!jQuery.support.opacity) {
        jQuery.cssHooks.opacity = {
            get: function (elem, computed) {
                return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || '') ? 0.01 * parseFloat(RegExp.$1) + '' : computed ? '1' : '';
            },
            set: function (elem, value) {
                var style = elem.style, currentStyle = elem.currentStyle, opacity = jQuery.isNumeric(value) ? 'alpha(opacity=' + value * 100 + ')' : '', filter = currentStyle && currentStyle.filter || style.filter || '';
                style.zoom = 1;
                if ((value >= 1 || value === '') && jQuery.trim(filter.replace(ralpha, '')) === '' && style.removeAttribute) {
                    style.removeAttribute('filter');
                    if (value === '' || currentStyle && !currentStyle.filter) {
                        return;
                    }
                }
                style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : filter + ' ' + opacity;
            }
        };
    }
    jQuery(function () {
        if (!jQuery.support.reliableMarginRight) {
            jQuery.cssHooks.marginRight = {
                get: function (elem, computed) {
                    if (computed) {
                        return jQuery.swap(elem, { display: 'inline-block' }, curCSS, [
                            elem,
                            'marginRight'
                        ]);
                    }
                }
            };
        }
        if (!jQuery.support.pixelPosition && jQuery.fn.position) {
            jQuery.each([
                'top',
                'left'
            ], function (i, prop) {
                jQuery.cssHooks[prop] = {
                    get: function (elem, computed) {
                        if (computed) {
                            computed = curCSS(elem, prop);
                            return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + 'px' : computed;
                        }
                    }
                };
            });
        }
    });
    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.hidden = function (elem) {
            return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 || !jQuery.support.reliableHiddenOffsets && (elem.style && elem.style.display || jQuery.css(elem, 'display')) === 'none';
        };
        jQuery.expr.filters.visible = function (elem) {
            return !jQuery.expr.filters.hidden(elem);
        };
    }
    jQuery.each({
        margin: '',
        padding: '',
        border: 'Width'
    }, function (prefix, suffix) {
        jQuery.cssHooks[prefix + suffix] = {
            expand: function (value) {
                var i = 0, expanded = {}, parts = typeof value === 'string' ? value.split(' ') : [value];
                for (; i < 4; i++) {
                    expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
                }
                return expanded;
            }
        };
        if (!rmargin.test(prefix)) {
            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
        }
    });
    var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
    jQuery.fn.extend({
        serialize: function () {
            return jQuery.param(this.serializeArray());
        },
        serializeArray: function () {
            return this.map(function () {
                var elements = jQuery.prop(this, 'elements');
                return elements ? jQuery.makeArray(elements) : this;
            }).filter(function () {
                var type = this.type;
                return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !manipulation_rcheckableType.test(type));
            }).map(function (i, elem) {
                var val = jQuery(this).val();
                return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
                    return {
                        name: elem.name,
                        value: val.replace(rCRLF, '\r\n')
                    };
                }) : {
                    name: elem.name,
                    value: val.replace(rCRLF, '\r\n')
                };
            }).get();
        }
    });
    jQuery.param = function (a, traditional) {
        var prefix, s = [], add = function (key, value) {
                value = jQuery.isFunction(value) ? value() : value == null ? '' : value;
                s[s.length] = encodeURIComponent(key) + '=' + encodeURIComponent(value);
            };
        if (traditional === undefined) {
            traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
        }
        if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
            jQuery.each(a, function () {
                add(this.name, this.value);
            });
        } else {
            for (prefix in a) {
                buildParams(prefix, a[prefix], traditional, add);
            }
        }
        return s.join('&').replace(r20, '+');
    };
    function buildParams(prefix, obj, traditional, add) {
        var name;
        if (jQuery.isArray(obj)) {
            jQuery.each(obj, function (i, v) {
                if (traditional || rbracket.test(prefix)) {
                    add(prefix, v);
                } else {
                    buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add);
                }
            });
        } else if (!traditional && jQuery.type(obj) === 'object') {
            for (name in obj) {
                buildParams(prefix + '[' + name + ']', obj[name], traditional, add);
            }
        } else {
            add(prefix, obj);
        }
    }
    jQuery.each(('blur focus focusin focusout load resize scroll unload click dblclick ' + 'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' + 'change select submit keydown keypress keyup error contextmenu').split(' '), function (i, name) {
        jQuery.fn[name] = function (data, fn) {
            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
        };
    });
    jQuery.fn.hover = function (fnOver, fnOut) {
        return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    };
    var ajaxLocParts, ajaxLocation, ajax_nonce = jQuery.now(), ajax_rquery = /\?/, rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/gm, rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/, _load = jQuery.fn.load, prefilters = {}, transports = {}, allTypes = '*/'.concat('*');
    try {
        ajaxLocation = location.href;
    } catch (e) {
        ajaxLocation = document.createElement('a');
        ajaxLocation.href = '';
        ajaxLocation = ajaxLocation.href;
    }
    ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
    function addToPrefiltersOrTransports(structure) {
        return function (dataTypeExpression, func) {
            if (typeof dataTypeExpression !== 'string') {
                func = dataTypeExpression;
                dataTypeExpression = '*';
            }
            var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(core_rnotwhite) || [];
            if (jQuery.isFunction(func)) {
                while (dataType = dataTypes[i++]) {
                    if (dataType[0] === '+') {
                        dataType = dataType.slice(1) || '*';
                        (structure[dataType] = structure[dataType] || []).unshift(func);
                    } else {
                        (structure[dataType] = structure[dataType] || []).push(func);
                    }
                }
            }
        };
    }
    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
        var inspected = {}, seekingTransport = structure === transports;
        function inspect(dataType) {
            var selected;
            inspected[dataType] = true;
            jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
                if (typeof dataTypeOrTransport === 'string' && !seekingTransport && !inspected[dataTypeOrTransport]) {
                    options.dataTypes.unshift(dataTypeOrTransport);
                    inspect(dataTypeOrTransport);
                    return false;
                } else if (seekingTransport) {
                    return !(selected = dataTypeOrTransport);
                }
            });
            return selected;
        }
        return inspect(options.dataTypes[0]) || !inspected['*'] && inspect('*');
    }
    function ajaxExtend(target, src) {
        var deep, key, flatOptions = jQuery.ajaxSettings.flatOptions || {};
        for (key in src) {
            if (src[key] !== undefined) {
                (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
            }
        }
        if (deep) {
            jQuery.extend(true, target, deep);
        }
        return target;
    }
    jQuery.fn.load = function (url, params, callback) {
        if (typeof url !== 'string' && _load) {
            return _load.apply(this, arguments);
        }
        var selector, response, type, self = this, off = url.indexOf(' ');
        if (off >= 0) {
            selector = url.slice(off, url.length);
            url = url.slice(0, off);
        }
        if (jQuery.isFunction(params)) {
            callback = params;
            params = undefined;
        } else if (params && typeof params === 'object') {
            type = 'POST';
        }
        if (self.length > 0) {
            jQuery.ajax({
                url: url,
                type: type,
                dataType: 'html',
                data: params
            }).done(function (responseText) {
                response = arguments;
                self.html(selector ? jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector) : responseText);
            }).complete(callback && function (jqXHR, status) {
                self.each(callback, response || [
                    jqXHR.responseText,
                    status,
                    jqXHR
                ]);
            });
        }
        return this;
    };
    jQuery.each([
        'ajaxStart',
        'ajaxStop',
        'ajaxComplete',
        'ajaxError',
        'ajaxSuccess',
        'ajaxSend'
    ], function (i, type) {
        jQuery.fn[type] = function (fn) {
            return this.on(type, fn);
        };
    });
    jQuery.each([
        'get',
        'post'
    ], function (i, method) {
        jQuery[method] = function (url, data, callback, type) {
            if (jQuery.isFunction(data)) {
                type = type || callback;
                callback = data;
                data = undefined;
            }
            return jQuery.ajax({
                url: url,
                type: method,
                dataType: type,
                data: data,
                success: callback
            });
        };
    });
    jQuery.extend({
        active: 0,
        lastModified: {},
        etag: {},
        ajaxSettings: {
            url: ajaxLocation,
            type: 'GET',
            isLocal: rlocalProtocol.test(ajaxLocParts[1]),
            global: true,
            processData: true,
            async: true,
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            accepts: {
                '*': allTypes,
                text: 'text/plain',
                html: 'text/html',
                xml: 'application/xml, text/xml',
                json: 'application/json, text/javascript'
            },
            contents: {
                xml: /xml/,
                html: /html/,
                json: /json/
            },
            responseFields: {
                xml: 'responseXML',
                text: 'responseText'
            },
            converters: {
                '* text': window.String,
                'text html': true,
                'text json': jQuery.parseJSON,
                'text xml': jQuery.parseXML
            },
            flatOptions: {
                url: true,
                context: true
            }
        },
        ajaxSetup: function (target, settings) {
            return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
        },
        ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
        ajaxTransport: addToPrefiltersOrTransports(transports),
        ajax: function (url, options) {
            if (typeof url === 'object') {
                options = url;
                url = undefined;
            }
            options = options || {};
            var parts, i, cacheURL, responseHeadersString, timeoutTimer, fireGlobals, transport, responseHeaders, s = jQuery.ajaxSetup({}, options), callbackContext = s.context || s, globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event, deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks('once memory'), statusCode = s.statusCode || {}, requestHeaders = {}, requestHeadersNames = {}, state = 0, strAbort = 'canceled', jqXHR = {
                    readyState: 0,
                    getResponseHeader: function (key) {
                        var match;
                        if (state === 2) {
                            if (!responseHeaders) {
                                responseHeaders = {};
                                while (match = rheaders.exec(responseHeadersString)) {
                                    responseHeaders[match[1].toLowerCase()] = match[2];
                                }
                            }
                            match = responseHeaders[key.toLowerCase()];
                        }
                        return match == null ? null : match;
                    },
                    getAllResponseHeaders: function () {
                        return state === 2 ? responseHeadersString : null;
                    },
                    setRequestHeader: function (name, value) {
                        var lname = name.toLowerCase();
                        if (!state) {
                            name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
                            requestHeaders[name] = value;
                        }
                        return this;
                    },
                    overrideMimeType: function (type) {
                        if (!state) {
                            s.mimeType = type;
                        }
                        return this;
                    },
                    statusCode: function (map) {
                        var code;
                        if (map) {
                            if (state < 2) {
                                for (code in map) {
                                    statusCode[code] = [
                                        statusCode[code],
                                        map[code]
                                    ];
                                }
                            } else {
                                jqXHR.always(map[jqXHR.status]);
                            }
                        }
                        return this;
                    },
                    abort: function (statusText) {
                        var finalText = statusText || strAbort;
                        if (transport) {
                            transport.abort(finalText);
                        }
                        done(0, finalText);
                        return this;
                    }
                };
            deferred.promise(jqXHR).complete = completeDeferred.add;
            jqXHR.success = jqXHR.done;
            jqXHR.error = jqXHR.fail;
            s.url = ((url || s.url || ajaxLocation) + '').replace(rhash, '').replace(rprotocol, ajaxLocParts[1] + '//');
            s.type = options.method || options.type || s.method || s.type;
            s.dataTypes = jQuery.trim(s.dataType || '*').toLowerCase().match(core_rnotwhite) || [''];
            if (s.crossDomain == null) {
                parts = rurl.exec(s.url.toLowerCase());
                s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === 'http:' ? 80 : 443)) != (ajaxLocParts[3] || (ajaxLocParts[1] === 'http:' ? 80 : 443))));
            }
            if (s.data && s.processData && typeof s.data !== 'string') {
                s.data = jQuery.param(s.data, s.traditional);
            }
            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
            if (state === 2) {
                return jqXHR;
            }
            fireGlobals = s.global;
            if (fireGlobals && jQuery.active++ === 0) {
                jQuery.event.trigger('ajaxStart');
            }
            s.type = s.type.toUpperCase();
            s.hasContent = !rnoContent.test(s.type);
            cacheURL = s.url;
            if (!s.hasContent) {
                if (s.data) {
                    cacheURL = s.url += (ajax_rquery.test(cacheURL) ? '&' : '?') + s.data;
                    delete s.data;
                }
                if (s.cache === false) {
                    s.url = rts.test(cacheURL) ? cacheURL.replace(rts, '$1_=' + ajax_nonce++) : cacheURL + (ajax_rquery.test(cacheURL) ? '&' : '?') + '_=' + ajax_nonce++;
                }
            }
            if (s.ifModified) {
                if (jQuery.lastModified[cacheURL]) {
                    jqXHR.setRequestHeader('If-Modified-Since', jQuery.lastModified[cacheURL]);
                }
                if (jQuery.etag[cacheURL]) {
                    jqXHR.setRequestHeader('If-None-Match', jQuery.etag[cacheURL]);
                }
            }
            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
                jqXHR.setRequestHeader('Content-Type', s.contentType);
            }
            jqXHR.setRequestHeader('Accept', s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== '*' ? ', ' + allTypes + '; q=0.01' : '') : s.accepts['*']);
            for (i in s.headers) {
                jqXHR.setRequestHeader(i, s.headers[i]);
            }
            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
                return jqXHR.abort();
            }
            strAbort = 'abort';
            for (i in {
                    success: 1,
                    error: 1,
                    complete: 1
                }) {
                jqXHR[i](s[i]);
            }
            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
            if (!transport) {
                done(-1, 'No Transport');
            } else {
                jqXHR.readyState = 1;
                if (fireGlobals) {
                    globalEventContext.trigger('ajaxSend', [
                        jqXHR,
                        s
                    ]);
                }
                if (s.async && s.timeout > 0) {
                    timeoutTimer = setTimeout(function () {
                        jqXHR.abort('timeout');
                    }, s.timeout);
                }
                try {
                    state = 1;
                    transport.send(requestHeaders, done);
                } catch (e) {
                    if (state < 2) {
                        done(-1, e);
                    } else {
                        throw e;
                    }
                }
            }
            function done(status, nativeStatusText, responses, headers) {
                var isSuccess, success, error, response, modified, statusText = nativeStatusText;
                if (state === 2) {
                    return;
                }
                state = 2;
                if (timeoutTimer) {
                    clearTimeout(timeoutTimer);
                }
                transport = undefined;
                responseHeadersString = headers || '';
                jqXHR.readyState = status > 0 ? 4 : 0;
                if (responses) {
                    response = ajaxHandleResponses(s, jqXHR, responses);
                }
                if (status >= 200 && status < 300 || status === 304) {
                    if (s.ifModified) {
                        modified = jqXHR.getResponseHeader('Last-Modified');
                        if (modified) {
                            jQuery.lastModified[cacheURL] = modified;
                        }
                        modified = jqXHR.getResponseHeader('etag');
                        if (modified) {
                            jQuery.etag[cacheURL] = modified;
                        }
                    }
                    if (status === 204) {
                        isSuccess = true;
                        statusText = 'nocontent';
                    } else if (status === 304) {
                        isSuccess = true;
                        statusText = 'notmodified';
                    } else {
                        isSuccess = ajaxConvert(s, response);
                        statusText = isSuccess.state;
                        success = isSuccess.data;
                        error = isSuccess.error;
                        isSuccess = !error;
                    }
                } else {
                    error = statusText;
                    if (status || !statusText) {
                        statusText = 'error';
                        if (status < 0) {
                            status = 0;
                        }
                    }
                }
                jqXHR.status = status;
                jqXHR.statusText = (nativeStatusText || statusText) + '';
                if (isSuccess) {
                    deferred.resolveWith(callbackContext, [
                        success,
                        statusText,
                        jqXHR
                    ]);
                } else {
                    deferred.rejectWith(callbackContext, [
                        jqXHR,
                        statusText,
                        error
                    ]);
                }
                jqXHR.statusCode(statusCode);
                statusCode = undefined;
                if (fireGlobals) {
                    globalEventContext.trigger(isSuccess ? 'ajaxSuccess' : 'ajaxError', [
                        jqXHR,
                        s,
                        isSuccess ? success : error
                    ]);
                }
                completeDeferred.fireWith(callbackContext, [
                    jqXHR,
                    statusText
                ]);
                if (fireGlobals) {
                    globalEventContext.trigger('ajaxComplete', [
                        jqXHR,
                        s
                    ]);
                    if (!--jQuery.active) {
                        jQuery.event.trigger('ajaxStop');
                    }
                }
            }
            return jqXHR;
        },
        getScript: function (url, callback) {
            return jQuery.get(url, undefined, callback, 'script');
        },
        getJSON: function (url, data, callback) {
            return jQuery.get(url, data, callback, 'json');
        }
    });
    function ajaxHandleResponses(s, jqXHR, responses) {
        var firstDataType, ct, finalDataType, type, contents = s.contents, dataTypes = s.dataTypes, responseFields = s.responseFields;
        for (type in responseFields) {
            if (type in responses) {
                jqXHR[responseFields[type]] = responses[type];
            }
        }
        while (dataTypes[0] === '*') {
            dataTypes.shift();
            if (ct === undefined) {
                ct = s.mimeType || jqXHR.getResponseHeader('Content-Type');
            }
        }
        if (ct) {
            for (type in contents) {
                if (contents[type] && contents[type].test(ct)) {
                    dataTypes.unshift(type);
                    break;
                }
            }
        }
        if (dataTypes[0] in responses) {
            finalDataType = dataTypes[0];
        } else {
            for (type in responses) {
                if (!dataTypes[0] || s.converters[type + ' ' + dataTypes[0]]) {
                    finalDataType = type;
                    break;
                }
                if (!firstDataType) {
                    firstDataType = type;
                }
            }
            finalDataType = finalDataType || firstDataType;
        }
        if (finalDataType) {
            if (finalDataType !== dataTypes[0]) {
                dataTypes.unshift(finalDataType);
            }
            return responses[finalDataType];
        }
    }
    function ajaxConvert(s, response) {
        var conv2, current, conv, tmp, converters = {}, i = 0, dataTypes = s.dataTypes.slice(), prev = dataTypes[0];
        if (s.dataFilter) {
            response = s.dataFilter(response, s.dataType);
        }
        if (dataTypes[1]) {
            for (conv in s.converters) {
                converters[conv.toLowerCase()] = s.converters[conv];
            }
        }
        for (; current = dataTypes[++i];) {
            if (current !== '*') {
                if (prev !== '*' && prev !== current) {
                    conv = converters[prev + ' ' + current] || converters['* ' + current];
                    if (!conv) {
                        for (conv2 in converters) {
                            tmp = conv2.split(' ');
                            if (tmp[1] === current) {
                                conv = converters[prev + ' ' + tmp[0]] || converters['* ' + tmp[0]];
                                if (conv) {
                                    if (conv === true) {
                                        conv = converters[conv2];
                                    } else if (converters[conv2] !== true) {
                                        current = tmp[0];
                                        dataTypes.splice(i--, 0, current);
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    if (conv !== true) {
                        if (conv && s['throws']) {
                            response = conv(response);
                        } else {
                            try {
                                response = conv(response);
                            } catch (e) {
                                return {
                                    state: 'parsererror',
                                    error: conv ? e : 'No conversion from ' + prev + ' to ' + current
                                };
                            }
                        }
                    }
                }
                prev = current;
            }
        }
        return {
            state: 'success',
            data: response
        };
    }
    jQuery.ajaxSetup({
        accepts: { script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript' },
        contents: { script: /(?:java|ecma)script/ },
        converters: {
            'text script': function (text) {
                jQuery.globalEval(text);
                return text;
            }
        }
    });
    jQuery.ajaxPrefilter('script', function (s) {
        if (s.cache === undefined) {
            s.cache = false;
        }
        if (s.crossDomain) {
            s.type = 'GET';
            s.global = false;
        }
    });
    jQuery.ajaxTransport('script', function (s) {
        if (s.crossDomain) {
            var script, head = document.head || jQuery('head')[0] || document.documentElement;
            return {
                send: function (_, callback) {
                    script = document.createElement('script');
                    script.async = true;
                    if (s.scriptCharset) {
                        script.charset = s.scriptCharset;
                    }
                    script.src = s.url;
                    script.onload = script.onreadystatechange = function (_, isAbort) {
                        if (isAbort || !script.readyState || /loaded|complete/.test(script.readyState)) {
                            script.onload = script.onreadystatechange = null;
                            if (script.parentNode) {
                                script.parentNode.removeChild(script);
                            }
                            script = null;
                            if (!isAbort) {
                                callback(200, 'success');
                            }
                        }
                    };
                    head.insertBefore(script, head.firstChild);
                },
                abort: function () {
                    if (script) {
                        script.onload(undefined, true);
                    }
                }
            };
        }
    });
    var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
    jQuery.ajaxSetup({
        jsonp: 'callback',
        jsonpCallback: function () {
            var callback = oldCallbacks.pop() || jQuery.expando + '_' + ajax_nonce++;
            this[callback] = true;
            return callback;
        }
    });
    jQuery.ajaxPrefilter('json jsonp', function (s, originalSettings, jqXHR) {
        var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? 'url' : typeof s.data === 'string' && !(s.contentType || '').indexOf('application/x-www-form-urlencoded') && rjsonp.test(s.data) && 'data');
        if (jsonProp || s.dataTypes[0] === 'jsonp') {
            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
            if (jsonProp) {
                s[jsonProp] = s[jsonProp].replace(rjsonp, '$1' + callbackName);
            } else if (s.jsonp !== false) {
                s.url += (ajax_rquery.test(s.url) ? '&' : '?') + s.jsonp + '=' + callbackName;
            }
            s.converters['script json'] = function () {
                if (!responseContainer) {
                    jQuery.error(callbackName + ' was not called');
                }
                return responseContainer[0];
            };
            s.dataTypes[0] = 'json';
            overwritten = window[callbackName];
            window[callbackName] = function () {
                responseContainer = arguments;
            };
            jqXHR.always(function () {
                window[callbackName] = overwritten;
                if (s[callbackName]) {
                    s.jsonpCallback = originalSettings.jsonpCallback;
                    oldCallbacks.push(callbackName);
                }
                if (responseContainer && jQuery.isFunction(overwritten)) {
                    overwritten(responseContainer[0]);
                }
                responseContainer = overwritten = undefined;
            });
            return 'script';
        }
    });
    var xhrCallbacks, xhrSupported, xhrId = 0, xhrOnUnloadAbort = window.ActiveXObject && function () {
            var key;
            for (key in xhrCallbacks) {
                xhrCallbacks[key](undefined, true);
            }
        };
    function createStandardXHR() {
        try {
            return new window.XMLHttpRequest();
        } catch (e) {
        }
    }
    function createActiveXHR() {
        try {
            return new window.ActiveXObject('Microsoft.XMLHTTP');
        } catch (e) {
        }
    }
    jQuery.ajaxSettings.xhr = window.ActiveXObject ? function () {
        return !this.isLocal && createStandardXHR() || createActiveXHR();
    } : createStandardXHR;
    xhrSupported = jQuery.ajaxSettings.xhr();
    jQuery.support.cors = !!xhrSupported && 'withCredentials' in xhrSupported;
    xhrSupported = jQuery.support.ajax = !!xhrSupported;
    if (xhrSupported) {
        jQuery.ajaxTransport(function (s) {
            if (!s.crossDomain || jQuery.support.cors) {
                var callback;
                return {
                    send: function (headers, complete) {
                        var handle, i, xhr = s.xhr();
                        if (s.username) {
                            xhr.open(s.type, s.url, s.async, s.username, s.password);
                        } else {
                            xhr.open(s.type, s.url, s.async);
                        }
                        if (s.xhrFields) {
                            for (i in s.xhrFields) {
                                xhr[i] = s.xhrFields[i];
                            }
                        }
                        if (s.mimeType && xhr.overrideMimeType) {
                            xhr.overrideMimeType(s.mimeType);
                        }
                        if (!s.crossDomain && !headers['X-Requested-With']) {
                            headers['X-Requested-With'] = 'XMLHttpRequest';
                        }
                        try {
                            for (i in headers) {
                                xhr.setRequestHeader(i, headers[i]);
                            }
                        } catch (err) {
                        }
                        xhr.send(s.hasContent && s.data || null);
                        callback = function (_, isAbort) {
                            var status, responseHeaders, statusText, responses;
                            try {
                                if (callback && (isAbort || xhr.readyState === 4)) {
                                    callback = undefined;
                                    if (handle) {
                                        xhr.onreadystatechange = jQuery.noop;
                                        if (xhrOnUnloadAbort) {
                                            delete xhrCallbacks[handle];
                                        }
                                    }
                                    if (isAbort) {
                                        if (xhr.readyState !== 4) {
                                            xhr.abort();
                                        }
                                    } else {
                                        responses = {};
                                        status = xhr.status;
                                        responseHeaders = xhr.getAllResponseHeaders();
                                        if (typeof xhr.responseText === 'string') {
                                            responses.text = xhr.responseText;
                                        }
                                        try {
                                            statusText = xhr.statusText;
                                        } catch (e) {
                                            statusText = '';
                                        }
                                        if (!status && s.isLocal && !s.crossDomain) {
                                            status = responses.text ? 200 : 404;
                                        } else if (status === 1223) {
                                            status = 204;
                                        }
                                    }
                                }
                            } catch (firefoxAccessException) {
                                if (!isAbort) {
                                    complete(-1, firefoxAccessException);
                                }
                            }
                            if (responses) {
                                complete(status, statusText, responses, responseHeaders);
                            }
                        };
                        if (!s.async) {
                            callback();
                        } else if (xhr.readyState === 4) {
                            setTimeout(callback);
                        } else {
                            handle = ++xhrId;
                            if (xhrOnUnloadAbort) {
                                if (!xhrCallbacks) {
                                    xhrCallbacks = {};
                                    jQuery(window).unload(xhrOnUnloadAbort);
                                }
                                xhrCallbacks[handle] = callback;
                            }
                            xhr.onreadystatechange = callback;
                        }
                    },
                    abort: function () {
                        if (callback) {
                            callback(undefined, true);
                        }
                    }
                };
            }
        });
    }
    var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp('^(?:([+-])=|)(' + core_pnum + ')([a-z%]*)$', 'i'), rrun = /queueHooks$/, animationPrefilters = [defaultPrefilter], tweeners = {
            '*': [function (prop, value) {
                    var end, unit, tween = this.createTween(prop, value), parts = rfxnum.exec(value), target = tween.cur(), start = +target || 0, scale = 1, maxIterations = 20;
                    if (parts) {
                        end = +parts[2];
                        unit = parts[3] || (jQuery.cssNumber[prop] ? '' : 'px');
                        if (unit !== 'px' && start) {
                            start = jQuery.css(tween.elem, prop, true) || end || 1;
                            do {
                                scale = scale || '.5';
                                start = start / scale;
                                jQuery.style(tween.elem, prop, start + unit);
                            } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
                        }
                        tween.unit = unit;
                        tween.start = start;
                        tween.end = parts[1] ? start + (parts[1] + 1) * end : end;
                    }
                    return tween;
                }]
        };
    function createFxNow() {
        setTimeout(function () {
            fxNow = undefined;
        });
        return fxNow = jQuery.now();
    }
    function createTweens(animation, props) {
        jQuery.each(props, function (prop, value) {
            var collection = (tweeners[prop] || []).concat(tweeners['*']), index = 0, length = collection.length;
            for (; index < length; index++) {
                if (collection[index].call(animation, prop, value)) {
                    return;
                }
            }
        });
    }
    function Animation(elem, properties, options) {
        var result, stopped, index = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function () {
                delete tick.elem;
            }), tick = function () {
                if (stopped) {
                    return false;
                }
                var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime), temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
                for (; index < length; index++) {
                    animation.tweens[index].run(percent);
                }
                deferred.notifyWith(elem, [
                    animation,
                    percent,
                    remaining
                ]);
                if (percent < 1 && length) {
                    return remaining;
                } else {
                    deferred.resolveWith(elem, [animation]);
                    return false;
                }
            }, animation = deferred.promise({
                elem: elem,
                props: jQuery.extend({}, properties),
                opts: jQuery.extend(true, { specialEasing: {} }, options),
                originalProperties: properties,
                originalOptions: options,
                startTime: fxNow || createFxNow(),
                duration: options.duration,
                tweens: [],
                createTween: function (prop, end) {
                    var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
                    animation.tweens.push(tween);
                    return tween;
                },
                stop: function (gotoEnd) {
                    var index = 0, length = gotoEnd ? animation.tweens.length : 0;
                    if (stopped) {
                        return this;
                    }
                    stopped = true;
                    for (; index < length; index++) {
                        animation.tweens[index].run(1);
                    }
                    if (gotoEnd) {
                        deferred.resolveWith(elem, [
                            animation,
                            gotoEnd
                        ]);
                    } else {
                        deferred.rejectWith(elem, [
                            animation,
                            gotoEnd
                        ]);
                    }
                    return this;
                }
            }), props = animation.props;
        propFilter(props, animation.opts.specialEasing);
        for (; index < length; index++) {
            result = animationPrefilters[index].call(animation, elem, props, animation.opts);
            if (result) {
                return result;
            }
        }
        createTweens(animation, props);
        if (jQuery.isFunction(animation.opts.start)) {
            animation.opts.start.call(elem, animation);
        }
        jQuery.fx.timer(jQuery.extend(tick, {
            elem: elem,
            anim: animation,
            queue: animation.opts.queue
        }));
        return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
    }
    function propFilter(props, specialEasing) {
        var value, name, index, easing, hooks;
        for (index in props) {
            name = jQuery.camelCase(index);
            easing = specialEasing[name];
            value = props[index];
            if (jQuery.isArray(value)) {
                easing = value[1];
                value = props[index] = value[0];
            }
            if (index !== name) {
                props[name] = value;
                delete props[index];
            }
            hooks = jQuery.cssHooks[name];
            if (hooks && 'expand' in hooks) {
                value = hooks.expand(value);
                delete props[name];
                for (index in value) {
                    if (!(index in props)) {
                        props[index] = value[index];
                        specialEasing[index] = easing;
                    }
                }
            } else {
                specialEasing[name] = easing;
            }
        }
    }
    jQuery.Animation = jQuery.extend(Animation, {
        tweener: function (props, callback) {
            if (jQuery.isFunction(props)) {
                callback = props;
                props = ['*'];
            } else {
                props = props.split(' ');
            }
            var prop, index = 0, length = props.length;
            for (; index < length; index++) {
                prop = props[index];
                tweeners[prop] = tweeners[prop] || [];
                tweeners[prop].unshift(callback);
            }
        },
        prefilter: function (callback, prepend) {
            if (prepend) {
                animationPrefilters.unshift(callback);
            } else {
                animationPrefilters.push(callback);
            }
        }
    });
    function defaultPrefilter(elem, props, opts) {
        var prop, index, length, value, dataShow, toggle, tween, hooks, oldfire, anim = this, style = elem.style, orig = {}, handled = [], hidden = elem.nodeType && isHidden(elem);
        if (!opts.queue) {
            hooks = jQuery._queueHooks(elem, 'fx');
            if (hooks.unqueued == null) {
                hooks.unqueued = 0;
                oldfire = hooks.empty.fire;
                hooks.empty.fire = function () {
                    if (!hooks.unqueued) {
                        oldfire();
                    }
                };
            }
            hooks.unqueued++;
            anim.always(function () {
                anim.always(function () {
                    hooks.unqueued--;
                    if (!jQuery.queue(elem, 'fx').length) {
                        hooks.empty.fire();
                    }
                });
            });
        }
        if (elem.nodeType === 1 && ('height' in props || 'width' in props)) {
            opts.overflow = [
                style.overflow,
                style.overflowX,
                style.overflowY
            ];
            if (jQuery.css(elem, 'display') === 'inline' && jQuery.css(elem, 'float') === 'none') {
                if (!jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay(elem.nodeName) === 'inline') {
                    style.display = 'inline-block';
                } else {
                    style.zoom = 1;
                }
            }
        }
        if (opts.overflow) {
            style.overflow = 'hidden';
            if (!jQuery.support.shrinkWrapBlocks) {
                anim.always(function () {
                    style.overflow = opts.overflow[0];
                    style.overflowX = opts.overflow[1];
                    style.overflowY = opts.overflow[2];
                });
            }
        }
        for (index in props) {
            value = props[index];
            if (rfxtypes.exec(value)) {
                delete props[index];
                toggle = toggle || value === 'toggle';
                if (value === (hidden ? 'hide' : 'show')) {
                    continue;
                }
                handled.push(index);
            }
        }
        length = handled.length;
        if (length) {
            dataShow = jQuery._data(elem, 'fxshow') || jQuery._data(elem, 'fxshow', {});
            if ('hidden' in dataShow) {
                hidden = dataShow.hidden;
            }
            if (toggle) {
                dataShow.hidden = !hidden;
            }
            if (hidden) {
                jQuery(elem).show();
            } else {
                anim.done(function () {
                    jQuery(elem).hide();
                });
            }
            anim.done(function () {
                var prop;
                jQuery._removeData(elem, 'fxshow');
                for (prop in orig) {
                    jQuery.style(elem, prop, orig[prop]);
                }
            });
            for (index = 0; index < length; index++) {
                prop = handled[index];
                tween = anim.createTween(prop, hidden ? dataShow[prop] : 0);
                orig[prop] = dataShow[prop] || jQuery.style(elem, prop);
                if (!(prop in dataShow)) {
                    dataShow[prop] = tween.start;
                    if (hidden) {
                        tween.end = tween.start;
                        tween.start = prop === 'width' || prop === 'height' ? 1 : 0;
                    }
                }
            }
        }
    }
    function Tween(elem, options, prop, end, easing) {
        return new Tween.prototype.init(elem, options, prop, end, easing);
    }
    jQuery.Tween = Tween;
    Tween.prototype = {
        constructor: Tween,
        init: function (elem, options, prop, end, easing, unit) {
            this.elem = elem;
            this.prop = prop;
            this.easing = easing || 'swing';
            this.options = options;
            this.start = this.now = this.cur();
            this.end = end;
            this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px');
        },
        cur: function () {
            var hooks = Tween.propHooks[this.prop];
            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
        },
        run: function (percent) {
            var eased, hooks = Tween.propHooks[this.prop];
            if (this.options.duration) {
                this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
            } else {
                this.pos = eased = percent;
            }
            this.now = (this.end - this.start) * eased + this.start;
            if (this.options.step) {
                this.options.step.call(this.elem, this.now, this);
            }
            if (hooks && hooks.set) {
                hooks.set(this);
            } else {
                Tween.propHooks._default.set(this);
            }
            return this;
        }
    };
    Tween.prototype.init.prototype = Tween.prototype;
    Tween.propHooks = {
        _default: {
            get: function (tween) {
                var result;
                if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
                    return tween.elem[tween.prop];
                }
                result = jQuery.css(tween.elem, tween.prop, '');
                return !result || result === 'auto' ? 0 : result;
            },
            set: function (tween) {
                if (jQuery.fx.step[tween.prop]) {
                    jQuery.fx.step[tween.prop](tween);
                } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
                    jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
                } else {
                    tween.elem[tween.prop] = tween.now;
                }
            }
        }
    };
    Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
        set: function (tween) {
            if (tween.elem.nodeType && tween.elem.parentNode) {
                tween.elem[tween.prop] = tween.now;
            }
        }
    };
    jQuery.each([
        'toggle',
        'show',
        'hide'
    ], function (i, name) {
        var cssFn = jQuery.fn[name];
        jQuery.fn[name] = function (speed, easing, callback) {
            return speed == null || typeof speed === 'boolean' ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
        };
    });
    jQuery.fn.extend({
        fadeTo: function (speed, to, easing, callback) {
            return this.filter(isHidden).css('opacity', 0).show().end().animate({ opacity: to }, speed, easing, callback);
        },
        animate: function (prop, speed, easing, callback) {
            var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function () {
                    var anim = Animation(this, jQuery.extend({}, prop), optall);
                    doAnimation.finish = function () {
                        anim.stop(true);
                    };
                    if (empty || jQuery._data(this, 'finish')) {
                        anim.stop(true);
                    }
                };
            doAnimation.finish = doAnimation;
            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
        },
        stop: function (type, clearQueue, gotoEnd) {
            var stopQueue = function (hooks) {
                var stop = hooks.stop;
                delete hooks.stop;
                stop(gotoEnd);
            };
            if (typeof type !== 'string') {
                gotoEnd = clearQueue;
                clearQueue = type;
                type = undefined;
            }
            if (clearQueue && type !== false) {
                this.queue(type || 'fx', []);
            }
            return this.each(function () {
                var dequeue = true, index = type != null && type + 'queueHooks', timers = jQuery.timers, data = jQuery._data(this);
                if (index) {
                    if (data[index] && data[index].stop) {
                        stopQueue(data[index]);
                    }
                } else {
                    for (index in data) {
                        if (data[index] && data[index].stop && rrun.test(index)) {
                            stopQueue(data[index]);
                        }
                    }
                }
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
                        timers[index].anim.stop(gotoEnd);
                        dequeue = false;
                        timers.splice(index, 1);
                    }
                }
                if (dequeue || !gotoEnd) {
                    jQuery.dequeue(this, type);
                }
            });
        },
        finish: function (type) {
            if (type !== false) {
                type = type || 'fx';
            }
            return this.each(function () {
                var index, data = jQuery._data(this), queue = data[type + 'queue'], hooks = data[type + 'queueHooks'], timers = jQuery.timers, length = queue ? queue.length : 0;
                data.finish = true;
                jQuery.queue(this, type, []);
                if (hooks && hooks.cur && hooks.cur.finish) {
                    hooks.cur.finish.call(this);
                }
                for (index = timers.length; index--;) {
                    if (timers[index].elem === this && timers[index].queue === type) {
                        timers[index].anim.stop(true);
                        timers.splice(index, 1);
                    }
                }
                for (index = 0; index < length; index++) {
                    if (queue[index] && queue[index].finish) {
                        queue[index].finish.call(this);
                    }
                }
                delete data.finish;
            });
        }
    });
    function genFx(type, includeWidth) {
        var which, attrs = { height: type }, i = 0;
        includeWidth = includeWidth ? 1 : 0;
        for (; i < 4; i += 2 - includeWidth) {
            which = cssExpand[i];
            attrs['margin' + which] = attrs['padding' + which] = type;
        }
        if (includeWidth) {
            attrs.opacity = attrs.width = type;
        }
        return attrs;
    }
    jQuery.each({
        slideDown: genFx('show'),
        slideUp: genFx('hide'),
        slideToggle: genFx('toggle'),
        fadeIn: { opacity: 'show' },
        fadeOut: { opacity: 'hide' },
        fadeToggle: { opacity: 'toggle' }
    }, function (name, props) {
        jQuery.fn[name] = function (speed, easing, callback) {
            return this.animate(props, speed, easing, callback);
        };
    });
    jQuery.speed = function (speed, easing, fn) {
        var opt = speed && typeof speed === 'object' ? jQuery.extend({}, speed) : {
                complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
                duration: speed,
                easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
            };
        opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === 'number' ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
        if (opt.queue == null || opt.queue === true) {
            opt.queue = 'fx';
        }
        opt.old = opt.complete;
        opt.complete = function () {
            if (jQuery.isFunction(opt.old)) {
                opt.old.call(this);
            }
            if (opt.queue) {
                jQuery.dequeue(this, opt.queue);
            }
        };
        return opt;
    };
    jQuery.easing = {
        linear: function (p) {
            return p;
        },
        swing: function (p) {
            return 0.5 - Math.cos(p * Math.PI) / 2;
        }
    };
    jQuery.timers = [];
    jQuery.fx = Tween.prototype.init;
    jQuery.fx.tick = function () {
        var timer, timers = jQuery.timers, i = 0;
        fxNow = jQuery.now();
        for (; i < timers.length; i++) {
            timer = timers[i];
            if (!timer() && timers[i] === timer) {
                timers.splice(i--, 1);
            }
        }
        if (!timers.length) {
            jQuery.fx.stop();
        }
        fxNow = undefined;
    };
    jQuery.fx.timer = function (timer) {
        if (timer() && jQuery.timers.push(timer)) {
            jQuery.fx.start();
        }
    };
    jQuery.fx.interval = 13;
    jQuery.fx.start = function () {
        if (!timerId) {
            timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
        }
    };
    jQuery.fx.stop = function () {
        clearInterval(timerId);
        timerId = null;
    };
    jQuery.fx.speeds = {
        slow: 600,
        fast: 200,
        _default: 400
    };
    jQuery.fx.step = {};
    if (jQuery.expr && jQuery.expr.filters) {
        jQuery.expr.filters.animated = function (elem) {
            return jQuery.grep(jQuery.timers, function (fn) {
                return elem === fn.elem;
            }).length;
        };
    }
    jQuery.fn.offset = function (options) {
        if (arguments.length) {
            return options === undefined ? this : this.each(function (i) {
                jQuery.offset.setOffset(this, options, i);
            });
        }
        var docElem, win, box = {
                top: 0,
                left: 0
            }, elem = this[0], doc = elem && elem.ownerDocument;
        if (!doc) {
            return;
        }
        docElem = doc.documentElement;
        if (!jQuery.contains(docElem, elem)) {
            return box;
        }
        if (typeof elem.getBoundingClientRect !== core_strundefined) {
            box = elem.getBoundingClientRect();
        }
        win = getWindow(doc);
        return {
            top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
            left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
        };
    };
    jQuery.offset = {
        setOffset: function (elem, options, i) {
            var position = jQuery.css(elem, 'position');
            if (position === 'static') {
                elem.style.position = 'relative';
            }
            var curElem = jQuery(elem), curOffset = curElem.offset(), curCSSTop = jQuery.css(elem, 'top'), curCSSLeft = jQuery.css(elem, 'left'), calculatePosition = (position === 'absolute' || position === 'fixed') && jQuery.inArray('auto', [
                    curCSSTop,
                    curCSSLeft
                ]) > -1, props = {}, curPosition = {}, curTop, curLeft;
            if (calculatePosition) {
                curPosition = curElem.position();
                curTop = curPosition.top;
                curLeft = curPosition.left;
            } else {
                curTop = parseFloat(curCSSTop) || 0;
                curLeft = parseFloat(curCSSLeft) || 0;
            }
            if (jQuery.isFunction(options)) {
                options = options.call(elem, i, curOffset);
            }
            if (options.top != null) {
                props.top = options.top - curOffset.top + curTop;
            }
            if (options.left != null) {
                props.left = options.left - curOffset.left + curLeft;
            }
            if ('using' in options) {
                options.using.call(elem, props);
            } else {
                curElem.css(props);
            }
        }
    };
    jQuery.fn.extend({
        position: function () {
            if (!this[0]) {
                return;
            }
            var offsetParent, offset, parentOffset = {
                    top: 0,
                    left: 0
                }, elem = this[0];
            if (jQuery.css(elem, 'position') === 'fixed') {
                offset = elem.getBoundingClientRect();
            } else {
                offsetParent = this.offsetParent();
                offset = this.offset();
                if (!jQuery.nodeName(offsetParent[0], 'html')) {
                    parentOffset = offsetParent.offset();
                }
                parentOffset.top += jQuery.css(offsetParent[0], 'borderTopWidth', true);
                parentOffset.left += jQuery.css(offsetParent[0], 'borderLeftWidth', true);
            }
            return {
                top: offset.top - parentOffset.top - jQuery.css(elem, 'marginTop', true),
                left: offset.left - parentOffset.left - jQuery.css(elem, 'marginLeft', true)
            };
        },
        offsetParent: function () {
            return this.map(function () {
                var offsetParent = this.offsetParent || document.documentElement;
                while (offsetParent && !jQuery.nodeName(offsetParent, 'html') && jQuery.css(offsetParent, 'position') === 'static') {
                    offsetParent = offsetParent.offsetParent;
                }
                return offsetParent || document.documentElement;
            });
        }
    });
    jQuery.each({
        scrollLeft: 'pageXOffset',
        scrollTop: 'pageYOffset'
    }, function (method, prop) {
        var top = /Y/.test(prop);
        jQuery.fn[method] = function (val) {
            return jQuery.access(this, function (elem, method, val) {
                var win = getWindow(elem);
                if (val === undefined) {
                    return win ? prop in win ? win[prop] : win.document.documentElement[method] : elem[method];
                }
                if (win) {
                    win.scrollTo(!top ? val : jQuery(win).scrollLeft(), top ? val : jQuery(win).scrollTop());
                } else {
                    elem[method] = val;
                }
            }, method, val, arguments.length, null);
        };
    });
    function getWindow(elem) {
        return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;
    }
    jQuery.each({
        Height: 'height',
        Width: 'width'
    }, function (name, type) {
        jQuery.each({
            padding: 'inner' + name,
            content: type,
            '': 'outer' + name
        }, function (defaultExtra, funcName) {
            jQuery.fn[funcName] = function (margin, value) {
                var chainable = arguments.length && (defaultExtra || typeof margin !== 'boolean'), extra = defaultExtra || (margin === true || value === true ? 'margin' : 'border');
                return jQuery.access(this, function (elem, type, value) {
                    var doc;
                    if (jQuery.isWindow(elem)) {
                        return elem.document.documentElement['client' + name];
                    }
                    if (elem.nodeType === 9) {
                        doc = elem.documentElement;
                        return Math.max(elem.body['scroll' + name], doc['scroll' + name], elem.body['offset' + name], doc['offset' + name], doc['client' + name]);
                    }
                    return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
                }, type, chainable ? margin : undefined, chainable, null);
            };
        });
    });
    if (typeof define === 'function' && define.amd) {
        define('jquery/jquery.min', [], function () {
            return jQuery;
        });
    }
}(window));

define('jquery', ['jquery/jquery.min'], function ( main ) { return main; });

define('esui/lib/dom', [
    'require',
    'jquery'
], function (require) {
    var $ = require('jquery');
    var lib = {};
    lib.g = function (id) {
        if (!id) {
            return null;
        }
        return typeof id === 'string' ? document.getElementById(id) : id;
    };
    lib.isInput = function (element) {
        var nodeName = element.nodeName.toLowerCase();
        return nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea';
    };
    lib.removeNode = function (element) {
        if (typeof element === 'string') {
            element = lib.g(element);
        }
        $(element).remove();
    };
    lib.insertAfter = function (element, reference) {
        $(reference).after(element);
        return element;
    };
    lib.insertBefore = function (element, reference) {
        $(reference).before(element);
        return element;
    };
    lib.getChildren = function (element) {
        return $(element).children().toArray();
    };
    lib.getComputedStyle = function (element, key) {
        if (!element) {
            return '';
        }
        return $(element).css(key);
    };
    lib.getStyle = function (element, key) {
        key = $.camelCase(key);
        return element.style[key] || (element.currentStyle ? element.currentStyle[key] : '') || lib.getComputedStyle(element, key);
    };
    lib.getOffset = function (element) {
        var rect = element.getBoundingClientRect();
        var offset = {
                top: rect.top,
                right: rect.right,
                bottom: rect.bottom,
                left: rect.left,
                width: rect.right - rect.left,
                height: rect.bottom - rect.top
            };
        var clientTop = document.documentElement.clientTop || document.body.clientTop || 0;
        var clientLeft = document.documentElement.clientLeft || document.body.clientLeft || 0;
        var scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
        offset.top = offset.top + scrollTop - clientTop;
        offset.bottom = offset.bottom + scrollTop - clientTop;
        offset.left = offset.left + scrollLeft - clientLeft;
        offset.right = offset.right + scrollLeft - clientLeft;
        return offset;
    };
    lib.getText = function (element) {
        return $(element).text();
    };
    lib.dom = {};
    lib.dom.first = function (element) {
        element = lib.g(element);
        var result = $(element).children(':first-child').get(0);
        return result || null;
    };
    lib.dom.last = function (element) {
        element = lib.g(element);
        var result = $(element).children(':last-child').get(0);
        return result || null;
    };
    lib.dom.next = function (element) {
        element = lib.g(element);
        var result = $(element).next().get(0);
        return result || null;
    };
    lib.dom.previous = function (element) {
        element = lib.g(element);
        var result = $(element).prev().get(0);
        return result || null;
    };
    lib.dom.contains = function (container, contained) {
        container = lib.g(container);
        contained = lib.g(contained);
        return $.contains(container, contained);
    };
    return lib;
});

define('esui/lib/attribute', [
    'require',
    './dom',
    'jquery'
], function (require) {
    var dom = require('./dom');
    var $ = require('jquery');
    var lib = {};
    lib.hasAttribute = function (element, name) {
        if (element.hasAttribute) {
            return element.hasAttribute(name);
        }
        return element.attributes && element.attributes[name] && element.attributes[name].specified;
    };
    lib.setAttribute = function (element, key, value) {
        element = dom.g(element);
        $(element).attr(key, value);
        return element;
    };
    lib.getAttribute = function (element, key) {
        element = dom.g(element);
        return $(element).attr(key);
    };
    lib.removeAttribute = function (element, key) {
        element = dom.g(element);
        $(element).removeAttr(key);
    };
    return lib;
});

define('esui/lib/class', [
    'require',
    './dom',
    'jquery'
], function (require) {
    var dom = require('./dom');
    var $ = require('jquery');
    var lib = {};
    lib.getClassList = function (element) {
        return element.className ? element.className.split(/\s+/) : [];
    };
    lib.hasClass = function (element, className) {
        element = dom.g(element);
        return $(element).hasClass(className);
    };
    lib.addClass = function (element, className) {
        element = dom.g(element);
        $(element).addClass(className);
        return element;
    };
    lib.addClasses = function (element, classes) {
        element = dom.g(element);
        $(element).addClass(classes.join(' '));
        return element;
    };
    lib.removeClass = function (element, className) {
        element = dom.g(element);
        $(element).removeClass(className);
        return element;
    };
    lib.removeClasses = function (element, classes) {
        element = dom.g(element);
        $(element).removeClass(classes.join(' '));
        return element;
    };
    lib.toggleClass = function (element, className) {
        element = dom.g(element);
        $(element).toggleClass(className);
        return element;
    };
    return lib;
});

define('moment/moment', [
    'require',
    'exports',
    'module'
], function (require, exports, module) {
    (function (undefined) {
        var moment, VERSION = '2.7.0', globalScope = typeof global !== 'undefined' ? global : this, oldGlobalMoment, round = Math.round, i, YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, languages = {}, momentProperties = {
                _isAMomentObject: null,
                _i: null,
                _f: null,
                _l: null,
                _strict: null,
                _tzm: null,
                _isUTC: null,
                _offset: null,
                _pf: null,
                _lang: null
            }, hasModule = typeof module !== 'undefined' && module.exports, aspNetJsonRegex = /^\/?Date\((\-?\d+)/i, aspNetTimeSpanJsonRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/, isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/, formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g, parseTokenOneOrTwoDigits = /\d\d?/, parseTokenOneToThreeDigits = /\d{1,3}/, parseTokenOneToFourDigits = /\d{1,4}/, parseTokenOneToSixDigits = /[+\-]?\d{1,6}/, parseTokenDigits = /\d+/, parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/gi, parseTokenT = /T/i, parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/, parseTokenOrdinal = /\d{1,2}/, parseTokenOneDigit = /\d/, parseTokenTwoDigits = /\d\d/, parseTokenThreeDigits = /\d{3}/, parseTokenFourDigits = /\d{4}/, parseTokenSixDigits = /[+-]?\d{6}/, parseTokenSignedNumber = /[+-]?\d+/, isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/, isoFormat = 'YYYY-MM-DDTHH:mm:ssZ', isoDates = [
                [
                    'YYYYYY-MM-DD',
                    /[+-]\d{6}-\d{2}-\d{2}/
                ],
                [
                    'YYYY-MM-DD',
                    /\d{4}-\d{2}-\d{2}/
                ],
                [
                    'GGGG-[W]WW-E',
                    /\d{4}-W\d{2}-\d/
                ],
                [
                    'GGGG-[W]WW',
                    /\d{4}-W\d{2}/
                ],
                [
                    'YYYY-DDD',
                    /\d{4}-\d{3}/
                ]
            ], isoTimes = [
                [
                    'HH:mm:ss.SSSS',
                    /(T| )\d\d:\d\d:\d\d\.\d+/
                ],
                [
                    'HH:mm:ss',
                    /(T| )\d\d:\d\d:\d\d/
                ],
                [
                    'HH:mm',
                    /(T| )\d\d:\d\d/
                ],
                [
                    'HH',
                    /(T| )\d\d/
                ]
            ], parseTimezoneChunker = /([\+\-]|\d\d)/gi, proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'), unitMillisecondFactors = {
                'Milliseconds': 1,
                'Seconds': 1000,
                'Minutes': 60000,
                'Hours': 3600000,
                'Days': 86400000,
                'Months': 2592000000,
                'Years': 31536000000
            }, unitAliases = {
                ms: 'millisecond',
                s: 'second',
                m: 'minute',
                h: 'hour',
                d: 'day',
                D: 'date',
                w: 'week',
                W: 'isoWeek',
                M: 'month',
                Q: 'quarter',
                y: 'year',
                DDD: 'dayOfYear',
                e: 'weekday',
                E: 'isoWeekday',
                gg: 'weekYear',
                GG: 'isoWeekYear'
            }, camelFunctions = {
                dayofyear: 'dayOfYear',
                isoweekday: 'isoWeekday',
                isoweek: 'isoWeek',
                weekyear: 'weekYear',
                isoweekyear: 'isoWeekYear'
            }, formatFunctions = {}, relativeTimeThresholds = {
                s: 45,
                m: 45,
                h: 22,
                dd: 25,
                dm: 45,
                dy: 345
            }, ordinalizeTokens = 'DDD w W M D d'.split(' '), paddedTokens = 'M D H h m s w W'.split(' '), formatTokenFunctions = {
                M: function () {
                    return this.month() + 1;
                },
                MMM: function (format) {
                    return this.lang().monthsShort(this, format);
                },
                MMMM: function (format) {
                    return this.lang().months(this, format);
                },
                D: function () {
                    return this.date();
                },
                DDD: function () {
                    return this.dayOfYear();
                },
                d: function () {
                    return this.day();
                },
                dd: function (format) {
                    return this.lang().weekdaysMin(this, format);
                },
                ddd: function (format) {
                    return this.lang().weekdaysShort(this, format);
                },
                dddd: function (format) {
                    return this.lang().weekdays(this, format);
                },
                w: function () {
                    return this.week();
                },
                W: function () {
                    return this.isoWeek();
                },
                YY: function () {
                    return leftZeroFill(this.year() % 100, 2);
                },
                YYYY: function () {
                    return leftZeroFill(this.year(), 4);
                },
                YYYYY: function () {
                    return leftZeroFill(this.year(), 5);
                },
                YYYYYY: function () {
                    var y = this.year(), sign = y >= 0 ? '+' : '-';
                    return sign + leftZeroFill(Math.abs(y), 6);
                },
                gg: function () {
                    return leftZeroFill(this.weekYear() % 100, 2);
                },
                gggg: function () {
                    return leftZeroFill(this.weekYear(), 4);
                },
                ggggg: function () {
                    return leftZeroFill(this.weekYear(), 5);
                },
                GG: function () {
                    return leftZeroFill(this.isoWeekYear() % 100, 2);
                },
                GGGG: function () {
                    return leftZeroFill(this.isoWeekYear(), 4);
                },
                GGGGG: function () {
                    return leftZeroFill(this.isoWeekYear(), 5);
                },
                e: function () {
                    return this.weekday();
                },
                E: function () {
                    return this.isoWeekday();
                },
                a: function () {
                    return this.lang().meridiem(this.hours(), this.minutes(), true);
                },
                A: function () {
                    return this.lang().meridiem(this.hours(), this.minutes(), false);
                },
                H: function () {
                    return this.hours();
                },
                h: function () {
                    return this.hours() % 12 || 12;
                },
                m: function () {
                    return this.minutes();
                },
                s: function () {
                    return this.seconds();
                },
                S: function () {
                    return toInt(this.milliseconds() / 100);
                },
                SS: function () {
                    return leftZeroFill(toInt(this.milliseconds() / 10), 2);
                },
                SSS: function () {
                    return leftZeroFill(this.milliseconds(), 3);
                },
                SSSS: function () {
                    return leftZeroFill(this.milliseconds(), 3);
                },
                Z: function () {
                    var a = -this.zone(), b = '+';
                    if (a < 0) {
                        a = -a;
                        b = '-';
                    }
                    return b + leftZeroFill(toInt(a / 60), 2) + ':' + leftZeroFill(toInt(a) % 60, 2);
                },
                ZZ: function () {
                    var a = -this.zone(), b = '+';
                    if (a < 0) {
                        a = -a;
                        b = '-';
                    }
                    return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);
                },
                z: function () {
                    return this.zoneAbbr();
                },
                zz: function () {
                    return this.zoneName();
                },
                X: function () {
                    return this.unix();
                },
                Q: function () {
                    return this.quarter();
                }
            }, lists = [
                'months',
                'monthsShort',
                'weekdays',
                'weekdaysShort',
                'weekdaysMin'
            ];
        function dfl(a, b, c) {
            switch (arguments.length) {
            case 2:
                return a != null ? a : b;
            case 3:
                return a != null ? a : b != null ? b : c;
            default:
                throw new Error('Implement me');
            }
        }
        function defaultParsingFlags() {
            return {
                empty: false,
                unusedTokens: [],
                unusedInput: [],
                overflow: -2,
                charsLeftOver: 0,
                nullInput: false,
                invalidMonth: null,
                invalidFormat: false,
                userInvalidated: false,
                iso: false
            };
        }
        function deprecate(msg, fn) {
            var firstTime = true;
            function printMsg() {
                if (moment.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
                    console.warn('Deprecation warning: ' + msg);
                }
            }
            return extend(function () {
                if (firstTime) {
                    printMsg();
                    firstTime = false;
                }
                return fn.apply(this, arguments);
            }, fn);
        }
        function padToken(func, count) {
            return function (a) {
                return leftZeroFill(func.call(this, a), count);
            };
        }
        function ordinalizeToken(func, period) {
            return function (a) {
                return this.lang().ordinal(func.call(this, a), period);
            };
        }
        while (ordinalizeTokens.length) {
            i = ordinalizeTokens.pop();
            formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);
        }
        while (paddedTokens.length) {
            i = paddedTokens.pop();
            formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);
        }
        formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);
        function Language() {
        }
        function Moment(config) {
            checkOverflow(config);
            extend(this, config);
        }
        function Duration(duration) {
            var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
            this._milliseconds = +milliseconds + seconds * 1000 + minutes * 60000 + hours * 3600000;
            this._days = +days + weeks * 7;
            this._months = +months + quarters * 3 + years * 12;
            this._data = {};
            this._bubble();
        }
        function extend(a, b) {
            for (var i in b) {
                if (b.hasOwnProperty(i)) {
                    a[i] = b[i];
                }
            }
            if (b.hasOwnProperty('toString')) {
                a.toString = b.toString;
            }
            if (b.hasOwnProperty('valueOf')) {
                a.valueOf = b.valueOf;
            }
            return a;
        }
        function cloneMoment(m) {
            var result = {}, i;
            for (i in m) {
                if (m.hasOwnProperty(i) && momentProperties.hasOwnProperty(i)) {
                    result[i] = m[i];
                }
            }
            return result;
        }
        function absRound(number) {
            if (number < 0) {
                return Math.ceil(number);
            } else {
                return Math.floor(number);
            }
        }
        function leftZeroFill(number, targetLength, forceSign) {
            var output = '' + Math.abs(number), sign = number >= 0;
            while (output.length < targetLength) {
                output = '0' + output;
            }
            return (sign ? forceSign ? '+' : '' : '-') + output;
        }
        function addOrSubtractDurationFromMoment(mom, duration, isAdding, updateOffset) {
            var milliseconds = duration._milliseconds, days = duration._days, months = duration._months;
            updateOffset = updateOffset == null ? true : updateOffset;
            if (milliseconds) {
                mom._d.setTime(+mom._d + milliseconds * isAdding);
            }
            if (days) {
                rawSetter(mom, 'Date', rawGetter(mom, 'Date') + days * isAdding);
            }
            if (months) {
                rawMonthSetter(mom, rawGetter(mom, 'Month') + months * isAdding);
            }
            if (updateOffset) {
                moment.updateOffset(mom, days || months);
            }
        }
        function isArray(input) {
            return Object.prototype.toString.call(input) === '[object Array]';
        }
        function isDate(input) {
            return Object.prototype.toString.call(input) === '[object Date]' || input instanceof Date;
        }
        function compareArrays(array1, array2, dontConvert) {
            var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
            for (i = 0; i < len; i++) {
                if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
                    diffs++;
                }
            }
            return diffs + lengthDiff;
        }
        function normalizeUnits(units) {
            if (units) {
                var lowered = units.toLowerCase().replace(/(.)s$/, '$1');
                units = unitAliases[units] || camelFunctions[lowered] || lowered;
            }
            return units;
        }
        function normalizeObjectUnits(inputObject) {
            var normalizedInput = {}, normalizedProp, prop;
            for (prop in inputObject) {
                if (inputObject.hasOwnProperty(prop)) {
                    normalizedProp = normalizeUnits(prop);
                    if (normalizedProp) {
                        normalizedInput[normalizedProp] = inputObject[prop];
                    }
                }
            }
            return normalizedInput;
        }
        function makeList(field) {
            var count, setter;
            if (field.indexOf('week') === 0) {
                count = 7;
                setter = 'day';
            } else if (field.indexOf('month') === 0) {
                count = 12;
                setter = 'month';
            } else {
                return;
            }
            moment[field] = function (format, index) {
                var i, getter, method = moment.fn._lang[field], results = [];
                if (typeof format === 'number') {
                    index = format;
                    format = undefined;
                }
                getter = function (i) {
                    var m = moment().utc().set(setter, i);
                    return method.call(moment.fn._lang, m, format || '');
                };
                if (index != null) {
                    return getter(index);
                } else {
                    for (i = 0; i < count; i++) {
                        results.push(getter(i));
                    }
                    return results;
                }
            };
        }
        function toInt(argumentForCoercion) {
            var coercedNumber = +argumentForCoercion, value = 0;
            if (coercedNumber !== 0 && isFinite(coercedNumber)) {
                if (coercedNumber >= 0) {
                    value = Math.floor(coercedNumber);
                } else {
                    value = Math.ceil(coercedNumber);
                }
            }
            return value;
        }
        function daysInMonth(year, month) {
            return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
        }
        function weeksInYear(year, dow, doy) {
            return weekOfYear(moment([
                year,
                11,
                31 + dow - doy
            ]), dow, doy).week;
        }
        function daysInYear(year) {
            return isLeapYear(year) ? 366 : 365;
        }
        function isLeapYear(year) {
            return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
        }
        function checkOverflow(m) {
            var overflow;
            if (m._a && m._pf.overflow === -2) {
                overflow = m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH : m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE : m._a[HOUR] < 0 || m._a[HOUR] > 23 ? HOUR : m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE : m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND : m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND : -1;
                if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                    overflow = DATE;
                }
                m._pf.overflow = overflow;
            }
        }
        function isValid(m) {
            if (m._isValid == null) {
                m._isValid = !isNaN(m._d.getTime()) && m._pf.overflow < 0 && !m._pf.empty && !m._pf.invalidMonth && !m._pf.nullInput && !m._pf.invalidFormat && !m._pf.userInvalidated;
                if (m._strict) {
                    m._isValid = m._isValid && m._pf.charsLeftOver === 0 && m._pf.unusedTokens.length === 0;
                }
            }
            return m._isValid;
        }
        function normalizeLanguage(key) {
            return key ? key.toLowerCase().replace('_', '-') : key;
        }
        function makeAs(input, model) {
            return model._isUTC ? moment(input).zone(model._offset || 0) : moment(input).local();
        }
        extend(Language.prototype, {
            set: function (config) {
                var prop, i;
                for (i in config) {
                    prop = config[i];
                    if (typeof prop === 'function') {
                        this[i] = prop;
                    } else {
                        this['_' + i] = prop;
                    }
                }
            },
            _months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
            months: function (m) {
                return this._months[m.month()];
            },
            _monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
            monthsShort: function (m) {
                return this._monthsShort[m.month()];
            },
            monthsParse: function (monthName) {
                var i, mom, regex;
                if (!this._monthsParse) {
                    this._monthsParse = [];
                }
                for (i = 0; i < 12; i++) {
                    if (!this._monthsParse[i]) {
                        mom = moment.utc([
                            2000,
                            i
                        ]);
                        regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                        this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                    }
                    if (this._monthsParse[i].test(monthName)) {
                        return i;
                    }
                }
            },
            _weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
            weekdays: function (m) {
                return this._weekdays[m.day()];
            },
            _weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
            weekdaysShort: function (m) {
                return this._weekdaysShort[m.day()];
            },
            _weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
            weekdaysMin: function (m) {
                return this._weekdaysMin[m.day()];
            },
            weekdaysParse: function (weekdayName) {
                var i, mom, regex;
                if (!this._weekdaysParse) {
                    this._weekdaysParse = [];
                }
                for (i = 0; i < 7; i++) {
                    if (!this._weekdaysParse[i]) {
                        mom = moment([
                            2000,
                            1
                        ]).day(i);
                        regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                        this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                    }
                    if (this._weekdaysParse[i].test(weekdayName)) {
                        return i;
                    }
                }
            },
            _longDateFormat: {
                LT: 'h:mm A',
                L: 'MM/DD/YYYY',
                LL: 'MMMM D YYYY',
                LLL: 'MMMM D YYYY LT',
                LLLL: 'dddd, MMMM D YYYY LT'
            },
            longDateFormat: function (key) {
                var output = this._longDateFormat[key];
                if (!output && this._longDateFormat[key.toUpperCase()]) {
                    output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {
                        return val.slice(1);
                    });
                    this._longDateFormat[key] = output;
                }
                return output;
            },
            isPM: function (input) {
                return (input + '').toLowerCase().charAt(0) === 'p';
            },
            _meridiemParse: /[ap]\.?m?\.?/i,
            meridiem: function (hours, minutes, isLower) {
                if (hours > 11) {
                    return isLower ? 'pm' : 'PM';
                } else {
                    return isLower ? 'am' : 'AM';
                }
            },
            _calendar: {
                sameDay: '[Today at] LT',
                nextDay: '[Tomorrow at] LT',
                nextWeek: 'dddd [at] LT',
                lastDay: '[Yesterday at] LT',
                lastWeek: '[Last] dddd [at] LT',
                sameElse: 'L'
            },
            calendar: function (key, mom) {
                var output = this._calendar[key];
                return typeof output === 'function' ? output.apply(mom) : output;
            },
            _relativeTime: {
                future: 'in %s',
                past: '%s ago',
                s: 'a few seconds',
                m: 'a minute',
                mm: '%d minutes',
                h: 'an hour',
                hh: '%d hours',
                d: 'a day',
                dd: '%d days',
                M: 'a month',
                MM: '%d months',
                y: 'a year',
                yy: '%d years'
            },
            relativeTime: function (number, withoutSuffix, string, isFuture) {
                var output = this._relativeTime[string];
                return typeof output === 'function' ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
            },
            pastFuture: function (diff, output) {
                var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
                return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
            },
            ordinal: function (number) {
                return this._ordinal.replace('%d', number);
            },
            _ordinal: '%d',
            preparse: function (string) {
                return string;
            },
            postformat: function (string) {
                return string;
            },
            week: function (mom) {
                return weekOfYear(mom, this._week.dow, this._week.doy).week;
            },
            _week: {
                dow: 0,
                doy: 6
            },
            _invalidDate: 'Invalid date',
            invalidDate: function () {
                return this._invalidDate;
            }
        });
        function loadLang(key, values) {
            values.abbr = key;
            if (!languages[key]) {
                languages[key] = new Language();
            }
            languages[key].set(values);
            return languages[key];
        }
        function unloadLang(key) {
            delete languages[key];
        }
        function getLangDefinition(key) {
            var i = 0, j, lang, next, split, get = function (k) {
                    if (!languages[k] && hasModule) {
                        try {
                            require('./lang/' + k);
                        } catch (e) {
                        }
                    }
                    return languages[k];
                };
            if (!key) {
                return moment.fn._lang;
            }
            if (!isArray(key)) {
                lang = get(key);
                if (lang) {
                    return lang;
                }
                key = [key];
            }
            while (i < key.length) {
                split = normalizeLanguage(key[i]).split('-');
                j = split.length;
                next = normalizeLanguage(key[i + 1]);
                next = next ? next.split('-') : null;
                while (j > 0) {
                    lang = get(split.slice(0, j).join('-'));
                    if (lang) {
                        return lang;
                    }
                    if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                        break;
                    }
                    j--;
                }
                i++;
            }
            return moment.fn._lang;
        }
        function removeFormattingTokens(input) {
            if (input.match(/\[[\s\S]/)) {
                return input.replace(/^\[|\]$/g, '');
            }
            return input.replace(/\\/g, '');
        }
        function makeFormatFunction(format) {
            var array = format.match(formattingTokens), i, length;
            for (i = 0, length = array.length; i < length; i++) {
                if (formatTokenFunctions[array[i]]) {
                    array[i] = formatTokenFunctions[array[i]];
                } else {
                    array[i] = removeFormattingTokens(array[i]);
                }
            }
            return function (mom) {
                var output = '';
                for (i = 0; i < length; i++) {
                    output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
                }
                return output;
            };
        }
        function formatMoment(m, format) {
            if (!m.isValid()) {
                return m.lang().invalidDate();
            }
            format = expandFormat(format, m.lang());
            if (!formatFunctions[format]) {
                formatFunctions[format] = makeFormatFunction(format);
            }
            return formatFunctions[format](m);
        }
        function expandFormat(format, lang) {
            var i = 5;
            function replaceLongDateFormatTokens(input) {
                return lang.longDateFormat(input) || input;
            }
            localFormattingTokens.lastIndex = 0;
            while (i >= 0 && localFormattingTokens.test(format)) {
                format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
                localFormattingTokens.lastIndex = 0;
                i -= 1;
            }
            return format;
        }
        function getParseRegexForToken(token, config) {
            var a, strict = config._strict;
            switch (token) {
            case 'Q':
                return parseTokenOneDigit;
            case 'DDDD':
                return parseTokenThreeDigits;
            case 'YYYY':
            case 'GGGG':
            case 'gggg':
                return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;
            case 'Y':
            case 'G':
            case 'g':
                return parseTokenSignedNumber;
            case 'YYYYYY':
            case 'YYYYY':
            case 'GGGGG':
            case 'ggggg':
                return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;
            case 'S':
                if (strict) {
                    return parseTokenOneDigit;
                }
            case 'SS':
                if (strict) {
                    return parseTokenTwoDigits;
                }
            case 'SSS':
                if (strict) {
                    return parseTokenThreeDigits;
                }
            case 'DDD':
                return parseTokenOneToThreeDigits;
            case 'MMM':
            case 'MMMM':
            case 'dd':
            case 'ddd':
            case 'dddd':
                return parseTokenWord;
            case 'a':
            case 'A':
                return getLangDefinition(config._l)._meridiemParse;
            case 'X':
                return parseTokenTimestampMs;
            case 'Z':
            case 'ZZ':
                return parseTokenTimezone;
            case 'T':
                return parseTokenT;
            case 'SSSS':
                return parseTokenDigits;
            case 'MM':
            case 'DD':
            case 'YY':
            case 'GG':
            case 'gg':
            case 'HH':
            case 'hh':
            case 'mm':
            case 'ss':
            case 'ww':
            case 'WW':
                return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;
            case 'M':
            case 'D':
            case 'd':
            case 'H':
            case 'h':
            case 'm':
            case 's':
            case 'w':
            case 'W':
            case 'e':
            case 'E':
                return parseTokenOneOrTwoDigits;
            case 'Do':
                return parseTokenOrdinal;
            default:
                a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\', '')), 'i'));
                return a;
            }
        }
        function timezoneMinutesFromString(string) {
            string = string || '';
            var possibleTzMatches = string.match(parseTokenTimezone) || [], tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [], parts = (tzChunk + '').match(parseTimezoneChunker) || [
                    '-',
                    0,
                    0
                ], minutes = +(parts[1] * 60) + toInt(parts[2]);
            return parts[0] === '+' ? -minutes : minutes;
        }
        function addTimeToArrayFromToken(token, input, config) {
            var a, datePartArray = config._a;
            switch (token) {
            case 'Q':
                if (input != null) {
                    datePartArray[MONTH] = (toInt(input) - 1) * 3;
                }
                break;
            case 'M':
            case 'MM':
                if (input != null) {
                    datePartArray[MONTH] = toInt(input) - 1;
                }
                break;
            case 'MMM':
            case 'MMMM':
                a = getLangDefinition(config._l).monthsParse(input);
                if (a != null) {
                    datePartArray[MONTH] = a;
                } else {
                    config._pf.invalidMonth = input;
                }
                break;
            case 'D':
            case 'DD':
                if (input != null) {
                    datePartArray[DATE] = toInt(input);
                }
                break;
            case 'Do':
                if (input != null) {
                    datePartArray[DATE] = toInt(parseInt(input, 10));
                }
                break;
            case 'DDD':
            case 'DDDD':
                if (input != null) {
                    config._dayOfYear = toInt(input);
                }
                break;
            case 'YY':
                datePartArray[YEAR] = moment.parseTwoDigitYear(input);
                break;
            case 'YYYY':
            case 'YYYYY':
            case 'YYYYYY':
                datePartArray[YEAR] = toInt(input);
                break;
            case 'a':
            case 'A':
                config._isPm = getLangDefinition(config._l).isPM(input);
                break;
            case 'H':
            case 'HH':
            case 'h':
            case 'hh':
                datePartArray[HOUR] = toInt(input);
                break;
            case 'm':
            case 'mm':
                datePartArray[MINUTE] = toInt(input);
                break;
            case 's':
            case 'ss':
                datePartArray[SECOND] = toInt(input);
                break;
            case 'S':
            case 'SS':
            case 'SSS':
            case 'SSSS':
                datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);
                break;
            case 'X':
                config._d = new Date(parseFloat(input) * 1000);
                break;
            case 'Z':
            case 'ZZ':
                config._useUTC = true;
                config._tzm = timezoneMinutesFromString(input);
                break;
            case 'dd':
            case 'ddd':
            case 'dddd':
                a = getLangDefinition(config._l).weekdaysParse(input);
                if (a != null) {
                    config._w = config._w || {};
                    config._w['d'] = a;
                } else {
                    config._pf.invalidWeekday = input;
                }
                break;
            case 'w':
            case 'ww':
            case 'W':
            case 'WW':
            case 'd':
            case 'e':
            case 'E':
                token = token.substr(0, 1);
            case 'gggg':
            case 'GGGG':
            case 'GGGGG':
                token = token.substr(0, 2);
                if (input) {
                    config._w = config._w || {};
                    config._w[token] = toInt(input);
                }
                break;
            case 'gg':
            case 'GG':
                config._w = config._w || {};
                config._w[token] = moment.parseTwoDigitYear(input);
            }
        }
        function dayOfYearFromWeekInfo(config) {
            var w, weekYear, week, weekday, dow, doy, temp, lang;
            w = config._w;
            if (w.GG != null || w.W != null || w.E != null) {
                dow = 1;
                doy = 4;
                weekYear = dfl(w.GG, config._a[YEAR], weekOfYear(moment(), 1, 4).year);
                week = dfl(w.W, 1);
                weekday = dfl(w.E, 1);
            } else {
                lang = getLangDefinition(config._l);
                dow = lang._week.dow;
                doy = lang._week.doy;
                weekYear = dfl(w.gg, config._a[YEAR], weekOfYear(moment(), dow, doy).year);
                week = dfl(w.w, 1);
                if (w.d != null) {
                    weekday = w.d;
                    if (weekday < dow) {
                        ++week;
                    }
                } else if (w.e != null) {
                    weekday = w.e + dow;
                } else {
                    weekday = dow;
                }
            }
            temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
        function dateFromConfig(config) {
            var i, date, input = [], currentDate, yearToUse;
            if (config._d) {
                return;
            }
            currentDate = currentDateArray(config);
            if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
                dayOfYearFromWeekInfo(config);
            }
            if (config._dayOfYear) {
                yearToUse = dfl(config._a[YEAR], currentDate[YEAR]);
                if (config._dayOfYear > daysInYear(yearToUse)) {
                    config._pf._overflowDayOfYear = true;
                }
                date = makeUTCDate(yearToUse, 0, config._dayOfYear);
                config._a[MONTH] = date.getUTCMonth();
                config._a[DATE] = date.getUTCDate();
            }
            for (i = 0; i < 3 && config._a[i] == null; ++i) {
                config._a[i] = input[i] = currentDate[i];
            }
            for (; i < 7; i++) {
                config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
            }
            config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);
            if (config._tzm != null) {
                config._d.setUTCMinutes(config._d.getUTCMinutes() + config._tzm);
            }
        }
        function dateFromObject(config) {
            var normalizedInput;
            if (config._d) {
                return;
            }
            normalizedInput = normalizeObjectUnits(config._i);
            config._a = [
                normalizedInput.year,
                normalizedInput.month,
                normalizedInput.day,
                normalizedInput.hour,
                normalizedInput.minute,
                normalizedInput.second,
                normalizedInput.millisecond
            ];
            dateFromConfig(config);
        }
        function currentDateArray(config) {
            var now = new Date();
            if (config._useUTC) {
                return [
                    now.getUTCFullYear(),
                    now.getUTCMonth(),
                    now.getUTCDate()
                ];
            } else {
                return [
                    now.getFullYear(),
                    now.getMonth(),
                    now.getDate()
                ];
            }
        }
        function makeDateFromStringAndFormat(config) {
            if (config._f === moment.ISO_8601) {
                parseISO(config);
                return;
            }
            config._a = [];
            config._pf.empty = true;
            var lang = getLangDefinition(config._l), string = '' + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0;
            tokens = expandFormat(config._f, lang).match(formattingTokens) || [];
            for (i = 0; i < tokens.length; i++) {
                token = tokens[i];
                parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
                if (parsedInput) {
                    skipped = string.substr(0, string.indexOf(parsedInput));
                    if (skipped.length > 0) {
                        config._pf.unusedInput.push(skipped);
                    }
                    string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                    totalParsedInputLength += parsedInput.length;
                }
                if (formatTokenFunctions[token]) {
                    if (parsedInput) {
                        config._pf.empty = false;
                    } else {
                        config._pf.unusedTokens.push(token);
                    }
                    addTimeToArrayFromToken(token, parsedInput, config);
                } else if (config._strict && !parsedInput) {
                    config._pf.unusedTokens.push(token);
                }
            }
            config._pf.charsLeftOver = stringLength - totalParsedInputLength;
            if (string.length > 0) {
                config._pf.unusedInput.push(string);
            }
            if (config._isPm && config._a[HOUR] < 12) {
                config._a[HOUR] += 12;
            }
            if (config._isPm === false && config._a[HOUR] === 12) {
                config._a[HOUR] = 0;
            }
            dateFromConfig(config);
            checkOverflow(config);
        }
        function unescapeFormat(s) {
            return s.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
                return p1 || p2 || p3 || p4;
            });
        }
        function regexpEscape(s) {
            return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
        }
        function makeDateFromStringAndArray(config) {
            var tempConfig, bestMoment, scoreToBeat, i, currentScore;
            if (config._f.length === 0) {
                config._pf.invalidFormat = true;
                config._d = new Date(NaN);
                return;
            }
            for (i = 0; i < config._f.length; i++) {
                currentScore = 0;
                tempConfig = extend({}, config);
                tempConfig._pf = defaultParsingFlags();
                tempConfig._f = config._f[i];
                makeDateFromStringAndFormat(tempConfig);
                if (!isValid(tempConfig)) {
                    continue;
                }
                currentScore += tempConfig._pf.charsLeftOver;
                currentScore += tempConfig._pf.unusedTokens.length * 10;
                tempConfig._pf.score = currentScore;
                if (scoreToBeat == null || currentScore < scoreToBeat) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                }
            }
            extend(config, bestMoment || tempConfig);
        }
        function parseISO(config) {
            var i, l, string = config._i, match = isoRegex.exec(string);
            if (match) {
                config._pf.iso = true;
                for (i = 0, l = isoDates.length; i < l; i++) {
                    if (isoDates[i][1].exec(string)) {
                        config._f = isoDates[i][0] + (match[6] || ' ');
                        break;
                    }
                }
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(string)) {
                        config._f += isoTimes[i][0];
                        break;
                    }
                }
                if (string.match(parseTokenTimezone)) {
                    config._f += 'Z';
                }
                makeDateFromStringAndFormat(config);
            } else {
                config._isValid = false;
            }
        }
        function makeDateFromString(config) {
            parseISO(config);
            if (config._isValid === false) {
                delete config._isValid;
                moment.createFromInputFallback(config);
            }
        }
        function makeDateFromInput(config) {
            var input = config._i, matched = aspNetJsonRegex.exec(input);
            if (input === undefined) {
                config._d = new Date();
            } else if (matched) {
                config._d = new Date(+matched[1]);
            } else if (typeof input === 'string') {
                makeDateFromString(config);
            } else if (isArray(input)) {
                config._a = input.slice(0);
                dateFromConfig(config);
            } else if (isDate(input)) {
                config._d = new Date(+input);
            } else if (typeof input === 'object') {
                dateFromObject(config);
            } else if (typeof input === 'number') {
                config._d = new Date(input);
            } else {
                moment.createFromInputFallback(config);
            }
        }
        function makeDate(y, m, d, h, M, s, ms) {
            var date = new Date(y, m, d, h, M, s, ms);
            if (y < 1970) {
                date.setFullYear(y);
            }
            return date;
        }
        function makeUTCDate(y) {
            var date = new Date(Date.UTC.apply(null, arguments));
            if (y < 1970) {
                date.setUTCFullYear(y);
            }
            return date;
        }
        function parseWeekday(input, language) {
            if (typeof input === 'string') {
                if (!isNaN(input)) {
                    input = parseInt(input, 10);
                } else {
                    input = language.weekdaysParse(input);
                    if (typeof input !== 'number') {
                        return null;
                    }
                }
            }
            return input;
        }
        function substituteTimeAgo(string, number, withoutSuffix, isFuture, lang) {
            return lang.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
        }
        function relativeTime(milliseconds, withoutSuffix, lang) {
            var seconds = round(Math.abs(milliseconds) / 1000), minutes = round(seconds / 60), hours = round(minutes / 60), days = round(hours / 24), years = round(days / 365), args = seconds < relativeTimeThresholds.s && [
                    's',
                    seconds
                ] || minutes === 1 && ['m'] || minutes < relativeTimeThresholds.m && [
                    'mm',
                    minutes
                ] || hours === 1 && ['h'] || hours < relativeTimeThresholds.h && [
                    'hh',
                    hours
                ] || days === 1 && ['d'] || days <= relativeTimeThresholds.dd && [
                    'dd',
                    days
                ] || days <= relativeTimeThresholds.dm && ['M'] || days < relativeTimeThresholds.dy && [
                    'MM',
                    round(days / 30)
                ] || years === 1 && ['y'] || [
                    'yy',
                    years
                ];
            args[2] = withoutSuffix;
            args[3] = milliseconds > 0;
            args[4] = lang;
            return substituteTimeAgo.apply({}, args);
        }
        function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
            var end = firstDayOfWeekOfYear - firstDayOfWeek, daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(), adjustedMoment;
            if (daysToDayOfWeek > end) {
                daysToDayOfWeek -= 7;
            }
            if (daysToDayOfWeek < end - 7) {
                daysToDayOfWeek += 7;
            }
            adjustedMoment = moment(mom).add('d', daysToDayOfWeek);
            return {
                week: Math.ceil(adjustedMoment.dayOfYear() / 7),
                year: adjustedMoment.year()
            };
        }
        function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
            var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;
            d = d === 0 ? 7 : d;
            weekday = weekday != null ? weekday : firstDayOfWeek;
            daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);
            dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;
            return {
                year: dayOfYear > 0 ? year : year - 1,
                dayOfYear: dayOfYear > 0 ? dayOfYear : daysInYear(year - 1) + dayOfYear
            };
        }
        function makeMoment(config) {
            var input = config._i, format = config._f;
            if (input === null || format === undefined && input === '') {
                return moment.invalid({ nullInput: true });
            }
            if (typeof input === 'string') {
                config._i = input = getLangDefinition().preparse(input);
            }
            if (moment.isMoment(input)) {
                config = cloneMoment(input);
                config._d = new Date(+input._d);
            } else if (format) {
                if (isArray(format)) {
                    makeDateFromStringAndArray(config);
                } else {
                    makeDateFromStringAndFormat(config);
                }
            } else {
                makeDateFromInput(config);
            }
            return new Moment(config);
        }
        moment = function (input, format, lang, strict) {
            var c;
            if (typeof lang === 'boolean') {
                strict = lang;
                lang = undefined;
            }
            c = {};
            c._isAMomentObject = true;
            c._i = input;
            c._f = format;
            c._l = lang;
            c._strict = strict;
            c._isUTC = false;
            c._pf = defaultParsingFlags();
            return makeMoment(c);
        };
        moment.suppressDeprecationWarnings = false;
        moment.createFromInputFallback = deprecate('moment construction falls back to js Date. This is ' + 'discouraged and will be removed in upcoming major ' + 'release. Please refer to ' + 'https://github.com/moment/moment/issues/1407 for more info.', function (config) {
            config._d = new Date(config._i);
        });
        function pickBy(fn, moments) {
            var res, i;
            if (moments.length === 1 && isArray(moments[0])) {
                moments = moments[0];
            }
            if (!moments.length) {
                return moment();
            }
            res = moments[0];
            for (i = 1; i < moments.length; ++i) {
                if (moments[i][fn](res)) {
                    res = moments[i];
                }
            }
            return res;
        }
        moment.min = function () {
            var args = [].slice.call(arguments, 0);
            return pickBy('isBefore', args);
        };
        moment.max = function () {
            var args = [].slice.call(arguments, 0);
            return pickBy('isAfter', args);
        };
        moment.utc = function (input, format, lang, strict) {
            var c;
            if (typeof lang === 'boolean') {
                strict = lang;
                lang = undefined;
            }
            c = {};
            c._isAMomentObject = true;
            c._useUTC = true;
            c._isUTC = true;
            c._l = lang;
            c._i = input;
            c._f = format;
            c._strict = strict;
            c._pf = defaultParsingFlags();
            return makeMoment(c).utc();
        };
        moment.unix = function (input) {
            return moment(input * 1000);
        };
        moment.duration = function (input, key) {
            var duration = input, match = null, sign, ret, parseIso;
            if (moment.isDuration(input)) {
                duration = {
                    ms: input._milliseconds,
                    d: input._days,
                    M: input._months
                };
            } else if (typeof input === 'number') {
                duration = {};
                if (key) {
                    duration[key] = input;
                } else {
                    duration.milliseconds = input;
                }
            } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {
                sign = match[1] === '-' ? -1 : 1;
                duration = {
                    y: 0,
                    d: toInt(match[DATE]) * sign,
                    h: toInt(match[HOUR]) * sign,
                    m: toInt(match[MINUTE]) * sign,
                    s: toInt(match[SECOND]) * sign,
                    ms: toInt(match[MILLISECOND]) * sign
                };
            } else if (!!(match = isoDurationRegex.exec(input))) {
                sign = match[1] === '-' ? -1 : 1;
                parseIso = function (inp) {
                    var res = inp && parseFloat(inp.replace(',', '.'));
                    return (isNaN(res) ? 0 : res) * sign;
                };
                duration = {
                    y: parseIso(match[2]),
                    M: parseIso(match[3]),
                    d: parseIso(match[4]),
                    h: parseIso(match[5]),
                    m: parseIso(match[6]),
                    s: parseIso(match[7]),
                    w: parseIso(match[8])
                };
            }
            ret = new Duration(duration);
            if (moment.isDuration(input) && input.hasOwnProperty('_lang')) {
                ret._lang = input._lang;
            }
            return ret;
        };
        moment.version = VERSION;
        moment.defaultFormat = isoFormat;
        moment.ISO_8601 = function () {
        };
        moment.momentProperties = momentProperties;
        moment.updateOffset = function () {
        };
        moment.relativeTimeThreshold = function (threshold, limit) {
            if (relativeTimeThresholds[threshold] === undefined) {
                return false;
            }
            relativeTimeThresholds[threshold] = limit;
            return true;
        };
        moment.lang = function (key, values) {
            var r;
            if (!key) {
                return moment.fn._lang._abbr;
            }
            if (values) {
                loadLang(normalizeLanguage(key), values);
            } else if (values === null) {
                unloadLang(key);
                key = 'en';
            } else if (!languages[key]) {
                getLangDefinition(key);
            }
            r = moment.duration.fn._lang = moment.fn._lang = getLangDefinition(key);
            return r._abbr;
        };
        moment.langData = function (key) {
            if (key && key._lang && key._lang._abbr) {
                key = key._lang._abbr;
            }
            return getLangDefinition(key);
        };
        moment.isMoment = function (obj) {
            return obj instanceof Moment || obj != null && obj.hasOwnProperty('_isAMomentObject');
        };
        moment.isDuration = function (obj) {
            return obj instanceof Duration;
        };
        for (i = lists.length - 1; i >= 0; --i) {
            makeList(lists[i]);
        }
        moment.normalizeUnits = function (units) {
            return normalizeUnits(units);
        };
        moment.invalid = function (flags) {
            var m = moment.utc(NaN);
            if (flags != null) {
                extend(m._pf, flags);
            } else {
                m._pf.userInvalidated = true;
            }
            return m;
        };
        moment.parseZone = function () {
            return moment.apply(null, arguments).parseZone();
        };
        moment.parseTwoDigitYear = function (input) {
            return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
        };
        extend(moment.fn = Moment.prototype, {
            clone: function () {
                return moment(this);
            },
            valueOf: function () {
                return +this._d + (this._offset || 0) * 60000;
            },
            unix: function () {
                return Math.floor(+this / 1000);
            },
            toString: function () {
                return this.clone().lang('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
            },
            toDate: function () {
                return this._offset ? new Date(+this) : this._d;
            },
            toISOString: function () {
                var m = moment(this).utc();
                if (0 < m.year() && m.year() <= 9999) {
                    return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
                } else {
                    return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
                }
            },
            toArray: function () {
                var m = this;
                return [
                    m.year(),
                    m.month(),
                    m.date(),
                    m.hours(),
                    m.minutes(),
                    m.seconds(),
                    m.milliseconds()
                ];
            },
            isValid: function () {
                return isValid(this);
            },
            isDSTShifted: function () {
                if (this._a) {
                    return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;
                }
                return false;
            },
            parsingFlags: function () {
                return extend({}, this._pf);
            },
            invalidAt: function () {
                return this._pf.overflow;
            },
            utc: function () {
                return this.zone(0);
            },
            local: function () {
                this.zone(0);
                this._isUTC = false;
                return this;
            },
            format: function (inputString) {
                var output = formatMoment(this, inputString || moment.defaultFormat);
                return this.lang().postformat(output);
            },
            add: function (input, val) {
                var dur;
                if (typeof input === 'string' && typeof val === 'string') {
                    dur = moment.duration(isNaN(+val) ? +input : +val, isNaN(+val) ? val : input);
                } else if (typeof input === 'string') {
                    dur = moment.duration(+val, input);
                } else {
                    dur = moment.duration(input, val);
                }
                addOrSubtractDurationFromMoment(this, dur, 1);
                return this;
            },
            subtract: function (input, val) {
                var dur;
                if (typeof input === 'string' && typeof val === 'string') {
                    dur = moment.duration(isNaN(+val) ? +input : +val, isNaN(+val) ? val : input);
                } else if (typeof input === 'string') {
                    dur = moment.duration(+val, input);
                } else {
                    dur = moment.duration(input, val);
                }
                addOrSubtractDurationFromMoment(this, dur, -1);
                return this;
            },
            diff: function (input, units, asFloat) {
                var that = makeAs(input, this), zoneDiff = (this.zone() - that.zone()) * 60000, diff, output;
                units = normalizeUnits(units);
                if (units === 'year' || units === 'month') {
                    diff = (this.daysInMonth() + that.daysInMonth()) * 43200000;
                    output = (this.year() - that.year()) * 12 + (this.month() - that.month());
                    output += (this - moment(this).startOf('month') - (that - moment(that).startOf('month'))) / diff;
                    output -= (this.zone() - moment(this).startOf('month').zone() - (that.zone() - moment(that).startOf('month').zone())) * 60000 / diff;
                    if (units === 'year') {
                        output = output / 12;
                    }
                } else {
                    diff = this - that;
                    output = units === 'second' ? diff / 1000 : units === 'minute' ? diff / 60000 : units === 'hour' ? diff / 3600000 : units === 'day' ? (diff - zoneDiff) / 86400000 : units === 'week' ? (diff - zoneDiff) / 604800000 : diff;
                }
                return asFloat ? output : absRound(output);
            },
            from: function (time, withoutSuffix) {
                return moment.duration(this.diff(time)).lang(this.lang()._abbr).humanize(!withoutSuffix);
            },
            fromNow: function (withoutSuffix) {
                return this.from(moment(), withoutSuffix);
            },
            calendar: function (time) {
                var now = time || moment(), sod = makeAs(now, this).startOf('day'), diff = this.diff(sod, 'days', true), format = diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
                return this.format(this.lang().calendar(format, this));
            },
            isLeapYear: function () {
                return isLeapYear(this.year());
            },
            isDST: function () {
                return this.zone() < this.clone().month(0).zone() || this.zone() < this.clone().month(5).zone();
            },
            day: function (input) {
                var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
                if (input != null) {
                    input = parseWeekday(input, this.lang());
                    return this.add({ d: input - day });
                } else {
                    return day;
                }
            },
            month: makeAccessor('Month', true),
            startOf: function (units) {
                units = normalizeUnits(units);
                switch (units) {
                case 'year':
                    this.month(0);
                case 'quarter':
                case 'month':
                    this.date(1);
                case 'week':
                case 'isoWeek':
                case 'day':
                    this.hours(0);
                case 'hour':
                    this.minutes(0);
                case 'minute':
                    this.seconds(0);
                case 'second':
                    this.milliseconds(0);
                }
                if (units === 'week') {
                    this.weekday(0);
                } else if (units === 'isoWeek') {
                    this.isoWeekday(1);
                }
                if (units === 'quarter') {
                    this.month(Math.floor(this.month() / 3) * 3);
                }
                return this;
            },
            endOf: function (units) {
                units = normalizeUnits(units);
                return this.startOf(units).add(units === 'isoWeek' ? 'week' : units, 1).subtract('ms', 1);
            },
            isAfter: function (input, units) {
                units = typeof units !== 'undefined' ? units : 'millisecond';
                return +this.clone().startOf(units) > +moment(input).startOf(units);
            },
            isBefore: function (input, units) {
                units = typeof units !== 'undefined' ? units : 'millisecond';
                return +this.clone().startOf(units) < +moment(input).startOf(units);
            },
            isSame: function (input, units) {
                units = units || 'ms';
                return +this.clone().startOf(units) === +makeAs(input, this).startOf(units);
            },
            min: deprecate('moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548', function (other) {
                other = moment.apply(null, arguments);
                return other < this ? this : other;
            }),
            max: deprecate('moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548', function (other) {
                other = moment.apply(null, arguments);
                return other > this ? this : other;
            }),
            zone: function (input, keepTime) {
                var offset = this._offset || 0;
                if (input != null) {
                    if (typeof input === 'string') {
                        input = timezoneMinutesFromString(input);
                    }
                    if (Math.abs(input) < 16) {
                        input = input * 60;
                    }
                    this._offset = input;
                    this._isUTC = true;
                    if (offset !== input) {
                        if (!keepTime || this._changeInProgress) {
                            addOrSubtractDurationFromMoment(this, moment.duration(offset - input, 'm'), 1, false);
                        } else if (!this._changeInProgress) {
                            this._changeInProgress = true;
                            moment.updateOffset(this, true);
                            this._changeInProgress = null;
                        }
                    }
                } else {
                    return this._isUTC ? offset : this._d.getTimezoneOffset();
                }
                return this;
            },
            zoneAbbr: function () {
                return this._isUTC ? 'UTC' : '';
            },
            zoneName: function () {
                return this._isUTC ? 'Coordinated Universal Time' : '';
            },
            parseZone: function () {
                if (this._tzm) {
                    this.zone(this._tzm);
                } else if (typeof this._i === 'string') {
                    this.zone(this._i);
                }
                return this;
            },
            hasAlignedHourOffset: function (input) {
                if (!input) {
                    input = 0;
                } else {
                    input = moment(input).zone();
                }
                return (this.zone() - input) % 60 === 0;
            },
            daysInMonth: function () {
                return daysInMonth(this.year(), this.month());
            },
            dayOfYear: function (input) {
                var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 86400000) + 1;
                return input == null ? dayOfYear : this.add('d', input - dayOfYear);
            },
            quarter: function (input) {
                return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
            },
            weekYear: function (input) {
                var year = weekOfYear(this, this.lang()._week.dow, this.lang()._week.doy).year;
                return input == null ? year : this.add('y', input - year);
            },
            isoWeekYear: function (input) {
                var year = weekOfYear(this, 1, 4).year;
                return input == null ? year : this.add('y', input - year);
            },
            week: function (input) {
                var week = this.lang().week(this);
                return input == null ? week : this.add('d', (input - week) * 7);
            },
            isoWeek: function (input) {
                var week = weekOfYear(this, 1, 4).week;
                return input == null ? week : this.add('d', (input - week) * 7);
            },
            weekday: function (input) {
                var weekday = (this.day() + 7 - this.lang()._week.dow) % 7;
                return input == null ? weekday : this.add('d', input - weekday);
            },
            isoWeekday: function (input) {
                return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
            },
            isoWeeksInYear: function () {
                return weeksInYear(this.year(), 1, 4);
            },
            weeksInYear: function () {
                var weekInfo = this._lang._week;
                return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
            },
            get: function (units) {
                units = normalizeUnits(units);
                return this[units]();
            },
            set: function (units, value) {
                units = normalizeUnits(units);
                if (typeof this[units] === 'function') {
                    this[units](value);
                }
                return this;
            },
            lang: function (key) {
                if (key === undefined) {
                    return this._lang;
                } else {
                    this._lang = getLangDefinition(key);
                    return this;
                }
            }
        });
        function rawMonthSetter(mom, value) {
            var dayOfMonth;
            if (typeof value === 'string') {
                value = mom.lang().monthsParse(value);
                if (typeof value !== 'number') {
                    return mom;
                }
            }
            dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
            return mom;
        }
        function rawGetter(mom, unit) {
            return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
        }
        function rawSetter(mom, unit, value) {
            if (unit === 'Month') {
                return rawMonthSetter(mom, value);
            } else {
                return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
        function makeAccessor(unit, keepTime) {
            return function (value) {
                if (value != null) {
                    rawSetter(this, unit, value);
                    moment.updateOffset(this, keepTime);
                    return this;
                } else {
                    return rawGetter(this, unit);
                }
            };
        }
        moment.fn.millisecond = moment.fn.milliseconds = makeAccessor('Milliseconds', false);
        moment.fn.second = moment.fn.seconds = makeAccessor('Seconds', false);
        moment.fn.minute = moment.fn.minutes = makeAccessor('Minutes', false);
        moment.fn.hour = moment.fn.hours = makeAccessor('Hours', true);
        moment.fn.date = makeAccessor('Date', true);
        moment.fn.dates = deprecate('dates accessor is deprecated. Use date instead.', makeAccessor('Date', true));
        moment.fn.year = makeAccessor('FullYear', true);
        moment.fn.years = deprecate('years accessor is deprecated. Use year instead.', makeAccessor('FullYear', true));
        moment.fn.days = moment.fn.day;
        moment.fn.months = moment.fn.month;
        moment.fn.weeks = moment.fn.week;
        moment.fn.isoWeeks = moment.fn.isoWeek;
        moment.fn.quarters = moment.fn.quarter;
        moment.fn.toJSON = moment.fn.toISOString;
        extend(moment.duration.fn = Duration.prototype, {
            _bubble: function () {
                var milliseconds = this._milliseconds, days = this._days, months = this._months, data = this._data, seconds, minutes, hours, years;
                data.milliseconds = milliseconds % 1000;
                seconds = absRound(milliseconds / 1000);
                data.seconds = seconds % 60;
                minutes = absRound(seconds / 60);
                data.minutes = minutes % 60;
                hours = absRound(minutes / 60);
                data.hours = hours % 24;
                days += absRound(hours / 24);
                data.days = days % 30;
                months += absRound(days / 30);
                data.months = months % 12;
                years = absRound(months / 12);
                data.years = years;
            },
            weeks: function () {
                return absRound(this.days() / 7);
            },
            valueOf: function () {
                return this._milliseconds + this._days * 86400000 + this._months % 12 * 2592000000 + toInt(this._months / 12) * 31536000000;
            },
            humanize: function (withSuffix) {
                var difference = +this, output = relativeTime(difference, !withSuffix, this.lang());
                if (withSuffix) {
                    output = this.lang().pastFuture(difference, output);
                }
                return this.lang().postformat(output);
            },
            add: function (input, val) {
                var dur = moment.duration(input, val);
                this._milliseconds += dur._milliseconds;
                this._days += dur._days;
                this._months += dur._months;
                this._bubble();
                return this;
            },
            subtract: function (input, val) {
                var dur = moment.duration(input, val);
                this._milliseconds -= dur._milliseconds;
                this._days -= dur._days;
                this._months -= dur._months;
                this._bubble();
                return this;
            },
            get: function (units) {
                units = normalizeUnits(units);
                return this[units.toLowerCase() + 's']();
            },
            as: function (units) {
                units = normalizeUnits(units);
                return this['as' + units.charAt(0).toUpperCase() + units.slice(1) + 's']();
            },
            lang: moment.fn.lang,
            toIsoString: function () {
                var years = Math.abs(this.years()), months = Math.abs(this.months()), days = Math.abs(this.days()), hours = Math.abs(this.hours()), minutes = Math.abs(this.minutes()), seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);
                if (!this.asSeconds()) {
                    return 'P0D';
                }
                return (this.asSeconds() < 0 ? '-' : '') + 'P' + (years ? years + 'Y' : '') + (months ? months + 'M' : '') + (days ? days + 'D' : '') + (hours || minutes || seconds ? 'T' : '') + (hours ? hours + 'H' : '') + (minutes ? minutes + 'M' : '') + (seconds ? seconds + 'S' : '');
            }
        });
        function makeDurationGetter(name) {
            moment.duration.fn[name] = function () {
                return this._data[name];
            };
        }
        function makeDurationAsGetter(name, factor) {
            moment.duration.fn['as' + name] = function () {
                return +this / factor;
            };
        }
        for (i in unitMillisecondFactors) {
            if (unitMillisecondFactors.hasOwnProperty(i)) {
                makeDurationAsGetter(i, unitMillisecondFactors[i]);
                makeDurationGetter(i.toLowerCase());
            }
        }
        makeDurationAsGetter('Weeks', 604800000);
        moment.duration.fn.asMonths = function () {
            return (+this - this.years() * 31536000000) / 2592000000 + this.years() * 12;
        };
        moment.lang('en', {
            ordinal: function (number) {
                var b = number % 10, output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
                return number + output;
            }
        });
        function makeGlobal(shouldDeprecate) {
            if (typeof ender !== 'undefined') {
                return;
            }
            oldGlobalMoment = globalScope.moment;
            if (shouldDeprecate) {
                globalScope.moment = deprecate('Accessing Moment through the global scope is ' + 'deprecated, and will be removed in an upcoming ' + 'release.', moment);
            } else {
                globalScope.moment = moment;
            }
        }
        if (hasModule) {
            module.exports = moment;
        }
    }.call(this));
});

define('moment', ['moment/moment'], function ( main ) { return main; });

define('esui/lib/date', [
    'require',
    'moment'
], function (require) {
    var moment = require('moment');
    var date = {};
    date.dateFormats = [
        'YYYYMMDDHHmmss',
        'YYYY-MM-DD HH:mm:ss',
        'YYYY/MM/DD HH:mm:ss',
        'YYYY-MM-DDTHH:mm:ss.SSSZ'
    ];
    date.format = function (source, pattern) {
        return moment(source).format(pattern);
    };
    date.parse = function (source, format) {
        var dateTime = moment(source, format || date.dateFormats);
        return dateTime.toDate();
    };
    return { date: date };
});

define('esui/lib/event', [
    'require',
    'jquery'
], function (require) {
    var $ = require('jquery');
    return {
        on: function (element, type, listener) {
            $(element).bind(type, listener);
        },
        un: function (element, type, listener) {
            $(element).unbind(type, listener);
        }
    };
});

define('esui/lib/lang', [
    'require',
    'underscore'
], function (require) {
    var u = require('underscore');
    var lib = {};
    var counter = 8785925;
    lib.getGUID = function (prefix) {
        prefix = prefix || 'esui';
        return prefix + counter++;
    };
    lib.inherits = function (subClass, superClass) {
        var Empty = function () {
        };
        Empty.prototype = superClass.prototype;
        var selfPrototype = subClass.prototype;
        var proto = subClass.prototype = new Empty();
        for (var key in selfPrototype) {
            if (selfPrototype.hasOwnProperty(key)) {
                proto[key] = selfPrototype[key];
            }
        }
        subClass.prototype.constructor = subClass;
        subClass.superClass = superClass.prototype;
        return subClass;
    };
    lib.deepClone = function (obj) {
        if (!u.isObject(obj) || u.isFunction(obj) || u.isRegExp(obj)) {
            return obj;
        }
        if (u.isArray(obj)) {
            return u.map(obj, lib.deepClone);
        }
        var clone = {};
        u.each(obj, function (value, key) {
            clone[key] = lib.deepClone(value);
        });
        return clone;
    };
    lib.toDictionary = function (array) {
        var dictionary = {};
        u.each(array, function (value) {
            dictionary[value] = true;
        });
        return dictionary;
    };
    lib.clone = lib.deepClone;
    lib.isArray = u.isArray;
    lib.toArray = u.toArray;
    lib.extend = u.extend;
    lib.bind = u.bind;
    lib.curry = u.partial;
    lib.indexOf = u.indexOf;
    lib.decodeHTML = u.unescape;
    lib.encodeHTML = u.escape;
    return lib;
});

define('esui/lib/page', ['require'], function (require) {
    var documentElement = document.documentElement;
    var body = document.body;
    var viewRoot = document.compatMode === 'BackCompat' ? body : documentElement;
    var page = {};
    page.getWidth = function () {
        return Math.max(documentElement ? documentElement.scrollWidth : 0, body ? body.scrollWidth : 0, viewRoot ? viewRoot.clientWidth : 0, 0);
    };
    page.getHeight = function () {
        return Math.max(documentElement ? documentElement.scrollHeight : 0, body ? body.scrollHeight : 0, viewRoot ? viewRoot.clientHeight : 0, 0);
    };
    page.getViewWidth = function () {
        return viewRoot ? viewRoot.clientWidth : 0;
    };
    page.getViewHeight = function () {
        return viewRoot ? viewRoot.clientHeight : 0;
    };
    page.getScrollTop = function () {
        return window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
    };
    page.getScrollLeft = function () {
        return window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;
    };
    page.getClientTop = function () {
        return document.documentElement.clientTop || document.body.clientTop || 0;
    };
    page.getClientLeft = function () {
        return document.documentElement.clientLeft || document.body.clientLeft || 0;
    };
    return { page: page };
});

define('esui/lib/string', [
    'require',
    'underscore'
], function (require) {
    var u = require('underscore');
    var lib = {};
    var WHITESPACE = /^[\s\xa0\u3000]+|[\u3000\xa0\s]+$/g;
    lib.trim = function (source) {
        if (!source) {
            return '';
        }
        return String(source).replace(WHITESPACE, '');
    };
    lib.format = function (template, data) {
        if (!template) {
            return '';
        }
        if (data == null) {
            return template;
        }
        return template.replace(/\$\{(.+?)\}/g, function (match, key) {
            var replacer = data[key];
            if (typeof replacer === 'function') {
                replacer = replacer(key);
            }
            return replacer == null ? '' : replacer;
        });
    };
    lib.camelize = function (source) {
        if (!source) {
            return '';
        }
        return source.replace(/-([a-z])/g, function (match, alpha) {
            return alpha.toUpperCase();
        });
    };
    lib.pascalize = function (source) {
        if (!source) {
            return '';
        }
        return source.charAt(0).toUpperCase() + lib.camelize(source.slice(1));
    };
    lib.splitTokenList = function (input) {
        if (!input) {
            return [];
        }
        if (u.isArray(input)) {
            return;
        }
        return u.chain(input.split(/[,\s]/)).map(lib.trim).compact().value();
    };
    return lib;
});

define('esui/lib', [
    'require',
    'underscore',
    './lib/attribute',
    './lib/class',
    './lib/date',
    './lib/dom',
    './lib/event',
    './lib/lang',
    './lib/page',
    './lib/string'
], function (require) {
    var lib = {};
    var u = require('underscore');
    if (/msie (\d+\.\d+)/i.test(navigator.userAgent)) {
        lib.ie = document.documentMode || +RegExp.$1;
    }
    u.extend(lib, require('./lib/attribute'), require('./lib/class'), require('./lib/date'), require('./lib/dom'), require('./lib/event'), require('./lib/lang'), require('./lib/page'), require('./lib/string'));
    return lib;
});

void function (define) {
    define('eoo/oo', [], function () {
        var Empty = function () {
        };
        var NAME_PROPERTY_NAME = '__eooName__';
        var OWNER_PROPERTY_NAME = '__eooOwner__';
        function Class() {
            return Class.create.apply(Class, arguments);
        }
        Class.create = function (BaseClass, overrides) {
            overrides = overrides || {};
            BaseClass = BaseClass || Class;
            if (typeof BaseClass === 'object') {
                overrides = BaseClass;
                BaseClass = Class;
            }
            var kclass = inherit(BaseClass);
            var proto = kclass.prototype;
            eachObject(overrides, function (value, key) {
                if (typeof value === 'function') {
                    value[NAME_PROPERTY_NAME] = key;
                    value[OWNER_PROPERTY_NAME] = kclass;
                }
                proto[key] = value;
            });
            kclass.toString = toString;
            return kclass;
        };
        Class.static = typeof Object.create === 'function' ? Object.create : function (o) {
            if (arguments.length > 1) {
                throw new Error('Second argument not supported');
            }
            if (!(o instanceof Object)) {
                throw new TypeError('Argument must be an object');
            }
            Empty.prototype = o;
            return new Empty();
        };
        Class.toString = function () {
            return 'function Class() { [native code] }';
        };
        Class.prototype = {
            constructor: function () {
            },
            $self: Class,
            $superClass: Object,
            $super: function (args) {
                var method = this.$super.caller;
                var name = method[NAME_PROPERTY_NAME];
                var superClass = method[OWNER_PROPERTY_NAME].$superClass;
                var superMethod = superClass.prototype[name];
                if (typeof superMethod !== 'function') {
                    throw new TypeError('Call the super class\'s ' + name + ', but it is not a function!');
                }
                return superMethod.apply(this, args);
            }
        };
        function inherit(BaseClass) {
            var kclass = function () {
                return kclass.prototype.constructor.apply(this, arguments);
            };
            Empty.prototype = BaseClass.prototype;
            var proto = kclass.prototype = new Empty();
            proto.$self = kclass;
            if (!('$super' in proto)) {
                proto.$super = Class.prototype.$super;
            }
            kclass.$superClass = BaseClass;
            return kclass;
        }
        var hasEnumBug = !{ toString: 1 }.propertyIsEnumerable('toString');
        var enumProperties = [
                'constructor',
                'hasOwnProperty',
                'isPrototypeOf',
                'propertyIsEnumerable',
                'toString',
                'toLocaleString',
                'valueOf'
            ];
        function hasOwnProperty(obj, key) {
            return Object.prototype.hasOwnProperty.call(obj, key);
        }
        function eachObject(obj, fn) {
            for (var k in obj) {
                hasOwnProperty(obj, k) && fn(obj[k], k, obj);
            }
            if (hasEnumBug) {
                for (var i = enumProperties.length - 1; i > -1; --i) {
                    var key = enumProperties[i];
                    hasOwnProperty(obj, key) && fn(obj[key], key, obj);
                }
            }
        }
        function toString() {
            return this.prototype.constructor.toString();
        }
        return Class;
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
});

void function (define, undefined) {
    define('eoo/defineAccessor', ['require'], function (require) {
        var MEMBERS = '__eooPrivateMembers__';
        function simpleGetter(name) {
            var body = 'return typeof this.' + MEMBERS + ' === \'object\' ? this.' + MEMBERS + '[\'' + name + '\'] : undefined;';
            return new Function(body);
        }
        function simpleSetter(name) {
            var body = 'this.' + MEMBERS + ' = this.' + MEMBERS + ' || {};\n' + 'this.' + MEMBERS + '[\'' + name + '\'] = value;';
            return new Function('value', body);
        }
        return function (obj, name, accessor) {
            var upperName = name.charAt(0).toUpperCase() + name.slice(1);
            var getter = 'get' + upperName;
            var setter = 'set' + upperName;
            if (!accessor) {
                obj[getter] = !accessor || typeof accessor.get !== 'function' ? simpleGetter(name) : accessor.get;
                obj[setter] = !accessor || typeof accessor.set !== 'function' ? simpleSetter(name) : accessor.set;
            } else {
                typeof accessor.get === 'function' && (obj[getter] = accessor.get);
                typeof accessor.set === 'function' && (obj[setter] = accessor.set);
            }
        };
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
});

void function (define) {
    define('eoo/main', [
        'require',
        './oo',
        './defineAccessor'
    ], function (require) {
        var oo = require('./oo');
        oo.defineAccessor = require('./defineAccessor');
        return oo;
    });
}(typeof define === 'function' && define.amd ? define : function (factory) {
    module.exports = factory(require);
});

define('eoo', ['eoo/main'], function ( main ) { return main; });

define('esui/ControlCollection', [
    'require',
    'underscore'
], function (require) {
    var u = require('underscore');
    function ControlCollection() {
        this.length = 0;
    }
    ControlCollection.prototype.splice = Array.prototype.splice;
    ControlCollection.prototype.add = function (control) {
        var index = u.indexOf(this, control);
        if (index < 0) {
            [].push.call(this, control);
        }
    };
    ControlCollection.prototype.remove = function (control) {
        for (var i = 0; i < this.length; i++) {
            if (this[i] === control) {
                [].splice.call(this, i, 1);
                return;
            }
        }
    };
    ControlCollection.prototype.each = function (iterator, thisObject) {
        u.each(this, function (control, i) {
            iterator.call(thisObject || control, control, i, this);
        });
    };
    ControlCollection.prototype.invoke = function (methodName) {
        var args = u.clone([this]);
        args.push.apply(args, arguments);
        return u.invoke.apply(u, args);
    };
    u.each([
        'enable',
        'disable',
        'setDisabled',
        'show',
        'hide',
        'toggle',
        'addChild',
        'removeChild',
        'set',
        'setProperties',
        'addState',
        'removeState',
        'toggleState',
        'on',
        'off',
        'fire',
        'dispose',
        'destroy',
        'setViewContext',
        'render',
        'repaint',
        'appendTo',
        'insertBefore'
    ], function (method) {
        ControlCollection.prototype[method] = function () {
            var args = [method];
            args.push.apply(args, arguments);
            var result = this.invoke.apply(this, args);
            return result && result[0];
        };
    });
    u.each([
        'isDisabled',
        'isHidden',
        'hasState',
        'get',
        'getCategory',
        'getChild',
        'getChildSafely'
    ], function (method) {
        ControlCollection.prototype[method] = function () {
            var first = this[0];
            return first ? first[method].apply(first, arguments) : undefined;
        };
    });
    return ControlCollection;
});

define('esui/SafeWrapper', [
    'require',
    'eoo',
    'underscore'
], function (require) {
    var eoo = require('eoo');
    var u = require('underscore');
    var SafeWrapper = eoo.create({
            getCategory: function () {
                return 'control';
            },
            getChildSafely: function (childName) {
                var wrapper = new SafeWrapper();
                wrapper.childName = childName;
                wrapper.parent = this;
                if (this.viewContext) {
                    wrapper.viewContext = this.viewContext;
                }
                return wrapper;
            }
        });
    u.each([
        'enable',
        'disable',
        'setDisabled',
        'show',
        'hide',
        'toggle',
        'setValue',
        'setRawValue',
        'addChild',
        'removeChild',
        'set',
        'addState',
        'removeState',
        'toggleState',
        'on',
        'off',
        'fire',
        'dispose',
        'destroy',
        'initOptions',
        'createMain',
        'initStructure',
        'setViewContext',
        'render',
        'repaint',
        'appendTo',
        'insertBefore',
        'initChildren',
        'disposeChildren'
    ], function (method) {
        SafeWrapper.prototype[method] = function () {
        };
    });
    u.each([
        'isDisabled',
        'isHidden',
        'hasState',
        'isPropertyChanged'
    ], function (method) {
        SafeWrapper.prototype[method] = function () {
            return false;
        };
    });
    u.each([
        'getRawValue',
        'getChild',
        'get'
    ], function (method) {
        SafeWrapper.prototype[method] = function () {
            return null;
        };
    });
    u.each(['getValue'], function (method) {
        SafeWrapper.prototype[method] = function () {
            return '';
        };
    });
    u.each(['setProperties'], function (method) {
        SafeWrapper.prototype[method] = function () {
            return {};
        };
    });
    return SafeWrapper;
});

define('esui/ViewContext', [
    'require',
    'eoo',
    './ControlCollection',
    'underscore',
    './SafeWrapper'
], function (require) {
    var eoo = require('eoo');
    var ControlCollection = require('./ControlCollection');
    var u = require('underscore');
    var SafeWrapper = require('./SafeWrapper');
    var ControlGroup = eoo.create(ControlCollection, {
            constructor: function () {
                this.$super(arguments);
                this.name = name;
            },
            add: undefined,
            remove: undefined,
            disposeGroup: function () {
                for (var i = 0; i < this.length; i++) {
                    delete this[i];
                }
                this.length = 0;
            }
        });
    function addToGroup(control, group) {
        ControlCollection.prototype.add.call(group, control);
    }
    function removeFromGroup(control, group) {
        ControlCollection.prototype.remove.call(group, control);
    }
    function getGroupNames(control) {
        var group = control.get('group');
        return group ? group.split(/[\t\r\n ]/) : [];
    }
    var counter = 8587523;
    function getGUID() {
        return 'vt' + counter++;
    }
    var pool = {};
    var ViewContext = eoo.create({
            constructor: function (id) {
                this.controls = {};
                this.groups = {};
                id = id || getGUID();
                if (pool.hasOwnProperty(id)) {
                    var i = 1;
                    var prefix = id + '-';
                    while (pool.hasOwnProperty(prefix + i)) {
                        i++;
                    }
                    id = prefix + i;
                }
                this.id = id;
                pool[this.id] = this;
            },
            add: function (control) {
                var exists = this.controls[control.id];
                if (exists) {
                    if (exists === control) {
                        return;
                    }
                    exists.setViewContext(null);
                }
                this.controls[control.id] = control;
                var groups = getGroupNames(control);
                for (var i = 0; i < groups.length; i++) {
                    var groupName = groups[i];
                    if (!groupName) {
                        continue;
                    }
                    var group = this.getGroup(groupName);
                    addToGroup(control, group);
                }
                control.setViewContext(this);
            },
            remove: function (control) {
                delete this.controls[control.id];
                var groups = getGroupNames(control);
                for (var i = 0; i < groups.length; i++) {
                    var groupName = groups[i];
                    if (!groupName) {
                        continue;
                    }
                    var group = this.getGroup(groupName);
                    removeFromGroup(control, group);
                }
                control.setViewContext(null);
            },
            get: function (id) {
                return this.controls[id];
            },
            getControls: function () {
                return u.extend({}, this.controls);
            },
            getSafely: function (id) {
                var control = this.get(id);
                if (!control) {
                    control = new SafeWrapper();
                    control.id = id;
                    control.viewContext = this;
                }
                return control;
            },
            getGroup: function (name) {
                if (!name) {
                    throw new Error('name is unspecified');
                }
                var group = this.groups[name];
                if (!group) {
                    group = this.groups[name] = new ControlGroup(name);
                }
                return group;
            },
            clean: function () {
                for (var id in this.controls) {
                    if (this.controls.hasOwnProperty(id)) {
                        var control = this.controls[id];
                        control.dispose();
                        if (control.viewContext && control.viewContext === this) {
                            this.remove(control);
                        }
                    }
                }
                for (var name in this.groups) {
                    if (this.groups.hasOwnProperty(name)) {
                        this.groups[name].disposeGroup();
                        this.groups[name] = undefined;
                    }
                }
            },
            dispose: function () {
                this.clean();
                delete pool[this.id];
            }
        });
    ViewContext.get = function (id) {
        return pool[id] || null;
    };
    return ViewContext;
});

define('esui/main', [
    'require',
    './lib',
    'underscore',
    'jquery',
    './ViewContext',
    './ControlCollection'
], function (require) {
    var lib = require('./lib');
    var u = require('underscore');
    var $ = require('jquery');
    var main = {};
    main.version = '3.2.0-beta.1';
    var ViewContext = require('./ViewContext');
    var defaultViewContext = new ViewContext('default');
    main.getViewContext = function () {
        return defaultViewContext;
    };
    var config = {
            uiPrefix: 'data-ui',
            extensionPrefix: 'data-ui-extension',
            customElementPrefix: 'esui',
            instanceAttr: 'data-ctrl-id',
            viewContextAttr: 'data-ctrl-view-context',
            uiClassPrefix: 'ui',
            skinClassPrefix: 'skin',
            stateClassPrefix: 'state'
        };
    main.config = function (info) {
        u.extend(config, info);
    };
    main.getConfig = function (name) {
        return config[name];
    };
    main.parseAttribute = function (source, valueReplacer, valueParser) {
        if (!source) {
            return {};
        }
        var result = {};
        var lastStop = 0;
        var cursor = 0;
        while (cursor < source.length) {
            while (cursor < source.length && source.charAt(cursor) !== ':') {
                cursor++;
            }
            if (cursor >= source.length) {
                break;
            }
            var key = lib.trim(source.slice(lastStop, cursor));
            cursor++;
            lastStop = cursor;
            while (cursor < source.length && source.charAt(cursor) !== ';') {
                cursor++;
            }
            var lookAheadIndex = cursor + 1;
            while (lookAheadIndex < source.length) {
                var ch = source.charAt(lookAheadIndex);
                if (ch === ';') {
                    cursor = lookAheadIndex;
                }
                if (ch === ':') {
                    break;
                }
                lookAheadIndex++;
            }
            var value = lib.trim(source.slice(lastStop, cursor));
            value = valueParser ? valueParser(value) : value;
            result[key] = valueReplacer ? valueReplacer(value) : value;
            cursor++;
            lastStop = cursor;
        }
        return result;
    };
    main.getControlByDOM = function (dom) {
        if (!dom) {
            return null;
        }
        var getConf = main.getConfig;
        var controlId = dom.getAttribute(getConf('instanceAttr'));
        var viewContextId = dom.getAttribute(getConf('viewContextAttr'));
        var viewContext;
        if (controlId && viewContextId && (viewContext = ViewContext.get(viewContextId))) {
            return viewContext.get(controlId);
        }
        return null;
    };
    function registerClass(classFunc, container) {
        if (typeof classFunc === 'function') {
            var type = classFunc.prototype.type;
            if (type in container) {
                throw new Error(type + ' already exists!');
            }
            container[type] = classFunc;
        }
    }
    function createInstance(type, options, container) {
        var Constructor = container[type];
        if (Constructor) {
            delete options.type;
            return new Constructor(options);
        }
        return null;
    }
    var controlClasses = {};
    main.register = function (controlClass) {
        registerClass(controlClass, controlClasses);
    };
    main.create = function (type, options) {
        return createInstance(type, options, controlClasses);
    };
    main.get = function (id) {
        return defaultViewContext.get(id);
    };
    main.getSafely = function (id) {
        return defaultViewContext.getSafely(id);
    };
    var ControlCollection = require('./ControlCollection');
    main.wrap = function () {
        var collection = new ControlCollection();
        for (var i = 0; i < arguments.length; i++) {
            collection.add(arguments[i]);
        }
        return collection;
    };
    main.init = function (wrap, options) {
        wrap = wrap || document.body;
        options = options || {};
        var defaultValueParser = function (value) {
            var coreNumber = /^[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)$/;
            if (value === 'true') {
                value = true;
            } else if (value === 'false') {
                value = false;
            } else if (coreNumber.test(value)) {
                value = +value;
            } else if (/^'.+?'$/.test(value)) {
                value = value.slice(1, -1);
            }
            return value;
        };
        var valueParser = options.valueParser || defaultValueParser;
        var valueReplacer = options.valueReplacer || function (value) {
                return value;
            };
        function joinCamelCase(source) {
            function replacer(c) {
                return c.toUpperCase();
            }
            for (var i = 1, len = source.length; i < len; i++) {
                source[i] = source[i].replace(/^[a-z]/, replacer);
            }
            return source.join('');
        }
        function noOverrideExtend(target, source) {
            for (var key in source) {
                if (!(key in target)) {
                    target[key] = source[key];
                }
            }
        }
        function extendToOption(optionObject, terms, value) {
            if (terms.length === 0) {
                noOverrideExtend(optionObject, main.parseAttribute(value, valueReplacer, valueParser));
            } else {
                optionObject[joinCamelCase(terms)] = valueReplacer(valueParser(value));
            }
        }
        function parseTypeFormCustomTag(element) {
            var customElementPrefix = main.getConfig('customElementPrefix');
            var nodeName = element.nodeName.toLowerCase();
            var esuiPrefixIndex = nodeName.indexOf(customElementPrefix);
            if (esuiPrefixIndex === 0) {
                var typeFromCustomElement;
                typeFromCustomElement = nodeName.replace(/-(\S)/g, function (match, ch) {
                    return ch.toUpperCase();
                });
                typeFromCustomElement = typeFromCustomElement.slice(customElementPrefix.length);
                return typeFromCustomElement;
            }
            return;
        }
        var uiPrefix = main.getConfig('uiPrefix');
        var extPrefix = main.getConfig('extensionPrefix');
        var customElementPrefix = main.getConfig('customElementPrefix');
        var uiPrefixLen = uiPrefix.length;
        var extPrefixLen = extPrefix.length;
        var properties = options.properties || {};
        var controls = [];
        var pseudoClassName = customElementPrefix;
        if (u.isObject($.expr[':']) && !$.expr[':'][pseudoClassName]) {
            $.expr[':'][pseudoClassName] = function (element) {
                return $(element).is('[' + uiPrefix + '],[' + uiPrefix + '-type]') || element.tagName.indexOf(customElementPrefix.toUpperCase() + '-') === 0;
            };
        }
        $(wrap).find(':' + pseudoClassName).each(function (i, element) {
            if (element.getAttribute(config.instanceAttr)) {
                return;
            }
            var controlOptions = {};
            var extensionOptions = {};
            u.each(element.attributes, function (attribute, j) {
                var name = attribute.name;
                var value = attribute.value;
                var terms;
                if (name.indexOf(extPrefix) === 0) {
                    terms = name.slice(extPrefixLen + 1).split('-');
                    var extKey = terms[0];
                    terms.shift();
                    var extOption = extensionOptions[extKey];
                    if (!extOption) {
                        extOption = extensionOptions[extKey] = {};
                    }
                    extendToOption(extOption, terms, value);
                } else if (name.indexOf(uiPrefix) === 0) {
                    terms = name.length === uiPrefixLen ? [] : name.slice(uiPrefixLen + 1).split('-');
                    extendToOption(controlOptions, terms, value);
                }
            });
            var type = controlOptions.type;
            if (!type) {
                type = parseTypeFormCustomTag(element);
                controlOptions.type = type;
            }
            if (type) {
                var controlId = controlOptions.id;
                var customOptions = controlId ? properties[controlId] : {};
                for (var key in customOptions) {
                    if (customOptions.hasOwnProperty(key)) {
                        controlOptions[key] = valueReplacer(customOptions[key]);
                    }
                }
                var extensions = controlOptions.extensions || [];
                controlOptions.extensions = extensions;
                for (var key2 in extensionOptions) {
                    if (extensionOptions.hasOwnProperty(key2)) {
                        var extOption = extensionOptions[key2];
                        var extension = main.createExtension(extOption.type, extOption);
                        extension && extensions.push(extension);
                    }
                }
                controlOptions.viewContext = options.viewContext;
                controlOptions.renderOptions = options;
                controlOptions.main = element;
                var control = main.create(type, controlOptions);
                if (control) {
                    controls.push(control);
                    if (options.parent) {
                        options.parent.addChild(control);
                    }
                    control.render();
                }
            }
        });
        return controls;
    };
    var extensionClasses = {};
    main.registerExtension = function (extensionClass) {
        registerClass(extensionClass, extensionClasses);
    };
    main.createExtension = function (type, options) {
        return createInstance(type, options, extensionClasses);
    };
    var globalExtensionOptions = {};
    main.attachExtension = function (type, options) {
        globalExtensionOptions[type] = options;
    };
    main.createGlobalExtensions = function () {
        var extensions = [];
        for (var type in globalExtensionOptions) {
            if (globalExtensionOptions.hasOwnProperty(type)) {
                var extension = main.createExtension(type, globalExtensionOptions[type]);
                extension && extensions.push(extension);
            }
        }
        return extensions;
    };
    var ruleClasses = [];
    main.registerRule = function (ruleClass, priority) {
        ruleClasses.push({
            type: ruleClass,
            priority: priority
        });
        ruleClasses.sort(function (x, y) {
            return x.priority - y.priority;
        });
    };
    main.createRulesByControl = function (control) {
        var rules = [];
        for (var i = 0; i < ruleClasses.length; i++) {
            var RuleClass = ruleClasses[i].type;
            if (control.get(RuleClass.prototype.type) != null) {
                rules.push(new RuleClass());
            }
        }
        return rules;
    };
    return main;
});

define('esui', ['esui/main'], function ( main ) { return main; });

define('esui/helper/children', [
    'require',
    'underscore',
    '../main'
], function (require) {
    var u = require('underscore');
    var ui = require('../main');
    var helper = {};
    helper.initChildren = function (wrap, options) {
        wrap = wrap || this.control.main;
        options = u.extend({}, this.control.renderOptions, options);
        options.viewContext = this.control.viewContext;
        options.parent = this.control;
        return ui.init(wrap, options);
    };
    helper.disposeChildren = function () {
        var children = this.control.children.slice();
        u.each(children, function (child) {
            child.dispose();
        });
        this.control.children = [];
        this.control.childrenIndex = {};
    };
    helper.disableChildren = function () {
        u.each(this.control.children, function (child) {
            child.disable();
        });
    };
    helper.enableChildren = function () {
        u.each(this.control.children, function (child) {
            child.enable();
        });
    };
    return helper;
});

define('esui/helper/dom', [
    'require',
    'underscore',
    '../lib',
    '../main',
    'jquery'
], function (require) {
    function getControlClassType(control) {
        var type = control.styleType || control.type;
        return type.toLowerCase();
    }
    function joinByStrike() {
        return [].slice.call(arguments, 0).join('-');
    }
    var u = require('underscore');
    var lib = require('../lib');
    var ui = require('../main');
    var uiClassPrefix = 'uiClassPrefix';
    var $ = require('jquery');
    var helper = {};
    helper.getPartClasses = function (part) {
        if (part && this.partClassCache && this.partClassCache.hasOwnProperty(part)) {
            return this.partClassCache[part].slice();
        }
        var type = getControlClassType(this.control);
        var skin = this.control.skin;
        var prefix = ui.getConfig(uiClassPrefix);
        var skinPrefix = ui.getConfig('skinClassPrefix');
        var classes = [];
        if (part) {
            classes.push(joinByStrike(prefix, type, part));
            if (skin) {
                classes.push(joinByStrike(skinPrefix, skin, type, part));
            }
            if (!this.partClassCache) {
                this.partClassCache = {};
            }
            this.partClassCache[part] = classes.slice();
        } else {
            classes.push(joinByStrike(prefix, 'ctrl'));
            classes.push(joinByStrike(prefix, type));
            if (skin) {
                classes.push(joinByStrike(skinPrefix, skin), joinByStrike(skinPrefix, skin, type));
            }
        }
        return classes;
    };
    helper.getPartClassName = function (part) {
        return this.getPartClasses(part).join(' ');
    };
    helper.getPrimaryClassName = function (part) {
        var type = getControlClassType(this.control);
        if (part) {
            return joinByStrike(ui.getConfig(uiClassPrefix), type, part);
        }
        return joinByStrike(ui.getConfig(uiClassPrefix), type);
    };
    helper.getPrefixClass = function (name) {
        var pre = ui.getConfig(uiClassPrefix);
        return joinByStrike(pre, name);
    };
    helper.getIconClass = function (name) {
        var icon = 'icon';
        if (name) {
            return joinByStrike(ui.getConfig(uiClassPrefix), icon, name);
        }
        return joinByStrike(ui.getConfig(uiClassPrefix), icon);
    };
    helper.addPartClasses = function (part, element) {
        if (typeof element === 'string') {
            element = this.getPart(element);
        }
        element = element || this.control.main;
        $(element).addClass(this.getPartClassName(part));
    };
    helper.removePartClasses = function (part, element) {
        if (typeof element === 'string') {
            element = this.getPart(element);
        }
        element = element || this.control.main;
        $(element).removeClass(this.getPartClassName(part));
    };
    helper.getStateClasses = function (state) {
        if (this.stateClassCache && this.stateClassCache.hasOwnProperty(state)) {
            return this.stateClassCache[state].slice();
        }
        var type = getControlClassType(this.control);
        var getConf = ui.getConfig;
        var classes = [
                joinByStrike(getConf(uiClassPrefix), type, state),
                joinByStrike(getConf('stateClassPrefix'), state)
            ];
        var skin = this.control.skin;
        if (skin) {
            var skinPrefix = getConf('skinClassPrefix');
            classes.push(joinByStrike(skinPrefix, skin, state), joinByStrike(skinPrefix, skin, type, state));
        }
        if (!this.stateClassCache) {
            this.stateClassCache = {};
            this.stateClassCache[state] = classes.slice();
        }
        return classes;
    };
    helper.addStateClasses = function (state) {
        var element = this.control.main;
        $(element).addClass(this.getStateClasses(state).join(' '));
    };
    helper.removeStateClasses = function (state) {
        var element = this.control.main;
        $(element).removeClass(this.getStateClasses(state).join(' '));
    };
    helper.addVariantClasses = function () {
        var me = this;
        var element = me.control.main;
        var variants = me.control.variants;
        var cls = [];
        u.each(variants, function (variant) {
            cls.push(me.getPrimaryClassName(variant));
        });
        $(element).addClass(cls.join(' '));
    };
    helper.getId = function (part) {
        part = part ? '-' + part : '';
        if (!this.control.domIDPrefix) {
            this.control.domIDPrefix = this.control.viewContext && this.control.viewContext.id;
        }
        var prefix = this.control.domIDPrefix ? this.control.domIDPrefix + '-' : '';
        return 'ctrl-' + prefix + this.control.id + part;
    };
    helper.createPart = function (part, nodeName) {
        nodeName = nodeName || 'div';
        var element = document.createElement(nodeName);
        element.id = this.getId(part);
        this.addPartClasses(part, element);
        return element;
    };
    helper.getPart = function (part) {
        return lib.g(this.getId(part));
    };
    helper.isPart = function (element, part) {
        var className = this.getPartClasses(part)[0];
        return lib.hasClass(element, className);
    };
    var INPUT_SPECIFIED_ATTRIBUTES = {
            type: true,
            name: true,
            alt: true,
            autocomplete: true,
            autofocus: true,
            checked: true,
            dirname: true,
            disabled: true,
            form: true,
            formaction: true,
            formenctype: true,
            formmethod: true,
            formnovalidate: true,
            formtarget: true,
            width: true,
            height: true,
            inputmode: true,
            list: true,
            max: true,
            maxlength: true,
            min: true,
            minlength: true,
            multiple: true,
            pattern: true,
            placeholder: true,
            readonly: true,
            required: true,
            size: true,
            src: true,
            step: true,
            value: true
        };
    helper.replaceMain = function (main) {
        main = main || this.control.createMain();
        var initialMain = this.control.main;
        var $initialMain = $(initialMain);
        $initialMain.attr(ui.getConfig('instanceAttr'), lib.getGUID());
        var $main = $(main);
        var attributes = initialMain.attributes;
        for (var i = 0; i < attributes.length; i++) {
            var attribute = attributes[i];
            var name = attribute.name;
            if (lib.hasAttribute(initialMain, name) && !INPUT_SPECIFIED_ATTRIBUTES.hasOwnProperty(name)) {
                $main.attr(name, attribute.value);
                if (name.indexOf(ui.getConfig('uiPrefix')) === 0) {
                    $initialMain.removeAttr(name);
                    i--;
                }
            }
        }
        $initialMain.before($main);
        $initialMain.remove();
        this.control.main = main;
        return initialMain;
    };
    var INPUT_PROPERTY_MAPPING = {
            name: { name: 'name' },
            maxlength: {
                name: 'maxLength',
                type: 'number'
            },
            required: {
                name: 'required',
                type: 'boolean'
            },
            pattern: { name: 'pattern' },
            min: {
                name: 'min',
                type: 'number'
            },
            max: {
                name: 'max',
                type: 'number'
            },
            autofocus: {
                name: 'autoFocus',
                type: 'boolean'
            },
            disabled: {
                name: 'disabled',
                type: 'boolean'
            },
            readonly: {
                name: 'readOnly',
                type: 'boolean'
            }
        };
    helper.extractOptionsFromInput = function (input, options) {
        var result = {};
        var $input = $(input);
        u.each(INPUT_PROPERTY_MAPPING, function (config, attributeName) {
            var specified = lib.hasAttribute(input, attributeName);
            if (specified) {
                var value = $input.attr(attributeName);
                switch (config.type) {
                case 'boolean':
                    value = specified;
                    break;
                case 'number':
                    value = parseInt(value, 10);
                    break;
                }
                result[config.name] = value;
            }
        });
        if (lib.hasAttribute(input, 'value') || !$input.is('select') && input.value || $input.is('textarea')) {
            result.value = $input.val();
        }
        return u.defaults(options || {}, result);
    };
    return helper;
});

define('esui/helper/event', [
    'require',
    'jquery',
    'underscore'
], function (require) {
    var $ = require('jquery');
    var u = require('underscore');
    var helper = {};
    function formatEventType(types, namespace) {
        var formatString = function (strTypes) {
            var arrTypes = strTypes.split(' ');
            arrTypes = u.map(arrTypes, function (t) {
                if (/\./.test(t)) {
                    return t;
                }
                return t + '.' + namespace;
            });
            return arrTypes.join(' ');
        };
        if (typeof types === 'string') {
            return formatString(types);
        }
        if (typeof types === 'object') {
            u.map(types, function (t) {
                var objType = {};
                objType[formatString(t)] = types[t];
                return objType;
            });
            return types;
        }
    }
    function addEvent(option, element, type, selector, data, handler) {
        var me = this;
        var ctrl = me.control;
        if (typeof element === 'string') {
            element = me.getPart(element);
        }
        if (data == null && handler == null) {
            handler = selector;
            data = selector = undefined;
        } else if (handler == null) {
            if (typeof selector === 'string') {
                handler = data;
                data = undefined;
            } else {
                handler = data;
                data = selector;
                selector = undefined;
            }
        }
        var $element = $(element);
        ctrl.domEvents.push($element);
        function handlerProxy() {
            if (!option.sikpStateCheck && u.any(ctrl.ignoreStates, function (state) {
                    return ctrl.hasState(state);
                })) {
                return;
            }
            return (typeof handler === 'string' ? ctrl[handler] : handler).apply(ctrl, arguments);
        }
        var types = formatEventType(type, ctrl.type);
        if (option.once) {
            $element.one(types, selector, data, handlerProxy);
        } else {
            if (typeof handler !== 'string') {
                handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++;
            }
            $element.on(types, selector, data, handlerProxy);
        }
    }
    helper.addDOMEvent = function (options, element, type, selector, data, handler) {
        if ($.isPlainObject(options)) {
            addEvent.call(this, options, element, type, selector, data, handler);
        } else {
            addEvent.call(this, {}, options, element, type, selector, data);
        }
    };
    helper.delegateDOMEvent = function (element, type, newType) {
        var handler = function (e) {
            this.fire(newType || e.type, {}, e);
        };
        this.addDOMEvent(element, type, handler);
    };
    helper.removeDOMEvent = function (element, type, selector, handler) {
        if (typeof element === 'string') {
            element = this.getPart(element);
        }
        if (!(typeof selector === 'string')) {
            handler = selector;
            selector = undefined;
        }
        var $element = $(element);
        $element.off(type, selector, handler);
    };
    return helper;
});

define('esui/helper/html', ['require'], function (require) {
    var helper = {};
    var SELF_CLOSING_TAGS = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
        };
    helper.getPartBeginTag = function (part, nodeName) {
        var html = '<' + nodeName + ' id="' + this.getId(part) + '" ' + 'class="' + this.getPartClassName(part) + '">';
        return html;
    };
    helper.getPartEndTag = function (part, nodeName) {
        var html = SELF_CLOSING_TAGS.hasOwnProperty(nodeName) ? ' />' : '</' + nodeName + '>';
        return html;
    };
    helper.getPartHTML = function (part, nodeName) {
        return this.getPartBeginTag(part, nodeName) + this.getPartEndTag(part, nodeName);
    };
    return helper;
});

define('esui/helper/life', [
    'require',
    'underscore',
    '../main'
], function (require) {
    var LifeCycle = {
            NEW: 0,
            INITED: 1,
            RENDERED: 2,
            DISPOSED: 4
        };
    var u = require('underscore');
    var ui = require('../main');
    var helper = {};
    helper.initViewContext = function () {
        var viewContext = this.control.viewContext || ui.getViewContext();
        this.control.viewContext = null;
        this.control.setViewContext(viewContext);
    };
    helper.initExtensions = function () {
        var extensions = this.control.extensions;
        if (!u.isArray(extensions)) {
            extensions = this.control.extensions = [];
        }
        Array.prototype.push.apply(extensions, ui.createGlobalExtensions());
        var registeredExtensions = {};
        for (var i = 0; i < extensions.length; i++) {
            var extension = extensions[i];
            if (!registeredExtensions[extension.type]) {
                extension.attachTo(this.control);
                registeredExtensions[extension.type] = true;
            }
        }
    };
    helper.isInStage = function (stage) {
        if (LifeCycle[stage] == null) {
            throw new Error('Invalid life cycle stage: ' + stage);
        }
        return this.control.stage === LifeCycle[stage];
    };
    helper.changeStage = function (stage) {
        if (LifeCycle[stage] == null) {
            throw new Error('Invalid life cycle stage: ' + stage);
        }
        this.control.stage = LifeCycle[stage];
    };
    helper.dispose = function () {
        var me = this;
        var ctrl = me.control;
        u.invoke(ctrl.extensions, 'dispose');
        ctrl.extensions = null;
        ctrl.helper.disposeChildren();
        u.each(ctrl.domEvents, function ($ele) {
            me.removeDOMEvent($ele, '.' + ctrl.type);
        });
        ctrl.domEvents = [];
        if (ctrl.parent) {
            ctrl.parent.removeChild(ctrl);
        }
        if (ctrl.viewContext) {
            ctrl.viewContext.remove(ctrl);
        }
        ctrl.renderOptions = null;
    };
    helper.beforeDispose = function () {
        this.control.fire('beforedispose');
    };
    helper.afterDispose = function () {
        this.changeStage('DISPOSED');
        this.control.fire('afterdispose');
        this.control.destroyEvents();
    };
    return helper;
});

define('esui/helper/template', [
    'require',
    'underscore'
], function (require) {
    var u = require('underscore');
    var FILTERS = {
            'id': function (part, instance) {
                return instance.helper.getId(part);
            },
            'class': function (part, instance) {
                return instance.helper.getPartClassName(part);
            },
            'part': function (part, nodeName, instance) {
                return instance.helper.getPartHTML(part, nodeName);
            }
        };
    var helper = {};
    helper.setTemplateEngine = function (engine) {
        this.templateEngine = engine;
        if (!engine.esui) {
            this.initializeTemplateEngineExtension();
        }
    };
    helper.initializeTemplateEngineExtension = function () {
        u.each(FILTERS, function (filter, name) {
            this.addFilter(name, filter);
        }, this.templateEngine);
    };
    helper.renderTemplate = function (target, data) {
        var helper = this;
        data = data || {};
        var templateData = {
                get: function (name) {
                    if (name === 'instance') {
                        return helper.control;
                    }
                    if (typeof data.get === 'function') {
                        return data.get(name);
                    }
                    var propertyName = name;
                    var filter = null;
                    var indexOfDot = name.lastIndexOf('.');
                    if (indexOfDot > 0) {
                        propertyName = name.substring(0, indexOfDot);
                        var filterName = name.substring(indexOfDot + 1);
                        if (filterName && FILTERS.hasOwnProperty(filterName)) {
                            filter = FILTERS[filterName];
                        }
                    }
                    var value = data.hasOwnProperty(propertyName) ? data[propertyName] : propertyName;
                    if (filter) {
                        value = filter(value, helper.control);
                    }
                    return value;
                }
            };
        if (!this.templateEngine) {
            throw new Error('No template engine attached to this control');
        }
        return this.templateEngine.render(target, templateData);
    };
    return helper;
});

define('esui/Helper', [
    'require',
    'underscore',
    './helper/children',
    './helper/dom',
    './helper/event',
    './helper/html',
    './helper/life',
    './helper/template'
], function (require) {
    var u = require('underscore');
    function Helper(control) {
        this.control = control;
    }
    u.extend(Helper.prototype, require('./helper/children'), require('./helper/dom'), require('./helper/event'), require('./helper/html'), require('./helper/life'), require('./helper/template'));
    return Helper;
});

define('esui/EventTarget', [
    'require',
    'eoo',
    'underscore',
    'jquery'
], function (require) {
    var eoo = require('eoo');
    var eventPrefix = 'esui:';
    var u = require('underscore');
    var $ = require('jquery');
    var EventTarget = eoo.create({
            on: function (type, fn) {
                var namespace = getNamespace.call(this);
                $(this).on(eventPrefix + type + namespace, fn);
            },
            once: function (type, fn) {
                $(this).one(eventPrefix + type, fn);
            },
            un: function (type, handler) {
                var namespace = getNamespace.call(this);
                $(this).off(eventPrefix + type + namespace, handler);
            },
            fire: function (type, args, domEvent) {
                var jqEvent = $.Event;
                var event = jqEvent(eventPrefix + type);
                makeEventCompatible(event, args);
                var inlineHandler = this['on' + type];
                if (typeof inlineHandler === 'function') {
                    inlineHandler.call(this, event, args);
                }
                $(this).trigger(event, args);
                handleDOMEvent(domEvent, event);
                return event;
            },
            destroyEvents: function () {
                var namespace = getNamespace.call(this);
                $(this).off(namespace);
            },
            enable: function (target) {
                u.extend(target, EventTarget.prototype);
            }
        });
    function makeEventCompatible(event, args) {
        var oldType = event.type;
        if (u.isObject(args)) {
            u.extend(event, args);
        } else if (args) {
            event.data = args;
        }
        event.type = oldType;
    }
    function handleDOMEvent(domEvent, event) {
        if (domEvent) {
            if (event.isDefaultPrevented()) {
                domEvent.preventDefault();
            }
            if (event.isPropagationStopped()) {
                domEvent.stopPropagation();
            }
            if (event.isImmediatePropagationStopped()) {
                domEvent.stopImmediatePropagation();
            }
        }
    }
    function getNamespace() {
        var namespace = this.type || 'default';
        return '.' + namespace;
    }
    return EventTarget;
});

define('esui/Control', [
    'require',
    './lib',
    'underscore',
    './main',
    './Helper',
    'eoo',
    './EventTarget',
    'jquery',
    './SafeWrapper'
], function (require) {
    var lib = require('./lib');
    var u = require('underscore');
    var ui = require('./main');
    var Helper = require('./Helper');
    var eoo = require('eoo');
    var EventTarget = require('./EventTarget');
    var $ = require('jquery');
    var Control = eoo.create(EventTarget, {
            constructor: function (options) {
                options = options || {};
                var helper = new Helper(this);
                this.helper = helper;
                helper.changeStage('NEW');
                this.children = [];
                this.childrenIndex = {};
                this.currentStates = {};
                this.domEvents = [];
                this.main = options.main ? options.main : this.createMain(options);
                if (!this.id && !options.id) {
                    this.id = lib.getGUID();
                }
                this.initOptions(options);
                helper.initViewContext();
                helper.initExtensions();
                helper.changeStage('INITED');
                this.fire('init', { options: options });
            },
            ignoreStates: ['disabled'],
            getCategory: function () {
                return 'control';
            },
            initOptions: function (options) {
                options = options || {};
                this.setProperties(options);
            },
            createMain: function () {
                if (!this.type) {
                    return document.createElement('div');
                }
                var name = this.type.replace(/([A-Z])/g, function (match, ch) {
                        return '-' + ch.toLowerCase();
                    });
                return document.createElement(ui.getConfig('customElementPrefix') + '-' + name.slice(1));
            },
            initStructure: function () {
            },
            initEvents: function () {
            },
            render: function () {
                if (this.helper.isInStage('INITED')) {
                    this.fire('beforerender');
                    this.domIDPrefix = this.viewContext.id;
                    this.initStructure();
                    this.initEvents();
                    if (!this.main.id) {
                        this.main.id = this.helper.getId();
                    }
                    this.main.setAttribute(ui.getConfig('instanceAttr'), this.id);
                    this.main.setAttribute(ui.getConfig('viewContextAttr'), this.viewContext.id);
                    this.helper.addPartClasses();
                    if (this.states) {
                        this.states = typeof this.states === 'string' ? this.states.split(' ') : this.states;
                        u.each(this.states, this.addState, this);
                    }
                    if (this.variants) {
                        this.variants = typeof this.variants === 'string' ? this.variants.split(' ') : this.variants;
                        this.helper.addVariantClasses();
                    }
                }
                this.repaint();
                if (this.helper.isInStage('INITED')) {
                    this.helper.changeStage('RENDERED');
                    this.fire('afterrender');
                }
            },
            repaint: function (changes, changesIndex) {
                var method;
                if (!changesIndex || changesIndex.hasOwnProperty('disabled')) {
                    method = this.disabled ? 'addState' : 'removeState';
                    this[method]('disabled');
                }
                if (!changesIndex || changesIndex.hasOwnProperty('hidden')) {
                    method = this.hidden ? 'addState' : 'removeState';
                    this[method]('hidden');
                }
            },
            appendTo: function (wrap) {
                if (wrap instanceof Control) {
                    wrap = wrap.main;
                }
                wrap.appendChild(this.main);
                if (this.helper.isInStage('NEW') || this.helper.isInStage('INITED')) {
                    this.render();
                }
            },
            insertBefore: function (reference) {
                if (reference instanceof Control) {
                    reference = reference.main;
                }
                reference.parentNode.insertBefore(this.main, reference);
                if (this.helper.isInStage('NEW') || this.helper.isInStage('INITED')) {
                    this.render();
                }
            },
            dispose: function () {
                if (!this.helper.isInStage('DISPOSED')) {
                    this.helper.beforeDispose();
                    this.helper.dispose();
                    this.helper.afterDispose();
                }
            },
            destroy: function () {
                var main = this.main;
                this.dispose();
                $(main).remove();
                this.main = null;
            },
            get: function (name) {
                var method = this['get' + lib.pascalize(name)];
                if (typeof method === 'function') {
                    return method.call(this);
                }
                return this[name];
            },
            set: function (name, value) {
                var method = this['set' + lib.pascalize(name)];
                if (typeof method === 'function') {
                    return method.call(this, value);
                }
                var property = {};
                property[name] = value;
                this.setProperties(property);
            },
            isPropertyChanged: function (propertyName, newValue, oldValue) {
                return oldValue !== newValue;
            },
            setProperties: function (properties) {
                if (!this.stage) {
                    if (properties.hasOwnProperty('id')) {
                        this.id = properties.id;
                    }
                    if (properties.hasOwnProperty('group')) {
                        this.group = properties.group;
                    }
                    if (properties.hasOwnProperty('skin')) {
                        this.skin = properties.skin;
                    }
                }
                delete properties.id;
                delete properties.group;
                delete properties.skin;
                if (properties.hasOwnProperty('viewContext')) {
                    this.setViewContext(properties.viewContext);
                    delete properties.viewContext;
                }
                var changes = [];
                var changesIndex = {};
                for (var key in properties) {
                    if (properties.hasOwnProperty(key)) {
                        var newValue = properties[key];
                        var getterMethodName = 'get' + lib.pascalize(key) + 'Property';
                        var oldValue = this[getterMethodName] ? this[getterMethodName]() : this[key];
                        var isChanged = this.isPropertyChanged(key, newValue, oldValue);
                        if (isChanged) {
                            this[key] = newValue;
                            var record = {
                                    name: key,
                                    oldValue: oldValue,
                                    newValue: newValue
                                };
                            changes.push(record);
                            changesIndex[key] = record;
                        }
                    }
                }
                if (changes.length && this.helper.isInStage('RENDERED')) {
                    this.repaint(changes, changesIndex);
                }
                return changesIndex;
            },
            setViewContext: function (viewContext) {
                var oldViewContext = this.viewContext;
                if (oldViewContext === viewContext) {
                    return;
                }
                if (oldViewContext) {
                    this.viewContext = null;
                    oldViewContext.remove(this);
                }
                this.viewContext = viewContext;
                viewContext && viewContext.add(this);
                var children = this.children;
                if (children) {
                    for (var i = 0, len = children.length; i < len; i++) {
                        children[i].setViewContext(viewContext);
                    }
                }
                if (this.viewContext && this.helper.isInStage('RENDERED')) {
                    this.main.setAttribute(ui.getConfig('viewContextAttr'), this.viewContext.id);
                }
            },
            setDisabled: function (disabled) {
                this[disabled ? 'disable' : 'enable']();
            },
            disable: function () {
                this.addState('disabled');
            },
            enable: function () {
                this.removeState('disabled');
            },
            isDisabled: function () {
                return this.hasState('disabled');
            },
            show: function () {
                this.removeState('hidden');
            },
            hide: function () {
                this.addState('hidden');
            },
            toggle: function () {
                this[this.isHidden() ? 'show' : 'hide']();
            },
            isHidden: function () {
                return this.hasState('hidden');
            },
            addState: function (state) {
                if (!this.hasState(state)) {
                    this.currentStates[state] = true;
                    this.helper.addStateClasses(state);
                    var properties = {};
                    var statePropertyName = state.replace(/-(\w)/, function (m, c) {
                            return c.toUpperCase();
                        });
                    properties[statePropertyName] = true;
                    this.setProperties(properties);
                }
            },
            removeState: function (state) {
                if (this.hasState(state)) {
                    this.currentStates[state] = false;
                    this.helper.removeStateClasses(state);
                    var properties = {};
                    var statePropertyName = state.replace(/-(\w)/, function (m, c) {
                            return c.toUpperCase();
                        });
                    properties[statePropertyName] = false;
                    this.setProperties(properties);
                }
            },
            toggleState: function (state) {
                var methodName = this.hasState(state) ? 'removeState' : 'addState';
                this[methodName](state);
            },
            hasState: function (state) {
                return !!this.currentStates[state];
            },
            addChild: function (control, childName) {
                childName = childName || control.childName;
                if (control.parent) {
                    control.parent.removeChild(control);
                }
                this.children.push(control);
                control.parent = this;
                if (childName) {
                    control.childName = childName;
                    this.childrenIndex[childName] = control;
                }
                if (this.viewContext !== control.viewContext) {
                    control.setViewContext(this.viewContext);
                }
            },
            removeChild: function (control) {
                var children = this.children;
                var len = children.length;
                while (len--) {
                    if (children[len] === control) {
                        children.splice(len, 1);
                    }
                }
                var childName = control.childName;
                if (childName) {
                    this.childrenIndex[childName] = null;
                }
                control.parent = null;
            },
            disposeChildren: function () {
                this.helper.disposeChildren();
            },
            getChild: function (childName) {
                return this.childrenIndex[childName] || null;
            },
            getChildSafely: function (childName) {
                var child = this.getChild(childName);
                if (!child) {
                    var SafeWrapper = require('./SafeWrapper');
                    child = new SafeWrapper();
                    child.childName = childName;
                    child.parent = this;
                    if (this.viewContext) {
                        child.viewContext = this.viewContext;
                    }
                }
                return child;
            },
            initChildren: function (wrap, options) {
                this.helper.initChildren(wrap, options);
            }
        });
    return Control;
});

define('esui/painters', [
    'require',
    'underscore'
], function (require) {
    var u = require('underscore');
    var painters = {};
    painters.state = function (name) {
        return {
            name: name,
            paint: function (control, value) {
                var method = value ? 'addState' : 'removeState';
                control[method](this.name);
            }
        };
    };
    painters.attribute = function (name, attribute, value) {
        return {
            name: name,
            attribute: attribute || name,
            value: value,
            paint: function (control, value) {
                var options = this.value != null && typeof this.value === 'object' ? this.value : { defaultValue: this.value };
                value = value == null ? options.defaultValue : value;
                value = value == null ? '' : value;
                if (options.forceRemove && value === false) {
                    control.main.removeAttribute(this.attribute);
                } else {
                    control.main.setAttribute(this.attribute, value);
                }
            }
        };
    };
    var unitProperties = {
            width: true,
            height: true,
            top: true,
            right: true,
            bottom: true,
            left: true,
            fontSize: true,
            padding: true,
            paddingTop: true,
            paddingRight: true,
            paddingBottom: true,
            paddingLeft: true,
            margin: true,
            marginTop: true,
            marginRight: true,
            marginBottom: true,
            marginLeft: true,
            borderWidth: true,
            borderTopWidth: true,
            borderRightWidth: true,
            borderBottomWidth: true,
            borderLeftWidth: true
        };
    painters.style = function (name, property) {
        return {
            name: name,
            property: property || name,
            paint: function (control, value) {
                if (value == null) {
                    return;
                }
                if (unitProperties.hasOwnProperty(this.property)) {
                    value = value === 0 ? '0' : value + 'px';
                }
                control.main.style[this.property] = value;
            }
        };
    };
    painters.html = function (name, element, generate) {
        return {
            name: name,
            element: element || '',
            generate: generate,
            paint: function (control, value) {
                var element = typeof this.element === 'function' ? this.element(control) : this.element ? control.helper.getPart(this.element) : control.main;
                if (element) {
                    var html = typeof this.generate === 'function' ? this.generate(control, value) : value;
                    element.innerHTML = html || '';
                }
            }
        };
    };
    painters.text = function (name, element, generate) {
        return {
            name: name,
            element: element || '',
            generate: generate,
            paint: function (control, value) {
                var element = typeof this.element === 'function' ? this.element(control) : this.element ? control.helper.getPart(this.element) : control.main;
                if (element) {
                    var html = typeof this.generate === 'function' ? this.generate(control, value) : value;
                    element.innerHTML = u.escape(html || '');
                }
            }
        };
    };
    painters.delegate = function (name, member, method) {
        return {
            name: name,
            member: this.member,
            method: this.method,
            paint: function (control, value) {
                control[this.member][this.method](value);
            }
        };
    };
    painters.createRepaint = function () {
        var painters = [].concat.apply([], [].slice.call(arguments));
        return function (changes, changesIndex) {
            var index = u.extend({}, changesIndex);
            for (var i = 0; i < painters.length; i++) {
                var painter = painters[i];
                if (typeof painter === 'function') {
                    painter.apply(this, arguments);
                    continue;
                }
                var propertyNames = [].concat(painter.name);
                var shouldPaint = !changes;
                if (!shouldPaint) {
                    for (var j = 0; j < propertyNames.length; j++) {
                        var name = propertyNames[j];
                        if (changesIndex.hasOwnProperty(name)) {
                            shouldPaint = true;
                            break;
                        }
                    }
                }
                if (!shouldPaint) {
                    continue;
                }
                var properties = [this];
                for (var k = 0; k < propertyNames.length; k++) {
                    var name2 = propertyNames[k];
                    properties.push(this[name2]);
                    delete index[name2];
                }
                painter.paint.apply(painter, properties);
            }
            var unpainted = [];
            for (var key in index) {
                if (index.hasOwnProperty(key)) {
                    unpainted.push(index[key]);
                }
            }
            return unpainted;
        };
    };
    return painters;
});

define('ub-ria-ui/Accordion', [
    'require',
    'esui',
    'eoo',
    'underscore',
    'esui/Control',
    'esui/painters',
    'jquery'
], function (require) {
    var esui = require('esui');
    var eoo = require('eoo');
    var u = require('underscore');
    var Control = require('esui/Control');
    var painters = require('esui/painters');
    var $ = require('jquery');
    var Accordion = eoo.create(Control, {
            type: 'Accordion',
            initOptions: function (options) {
                var properties = {
                        activeIndex: 0,
                        hoverable: false,
                        collapsible: false,
                        headerIcon: 'caret-right',
                        activeHeaderIcon: 'caret-down',
                        fixHeight: null
                    };
                properties.headerIcon = this.helper.getIconClass(properties.headerIcon);
                properties.activeHeaderIcon = this.helper.getIconClass(properties.activeHeaderIcon);
                u.extend(properties, options);
                this.setProperties(properties);
            },
            repaint: painters.createRepaint(Control.prototype.repaint, painters.style('width'), {
                name: 'activeIndex',
                paint: activateAccordion
            }),
            initStructure: function () {
                renderAccordionEl(this);
            },
            initEvents: function () {
                var header = '.' + this.helper.getPartClassName('header');
                var type = this.hoverable ? 'mouseover' : 'click';
                this.helper.addDOMEvent(this.main, type, header, clickAccordion);
            },
            getActivePanel: function () {
                var elements = $(this.main).children().toArray();
                return elements[this.get('activeIndex')];
            }
        });
    function renderAccordionEl(accordion) {
        var $elements = $(accordion.main).children();
        var controlHelper = accordion.helper;
        var activePanelClass = controlHelper.getPartClassName('panel-active');
        var panelClass = controlHelper.getPartClassName('panel');
        var panelHeaderClass = controlHelper.getPartClassName('header');
        var panelContentClass = controlHelper.getPartClassName('content');
        var panelHeaderIconClass = controlHelper.getPartClassName('header-icon');
        $elements.each(function (idx, panel) {
            var $panel = $(panel);
            $panel.addClass(panelClass);
            if (accordion.activeIndex === idx) {
                $panel.addClass(activePanelClass);
            }
            var $header = $panel.children().eq(0);
            if ($header.size() > 0) {
                $header.addClass(panelHeaderClass);
                var $icon = $('<span></span>');
                $icon.addClass(panelHeaderIconClass);
                $icon.addClass(accordion.headerIcon);
                $header.append($icon);
            }
            var $content = $panel.children().eq(1);
            if ($content.size() > 0) {
                $content.addClass(panelContentClass);
                if (accordion.fixHeight) {
                    $content.css('height', accordion.fixHeight);
                    $content.css('overflow', 'auto');
                }
            }
        });
    }
    function clickAccordion(e) {
        var $target = $(e.currentTarget);
        var $panel = $target.parent();
        var $accordion = $panel.parent();
        var me = this;
        var activePanelClass = me.helper.getPartClassName('panel-active');
        var activeIndex = $accordion.children().index($panel);
        if (me.collapsible) {
            if ($panel.hasClass(activePanelClass)) {
                collapseAccordion.call(me);
                me.activeIndex = -1;
            } else {
                me.set('activeIndex', activeIndex);
            }
        } else {
            if ($panel.hasClass(activePanelClass)) {
                return;
            }
            this.set('activeIndex', activeIndex);
        }
    }
    function activateAccordion(accordion, index) {
        var $elements = $(accordion.main).children();
        var activeIconClass = accordion.activeHeaderIcon;
        var iconClass = accordion.headerIcon;
        var controlHelper = accordion.helper;
        var activePanelClass = controlHelper.getPartClassName('panel-active');
        var panelHeaderClass = controlHelper.getPartClassName('header');
        var panelHeaderIconClass = controlHelper.getPartClassName('header-icon');
        $elements.each(function (idx, ele) {
            var $panel = $(ele);
            var $header = $panel.children('.' + panelHeaderClass);
            var $icon = $header.children('.' + panelHeaderIconClass);
            $panel.removeClass(activePanelClass);
            $icon.removeClass(activeIconClass);
            $icon.removeClass(iconClass);
            if (idx === index) {
                $panel.addClass(activePanelClass);
                $icon.addClass(activeIconClass);
            } else {
                $icon.addClass(iconClass);
            }
        });
    }
    function collapseAccordion() {
        var $elements = $(this.main).children();
        var $panel = $elements.get(this.activeIndex);
        var controlHelper = this.helper;
        var panelHeaderIconClass = controlHelper.getPartClassName('content');
        var panelHiddenClass = controlHelper.getPartClassName('content-hidden');
        var activePanelClass = controlHelper.getPartClassName('panel-active');
        var $content = $panel.children('.' + panelHeaderIconClass);
        if ($content.size() > 0) {
            $content.addClass(panelHiddenClass);
        }
        $panel.removeClass(activePanelClass);
    }
    esui.register(Accordion);
    return Accordion;
});

define('ub-ria-ui/Alert', [
    'require',
    'eoo',
    'underscore',
    'esui',
    'esui/lib',
    'esui/Control',
    'jquery',
    'esui/painters'
], function (require) {
    var eoo = require('eoo');
    var u = require('underscore');
    var esui = require('esui');
    var lib = require('esui/lib');
    var Control = require('esui/Control');
    var $ = require('jquery');
    var painters = require('esui/painters');
    var allType = [
            'success',
            'info',
            'warning',
            'error'
        ];
    var Alert = eoo.create(Control, {
            type: 'Alert',
            initOptions: function (options) {
                var properties = {
                        msgType: 'error',
                        autoClose: false,
                        autoCloseDuration: 1000,
                        autoSlide: true,
                        autoSlideInterval: 4000,
                        closeBtn: true,
                        pageIndex: 1,
                        icon: ''
                    };
                if (!this.main.parentNode && u.isEmpty(options.container)) {
                    throw new Error('Parent is needed if constructed form scripts');
                }
                if (typeof options.message === 'string') {
                    options.message = [options.message];
                }
                u.extend(properties, options);
                this.setProperties(properties);
            },
            getInjectedPartHTML: function (part, nodeName, innerHTML) {
                return this.helper.getPartBeginTag(part, nodeName) + innerHTML + this.helper.getPartEndTag(part, nodeName);
            },
            initStructure: function () {
                var innerHTML = '';
                var controlHelper = this.helper;
                var parts = [
                        'icon',
                        'text',
                        'close',
                        'pager'
                    ];
                u.each(parts, function (item, index) {
                    innerHTML += controlHelper.getPartHTML(item, 'div');
                }, this);
                this.main.innerHTML = this.getInjectedPartHTML('container', 'div', innerHTML);
            },
            bindPagerEvent: function () {
                this.helper.addDOMEvent('prev', 'click', function () {
                    if (this.pageIndex > 1) {
                        this.setProperties({ pageIndex: this.pageIndex - 1 });
                    }
                });
                this.helper.addDOMEvent('next', 'click', function () {
                    if (this.pageIndex < this.message.length) {
                        this.setProperties({ pageIndex: this.pageIndex + 1 });
                    }
                });
            },
            injectIcon: function (html, icon) {
                var controlerHelper = this.helper;
                var iconContainer = controlerHelper.getPart('icon');
                var mainElement = this.main;
                iconContainer.innerHTML = html;
                var iconClass = controlerHelper.getPartClassName('has-icon');
                if (html) {
                    $(mainElement).addClass(iconClass);
                    $(iconContainer.firstChild).addClass(icon);
                } else {
                    $(mainElement).removeClass(iconClass);
                }
            },
            repaint: painters.createRepaint(Control.prototype.repaint, {
                name: 'icon',
                paint: function (self, icon) {
                    if (!icon) {
                        self.injectIcon('');
                        return;
                    }
                    self.injectIcon(self.helper.getPartHTML('icon-content', 'span'), icon);
                }
            }, {
                name: 'message',
                paint: function (self, message) {
                    var html = '';
                    u.each(message, function (item) {
                        html += self.getInjectedPartHTML('item', 'span', item);
                    });
                    self.helper.getPart('text').innerHTML = html;
                    var pagerClass = self.helper.getPartClassName('has-pager');
                    var $main = $(self.main);
                    if (message.length > 1) {
                        $main.addClass(pagerClass);
                        buildPager(self);
                    } else {
                        $main.removeClass(pagerClass);
                    }
                }
            }, {
                name: 'msgType',
                paint: function (self, msgType) {
                    u.each(allType, function (type) {
                        self.helper.removePartClasses(type);
                    });
                    self.helper.addPartClasses(self.msgType);
                }
            }, {
                name: 'pageIndex',
                paint: function (self, pageIndex) {
                    var controlHelper = self.helper;
                    var $messages = $(controlHelper.getPart('text')).children();
                    var activeClassName = controlHelper.getPartClassName('item-active');
                    var $newMessage = $messages.eq(pageIndex - 1);
                    if (self.message.length === 1) {
                        $newMessage.addClass(activeClassName);
                        return;
                    }
                    var $oldMessage = $messages.filter('.' + activeClassName);
                    if ($oldMessage.size() > 0) {
                        $oldMessage.removeClass(activeClassName);
                    }
                    $newMessage.addClass(activeClassName);
                    controlHelper.getPart('page').innerHTML = pageIndex;
                    if (pageIndex === 1) {
                        controlHelper.addPartClasses('prev-disabled', 'prev');
                    } else {
                        controlHelper.removePartClasses('prev-disabled', 'prev');
                    }
                    if (pageIndex === self.message.length) {
                        controlHelper.addPartClasses('next-disabled', 'next');
                    } else {
                        controlHelper.removePartClasses('next-disabled', 'next');
                    }
                }
            }, {
                name: 'closeBtn',
                paint: function (self, closeBtn) {
                    var controlHelper = self.helper;
                    if (closeBtn === false) {
                        controlHelper.getPart('button') && controlHelper.removeDOMEvent('button');
                        controlHelper.getPart('close').innerHTML = '';
                        return;
                    }
                    controlHelper.getPart('close').innerHTML = '' + self.getInjectedPartHTML('button', 'div', controlHelper.getPartHTML('icon-content', 'span'));
                    $(controlHelper.getPart('button').firstChild).addClass(controlHelper.getIconClass());
                    controlHelper.addDOMEvent('button', 'click', function (e) {
                        this.hide();
                    });
                }
            }, {
                name: 'autoSlide',
                paint: function (self, autoSlide) {
                    clearInterval(self.autoSlideTimer);
                    if (self.message.length === 1 || !autoSlide) {
                        return;
                    }
                    self.autoSlideTimer = setInterval(u.bind(slide, self), self.autoSlideInterval);
                }
            }, {
                name: 'autoClose',
                paint: function (self, autoClose) {
                    clearTimeout(self.autoCloseTimer);
                    if (!autoClose) {
                        return;
                    }
                    self.autoCloseTimer = setTimeout(u.bind(self.hide, self), self.autoCloseDuration);
                }
            }),
            show: function () {
                var me = this;
                var controlHelper = me.helper;
                if (controlHelper.isInStage('DISPOSED')) {
                    return;
                }
                var ref = lib.g(me.container).firstChild;
                if (ref) {
                    me.insertBefore(ref);
                } else {
                    me.appendTo(lib.g(me.container));
                }
                me.insertBefore(ref);
                controlHelper.addPartClasses('toggle', 'container');
                me.$super(arguments);
                me.fire('show');
                controlHelper.addDOMEvent(me.main, 'mouseenter', function () {
                    me.setProperties({ autoSlide: false });
                });
                controlHelper.addDOMEvent(me.main, 'mouseleave', function () {
                    me.setProperties({ autoSlide: this.autoSlide });
                });
            },
            hide: function () {
                this.$super(arguments);
                this.fire('hide');
                this.dispose();
            },
            dispose: function () {
                clearTimeout(this.autoCloseTimer);
                clearInterval(this.autoSlideTimer);
                if (this.helper.isInStage('DISPOSED')) {
                    return;
                }
                $(this.main).remove();
                this.$super(arguments);
            }
        });
    u.each(allType, function (type) {
        Alert[type] = function (options) {
            options.msgType = options.msgType || type;
            var alert = new Alert(options);
            alert.show();
            return alert;
        };
    });
    function buildPager(self) {
        var controlHelper = self.helper;
        var prev = self.getInjectedPartHTML('prev', 'div', controlHelper.getPartHTML('icon-content', 'span'));
        var next = self.getInjectedPartHTML('next', 'div', controlHelper.getPartHTML('icon-content', 'span'));
        var index = self.getInjectedPartHTML('index', 'div', controlHelper.getPartHTML('page', 'strong') + '/' + self.message.length);
        controlHelper.getPart('pager').innerHTML = prev + index + next;
        controlHelper.getPart('page').innerHTML = self.pageIndex;
        var iconClass = controlHelper.getIconClass();
        $(controlHelper.getPart('prev')).addClass(iconClass);
        $(controlHelper.getPart('next')).addClass(iconClass);
        self.bindPagerEvent();
    }
    function slide() {
        var pageIndex = this.pageIndex;
        if (pageIndex === this.message.length) {
            pageIndex = 1;
        } else {
            pageIndex++;
        }
        this.setProperties({ pageIndex: pageIndex });
    }
    esui.register(Alert);
    return Alert;
});

define('esui/behavior/position', [
    'require',
    'jquery',
    'underscore'
], function (require) {
    var $ = require('jquery');
    var u = require('underscore');
    var max = Math.max;
    var abs = Math.abs;
    var round = Math.round;
    var _position = $.fn.position;
    var supportsOffsetFractions = function () {
        var element = $('<div>').css('position', 'absolute').appendTo('body').offset({
                top: 1.5,
                left: 1.5
            });
        var support = element.offset().top === 1.5;
        element.remove();
        supportsOffsetFractions = function () {
            return support;
        };
        return support;
    };
    var rpercent = /%$/;
    function getOffsets(offsets, width, height) {
        return [
            parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1),
            parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1)
        ];
    }
    function parseCss(element, property) {
        return parseInt($.css(element, property), 10) || 0;
    }
    function getDimensions(elem) {
        var raw = elem[0];
        if (raw.nodeType === 9) {
            return {
                width: elem.width(),
                height: elem.height(),
                offset: {
                    top: 0,
                    left: 0
                }
            };
        }
        if ($.isWindow(raw)) {
            return {
                width: elem.width(),
                height: elem.height(),
                offset: {
                    top: elem.scrollTop(),
                    left: elem.scrollLeft()
                }
            };
        }
        if (raw.preventDefault) {
            return {
                width: 0,
                height: 0,
                offset: {
                    top: raw.pageY,
                    left: raw.pageX
                }
            };
        }
        return {
            width: elem.outerWidth(),
            height: elem.outerHeight(),
            offset: elem.offset()
        };
    }
    var cachedScrollbarWidth;
    function scrollbarWidth() {
        if (cachedScrollbarWidth !== undefined) {
            return cachedScrollbarWidth;
        }
        var div = $([
                '<div style="display:block;position:absolute;width:50px;height:50px;overflow:hidden;">',
                '   <div style="height:100px;width:auto;"></div>',
                '</div>'
            ].join(''));
        $('body').append(div);
        var innerDiv = div.children()[0];
        var w1 = innerDiv.offsetWidth;
        div.css('overflow', 'scroll');
        var w2 = innerDiv.offsetWidth;
        if (w1 === w2) {
            w2 = div[0].clientWidth;
        }
        div.remove();
        return cachedScrollbarWidth = w1 - w2;
    }
    function getScrollInfo(within) {
        var overflowX = within.isWindow || within.isDocument ? '' : within.element.css('overflow-x');
        var overflowY = within.isWindow || within.isDocument ? '' : within.element.css('overflow-y');
        var hasOverflowX = overflowX === 'scroll' || overflowX === 'auto' && within.width < within.element[0].scrollWidth;
        var hasOverflowY = overflowY === 'scroll' || overflowY === 'auto' && within.height < within.element[0].scrollHeight;
        return {
            width: hasOverflowY ? scrollbarWidth() : 0,
            height: hasOverflowX ? scrollbarWidth() : 0
        };
    }
    function getWithinInfo(element) {
        var withinElement = $(element || window);
        var isWindow = $.isWindow(withinElement[0]);
        var isDocument = !!withinElement[0] && withinElement[0].nodeType === 9;
        return {
            element: withinElement,
            isWindow: isWindow,
            isDocument: isDocument,
            offset: withinElement.offset() || {
                left: 0,
                top: 0
            },
            scrollLeft: withinElement.scrollLeft(),
            scrollTop: withinElement.scrollTop(),
            width: withinElement.outerWidth(),
            height: withinElement.outerHeight()
        };
    }
    var collisionFunctionMap = {
            fitleft: function (position, data) {
                var within = data.within;
                var withinOffset = within.isWindow ? within.scrollLeft : within.offset.left;
                var outerWidth = within.width;
                var collisionPosLeft = position.left - data.collisionPosition.marginLeft;
                var overLeft = withinOffset - collisionPosLeft;
                var overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset;
                if (data.collisionWidth > outerWidth) {
                    if (overLeft > 0 && overRight <= 0) {
                        var newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
                        position.left += overLeft - newOverRight;
                    } else if (overRight > 0 && overLeft <= 0) {
                        position.left = withinOffset;
                    } else {
                        if (overLeft > overRight) {
                            position.left = withinOffset + outerWidth - data.collisionWidth;
                        } else {
                            position.left = withinOffset;
                        }
                    }
                } else if (overLeft > 0) {
                    position.left += overLeft;
                } else if (overRight > 0) {
                    position.left -= overRight;
                } else {
                    position.left = max(position.left - collisionPosLeft, position.left);
                }
            },
            fittop: function (position, data) {
                var within = data.within;
                var withinOffset = within.isWindow ? within.scrollTop : within.offset.top;
                var outerHeight = data.within.height;
                var collisionPosTop = position.top - data.collisionPosition.marginTop;
                var overTop = withinOffset - collisionPosTop;
                var overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset;
                if (data.collisionHeight > outerHeight) {
                    if (overTop > 0 && overBottom <= 0) {
                        var newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
                        position.top += overTop - newOverBottom;
                    } else if (overBottom > 0 && overTop <= 0) {
                        position.top = withinOffset;
                    } else {
                        if (overTop > overBottom) {
                            position.top = withinOffset + outerHeight - data.collisionHeight;
                        } else {
                            position.top = withinOffset;
                        }
                    }
                } else if (overTop > 0) {
                    position.top += overTop;
                } else if (overBottom > 0) {
                    position.top -= overBottom;
                } else {
                    position.top = max(position.top - collisionPosTop, position.top);
                }
            },
            flipleft: function (position, data) {
                var within = data.within;
                var withinOffset = within.offset.left + within.scrollLeft;
                var outerWidth = within.width;
                var offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left;
                var collisionPosLeft = position.left - data.collisionPosition.marginLeft;
                var overLeft = collisionPosLeft - offsetLeft;
                var overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft;
                var myOffset = data.my[0] === 'left' ? -data.elemWidth : data.my[0] === 'right' ? data.elemWidth : 0;
                var atOffset = data.at[0] === 'left' ? data.targetWidth : data.at[0] === 'right' ? -data.targetWidth : 0;
                var offset = -2 * data.offset[0];
                if (overLeft < 0) {
                    var newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
                    if (newOverRight < 0 || newOverRight < abs(overLeft)) {
                        position.left += myOffset + atOffset + offset;
                    }
                } else if (overRight > 0) {
                    var newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
                    if (newOverLeft > 0 || abs(newOverLeft) < overRight) {
                        position.left += myOffset + atOffset + offset;
                    }
                }
            },
            fliptop: function (position, data) {
                var within = data.within;
                var withinOffset = within.offset.top + within.scrollTop;
                var outerHeight = within.height;
                var offsetTop = within.isWindow ? within.scrollTop : within.offset.top;
                var collisionPosTop = position.top - data.collisionPosition.marginTop;
                var overTop = collisionPosTop - offsetTop;
                var overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop;
                var top = data.my[1] === 'top';
                var myOffset = top ? -data.elemHeight : data.my[1] === 'bottom' ? data.elemHeight : 0;
                var atOffset = data.at[1] === 'top' ? data.targetHeight : data.at[1] === 'bottom' ? -data.targetHeight : 0;
                var offset = -2 * data.offset[1];
                if (overTop < 0) {
                    var newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
                    if (newOverBottom < 0 || newOverBottom < abs(overTop)) {
                        position.top += myOffset + atOffset + offset;
                    }
                } else if (overBottom > 0) {
                    var newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
                    if (newOverTop > 0 || abs(newOverTop) < overBottom) {
                        position.top += myOffset + atOffset + offset;
                    }
                }
            },
            flipfitleft: function () {
                collisionFunctionMap.flipleft.apply(this, arguments);
                collisionFunctionMap.fitleft.apply(this, arguments);
            },
            flipfittop: function () {
                collisionFunctionMap.fliptop.apply(this, arguments);
                collisionFunctionMap.fittop.apply(this, arguments);
            }
        };
    $.fn.position = function (options, element) {
        if (!options || !options.of) {
            return _position.apply(this, arguments);
        }
        if (!this instanceof $ && element) {
            return $(element).position(options);
        }
        options = $.extend({}, options);
        var target = $(options.of);
        var dimensions = getDimensions(target);
        if (target[0].preventDefault) {
            options.at = 'left top';
        }
        var targetWidth = dimensions.width;
        var targetHeight = dimensions.height;
        var targetOffset = dimensions.offset;
        var basePosition = $.extend({}, targetOffset);
        var rhorizontal = /left|center|right/;
        var rvertical = /top|center|bottom/;
        var roffset = /[\+\-]\d+(\.[\d]+)?%?/;
        var rposition = /^\w+/;
        var offsets = {};
        u.each([
            'my',
            'at'
        ], function (item) {
            var pos = (options[item] || '').split(' ');
            if (pos.length === 1) {
                pos = rhorizontal.test(pos[0]) ? pos.concat(['center']) : rvertical.test(pos[0]) ? ['center'].concat(pos) : [
                    'center',
                    'center'
                ];
            }
            pos[0] = rhorizontal.test(pos[0]) ? pos[0] : 'center';
            pos[1] = rvertical.test(pos[1]) ? pos[1] : 'center';
            var horizontalOffset = roffset.exec(pos[0]);
            var verticalOffset = roffset.exec(pos[1]);
            offsets[item] = [
                horizontalOffset ? horizontalOffset[0] : 0,
                verticalOffset ? verticalOffset[0] : 0
            ];
            options[item] = [
                rposition.exec(pos[0])[0],
                rposition.exec(pos[1])[0]
            ];
        });
        var collision = (options.collision || 'flip').split(' ');
        if (collision.length === 1) {
            collision[1] = collision[0];
        }
        if (options.at[0] === 'right') {
            basePosition.left += targetWidth;
        } else if (options.at[0] === 'center') {
            basePosition.left += targetWidth / 2;
        }
        if (options.at[1] === 'bottom') {
            basePosition.top += targetHeight;
        } else if (options.at[1] === 'center') {
            basePosition.top += targetHeight / 2;
        }
        var atOffset = getOffsets(offsets.at, targetWidth, targetHeight);
        basePosition.left += atOffset[0];
        basePosition.top += atOffset[1];
        var within = getWithinInfo(options.within);
        var scrollInfo = getScrollInfo(within);
        return this.each(function () {
            var elem = $(this);
            var elemWidth = elem.outerWidth();
            var elemHeight = elem.outerHeight();
            var position = $.extend({}, basePosition);
            if (options.my[0] === 'right') {
                position.left -= elemWidth;
            } else if (options.my[0] === 'center') {
                position.left -= elemWidth / 2;
            }
            if (options.my[1] === 'bottom') {
                position.top -= elemHeight;
            } else if (options.my[1] === 'center') {
                position.top -= elemHeight / 2;
            }
            var myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight());
            position.left += myOffset[0];
            position.top += myOffset[1];
            if (!supportsOffsetFractions()) {
                position.left = round(position.left);
                position.top = round(position.top);
            }
            var marginLeft = parseCss(this, 'marginLeft');
            var marginTop = parseCss(this, 'marginTop');
            var collisionPosition = {
                    marginLeft: marginLeft,
                    marginTop: marginTop
                };
            var collisionWidth = elemWidth + marginLeft + parseCss(this, 'marginRight') + scrollInfo.width;
            var collisionHeight = elemHeight + marginTop + parseCss(this, 'marginBottom') + scrollInfo.height;
            u.each([
                'left',
                'top'
            ], function (dir, index) {
                var func = collisionFunctionMap[collision[index] + dir];
                func && func(position, {
                    targetWidth: targetWidth,
                    targetHeight: targetHeight,
                    elemWidth: elemWidth,
                    elemHeight: elemHeight,
                    collisionPosition: collisionPosition,
                    collisionWidth: collisionWidth,
                    collisionHeight: collisionHeight,
                    offset: [
                        atOffset[0] + myOffset[0],
                        atOffset[1] + myOffset[1]
                    ],
                    my: options.my,
                    at: options.at,
                    within: within,
                    elem: elem
                });
            });
            if (options.using) {
                var using = function (props) {
                    var left = targetOffset.left - position.left;
                    var right = left + targetWidth - elemWidth;
                    var top = targetOffset.top - position.top;
                    var bottom = top + targetHeight - elemHeight;
                    var feedback = {
                            target: {
                                element: target,
                                left: targetOffset.left,
                                top: targetOffset.top,
                                width: targetWidth,
                                height: targetHeight
                            },
                            element: {
                                element: elem,
                                left: position.left,
                                top: position.top,
                                width: elemWidth,
                                height: elemHeight
                            },
                            horizontal: right < 0 ? 'left' : left > 0 ? 'right' : 'center',
                            vertical: bottom < 0 ? 'top' : top > 0 ? 'bottom' : 'middle'
                        };
                    if (targetWidth < elemWidth && abs(left + right) < targetWidth) {
                        feedback.horizontal = 'center';
                    }
                    if (targetHeight < elemHeight && abs(top + bottom) < targetHeight) {
                        feedback.vertical = 'middle';
                    }
                    if (max(abs(left), abs(right)) > max(abs(top), abs(bottom))) {
                        feedback.important = 'horizontal';
                    } else {
                        feedback.important = 'vertical';
                    }
                    options.using.call(this, props, feedback);
                };
            }
            elem.offset($.extend(position, { using: using }));
        });
    };
    return $.fn.position;
});

define('esui/Layer', [
    'require',
    'underscore',
    './lib',
    './main',
    'eoo',
    './EventTarget',
    'jquery',
    './behavior/position'
], function (require) {
    var u = require('underscore');
    var lib = require('./lib');
    var esui = require('./main');
    var eoo = require('eoo');
    var EventTarget = require('./EventTarget');
    var $ = require('jquery');
    require('./behavior/position');
    var Layer = eoo.create(EventTarget, {
            constructor: function (control) {
                this.control = control;
            },
            nodeName: 'div',
            autoClose: true,
            autoCloseExcludeElements: [],
            create: function () {
                var element = this.control.helper.createPart('layer', this.nodeName);
                this.prepareLayer(element);
                return element;
            },
            prepareLayer: function (element) {
                $(element).addClass(esui.getConfig('uiClassPrefix') + '-layer');
                var variants = this.control.variants;
                var helper = this.control.helper;
                var variantsCls = [];
                if (variants) {
                    variants = typeof variants === 'string' ? variants.split(' ') : variants;
                    this.control.variants = variants;
                    u.each(variants, function (v) {
                        variantsCls.push(helper.getPrimaryClassName('layer-' + v));
                    });
                    $(element).addClass(variantsCls.join(' '));
                }
                $(element).hide();
            },
            addCustomClasses: function (layerClassNames) {
                var element = this.getElement();
                $(element).addClass(layerClassNames.join(' '));
            },
            render: function (element) {
            },
            syncState: function (element) {
            },
            repaint: function () {
                var element = this.getElement(false);
                if (element) {
                    this.render(element);
                }
            },
            initBehavior: function (element) {
            },
            getElement: function (create) {
                var element = this.control.helper.getPart('layer');
                if (!element && create !== false) {
                    element = this.create();
                    this.render(element);
                    this.initBehavior(element);
                    this.syncState(element);
                    if (!element.parentElement) {
                        document.body.appendChild(element);
                    }
                    this.fire('rendered');
                }
                return element;
            },
            hide: function (silent) {
                var element = this.getElement();
                $(element).hide();
                if (this.docClickHandler) {
                    $(document).off('mousedown', this.docClickHandler);
                    this.docClickHandler = null;
                }
                this.fire('hide');
                this.control.removeState('active');
            },
            show: function () {
                var me = this;
                var element = me.getElement();
                element.style.zIndex = me.getZIndex();
                if (me.autoClose) {
                    setDocClickHandler(me);
                }
                $(element).show();
                me.position();
                me.fire('show');
                me.control.addState('active');
            },
            toggle: function () {
                var element = this.getElement();
                if (!element || !$(element).is(':visible')) {
                    this.show();
                } else {
                    this.hide();
                }
            },
            position: function () {
                var layer = this.getElement();
                Layer.attachTo(layer, this.control.main, this.dock);
            },
            getZIndex: function () {
                return Layer.getZIndex(this.control.main);
            },
            dispose: function () {
                var element = this.getElement(false);
                this.autoCloseExcludeElements = [];
                if (element) {
                    $(element).remove();
                }
                this.control = null;
            }
        });
    function close(e) {
        var target = e.target;
        var me = this;
        var layer = me.getElement(me);
        if (!layer) {
            return;
        }
        var inLayer = layer === target || $.contains(layer, target);
        var inElements = false;
        u.each(me.autoCloseExcludeElements, function (ele) {
            inElements = $.contains(ele, target) || ele === target;
            if (inElements) {
                return false;
            }
        });
        if (!inLayer && !inElements) {
            me.hide();
        } else if (me.autoClose) {
            setDocClickHandler(me);
        }
    }
    function setDocClickHandler(layer) {
        layer.docClickHandler = function (e) {
            close.call(layer, e);
        };
        $(document).one('mousedown', layer.docClickHandler);
    }
    Layer.create = function (tagName) {
        var element = document.createElement(tagName || 'div');
        element.style.position = 'absolute';
        return element;
    };
    Layer.getZIndex = function (owner) {
        var zIndex = 0;
        while (!zIndex && owner && owner !== document) {
            zIndex = parseInt(lib.getComputedStyle(owner, 'zIndex'), 10);
            owner = owner.parentNode;
        }
        zIndex = zIndex || 0;
        return zIndex + 1;
    };
    Layer.attachTo = function (layer, target, options) {
        options = options || { strictWidth: false };
        if (options.strictWidth) {
            layer.style.minWidth = target.offsetWidth + 'px';
        }
        $(layer).position(u.extend({
            my: 'left top',
            of: target,
            at: 'left bottom'
        }, options));
    };
    return Layer;
});

define('esui/Extension', [
    'require',
    'underscore'
], function (require) {
    var u = require('underscore');
    function Extension(options) {
        u.extend(this, options);
    }
    Extension.prototype.target = null;
    Extension.prototype.active = false;
    Extension.prototype.isActive = function () {
        return this.active;
    };
    Extension.prototype.activate = function () {
        this.active = true;
    };
    Extension.prototype.inactivate = function () {
        this.active = false;
    };
    Extension.prototype.attachTo = function (target) {
        if (this.target && this.target !== target) {
            if (this.active) {
                this.inactivate();
            }
        }
        this.target = target;
        if (!this.active) {
            this.activate();
        }
    };
    Extension.prototype.dispose = function () {
        if (this.active) {
            this.inactivate();
        }
        this.target = null;
    };
    return Extension;
});

define('ub-ria-ui/helper/CursorPositionHelper', [
    'require',
    'jquery',
    'underscore',
    'eoo'
], function (require) {
    var $ = require('jquery');
    var u = require('underscore');
    var eoo = require('eoo');
    var sentinelChar = '\u5436';
    var DIV_PROPERTIES = {
            left: -9999,
            position: 'absolute',
            top: 0,
            whiteSpace: 'pre-wrap'
        };
    var COPY_PROPERTIES = [
            'border-width',
            'font-family',
            'font-size',
            'font-style',
            'font-variant',
            'font-weight',
            'height',
            'letter-spacing',
            'word-spacing',
            'line-height',
            'text-decoration',
            'text-align',
            'width',
            'padding-top',
            'padding-right',
            'padding-bottom',
            'padding-left',
            'margin-top',
            'margin-right',
            'margin-bottom',
            'margin-left',
            'border-style',
            'box-sizing',
            'tab-size'
        ];
    function getStyles(element) {
        var styles = {};
        $.each(COPY_PROPERTIES, function (index, property) {
            styles[property] = $(element).css(property);
        });
        return styles;
    }
    function copyCss() {
        var element = this.element;
        var overflow = element.scrollHeight > element.offsetHeight ? 'scroll' : 'auto';
        return u.extend({ overflow: overflow }, DIV_PROPERTIES, getStyles(this.element));
    }
    function getTextFromHeadToCaret() {
        return this.element.value.substring(0, this.element.selectionEnd);
    }
    function getTextFromHeadToCaretIE() {
        this.element.focus();
        var range = document.selection.createRange();
        range.moveStart('character', -this.element.value.length);
        var arr = range.text.split(sentinelChar);
        return arr.length === 1 ? arr[0] : arr[1];
    }
    var TextAreaPositionHelper = eoo.create({
            constructor: function (ele) {
                this.$element = $(ele);
                this.element = this.$element[0];
            },
            getCaretPosition: function () {
                var notIE = typeof this.element.selectionEnd === 'number';
                var getHeadText = notIE ? getTextFromHeadToCaret : getTextFromHeadToCaretIE;
                var $dummyDiv = $('<div></div>').css(copyCss.call(this)).text(getHeadText.call(this));
                var $span = $('<span></span>').text('.').appendTo($dummyDiv);
                this.$element.before($dummyDiv);
                var position = $span.position();
                position.top += $span.height() - this.$element.scrollTop();
                position.lineHeight = $span.height();
                $dummyDiv.remove();
                return position;
            }
        });
    TextAreaPositionHelper.getInstance = function (element) {
        var cursorHelper = 'corsorPositionHelper';
        var instance = $(element).data(cursorHelper);
        if (!instance) {
            instance = new TextAreaPositionHelper(element);
            $(element).data(cursorHelper, instance);
        }
        return instance;
    };
    return TextAreaPositionHelper;
});

define('esui/behavior/keyboard', [
    'require',
    'jquery',
    'underscore'
], function (require) {
    var $ = require('jquery');
    var u = require('underscore');
    var specialKeys = {
            8: 'backspace',
            9: 'tab',
            13: 'return',
            16: 'shift',
            17: 'ctrl',
            18: 'alt',
            19: 'pause',
            20: 'capslock',
            27: 'esc',
            32: 'space',
            33: 'pageup',
            34: 'pagedown',
            35: 'end',
            36: 'home',
            37: 'left',
            38: 'up',
            39: 'right',
            40: 'down',
            45: 'insert',
            46: 'del',
            59: ';',
            61: '=',
            96: '0',
            97: '1',
            98: '2',
            99: '3',
            100: '4',
            101: '5',
            102: '6',
            103: '7',
            104: '8',
            105: '9',
            106: '*',
            107: '+',
            109: '-',
            110: '.',
            111: '/',
            112: 'f1',
            113: 'f2',
            114: 'f3',
            115: 'f4',
            116: 'f5',
            117: 'f6',
            118: 'f7',
            119: 'f8',
            120: 'f9',
            121: 'f10',
            122: 'f11',
            123: 'f12',
            144: 'numlock',
            145: 'scroll',
            173: '-',
            186: ';',
            187: '=',
            188: ',',
            189: '-',
            190: '.',
            191: '/',
            192: '`',
            219: '[',
            220: '\\',
            221: ']',
            222: '\''
        };
    var shiftNums = {
            '`': '~',
            '1': '!',
            '2': '@',
            '3': '#',
            '4': '$',
            '5': '%',
            '6': '^',
            '7': '&',
            '8': '*',
            '9': '(',
            '0': ')',
            '-': '_',
            '=': '+',
            ';': ': ',
            '\'': '"',
            ',': '<',
            '.': '>',
            '/': '?',
            '\\': '|'
        };
    var textAcceptingInputTypes = [
            'text',
            'password',
            'number',
            'email',
            'url',
            'range',
            'date',
            'month',
            'week',
            'time',
            'datetime',
            'datetime-local',
            'search',
            'color',
            'tel'
        ];
    var textInputTypes = /textarea|input|select/i;
    var filterInputAcceptingElements = true;
    var filterTextInputs = true;
    var filterContentEditable = true;
    function keyHandler(handleObj) {
        if (!handleObj.data || !handleObj.data.keys || typeof handleObj.data.keys !== 'string') {
            return;
        }
        var origHandler = handleObj.handler;
        var keys = handleObj.data.keys.toLowerCase().split(' ');
        handleObj.handler = function (event) {
            if (this !== event.target && (filterInputAcceptingElements && textInputTypes.test(event.target.nodeName) || filterContentEditable && $(event.target).attr('contenteditable') || filterTextInputs && $.inArray(event.target.type, textAcceptingInputTypes) > -1)) {
                return;
            }
            var special = event.type !== 'keypress' && specialKeys[event.which];
            var character = String.fromCharCode(event.which).toLowerCase();
            var modif = '';
            var possible = {};
            u.each([
                'alt',
                'ctrl',
                'shift'
            ], function (specialKey) {
                if (event[specialKey + 'Key'] && special !== specialKey) {
                    modif += specialKey + '+';
                }
            });
            if (event.metaKey && !event.ctrlKey && special !== 'meta') {
                modif += 'meta+';
            }
            if (event.metaKey && special !== 'meta' && modif.indexOf('alt+ctrl+shift+') > -1) {
                modif = modif.replace('alt+ctrl+shift+', 'hyper+');
            }
            if (special) {
                possible[modif + special] = true;
            } else {
                possible[modif + character] = true;
                possible[modif + shiftNums[character]] = true;
                if (modif === 'shift+') {
                    possible[shiftNums[character]] = true;
                }
            }
            for (var i = 0, l = keys.length; i < l; i++) {
                if (possible[keys[i]]) {
                    return origHandler.apply(this, arguments);
                }
            }
        };
    }
    u.each([
        'keydown',
        'keyup',
        'keypress'
    ], function (eventName) {
        $.event.special[eventName] = { add: keyHandler };
    });
    var filterInputAcceptingElements = true;
    var filterTextInputs = true;
    var filterContentEditable = true;
    var exports = {
            setFilterInputAcceptingElements: function (bool) {
                filterInputAcceptingElements = bool;
            },
            setFilterTextInputs: function (bool) {
                filterTextInputs = bool;
            },
            setFilterContentEditable: function (bool) {
                filterContentEditable = bool;
            }
        };
    u.each(specialKeys, function (item, key) {
        exports[item.toUpperCase()] = parseInt(key, 10);
    });
    return exports;
});

define('ub-ria-ui/AutoComplete', [
    'require',
    'esui',
    'esui/lib',
    'underscore',
    'esui/Layer',
    'esui/Extension',
    'eoo',
    './helper/CursorPositionHelper',
    'esui/behavior/keyboard',
    'esui/behavior/position',
    'jquery'
], function (require) {
    var esui = require('esui');
    var lib = require('esui/lib');
    var u = require('underscore');
    var Layer = require('esui/Layer');
    var Extension = require('esui/Extension');
    var eoo = require('eoo');
    var CursorPositionHelper = require('./helper/CursorPositionHelper');
    var keyboard = require('esui/behavior/keyboard');
    require('esui/behavior/position');
    var TEXT_LINE = 'TextLine';
    var TEXT_BOX = 'TextBox';
    var INPUT = 'input';
    var $ = require('jquery');
    var AutoCompleteLayer = eoo.create(Layer, {
            constructor: function (control) {
                this.$super(arguments);
                var controlType = control.type;
                if (controlType === TEXT_BOX) {
                    var ele = lib.g(control.inputId);
                    if (ele.tagName.toLowerCase() === INPUT) {
                        this.dock = { strictWidth: true };
                    }
                }
                this.initStructure();
                this.initEvents();
            },
            type: 'AutoCompleteLayer',
            initStructure: function () {
                var helper = this.control.helper;
                this.addCustomClasses([
                    helper.getPrefixClass('autocomplete'),
                    helper.getPrefixClass('dropdown')
                ]);
                var element = this.getElement();
                $(this.control.main).after(element);
            },
            initEvents: function () {
                var me = this;
                var target = me.control;
                var helper = target.helper;
                var inputElement = this.inputElement = this.getInput();
                var layerElement = me.getElement(false);
                helper.addDOMEvent(layerElement, 'click', 'li', function (e) {
                    var clickedTarget = e.currentTarget;
                    me.hide();
                    var text = $(clickedTarget.firstChild).text();
                    var event = me.control.fire('select', text);
                    if (event.isDefaultPrevented()) {
                        return;
                    }
                    setTargetValue.call(me, text);
                });
                helper.addDOMEvent(inputElement, 'keydown', function (e) {
                    if (me.isHidden()) {
                        return;
                    }
                    switch (e.keyCode) {
                    case keyboard.UP:
                        e.preventDefault();
                        moveTo.call(me, 'up');
                        break;
                    case keyboard.DOWN:
                        e.preventDefault();
                        moveTo.call(me, 'down');
                        break;
                    case keyboard.ESC:
                        me.hide();
                        break;
                    case keyboard.RETURN:
                        e.preventDefault();
                        var selectedItem = me.getSelectedItem();
                        if (!selectedItem) {
                            return;
                        }
                        me.hide();
                        var text = $(selectedItem.firstChild).text();
                        var event = me.control.fire('select', text);
                        if (event.isDefaultPrevented()) {
                            return;
                        }
                        setTimeout(function () {
                            setTargetValue.call(me, text);
                        }, 0);
                        break;
                    }
                });
                this.control.on('input', onInput);
                function onInput(event) {
                    var elementValue = inputElement.value;
                    if (!elementValue || /(?:\s|\,)$/.test(elementValue)) {
                        repaintSuggest.call(me, '');
                        me.hide();
                        return;
                    }
                    if (u.isFunction(target.extractWord)) {
                        elementValue = target.extractWord(elementValue);
                    } else {
                        elementValue = extractMatchingWord(elementValue);
                    }
                    if (!elementValue) {
                        return;
                    }
                    if (target.search && target.search(elementValue) === false) {
                        return;
                    }
                    repaintSuggest.call(me, elementValue);
                }
            },
            repaint: function (value) {
                var element = this.getElement(false);
                if (element) {
                    this.render(element, value);
                }
            },
            render: function (element, value) {
                if (value != null) {
                    element.innerHTML = value;
                }
            },
            getSelectedItemIndex: function () {
                var element = this.getElement(false);
                var items = element.children;
                var selectedItemIndex = -1;
                for (var i = 0, len = items.length; i < len; i++) {
                    if ($(items[i]).hasClass(this.control.helper.getPrefixClass('autocomplete-item-hover'))) {
                        selectedItemIndex = i;
                        break;
                    }
                }
                return selectedItemIndex;
            },
            getSelectedItem: function () {
                var element = this.getElement(false);
                var selectedItem;
                var selectedItemIndex = this.getSelectedItemIndex();
                if (selectedItemIndex !== -1) {
                    selectedItem = element.children[selectedItemIndex];
                }
                return selectedItem;
            },
            position: function () {
                var input = this.inputElement;
                if (input.nodeName.toLowerCase() !== 'textarea') {
                    this.$super(arguments);
                }
            },
            show: function () {
                this.$super(arguments);
                var input = this.inputElement;
                var $ele = $(this.getElement(false));
                if (input.nodeName.toLowerCase() === 'textarea') {
                    var cursorInstance = CursorPositionHelper.getInstance(input);
                    var pos = cursorInstance.getCaretPosition();
                    $ele.position({
                        of: input,
                        at: 'left+' + pos.left + ' top+' + pos.top,
                        my: 'left top'
                    });
                }
            },
            isHidden: function () {
                var element = this.getElement();
                return $(element).is(':hidden');
            },
            getInput: function () {
                var control = this.control;
                if (control.type === TEXT_BOX) {
                    return lib.g(control.inputId);
                } else if (control.type === TEXT_LINE) {
                    return control.getTextArea();
                }
                return null;
            },
            nodeName: 'ol'
        });
    function filter(value, datasource) {
        return u.filter(datasource, function (data) {
            var text = u.isObject(data) ? data.text : data;
            return new RegExp(escapeRegex(value), 'i').test(text);
        });
    }
    function escapeRegex(value) {
        return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
    }
    function repaintSuggest(value) {
        if (!value) {
            renderSuggest.call(this);
            return;
        }
        var me = this;
        var datasource = this.control.datasource;
        if (typeof datasource === 'function') {
            datasource.call(this, value, function (data) {
                renderSuggest.call(me, data, value);
            });
        } else if (datasource && datasource.length) {
            renderSuggest.call(me, filter(value, datasource), value);
        }
    }
    function renderSuggest(data, inputValue) {
        var helper = this.control.helper;
        function highlightWord(word) {
            return '<i class="' + helper.getPrefixClass('autocomplete-item-char-selected') + '">' + word + '</i>';
        }
        var ret = [];
        if (data && data.length) {
            for (var i = 0, len = data.length; i < len; i++) {
                var item = data[i];
                var text = u.isObject(item) && item.text || item;
                var desc = u.isObject(item) && item.desc || undefined;
                var html = lib.format('<li tabindex="-1" ${dataId} class="${lineClasses}">' + '<span class="${itemClasses}">${text}</span>${desc}</li>', {
                        dataId: u.isObject(item) && item.id ? ' data-id="' + item.id + '"' : '',
                        lineClasses: helper.getPrefixClass('autocomplete-item') + (i === 0 ? ' ' + helper.getPrefixClass('autocomplete-item-hover') : ''),
                        itemClasses: helper.getPrefixClass('autocomplete-item-text'),
                        text: text.replace(new RegExp(escapeRegex(inputValue), 'i'), highlightWord),
                        desc: desc ? '<span class="' + helper.getPrefixClass('autocomplete-item-desc') + '">' + item.desc + '</span>' : ''
                    });
                ret.push(html);
            }
        }
        ret = ret.join('');
        this.repaint(ret);
        ret ? this.show() : this.hide();
    }
    function setTargetValue(value) {
        var input = this.getInput();
        var targetValue = input.value;
        targetValue = lib.trim(targetValue);
        var items = [];
        if (/\n/.test(targetValue)) {
            items = targetValue.split(/\n/);
            targetValue = items && items.pop();
        }
        var words = targetValue.split(',');
        words.pop();
        words.push(value);
        if (items) {
            items.push(words.join(','));
            value = items.join('\n');
        }
        this.control.setValue(value);
    }
    function extractMatchingWord(value) {
        var lines = value.split(/\n/);
        var line = lines.pop();
        var words = line.split(',');
        var word = words && words.pop();
        return lib.trim(word);
    }
    function moveTo(updown) {
        var element = this.getElement(false);
        var items = element.children;
        var selectedItemIndex = this.getSelectedItemIndex();
        if (selectedItemIndex !== -1) {
            var selectedItem = items[selectedItemIndex];
            if (selectedItem) {
                lib.removeClass(selectedItem, this.control.helper.getPrefixClass('autocomplete-item-hover'));
            }
        }
        if (updown === 'up') {
            if (selectedItemIndex === -1 || selectedItemIndex === 0) {
                selectedItemIndex = items.length - 1;
            } else {
                selectedItemIndex--;
            }
        } else if (updown === 'down') {
            if (selectedItemIndex === -1 || selectedItemIndex === items.length - 1) {
                selectedItemIndex = 0;
            } else {
                selectedItemIndex++;
            }
        }
        selectedItem = items[selectedItemIndex];
        $(selectedItem).addClass(this.control.helper.getPrefixClass('autocomplete-item-hover'));
        selectedItem && selectedItem.focus();
        this.inputElement.focus();
    }
    var AutoComplete = eoo.create(Extension, {
            constructor: function () {
                this.$super(arguments);
            },
            type: 'AutoComplete',
            attachTo: function () {
                this.$super(arguments);
                var me = this;
                setTimeout(function () {
                    me.layer = new AutoCompleteLayer(me.target);
                }, 0);
            },
            activate: function () {
                var type = this.target.type;
                if (!(type === TEXT_LINE || type === TEXT_BOX)) {
                    return;
                }
                this.$super(arguments);
            },
            inactivate: function () {
                var helper = this.target.helper;
                var inputEle = this.inputElement;
                helper.removeDOMEvent(inputEle, INPUT);
                var layerMain = this.layer.getElement(false);
                helper.removeDOMEvent(inputEle, 'keydown');
                helper.removeDOMEvent(layerMain, 'click');
                this.target.main.removeChild(layerMain);
                this.$super(arguments);
            }
        });
    esui.registerExtension(AutoComplete);
    return AutoComplete;
});

define('ub-ria-ui/Carousel', [
    'require',
    'underscore',
    'esui',
    'esui/lib',
    'esui/painters',
    'esui/Control',
    'eoo',
    'jquery'
], function (require) {
    var u = require('underscore');
    var esui = require('esui');
    var lib = require('esui/lib');
    var paint = require('esui/painters');
    var Control = require('esui/Control');
    var eoo = require('eoo');
    var $ = require('jquery');
    var MAIN_TPL = [
            '<div class="${typeSelector}-main" id="${contentId}">',
            '<div class="${typeSelector}-content">',
            '<span class="${typeSelector}-pointer ${typeSelector}-pointer-active-l ${iconLeftArrow}"',
            ' id="${leftId}"></span>',
            '<div class="ui-carouse-list-wrap">',
            '<ul class="${typeSelector}-list" id="${listId}"></ul>',
            '</div>',
            '<span class="${typeSelector}-pointer ${typeSelector}-pointer-active-r ${iconRightArrow}"',
            ' id="${rightId}"></span>',
            '</div>',
            '<div class="${typeSelector}-toolbar">',
            '<ul id="${toolbarId}"></ul>',
            '</div>',
            '</div>'
        ].join('');
    var ITEM_TPL = [
            '<li class="${typeSelector}-item ${itemSelector}" index="${index}" ',
            'style="width:${width}px;height:${height}px;margin-right:${spacing}px;">',
            '<img class="${typeSelector}-item-img" src="${imgSrc}"/>',
            '<span class="${typeSelector}-check ${iconCheck}"></span>',
            '</li>'
        ].join('');
    var PAGE_TPL = '<li index="${index}" class="${typeSelector}-page"></li>';
    var Carousel = eoo.create(Control, {
            type: 'Carousel',
            initOptions: function (options) {
                var properties = {
                        pageSize: 8,
                        spacing: 15,
                        itemWidth: 80,
                        itemHeight: 50,
                        datasource: [],
                        value: null,
                        disabled: false,
                        emphasizeSelectedItem: true
                    };
                u.extend(properties, options);
                this.setProperties(properties);
            },
            initStructure: function () {
                this.main.innerHTML = getMainHtml.call(this);
            },
            initEvents: function () {
                this.helper.addDOMEvent('left-handler', 'click', u.bind(pointerClick, this, -1));
                this.helper.addDOMEvent('right-handler', 'click', u.bind(pointerClick, this, 1));
                this.helper.addDOMEvent('list', 'click', 'li', itemChangeHandler);
                this.helper.addDOMEvent('toolbar', 'click', 'li', toolbarHandler);
            },
            repaint: paint.createRepaint(Control.prototype.repaint, {
                name: [
                    'datasource',
                    'itemWidth',
                    'itemHeight'
                ],
                paint: function (carousel, datasource, itemWidth, itemHeight) {
                    var list = carousel.helper.getPart('list');
                    var toolbar = carousel.helper.getPart('toolbar');
                    var pageSize = carousel.pageSize;
                    var spacing = carousel.spacing;
                    list.innerHTML = getItemHtml.call(carousel, datasource, itemWidth, itemHeight, spacing, pageSize);
                    toolbar.innerHTML = getToolbarHtml.call(carousel, datasource);
                    var wrapWidth = itemWidth * carousel.pageSize + (pageSize - 1) * spacing;
                    var wrapHeight = itemHeight;
                    carousel.wrapWidth = wrapWidth;
                    var wrap = list.parentNode;
                    wrap.style.width = wrapWidth + 'px';
                    wrap.style.height = wrapHeight + 'px';
                }
            }, {
                name: 'value',
                paint: function (carousel, value) {
                    carousel.setValue(value);
                }
            }),
            setValue: function (value) {
                if (u.isNull(value) || u.isUndefined(value)) {
                    this.setPage();
                    return;
                }
                this.value = value;
                this.selectedIndex = -1;
                u.each(this.datasource, function (item, index) {
                    if (item.id === this.value) {
                        this.selectedIndex = index;
                        return false;
                    }
                }, this);
                this.selectedItem = this.getSelectedItem();
                if (this.selectedIndex !== -1 && this.emphasizeSelectedItem) {
                    var selector = this.helper.getPart('list');
                    var $lis = $(selector).children('li');
                    var selectedClass = this.helper.getPrimaryClassName('selected-item');
                    $lis.find('.' + selectedClass).removeClass(selectedClass);
                    var $li = $lis.eq(this.selectedIndex);
                    $li.addClass(selectedClass);
                }
                var page = getPageByIndex.call(this);
                this.setPage(page);
            },
            setPage: function (page) {
                page = page || 0;
                page = parseInt(page, 10);
                var currentPageClass = this.helper.getPrimaryClassName('current-page');
                if (this.currentPage === null) {
                    this.currentPage = 0;
                }
                if (this.currentPage !== page) {
                    this.currentPage = page;
                }
                var $allDom = $(this.helper.getPart('toolbar')).children();
                u.each($allDom, function (dom, i) {
                    var $dom = $(dom);
                    $dom.removeClass(currentPageClass);
                    var index = +$dom.attr('index');
                    if (this.currentPage === index) {
                        $dom.addClass(currentPageClass);
                    }
                }, this);
                setPointerStyle.call(this);
                setCarouseListPosition.call(this);
            },
            getSelectedItem: function () {
                return this.datasource[this.selectedIndex];
            }
        });
    function getMainHtml() {
        var controlHelper = this.helper;
        return lib.format(MAIN_TPL, {
            typeSelector: controlHelper.getPrimaryClassName(),
            contentId: controlHelper.getId('main'),
            leftId: controlHelper.getId('left-handler'),
            listId: controlHelper.getId('list'),
            rightId: controlHelper.getId('right-handler'),
            toolbarId: controlHelper.getId('toolbar'),
            iconLeftArrow: controlHelper.getIconClass(),
            iconRightArrow: controlHelper.getIconClass()
        });
    }
    function getItemHtml(data, itemWidth, itemHeight, spacing, pageSize) {
        var html = [];
        u.each(data, function (item, index) {
            var index1 = index + 1;
            var str = '';
            if (this.onRenderItem) {
                str = this.onRenderItem(item);
            } else {
                str = lib.format(ITEM_TPL, {
                    imgSrc: item.url,
                    width: itemWidth,
                    height: itemHeight,
                    index: index,
                    typeSelector: this.helper.getPrimaryClassName(),
                    itemSelector: this.isDisabled() ? this.helper.getPartClassName('disabled') : '',
                    iconCheck: this.helper.getIconClass(),
                    spacing: index1 > 0 && index1 % pageSize === 0 ? 0 : spacing
                });
            }
            html.push(str);
        }, this);
        return html.join('');
    }
    function getToolbarHtml(data) {
        var html = [];
        var len = data.length;
        var divided = Math.ceil(len / this.pageSize);
        this.pageLength = divided;
        for (var i = 0; i < divided; i++) {
            var str = lib.format(PAGE_TPL, {
                    index: i,
                    typeSelector: this.helper.getPrimaryClassName()
                });
            html.push(str);
        }
        return html.join('');
    }
    function getPageByIndex() {
        if (this.selectedIndex === -1) {
            return 0;
        }
        return Math.floor(this.selectedIndex / this.pageSize);
    }
    function setPointerStyle() {
        var controlHelper = this.helper;
        var disableClass = controlHelper.getPartClassName('pointer-disable');
        var $left = $(controlHelper.getPart('left-handler'));
        var $right = $(controlHelper.getPart('right-handler'));
        var currentPage = this.currentPage;
        $left.removeClass(disableClass);
        $right.removeClass(disableClass);
        if (currentPage === 0) {
            $left.addClass(disableClass);
        }
        if (currentPage === this.pageLength - 1) {
            $right.addClass(disableClass);
        }
    }
    function setCarouseListPosition() {
        var pageOffset = -this.wrapWidth;
        var left = pageOffset * this.currentPage + 'px';
        this.helper.getPart('list').style.left = left;
    }
    function pointerClick(n) {
        var nextPage = this.currentPage + n;
        if (nextPage >= this.pageLength || nextPage < 0) {
        } else {
            this.setPage(nextPage);
        }
    }
    function itemClick(index, $el) {
        if (this.selectedIndex === index) {
            return;
        }
        if (this.emphasizeSelectedItem) {
            var $selector = $(this.helper.getPart('list'));
            var selectedClass = this.helper.getPrimaryClassName('selected-item');
            $selector.children('.' + selectedClass).removeClass(selectedClass);
            $el.addClass(selectedClass);
        }
        this.selectedIndex = index;
        this.selectedItem = this.getSelectedItem();
        this.value = this.selectedItem.id;
        this.fire('change');
    }
    function pageClick(nextPage) {
        if (this.currentPage !== nextPage) {
            this.setPage(nextPage);
        }
    }
    function itemChangeHandler(e) {
        var $target = $(e.currentTarget);
        itemClick.call(this, +$target.attr('index'), $target);
    }
    function toolbarHandler(e) {
        var $target = $(e.currentTarget);
        pageClick.call(this, +$target.attr('index'));
    }
    esui.register(Carousel);
    return Carousel;
});

define('ub-ria-ui/colorPicker/Color', ['require'], function (require) {
    function toHex(number) {
        var hex = (+number).toString(16);
        if (hex.length === 1) {
            hex = '0' + hex;
        }
        return hex;
    }
    var exports = {
            hsbToRGB: function (hue, saturation, bright) {
                if (typeof hue === 'object') {
                    bright = hue.bright || hue.b;
                    saturation = hue.saturation || hue.s;
                    hue = hue.hue || hue.h;
                }
                if (saturation > 1) {
                    saturation = saturation / 100;
                }
                if (bright > 1) {
                    bright = bright / 100;
                }
                var br = Math.round(bright * 255);
                var rgb = {};
                var rgbArray = [];
                if (saturation === 0) {
                    rgbArray = [
                        br,
                        br,
                        br
                    ];
                } else {
                    hue %= 360;
                    var f = hue % 60;
                    var p = Math.round(bright * (1 - saturation) * 255);
                    var q = Math.round(bright * (60 - saturation * f) / 60 * 255);
                    var t = Math.round(bright * (60 - saturation * (60 - f)) / 60 * 255);
                    switch (Math.floor(hue / 60)) {
                    case 0:
                        rgbArray = [
                            br,
                            t,
                            p
                        ];
                        break;
                    case 1:
                        rgbArray = [
                            q,
                            br,
                            p
                        ];
                        break;
                    case 2:
                        rgbArray = [
                            p,
                            br,
                            t
                        ];
                        break;
                    case 3:
                        rgbArray = [
                            p,
                            q,
                            br
                        ];
                        break;
                    case 4:
                        rgbArray = [
                            t,
                            p,
                            br
                        ];
                        break;
                    case 5:
                        rgbArray = [
                            br,
                            p,
                            q
                        ];
                        break;
                    }
                }
                rgb.red = Math.round(rgbArray[0]);
                rgb.green = Math.round(rgbArray[1]);
                rgb.blue = Math.round(rgbArray[2]);
                rgb.r = rgb.red;
                rgb.g = rgb.green;
                rgb.b = rgb.blue;
                return rgb;
            },
            rgbToHex: function (red, green, blue) {
                if (typeof red === 'object') {
                    blue = red.blue || red.b;
                    green = red.green || red.g;
                    red = red.red || red.r;
                }
                var hex = [
                        toHex(red),
                        toHex(green),
                        toHex(blue)
                    ];
                return hex.join('');
            },
            hsbToHex: function (hue, saturation, bright) {
                var rgb = exports.hsbToRGB(hue, saturation, bright);
                var hex = exports.rgbToHex(rgb);
                return hex;
            },
            rgbToHSB: function (red, green, blue) {
                if (typeof red === 'object') {
                    blue = red.blue || red.b;
                    green = red.green || red.g;
                    red = red.red || red.r;
                }
                red /= 255;
                green /= 255;
                blue /= 255;
                var max = Math.max(red, green, blue);
                var min = Math.min(red, green, blue);
                var diff = max - min;
                var hue = 0;
                var saturation = 0;
                var bright = max;
                if (max !== 0) {
                    saturation = diff / max;
                }
                if (saturation !== 0) {
                    if (red === max) {
                        hue = (green - blue) / diff;
                    } else if (green === max) {
                        hue = 2 + (blue - red) / diff;
                    } else {
                        hue = 4 + (red - green) / diff;
                    }
                } else {
                    hue = -1;
                }
                hue *= 60;
                if (hue < 0) {
                    hue += 360;
                }
                var hsb = {
                        hue: hue,
                        saturation: saturation,
                        bright: bright
                    };
                hsb.h = hsb.hue;
                hsb.s = hsb.saturation;
                hsb.b = hsb.bright;
                return hsb;
            },
            hexToRGB: function (hex) {
                if (hex.indexOf('#') === 0) {
                    hex = hex.substring(1);
                }
                hex = new Array(6 - hex.length + 1).join('0') + hex;
                var rgb = {
                        red: parseInt(hex.charAt(0) + hex.charAt(1), 16) || 0,
                        green: parseInt(hex.charAt(2) + hex.charAt(3), 16) || 0,
                        blue: parseInt(hex.charAt(4) + hex.charAt(5), 16) || 0
                    };
                rgb.r = rgb.red;
                rgb.g = rgb.green;
                rgb.b = rgb.blue;
                return rgb;
            },
            hexToHSB: function (hex) {
                var rgb = exports.hexToRGB(hex);
                var hsb = exports.rgbToHSB(rgb);
                return hsb;
            },
            isValidRGB: function (input) {
                return /^#?[0-9a-fA-Z]{3}$/.test(input) || /^#?[0-9a-fA-Z]{6}$/.test(input);
            }
        };
    return exports;
});

define('esui/Validity', [
    'require',
    'underscore',
    'eoo',
    './main',
    './Control',
    './Helper',
    './painters',
    'jquery'
], function (require) {
    var u = require('underscore');
    var eoo = require('eoo');
    var esui = require('./main');
    var Control = require('./Control');
    var Helper = require('./Helper');
    var painters = require('./painters');
    var $ = require('jquery');
    var Validity = eoo.create(Control, {
            type: 'Validity',
            createMain: function () {
                return document.createElement('label');
            },
            initOptions: function (options) {
                var properties = u.extend({}, options);
                this.$super([properties]);
            },
            display: function (validState, message, validity) {
                this.main.innerHTML = message;
            },
            repaint: painters.createRepaint(Control.prototype.repaint, {
                name: [
                    'target',
                    'targetType'
                ],
                paint: function (label) {
                    var validState = label.validity ? label.validity.getValidState() : '';
                    var classes = getClasses(label, validState);
                    label.main.className = classes.join(' ');
                }
            }, {
                name: 'focusTarget',
                paint: function (label, focusTarget) {
                    var $labelMain = $(label.main);
                    if ($labelMain.is('label')) {
                        if (focusTarget && focusTarget.id) {
                            $labelMain.attr('for', focusTarget.id);
                        } else {
                            $labelMain.removeAttr('for');
                        }
                    }
                }
            }, {
                name: 'validity',
                paint: function (label, validity) {
                    var validState = validity && validity.getValidState();
                    var classes = getClasses(label, validState);
                    label.main.className = classes.join(' ');
                    label.disposeChildren();
                    if (validity) {
                        var message = validity.getCustomMessage();
                        if (!message) {
                            var invalidState = u.find(validity.getStates(), function (state) {
                                    return !state.getState();
                                });
                            message = invalidState && invalidState.getMessage();
                        }
                        label.display(validState, message || '', validity);
                        label.helper.initChildren();
                        if (message && !(label.target && label.target.isHidden())) {
                            label.show();
                        } else {
                            label.hide();
                        }
                    } else {
                        label.main.innerHTML = '';
                        label.hide();
                    }
                }
            }),
            dispose: function () {
                if (this.helper.isInStage('DISPOSED')) {
                    return;
                }
                if (this.target) {
                    this.target.validityLabel = null;
                    this.target = null;
                }
                this.focusTarget = null;
                $(this.main).remove();
                this.$super(arguments);
            }
        });
    function getClasses(label, state) {
        var target = label.target;
        var targetHelper = null;
        if (target || label.targetType) {
            var targetContext = {
                    type: label.targetType || target.type,
                    skin: target && target.skin
                };
            targetHelper = new Helper(targetContext);
        }
        var classes = label.helper.getPartClasses();
        if (targetHelper) {
            classes.push.apply(classes, targetHelper.getPartClasses('validity-label'));
        }
        if (state) {
            classes.push.apply(classes, label.helper.getPartClasses(state));
            if (targetHelper) {
                classes.push.apply(classes, targetHelper.getPartClasses('validity-label-' + state));
            }
        }
        if (target && target.isHidden() || label.isHidden()) {
            classes.push.apply(classes, label.helper.getStateClasses('hidden'));
            if (target) {
                classes.push.apply(classes, target.helper.getPartClasses('validity-label-hidden'));
            }
        }
        return classes;
    }
    esui.register(Validity);
    return Validity;
});

define('esui/validator/Validity', [
    'require',
    'underscore',
    'eoo'
], function (require) {
    var u = require('underscore');
    var eoo = require('eoo');
    var Validity = eoo.create({
            constructor: function () {
                this.states = [];
                this.stateIndex = {};
                this.customMessage = '';
                this.customValidState = null;
            },
            addState: function (name, state) {
                if (this.stateIndex[name]) {
                    if (this.stateIndex[name] === state) {
                        return;
                    }
                    for (var i = 0; i < this.states.length; i++) {
                        if (this.states[i] === this.stateIndex[name]) {
                            this.states.splice(i, 1);
                            break;
                        }
                    }
                }
                this.states.push(state);
                this.stateIndex[name] = state;
            },
            getState: function (name) {
                return this.stateIndex[name] || null;
            },
            getStates: function () {
                return this.states.slice();
            },
            getCustomMessage: function () {
                return this.customMessage;
            },
            setCustomMessage: function (message) {
                this.customMessage = message;
            },
            setCustomValidState: function (validState) {
                this.customValidState = validState;
            },
            isValid: function () {
                return u.all(this.getStates(), function (state) {
                    return state.getState();
                });
            },
            getValidState: function () {
                return this.customValidState || (this.isValid() ? 'valid' : 'invalid');
            }
        });
    return Validity;
});

define('esui/InputControl', [
    'require',
    './lib',
    './Control',
    './Validity',
    './validator/Validity',
    './main',
    'underscore',
    'eoo',
    './painters',
    'jquery'
], function (require) {
    var lib = require('./lib');
    var Control = require('./Control');
    var ValidityLabel = require('./Validity');
    var Validity = require('./validator/Validity');
    var esui = require('./main');
    var u = require('underscore');
    var eoo = require('eoo');
    var painters = require('./painters');
    var $ = require('jquery');
    var InputControl = eoo.create(Control, {
            constructor: function (options) {
                options = options ? u.extend({}, options) : {};
                if (options.main && !options.name) {
                    options.name = options.main.getAttribute('name');
                }
                this.$super([options]);
            },
            ignoreStates: Control.prototype.ignoreStates.concat('read-only'),
            getCategory: function () {
                return 'input';
            },
            getFocusTarget: function () {
                return null;
            },
            getValue: function () {
                return this.stringifyValue(this.getRawValue());
            },
            setValue: function (value) {
                var rawValue = this.parseValue(value);
                this.setRawValue(rawValue);
            },
            getRawValue: function () {
                return this.rawValue;
            },
            setRawValue: function (rawValue) {
                this.setProperties({ rawValue: rawValue });
            },
            setProperties: function (properties) {
                var value = properties.value;
                delete properties.value;
                if (value != null && properties.rawValue == null) {
                    properties.rawValue = this.parseValue(value);
                }
                if (this.hasOwnProperty('readOnly')) {
                    this.readOnly = !!this.readOnly;
                }
                return this.$super(arguments);
            },
            repaint: painters.createRepaint(Control.prototype.repaint, {
                name: 'disabled',
                paint: function (control, value) {
                    var nodeName = control.main.nodeName.toLowerCase();
                    if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {
                        control.main.disabled = value;
                    }
                }
            }, {
                name: 'readOnly',
                paint: function (control, value) {
                    var method = value ? 'addState' : 'removeState';
                    control[method]('read-only');
                    var nodeName = control.main.nodeName.toLowerCase();
                    if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {
                        control.main.readOnly = value;
                    }
                }
            }, {
                name: 'hidden',
                paint: function (control, hidden) {
                    var validityLabel = control.getValidityLabel(true);
                    if (validityLabel) {
                        var classPrefix = esui.getConfig('uiClassPrefix');
                        var classes = [].concat(classPrefix + '-hidden', classPrefix + '-validity-hidden', control.helper.getPartClasses('validity-hidden'));
                        var method = control.isHidden() ? 'addClass' : 'removeClass';
                        $(validityLabel)[method](classes.join(' '));
                    }
                }
            }),
            stringifyValue: function (rawValue) {
                return rawValue != null ? rawValue + '' : '';
            },
            parseValue: function (value) {
                return value;
            },
            setReadOnly: function (readOnly) {
                readOnly = !!readOnly;
                this[readOnly ? 'addState' : 'removeState']('read-only');
            },
            isReadOnly: function () {
                return this.hasState('read-only');
            },
            getValidationResult: function () {
                var validity = new Validity();
                var eventArg = { validity: validity };
                eventArg = this.fire('beforevalidate', eventArg);
                var rules = esui.createRulesByControl(this);
                for (var i = 0, len = rules.length; i < len; i++) {
                    var rule = rules[i];
                    validity.addState(rule.getName(), rule.check(this.getValue(), this));
                }
                if (!validity.isValid()) {
                    eventArg = this.fire('invalid', eventArg);
                }
                this.fire('aftervalidate', eventArg);
                return validity;
            },
            checkValidity: function () {
                var validity = this.getValidationResult();
                return validity.isValid();
            },
            validate: function () {
                var validity = this.getValidationResult();
                this.showValidity(validity);
                return validity.isValid();
            },
            getValidityLabel: function (dontCreate) {
                if (!this.helper.isInStage('RENDERED')) {
                    return null;
                }
                var label = this.validityLabel && this.viewContext.get(this.validityLabel);
                if (!label && !dontCreate) {
                    var options = {
                            id: this.id + '-validity',
                            viewContext: this.viewContext
                        };
                    label = new ValidityLabel(options);
                    if (this.main.nextSibling) {
                        var nextSibling = this.main.nextSibling;
                        label.insertBefore(nextSibling);
                    } else {
                        label.appendTo(this.main.parentNode);
                    }
                    this.validityLabel = label.id;
                }
                if ((lib.ie === 8 || lib.ie === 7) && label) {
                    $(label.main.parentNode).toggleClass('fuck-the-ie');
                }
                return label;
            },
            showValidity: function (validity) {
                if (this.validity) {
                    this.removeState('validity-' + this.validity.getValidState());
                }
                this.validity = validity;
                this.addState('validity-' + validity.getValidState());
                var label = this.getValidityLabel();
                if (!label) {
                    return;
                }
                var properties = {
                        target: this,
                        focusTarget: this.getFocusTarget(),
                        validity: validity
                    };
                label.setProperties(properties);
            },
            hideValidity: function () {
                var validity = new Validity();
                this.showValidity(validity);
            },
            showValidationMessage: function (validState, message) {
                message = message || '';
                var validity = new Validity();
                validity.setCustomValidState(validState);
                validity.setCustomMessage(message);
                this.showValidity(validity);
            },
            dispose: function () {
                if (this.helper.isInStage(this, 'DISPOSED')) {
                    return;
                }
                var validityLabel = this.getValidityLabel(true);
                if (validityLabel) {
                    validityLabel.dispose();
                }
                this.$super(arguments);
            }
        });
    return InputControl;
});

define('esui/behavior/textchange', [
    'require',
    'jquery'
], function (require) {
    var $ = require('jquery');
    var testNode = document.createElement('input');
    var isInputSupported = 'oninput' in testNode && (!('documentMode' in document) || document.documentMode > 9);
    var hasInputCapabilities = function (elem) {
        return elem.nodeName === 'INPUT' && (elem.type === 'text' || elem.type === 'password') || elem.nodeName === 'TEXTAREA';
    };
    var activeElement = null;
    var activeElementValue = null;
    var activeElementValueProp = null;
    var newValueProp = {
            get: function () {
                return activeElementValueProp.get.call(this);
            },
            set: function (val) {
                activeElementValue = val;
                activeElementValueProp.set.call(this, val);
            }
        };
    var handlePropertyChange = function (nativeEvent) {
        if (nativeEvent.propertyName !== 'value') {
            return;
        }
        var value = nativeEvent.srcElement.value;
        if (value === activeElementValue) {
            return;
        }
        activeElementValue = value;
        var event = $.Event(nativeEvent);
        event.type = 'textchange';
        $(activeElement).trigger(event);
    };
    var startWatching = function (target) {
        activeElement = target;
        activeElementValue = target.value;
        activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');
        Object.defineProperty(activeElement, 'value', newValueProp);
        activeElement.attachEvent('onpropertychange', handlePropertyChange);
    };
    var stopWatching = function () {
        if (!activeElement) {
            return;
        }
        delete activeElement.value;
        activeElement.detachEvent('onpropertychange', handlePropertyChange);
        activeElement = null;
        activeElementValue = null;
        activeElementValueProp = null;
    };
    if (isInputSupported) {
        $(document).on('input', function (event) {
            var target = event.target;
            if (true || target.nodeName !== 'TEXTAREA') {
                event.type = 'textchange';
                $(target).trigger(event);
            }
        });
    } else {
        $(document).on('focusin', function (event) {
            var target = event.target;
            if (hasInputCapabilities(target)) {
                stopWatching();
                startWatching(target);
            }
        }).on('focusout', function () {
            stopWatching();
        }).on('selectionchange keyup keydown', function (event) {
            if (activeElement && activeElement.value !== activeElementValue) {
                activeElementValue = activeElement.value;
                event.type = 'textchange';
                $(activeElement).trigger(event);
            }
        });
    }
});

define('esui/TextBox', [
    'require',
    'eoo',
    './main',
    'underscore',
    'jquery',
    './lib',
    './InputControl',
    './painters',
    './behavior/textchange'
], function (require) {
    var eoo = require('eoo');
    var esui = require('./main');
    var u = require('underscore');
    var $ = require('jquery');
    var lib = require('./lib');
    var InputControl = require('./InputControl');
    var supportPlaceholder = 'placeholder' in document.createElement('input');
    var painters = require('./painters');
    require('./behavior/textchange');
    var TextBox = eoo.create(InputControl, {
            type: 'TextBox',
            initOptions: function (options) {
                var properties = {
                        width: 200,
                        mode: 'text',
                        placeholder: '',
                        autoSelect: false,
                        icon: null
                    };
                properties.name = this.main.getAttribute('name');
                var inputElement;
                if (lib.isInput(this.main)) {
                    inputElement = this.main;
                } else if (this.main.children.length > 0) {
                    this.innerInput = true;
                    inputElement = this.main.children[0];
                }
                if (inputElement) {
                    extractInputOptions.call(this, inputElement, properties);
                }
                u.extend(properties, options);
                if (!properties.hasOwnProperty('title') && this.main.title) {
                    properties.title = this.main.title;
                }
                this.setProperties(properties);
            },
            getFocusTarget: function () {
                return lib.g(this.inputId);
            },
            initStructure: function () {
                var input;
                if (lib.isInput(this.main)) {
                    var main = this.helper.replaceMain();
                    lib.removeAttribute(this.main, 'tabindex');
                    this.inputId = main.id || this.helper.getId('input');
                    if (this.main.id) {
                        this.main.id = this.helper.getId();
                    }
                    input = main.cloneNode(false);
                    lib.removeAttribute(input, esui.getConfig('instanceAttr'));
                    input.id = this.inputId;
                    this.main.appendChild(input);
                } else if (this.innerInput) {
                    this.inputId = this.helper.getId('input');
                    this.main.children[0].id = this.inputId;
                } else {
                    this.inputId = this.helper.getId('input');
                    var html = this.mode === 'textarea' ? '<textarea id="' + this.inputId + '"' : '<input type="' + this.mode + '" placeholder="' + this.placeholder + '" id="' + this.inputId + '"';
                    if (this.name) {
                        html += ' name="' + u.escape(this.name) + '"';
                    }
                    html += this.mode === 'textarea' ? '></textarea>' : ' />';
                    this.main.innerHTML = html;
                }
                input = lib.g(this.inputId);
                var icon = this.icon;
                if (icon) {
                    var iconElement = document.createElement('span');
                    iconElement.className = icon + ' ' + this.helper.getPartClasses('icon');
                    lib.insertBefore(iconElement, input);
                }
                if (!supportPlaceholder) {
                    var placeholder = document.createElement('label');
                    placeholder.id = this.helper.getId('placeholder');
                    lib.setAttribute(placeholder, 'for', input.id);
                    this.helper.addPartClasses('placeholder', placeholder);
                    lib.insertAfter(placeholder, input);
                }
            },
            initEvents: function () {
                var input = lib.g(this.inputId);
                this.helper.addDOMEvent(input, 'keypress', dispatchSpecialKey);
                this.helper.addDOMEvent(input, 'focus', focus);
                this.helper.addDOMEvent(input, 'blur', blur);
                this.helper.addDOMEvent(input, 'textchange', u.bind(dispatchInputEvent, this));
                this.helper.delegateDOMEvent(input, 'change');
                if (this.icon) {
                    this.helper.addDOMEvent(this.main.firstChild, 'click', iconClick);
                }
            },
            repaint: painters.createRepaint(InputControl.prototype.repaint, {
                name: 'rawValue',
                paint: function (textbox, rawValue) {
                    var input = lib.g(textbox.inputId);
                    input.value = textbox.stringifyValue(rawValue);
                    togglePlaceholder(textbox);
                }
            }, {
                name: 'title',
                paint: function (textbox, title) {
                    var input = lib.g(textbox.inputId);
                    var placeholder = textbox.helper.getPart('placeholder');
                    if (title) {
                        lib.setAttribute(textbox.main, 'title', title);
                        lib.setAttribute(input, 'title', title);
                        if (placeholder) {
                            lib.setAttribute(placeholder, 'title', title);
                        }
                    } else {
                        lib.removeAttribute(textbox.main, 'title');
                        lib.removeAttribute(input, 'title');
                        if (placeholder) {
                            lib.removeAttribute(placeholder, 'title');
                        }
                    }
                }
            }, {
                name: 'maxLength',
                paint: function (textbox, maxLength) {
                    var input = lib.g(textbox.inputId);
                    maxLength = parseInt(maxLength, 10);
                    if (!maxLength || maxLength <= 0) {
                        try {
                            input.maxLength = undefined;
                            delete input.maxLength;
                        } catch (badErrorForIE) {
                        }
                        lib.removeAttribute(input, 'maxlength');
                        lib.removeAttribute(input, 'maxLength');
                    } else {
                        input.maxLength = maxLength;
                        lib.setAttribute(input, 'maxlength', maxLength);
                    }
                }
            }, {
                name: [
                    'disabled',
                    'readOnly'
                ],
                paint: function (textbox, disabled, readOnly) {
                    var input = lib.g(textbox.inputId);
                    input.disabled = disabled;
                    input.readOnly = readOnly;
                }
            }, {
                name: 'placeholder',
                paint: function (textbox, placeholder) {
                    var input = lib.g(textbox.inputId);
                    if (supportPlaceholder) {
                        if (placeholder) {
                            lib.setAttribute(input, 'placeholder', placeholder);
                        } else {
                            lib.removeAttribute(input, 'placeholder');
                        }
                    } else {
                        var label = textbox.helper.getPart('placeholder');
                        label.innerHTML = u.escape(placeholder || '');
                    }
                    togglePlaceholder(textbox);
                }
            }, {
                name: [
                    'hint',
                    'hintType'
                ],
                paint: function (textbox, hint, hintType) {
                    var label = textbox.helper.getPart('hint');
                    textbox.removeState('hint-prefix');
                    textbox.removeState('hint-suffix');
                    if (!hint && label) {
                        lib.removeNode(label);
                    }
                    if (hint) {
                        if (!label) {
                            label = document.createElement('label');
                            label.id = textbox.helper.getId('hint');
                            textbox.helper.addPartClasses('hint', label);
                            lib.setAttribute(label, 'for', textbox.inputId);
                        }
                        label.innerHTML = u.escape(hint);
                        hintType = hintType === 'prefix' ? 'prefix' : 'suffix';
                        var method = hintType === 'prefix' ? 'insertBefore' : 'insertAfter';
                        var input = lib.g(textbox.inputId);
                        lib[method](label, input);
                        textbox.addState('hint-' + hintType);
                    }
                }
            }, {
                name: [
                    'width',
                    'hint',
                    'hidden'
                ],
                paint: function (textbox, width, hint, hidden) {
                    if (hidden || isNaN(width)) {
                        return;
                    }
                    if (hint) {
                        var hintLabel = textbox.helper.getPart('hint');
                        if (hintLabel) {
                            width -= hintLabel.offsetWidth;
                        }
                    }
                    var input = lib.g(textbox.inputId);
                    input.style.width = width + 'px';
                    var placeholder = textbox.helper.getPart('placeholder');
                    if (placeholder) {
                        placeholder.style.maxWidth = width + 'px';
                    }
                }
            }, {
                name: 'height',
                paint: function (textbox, height) {
                    if (isNaN(height)) {
                        return;
                    }
                    var hintLabel = textbox.helper.getPart('hint');
                    var heightWithUnit = height + 'px';
                    if (hintLabel) {
                        hintLabel.style.height = heightWithUnit;
                        hintLabel.style.lineHeight = heightWithUnit;
                    }
                    var input = lib.g(textbox.inputId);
                    input.style.height = heightWithUnit;
                    var placeholder = textbox.helper.getPart('placeholder');
                    if (placeholder) {
                        placeholder.style.height = heightWithUnit;
                        placeholder.style.lineHeight = heightWithUnit;
                    }
                }
            }),
            getValidityLabel: function () {
                var label = InputControl.prototype.getValidityLabel.apply(this, arguments);
                if (label) {
                    label.set('targetType', this.mode === 'textarea' ? 'TextArea' : 'TextBox');
                }
                return label;
            },
            getRawValue: function () {
                var input = lib.g(this.inputId);
                return input ? input.value : this.rawValue || this.value || '';
            },
            getRawValueProperty: function () {
                return this.getRawValue.apply(this, arguments);
            }
        });
    function extractInputOptions(input, props) {
        var nodeName = input.nodeName.toLowerCase();
        if (nodeName === 'textarea') {
            props.mode = 'textarea';
        } else {
            var type = input.type;
            props.mode = type === 'password' ? 'password' : 'text';
        }
        if (!props.placeholder) {
            props.placeholder = input.getAttribute('placeholder');
        }
        this.helper.extractOptionsFromInput(input, props);
    }
    function dispatchSpecialKey(e) {
        var keyCode = e.which;
        if (keyCode === 13) {
            this.fire('enter');
        }
        var args = {
                keyCode: keyCode,
                key: String.fromCharCode(keyCode),
                ctrlKey: e.ctrlKey,
                altKey: e.altKey
            };
        this.fire('keypress', args);
    }
    function togglePlaceholder(textbox, focused) {
        var input = lib.g(textbox.inputId);
        if (!supportPlaceholder) {
            var placeholder = textbox.helper.getPart('placeholder');
            if (typeof focused !== 'boolean') {
                focused = document.activeElement === input;
            }
            if (!focused && !textbox.getRawValue()) {
                textbox.helper.removePartClasses('placeholder-hidden', placeholder);
            } else {
                textbox.helper.addPartClasses('placeholder-hidden', placeholder);
            }
        }
    }
    function focus(e) {
        togglePlaceholder(this, true);
        if (this.autoSelect) {
            var input = lib.g(this.inputId);
            input.select();
        }
        this.fire('focus');
    }
    function blur(e) {
        togglePlaceholder(this, false);
        this.fire('blur');
    }
    function dispatchInputEvent(e) {
        if (e.type === 'textchange') {
            this.fire('input');
        }
    }
    function iconClick(e) {
        this.fire('iconclick');
    }
    esui.register(TextBox);
    return TextBox;
});

define('esui/Label', [
    'require',
    'underscore',
    './lib',
    './Control',
    './painters',
    './main',
    'eoo',
    'jquery'
], function (require) {
    var u = require('underscore');
    var lib = require('./lib');
    var Control = require('./Control');
    var painters = require('./painters');
    var esui = require('./main');
    var eoo = require('eoo');
    var $ = require('jquery');
    var Label = eoo.create(Control, {
            type: 'Label',
            createMain: function (options) {
                if (!options.tagName) {
                    return this.$super([options]);
                }
                return document.createElement(options.tagName);
            },
            initOptions: function (options) {
                var properties = { title: '' };
                u.extend(properties, options);
                properties.tagName = this.main.nodeName.toLowerCase();
                if (properties.text == null) {
                    properties.text = lib.trim(lib.getText(this.main));
                }
                u.extend(this, properties);
            },
            initEvents: function () {
                this.helper.delegateDOMEvent(this.main, 'click');
            },
            repaint: painters.createRepaint(Control.prototype.repaint, painters.attribute('title'), painters.text('text'), {
                name: 'forTarget',
                paint: function (label, forTarget) {
                    if (!$(label.main).is('label')) {
                        return;
                    }
                    label.helper.addDOMEvent({ once: true }, label.main, 'mousedown', function fixForAttribute() {
                        var targetControl = this.viewContext.get(forTarget);
                        var targetElement = targetControl && typeof targetControl.getFocusTarget === 'function' && targetControl.getFocusTarget();
                        if (targetElement && targetElement.id) {
                            lib.setAttribute(this.main, 'for', targetElement.id);
                        }
                    });
                }
            }),
            setText: function (text) {
                this.setProperties({ text: text });
            },
            getText: function () {
                return this.text;
            },
            setTitle: function (title) {
                this.setProperties({ title: title });
            },
            getTitle: function () {
                return this.title;
            }
        });
    esui.register(Label);
    return Label;
});

define('esui/behavior/Base', [
    'require',
    'jquery',
    'underscore',
    'eoo'
], function (require) {
    var $ = require('jquery');
    var u = require('underscore');
    var eoo = require('eoo');
    var Base = eoo.create({
            type: 'behaviorBase',
            constructor: function (options, element) {
                this.options = u.extend({}, Base.defaultProperties, options);
                this.customEventPrefix = this.options.customEventPrefix;
                this.eventNamespace = '.' + this.type + $.guid++;
                this.classPrefix = this.options.classPrefix;
                this.bindings = $();
                this.element = $(element);
                element = this.element[0];
                this.document = $(element.style ? element.ownerDocument : element.document || element);
                this.window = $(this.document[0].defaultView || this.document[0].parentWindow);
                this.init();
            },
            init: function () {
            },
            trigger: function (type, event, data) {
                event = $.Event(event);
                event.type = (this.customEventPrefix + type).toLowerCase();
                event.target = this.element[0];
                var orig = event.originalEvent;
                if (orig) {
                    for (var prop in orig) {
                        if (!(prop in event)) {
                            event[prop] = orig[prop];
                        }
                    }
                }
                data = data || {};
                this.element.trigger(event, data);
                var callback = this.options[type];
                return !($.isFunction(callback) && callback.apply(this.element[0], [event].concat(data)) === false);
            },
            on: function (suppressDisabledCheck, element, handlers) {
                if (typeof suppressDisabledCheck !== 'boolean') {
                    handlers = element;
                    element = suppressDisabledCheck;
                    suppressDisabledCheck = false;
                }
                if (!handlers) {
                    handlers = element;
                    element = this.element;
                } else {
                    element = $(element);
                    this.bindings = this.bindings.add(element);
                }
                var me = this;
                $.each(handlers, function (event, handler) {
                    function handlerProxy() {
                        if (!suppressDisabledCheck && me.options.disabled === true) {
                            return;
                        }
                        handler = typeof handler === 'string' ? me[handler] : handler;
                        return handler.apply(me, arguments);
                    }
                    if (typeof handler !== 'string') {
                        handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++;
                    }
                    var match = event.match(/^([\w:-]*)\s*(.*)$/);
                    var eventName = match[1] + me.eventNamespace;
                    var selector = match[2];
                    element.on(eventName, selector, handlerProxy);
                });
            },
            getClassName: function (fullName, styleType, typeName) {
                var me = this;
                var prefix = me.classPrefix;
                if (u.isString(fullName)) {
                    typeName = styleType;
                    styleType = fullName;
                    fullName = false;
                }
                if (!typeName) {
                    typeName = this.type;
                }
                styleType = styleType || '';
                var options = me.options;
                var classes = [];
                u.each(styleType.split(/\s+/g), function (type) {
                    var result;
                    if (type) {
                        if (type.indexOf(prefix) === 0) {
                            result = type;
                        } else {
                            result = [
                                prefix,
                                typeName,
                                type
                            ].join('-');
                        }
                    } else {
                        result = [
                            prefix,
                            typeName
                        ].join('-');
                    }
                    if (fullName) {
                        result = '.' + result;
                    }
                    classes.push(result);
                });
                return classes.join(' ');
            },
            addClass: function (element, className) {
                this.toggleClass(element, className, true);
            },
            removeClass: function (element, className) {
                this.toggleClass(element, className, false);
            },
            toggleClass: function (element, className, toggle) {
                if (u.isBoolean(element)) {
                    toggle = element;
                    className = '';
                    element = this.element;
                } else if (u.isBoolean(className)) {
                    toggle = className;
                    className = element;
                    element = this.element;
                } else {
                    element = $(element || this.element);
                }
                element.toggleClass(this.getClassName(className), toggle);
            },
            hasClass: function (element, className) {
                if (u.isString(element)) {
                    className = element;
                    element = this.element;
                }
                element.hasClass(this.getClassName(className));
            },
            setOptions: function (options) {
                var me = this;
                u.each(options, function (item, key) {
                    me.setOption(key, options[key]);
                });
            },
            setOption: function (key, value) {
                this.options[key] = value;
            },
            enable: function () {
                return this.setOptions({ disabled: false });
            },
            disable: function () {
                return this.setOptions({ disabled: true });
            },
            dispose: function () {
                this.element.off(this.eventNamespace).removeData(this.type);
                this.bindings.off(this.eventNamespace);
            }
        });
    Base.defaultProperties = {
        customEventPrefix: 'base',
        classPrefix: 'ui'
    };
    return Base;
});

define('esui/behavior/bridge', [
    'require',
    'jquery'
], function (require) {
    var $ = require('jquery');
    return function (name, Base) {
        $.fn[name] = function (options) {
            var isMethodCall = typeof options === 'string';
            var args = Array.prototype.slice.call(arguments, 1);
            var returnValue = this;
            if (isMethodCall) {
                var method = options;
                this.each(function () {
                    var instance = $.data(this, name);
                    if (method === 'instance') {
                        returnValue = instance;
                        return false;
                    }
                    if (!instance) {
                        return $.error('cannot call methods on ' + name + ' prior to initialization; ' + 'attempted to call method "' + method + '"');
                    }
                    if (!$.isFunction(instance[method]) || method.charAt(0) === '_') {
                        return $.error('no such method "' + method + '" for ' + name + ' widget instance');
                    }
                    var methodValue = instance[method].apply(instance, args);
                    if (methodValue !== instance && methodValue !== undefined) {
                        returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;
                        return false;
                    }
                });
            } else {
                if (args.length) {
                    options = $.extend.apply(null, [options].concat(args));
                }
                options = options || {};
                this.each(function () {
                    var instance = $.data(this, name);
                    if (instance) {
                        instance.setOptions(options);
                        if (instance.init) {
                            instance.init();
                        }
                    } else {
                        $.data(this, name, new Base(options, this));
                    }
                });
            }
            return returnValue;
        };
    };
});

define('esui/behavior/Mouse', [
    'require',
    'jquery',
    'underscore',
    './Base',
    'eoo',
    './bridge'
], function (require) {
    var $ = require('jquery');
    var u = require('underscore');
    var Base = require('./Base');
    var mouseHandled = false;
    $(document).mouseup(function () {
        mouseHandled = false;
    });
    var exports = {};
    exports.type = 'mouse';
    exports.constructor = function (options, element) {
        options = u.extend({
            cancel: 'input, textarea, button, select, option',
            distance: 1,
            delay: 0
        }, options);
        this.$super([
            options,
            element
        ]);
        this.mouseDownEvent = null;
        this.mouseMoved = false;
        this.customEventPrefix = 'mouse';
    };
    exports.init = function () {
        this.$super(arguments);
        var me = this;
        var element = $(this.element)[0];
        element = $(element);
        element.bind('mousedown.' + this.type, function (event) {
            return mouseDown.call(me, event);
        }).bind('click.' + this.type, function (event) {
            if (true === $.data(event.target, me.type + '.preventClickEvent')) {
                $.removeData(event.target, me.type + '.preventClickEvent');
                event.stopImmediatePropagation();
                return false;
            }
        });
        this.started = false;
    };
    exports.dispose = function () {
        this.element.unbind('.' + this.type);
        if (this.mouseMoveDelegate) {
            this.document.unbind('mousemove.' + this.type, this.mouseMoveDelegate).unbind('mouseup.' + this.type, this.mouseUpDelegate);
        }
        this.$super(arguments);
    };
    function mouseDown(event) {
        if (mouseHandled) {
            return;
        }
        this.mouseMoved = false;
        this.mouseStarted && this.mouseUp(event);
        this.mouseDownEvent = event;
        var me = this;
        var btnIsLeft = event.which === 1;
        var elIsCancel = typeof this.options.cancel === 'string' && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false;
        if (!btnIsLeft || elIsCancel || !this.mouseCapture(event)) {
            return true;
        }
        this.mouseDelayMet = !this.options.delay;
        if (!this.mouseDelayMet) {
            this.mouseDelayTimer = setTimeout(function () {
                me.mouseDelayMet = true;
            }, this.options.delay);
        }
        if (mouseDistanceMet.call(this, event) && mouseDelayMet.call(this, event)) {
            this.mouseStarted = this.mouseStart(event);
            if (!this.mouseStarted) {
                event.preventDefault();
                return true;
            }
        }
        if (true === $.data(event.target, this.type + '.preventClickEvent')) {
            $.removeData(event.target, this.type + '.preventClickEvent');
        }
        this.mouseMoveDelegate = function (event) {
            return mouseMove.call(me, event);
        };
        this.mouseUpDelegate = function (event) {
            return me.mouseUp(event);
        };
        this.document.bind('mousemove.' + this.type, this.mouseMoveDelegate).bind('mouseup.' + this.type, this.mouseUpDelegate);
        event.preventDefault();
        mouseHandled = true;
        return true;
    }
    function mouseMove(event) {
        if (this.mouseMoved) {
            var ie = !-[1];
            if (ie && (!document.documentMode || document.documentMode < 9) && !event.button) {
                return this.mouseUp(event);
            } else if (!event.which) {
                return this.mouseUp(event);
            }
        }
        if (event.which || event.button) {
            this.mouseMoved = true;
        }
        if (this.mouseStarted) {
            this.mouseDrag(event);
            return event.preventDefault();
        }
        if (mouseDistanceMet.call(this, event) && mouseDelayMet.call(this, event)) {
            this.mouseStarted = this.mouseStart(event);
            this.mouseStarted ? this.mouseDrag(event) : this.mouseUp(event);
        }
        return !this.mouseStarted;
    }
    exports.mouseUp = function (event) {
        this.document.unbind('mousemove.' + this.type, this.mouseMoveDelegate).unbind('mouseup.' + this.type, this.mouseUpDelegate);
        if (this.mouseStarted) {
            this.mouseStarted = false;
            if (event.target === this.mouseDownEvent.target) {
                $.data(event.target, this.type + '.preventClickEvent', true);
            }
            this.mouseStop(event);
        }
        mouseHandled = false;
        return false;
    };
    function mouseDistanceMet(event) {
        return Math.max(Math.abs(this.mouseDownEvent.pageX - event.pageX), Math.abs(this.mouseDownEvent.pageY - event.pageY)) >= this.options.distance;
    }
    function mouseDelayMet() {
        return this.mouseDelayMet;
    }
    exports.mouseCapture = function (event) {
        return this.trigger('capture', event);
    };
    exports.mouseStart = function (event) {
        return this.trigger('start', event);
    };
    exports.mouseDrag = function (event) {
        this.trigger('drag', event);
    };
    exports.mouseStop = function (event) {
        this.trigger('stop', event);
    };
    var Mouse = require('eoo').create(Base, exports);
    require('./bridge')(exports.type, Mouse);
    return Mouse;
});

define('ub-ria-ui/colorPicker/AdvancedColorPicker', [
    'require',
    'esui',
    'esui/lib',
    'esui/Control',
    'underscore',
    './Color',
    'eoo',
    'jquery',
    'esui/painters',
    'esui/TextBox',
    'esui/Label',
    'esui/behavior/Mouse'
], function (require) {
    var esui = require('esui');
    var lib = require('esui/lib');
    var Control = require('esui/Control');
    var u = require('underscore');
    var colorUtil = require('./Color');
    var eoo = require('eoo');
    var $ = require('jquery');
    var painters = require('esui/painters');
    require('esui/TextBox');
    require('esui/Label');
    require('esui/behavior/Mouse');
    var AdvancedColorPicker = eoo.create(Control, {
            type: 'AdvancedColorPicker',
            initOptions: function (options) {
                var properties = {
                        hex: '0000ff',
                        displayHex: '0000ff',
                        noAlpha: false,
                        alpha: 100,
                        displayAlpha: 100
                    };
                u.extend(properties, AdvancedColorPicker.defaultProperties, options);
                this.setProperties(properties);
            },
            initStructure: function () {
                var html = [
                        getMainCanvasHTML.call(this),
                        getHistoryCompareHTML.call(this),
                        getColorInputHTML.call(this)
                    ];
                this.main.innerHTML = html.join('');
                this.initChildren();
                if (this.noAlpha) {
                    this.addState('no-alpha');
                }
            },
            initEvents: function () {
                var me = this;
                var canvas = this.helper.getPart('canvas');
                $(canvas).mouse({
                    start: function (event) {
                        syncValueByCanvas.call(me, event);
                        return true;
                    },
                    drag: u.bind(syncValueByCanvas, this),
                    distance: 0
                });
                var hueSlider = this.helper.getPart('hue');
                $(hueSlider).mouse({
                    start: function (event) {
                        syncValueByHue.call(me, event);
                        return true;
                    },
                    drag: u.bind(syncValueByHue, this),
                    distance: 0
                });
                var colorTypes = [
                        'red',
                        'green',
                        'blue'
                    ];
                var control = this;
                u.each(colorTypes, function (colorType) {
                    var colorInput = control.getChild(colorType + 'Input');
                    colorInput.on('input', u.bind(syncValueByRGB, control));
                });
                var hexInput = this.getChild('hexInput');
                hexInput.on('input', function () {
                    var hex = this.getValue();
                    control.displayHex = hex;
                    syncValueByHex.call(control);
                    updateHueSliderPointerPosition.call(control);
                });
                var alphaSlider = this.helper.getPart('alpha');
                $(alphaSlider).mouse({
                    start: function (event) {
                        syncValueByAlpha.call(me, event);
                        return true;
                    },
                    drag: u.bind(syncValueByAlpha, this),
                    distance: 0
                });
                var alphaInput = this.getChild('alphaInput');
                alphaInput.on('input', function () {
                    var alpha = this.getValue();
                    control.displayAlpha = alpha;
                    updateAlphaPointerPosition.call(control);
                    control.fire('change');
                });
            },
            repaint: painters.createRepaint(Control.prototype.repaint, {
                name: 'hex',
                paint: function (picker, hex) {
                    if (hex == null) {
                        return;
                    }
                    picker.displayHex = hex;
                    updateHexInput.call(picker);
                    syncValueByHex.call(picker);
                    updateColorHistory.call(picker, 'old', picker.hex);
                }
            }, {
                name: 'alpha',
                paint: function (picker, alpha) {
                    if (alpha == null) {
                        return;
                    }
                    picker.displayAlpha = alpha;
                    updateAlphaPointerPosition.call(picker);
                    updateAlphaInput.call(picker);
                }
            }),
            updateHex: function (hex) {
                this.displayHex = hex;
                updateHexInput.call(this);
                syncValueByHex.call(this);
            },
            updateAlpha: function (alpha) {
                this.displayAlpha = alpha;
                updateAlphaInput.call(this);
                updateAlphaColor.call(this);
                updateAlphaPointerPosition.call(this);
            },
            getDisplayHex: function () {
                return this.displayHex;
            },
            getDisplayAlpha: function () {
                return this.displayAlpha;
            }
        });
    AdvancedColorPicker.defaultProperties = {
        hexText: '\u8272\u503C',
        beforeText: '\u6539\u524D',
        afterText: '\u6539\u540E',
        alphaText: '\u900F\u660E\u5EA6'
    };
    function getMainCanvasHTML() {
        return [
            this.helper.getPartBeginTag('pallete', 'div'),
            this.helper.getPartBeginTag('hue', 'div'),
            this.helper.getPartBeginTag('hue-slider', 'div'),
            this.helper.getPartEndTag('hue-slider', 'div'),
            this.helper.getPartBeginTag('hue-pointer', 'div'),
            this.helper.getPartEndTag('hue-pointer', 'div'),
            this.helper.getPartEndTag('hue', 'div'),
            this.helper.getPartBeginTag('canvas', 'div'),
            this.helper.getPartBeginTag('canvas-mask', 'div'),
            this.helper.getPartEndTag('canvas-mask', 'div'),
            this.helper.getPartBeginTag('canvas-pointer', 'span'),
            this.helper.getPartEndTag('canvas-pointer', 'span'),
            this.helper.getPartEndTag('canvas', 'div'),
            this.helper.getPartBeginTag('alpha', 'div'),
            this.helper.getPartBeginTag('alpha-slider', 'div'),
            this.helper.getPartEndTag('alpha-slider', 'div'),
            this.helper.getPartBeginTag('alpha-pointer', 'div'),
            this.helper.getPartEndTag('alpha-pointer', 'div'),
            this.helper.getPartEndTag('alpha', 'div'),
            this.helper.getPartEndTag('pallete', 'div')
        ].join('');
    }
    function getHistoryCompareHTML() {
        return [
            this.helper.getPartBeginTag('compare', 'div'),
            this.helper.getPartBeginTag('compare-title', 'div'),
            this.beforeText,
            this.helper.getPartEndTag('compare-title', 'div'),
            this.helper.getPartBeginTag('compare-color-old', 'div'),
            this.helper.getPartEndTag('compare-color-old', 'div'),
            this.helper.getPartBeginTag('compare-color-new', 'div'),
            this.helper.getPartEndTag('compare-color-new', 'div'),
            this.helper.getPartBeginTag('compare-title', 'div'),
            this.afterText,
            this.helper.getPartEndTag('compare-title', 'div'),
            this.helper.getPartEndTag('compare', 'div')
        ].join('');
    }
    function getColorInputHTML() {
        return [
            this.helper.getPartBeginTag('input', 'div'),
            getColorFieldHTML(this, 'hex', this.hexText),
            this.helper.getPartBeginTag('input-rgba', 'div'),
            getColorFieldHTML(this, 'red', 'R'),
            getColorFieldHTML(this, 'green', 'G'),
            getColorFieldHTML(this, 'blue', 'B'),
            getColorFieldHTML(this, 'alpha', this.alphaText),
            this.helper.getPartEndTag('input-rgba', 'div'),
            this.helper.getPartEndTag('input', 'div')
        ].join('');
    }
    function getColorFieldHTML(control, colorType, colorText) {
        var id = control.helper.getId(colorType + '-input');
        var childName = colorType + 'Input';
        var classes = [
                control.helper.getPartClassName('color-field'),
                control.helper.getPartClassName('color-field-' + colorType)
            ];
        var html = '' + '<div class="' + classes.join(' ') + '">' + '<div id="' + id + '" data-ui-type="TextBox" data-ui-variants="fluid" data-ui-width="auto"' + 'data-ui-child-name="' + childName + '" ></div>' + '<label data-ui-type="Label" for="' + id + '">' + colorText + '</label>' + '</div>';
        return html;
    }
    function syncHBSToHex() {
        var hex = colorUtil.hsbToHex(this.hue, this.saturation, this.bright);
        if (hex !== this.displayHex) {
            this.displayHex = hex;
            this.fire('change');
        }
    }
    function syncValueByRGB() {
        var redColor = this.getChild('redInput').getValue();
        var greenColor = this.getChild('greenInput').getValue();
        var blueColor = this.getChild('blueInput').getValue();
        var hex = colorUtil.rgbToHex(redColor, greenColor, blueColor);
        var hsb = colorUtil.rgbToHSB(redColor, greenColor, blueColor);
        this.displayHex = hex;
        this.hue = hsb.h;
        this.saturation = hsb.s;
        this.bright = hsb.b;
        updateHexInput.call(this);
        updateColorHistory.call(this, 'new', this.displayHex);
        updateHueSliderPointerPosition.call(this);
        updateCanvasColor.call(this);
        updateCanvasPointerPosition.call(this);
        this.fire('change');
    }
    function syncValueByHex() {
        var hsb = colorUtil.hexToHSB(this.displayHex);
        this.hue = hsb.h;
        this.saturation = hsb.s;
        this.bright = hsb.b;
        updateColorInput.call(this);
        updateColorHistory.call(this, 'new', this.displayHex);
        updateCanvasColor.call(this);
        updateCanvasPointerPosition.call(this);
        this.fire('change');
    }
    function syncValueByCanvas(e) {
        if (lib.hasClass(e.target, this.helper.getPartClassName('canvas-pointer'))) {
            return;
        }
        var mask = this.helper.getPart('canvas-mask');
        var $mask = $(mask);
        var canvasPos = $(mask).offset();
        var offsetY = e.pageY - canvasPos.top;
        offsetY = Math.min(offsetY, $mask.height());
        offsetY = Math.max(offsetY, 0);
        var offsetX = e.pageX - canvasPos.left;
        offsetX = Math.min(offsetX, $mask.width());
        offsetX = Math.max(offsetX, 0);
        this.bright = Math.min(1 - offsetY / $mask.height(), 1);
        this.saturation = offsetX / $mask.width();
        syncHBSToHex.call(this);
        updateCanvasPointerPosition.call(this);
        updateColorInput.call(this);
        updateHexInput.call(this);
        updateColorHistory.call(this, 'new', this.displayHex);
    }
    function updateColorInput() {
        var color = this.displayHex;
        var control = this;
        var rgb = colorUtil.hexToRGB(color);
        var colorTypes = [
                'red',
                'green',
                'blue'
            ];
        u.each(colorTypes, function (colorType) {
            var colorInput = control.getChild(colorType + 'Input');
            colorInput.setValue(rgb[colorType]);
        });
    }
    function updateHexInput() {
        var hex = this.displayHex;
        var hexInput = this.getChild('hexInput');
        hexInput.setValue(hex);
    }
    function updateColorHistory(type, color) {
        color = new Array(6 - color.length + 1).join('0') + color;
        var colorBlock = this.helper.getPart('compare-color-' + type);
        colorBlock.style.background = '#' + color;
    }
    function updateAlphaColor() {
        var slider = this.helper.getPart('alpha-slider');
        var css3Tpl = 'linear-gradient(to top, rgba(${red}, ${green}, ${blue}, 0), rgb(${red}, ${green}, ${blue}))';
        var ieTpl = 'progid:DXImageTransform.Microsoft.gradient(startColorstr=#FF${hex}, endColorstr=#00${hex})';
        if (lib.ie && lib.ie <= 9) {
            slider.style.filter = lib.format(ieTpl, { hex: this.displayHex });
        } else {
            var rgb = colorUtil.hexToRGB(this.displayHex);
            slider.style.backgroundImage = lib.format(css3Tpl, rgb);
        }
    }
    function updateAlphaInput() {
        var alpha = this.displayAlpha;
        var alphaInput = this.getChild('alphaInput');
        alphaInput.setValue(alpha);
    }
    function syncValueByAlpha(e) {
        if (lib.hasClass(e.target, this.helper.getPartClassName('alpha-pointer'))) {
            return;
        }
        var slider = this.helper.getPart('alpha-slider');
        var $slider = $(slider);
        var sliderPos = $slider.offset();
        var offsetY = e.pageY - sliderPos.top;
        offsetY = Math.min(offsetY, $slider.height());
        offsetY = Math.max(offsetY, 0);
        this.displayAlpha = 100 - Math.round(offsetY / $slider.height() * 100);
        updateAlphaPointerPosition.call(this);
        updateAlphaInput.call(this);
        this.fire('change');
    }
    function updateAlphaPointerPosition() {
        var alphaSlider = this.helper.getPart('alpha');
        var alphaPointer = this.helper.getPart('alpha-pointer');
        if (!this.alphaSliderSize) {
            this.alphaSliderSize = {
                sliderHeight: alphaSlider.offsetHeight,
                pointerHeight: alphaPointer.offsetHeight
            };
        }
        var alphaY = this.alphaSliderSize.sliderHeight * (1 - this.displayAlpha / 100);
        alphaY -= this.alphaSliderSize.pointerHeight / 2;
        alphaPointer.style.top = Math.round(alphaY) + 'px';
    }
    function syncValueByHue(e) {
        if ($(e.target).hasClass(this.helper.getPartClassName('hue-pointer'))) {
            return;
        }
        var slider = this.helper.getPart('hue-slider');
        var $slider = $(slider);
        var sliderPos = $slider.offset();
        var offsetY = e.pageY - sliderPos.top;
        offsetY = Math.min(offsetY, $slider.height());
        offsetY = Math.max(offsetY, 0);
        this.hue = offsetY / e.target.offsetHeight * 360;
        updateHueSliderPointerPosition.call(this);
        syncHBSToHex.call(this);
        updateCanvasColor.call(this);
        updateColorInput.call(this);
        updateHexInput.call(this);
        updateColorHistory.call(this, 'new', this.displayHex);
    }
    function updateCanvasColor() {
        var baseColor = colorUtil.hsbToHex(this.hue, 1, 1);
        var canvas = this.helper.getPart('canvas');
        canvas.style.backgroundColor = '#' + baseColor;
        updateAlphaColor.call(this);
    }
    function updateHueSliderPointerPosition() {
        var hueSlider = this.helper.getPart('hue');
        var huePointer = this.helper.getPart('hue-pointer');
        if (!this.hueSliderSize) {
            this.hueSliderSize = {
                pointerHeight: huePointer.offsetHeight,
                sliderHeight: hueSlider.offsetHeight
            };
        }
        var hueY = this.hue * this.hueSliderSize.sliderHeight / 360;
        hueY -= this.hueSliderSize.pointerHeight / 2;
        huePointer.style.top = Math.round(hueY) + 'px';
    }
    function updateCanvasPointerPosition() {
        var canvas = this.helper.getPart('canvas');
        var canvasPointer = lib.g(this.helper.getId('canvas-pointer'));
        if (!this.canvasSize) {
            this.canvasSize = {
                canvasWidth: canvas.offsetWidth,
                canvasHeight: canvas.offsetHeight,
                pointerHeight: canvasPointer.offsetHeight,
                pointerWidth: canvasPointer.offsetWidth
            };
        }
        var canvasX = this.canvasSize.canvasWidth * this.saturation;
        canvasX -= this.canvasSize.pointerWidth / 2;
        var canvasY = (1 - this.bright) * this.canvasSize.canvasHeight;
        canvasY -= this.canvasSize.pointerHeight / 2;
        canvasPointer.style.left = Math.round(canvasX) + 'px';
        canvasPointer.style.top = Math.round(canvasY) + 'px';
    }
    esui.register(AdvancedColorPicker);
    return AdvancedColorPicker;
});

define('ub-ria-ui/colorPicker/SimpleColorPicker', [
    'require',
    'esui/lib',
    'esui/InputControl',
    'underscore',
    'eoo',
    'esui',
    'esui/painters',
    'jquery'
], function (require) {
    var lib = require('esui/lib');
    var InputControl = require('esui/InputControl');
    var u = require('underscore');
    var eoo = require('eoo');
    var esui = require('esui');
    var painters = require('esui/painters');
    var $ = require('jquery');
    var SimpleColorPicker = eoo.create(InputControl, {
            type: 'SimpleColorPicker',
            initOptions: function (options) {
                var properties = {};
                u.extend(properties, SimpleColorPicker.defaultProperties, options);
                this.setProperties(properties);
            },
            initStructure: function () {
                this.main.innerHTML = createColorBlocks(this);
            },
            initEvents: function () {
                this.$super(arguments);
                this.helper.addDOMEvent(this.main, 'click', chooseColor);
            },
            repaint: painters.createRepaint(InputControl.prototype.repaint, {
                name: 'rawValue',
                paint: function (colorPicker, rawValue) {
                    syncValue(colorPicker);
                }
            }),
            setProperties: function (properties) {
                var changes = this.$super(arguments);
                if (changes.hasOwnProperty('rawValue')) {
                    this.fire('change');
                }
                return changes;
            }
        });
    SimpleColorPicker.defaultProperties = {
        colors: [
            {
                text: '#ffffff',
                value: 'ffffff'
            },
            {
                text: '#ededed',
                value: 'ededed'
            },
            {
                text: '#d2d2d2',
                value: 'd2d2d2'
            },
            {
                text: '#bfbfbf',
                value: 'bfbfbf'
            },
            {
                text: '#a0a0a0',
                value: 'a0a0a0'
            },
            {
                text: '#898989',
                value: '898989'
            },
            {
                text: '#6f6f6f',
                value: '6f6f6f'
            },
            {
                text: '#626262',
                value: '626262'
            },
            {
                text: '#434343',
                value: '434343'
            },
            {
                text: '#333333',
                value: '333333'
            },
            {
                text: '#1b1b1b',
                value: '1b1b1b'
            },
            {
                text: '#000000',
                value: '000000'
            },
            {
                text: '#50a7f9',
                value: '50a7f9'
            },
            {
                text: '#6ebf40',
                value: '6ebf40'
            },
            {
                text: '#fff45c',
                value: 'fff45c'
            },
            {
                text: '#f39017',
                value: 'f39017'
            },
            {
                text: '#ec5d57',
                value: 'ec5d57'
            },
            {
                text: '#b36ae2',
                value: 'b36ae2'
            },
            {
                text: '#0065c0',
                value: '0065c0'
            },
            {
                text: '#92d500',
                value: '92d500'
            },
            {
                text: '#f5d327',
                value: 'f5d327'
            },
            {
                text: '#c82503',
                value: 'c82503'
            },
            {
                text: '#f39017',
                value: 'f39017'
            },
            {
                text: '#ec5d57',
                value: 'ec5d57'
            },
            {
                text: '#86ccc8',
                value: '86ccc8'
            },
            {
                text: '#acd599',
                value: 'acd599'
            },
            {
                text: '#7fcdf4',
                value: '7fcdf4'
            },
            {
                text: '#8c97cb',
                value: '8c97cb'
            },
            {
                text: '#aa8abd',
                value: 'aa8abd'
            },
            {
                text: '#f19fc2',
                value: 'f19fc2'
            },
            {
                text: '#f26071',
                value: 'f26071'
            },
            {
                text: '#e60013',
                value: 'e60013'
            },
            {
                text: '#eb6102',
                value: 'eb6102'
            },
            {
                text: '#f8b551',
                value: 'f8b551'
            },
            {
                text: '#7fc169',
                value: '7fc169'
            },
            {
                text: '#009d97',
                value: '009d97'
            },
            {
                text: '#0068b7',
                value: '0068b7'
            },
            {
                text: '#1e2087',
                value: '1e2087'
            },
            {
                text: '#611986',
                value: '611986'
            },
            {
                text: '#920783',
                value: '920783'
            },
            {
                text: '#e5007f',
                value: 'e5007f'
            },
            {
                text: '#a40000',
                value: 'a40000'
            },
            {
                text: '#a84300',
                value: 'a84300'
            },
            {
                text: '#cea973',
                value: 'cea973'
            },
            {
                text: '#996b34',
                value: '996b34'
            },
            {
                text: '#81511c',
                value: '81511c'
            },
            {
                text: '#372f2c',
                value: '372f2c'
            },
            {
                text: '#a6927d',
                value: 'a6927d'
            }
        ],
        mode: 'block'
    };
    function syncValue(colorPicker) {
        var blocks = colorPicker.main.getElementsByTagName('span');
        var blockClass = colorPicker.helper.getPartClassName('block');
        u.each(blocks, function (block) {
            var $block = $(block);
            if ($block.hasClass(blockClass)) {
                var color = $block.attr('data-value');
                if (color === this.rawValue) {
                    this.helper.addPartClasses('selected', block);
                } else {
                    this.helper.removePartClasses('selected', block);
                }
            }
        }, colorPicker);
    }
    function createColorBlocks(colorPicker) {
        var blockTemplate = '' + '<span class="' + colorPicker.helper.getPartClassName('block') + '" ' + 'title="${text}" ' + 'data-value="${value}" ' + 'style="background-color: ${diplayValue}">' + '${text}' + '</span>';
        var html = '<div>';
        u.each(colorPicker.colors, function (color, index) {
            color.diplayValue = color.value;
            if (color.value.indexOf('#') < 0) {
                color.diplayValue = '#' + color.value;
            }
            html += lib.format(blockTemplate, color);
        });
        html += '</div>';
        return html;
    }
    function chooseColor(e) {
        var blockClass = this.helper.getPartClassName('block');
        var $t = $(e.target);
        if ($t.hasClass(blockClass)) {
            var color = $t.attr('data-value');
            this.setRawValue(color);
        }
    }
    esui.register(SimpleColorPicker);
    return SimpleColorPicker;
});

define('ub-ria-ui/colorPicker/FullColorPicker', [
    'require',
    'esui/Control',
    'underscore',
    'eoo',
    'esui/painters',
    'esui',
    './AdvancedColorPicker',
    './SimpleColorPicker'
], function (require) {
    var Control = require('esui/Control');
    var u = require('underscore');
    var eoo = require('eoo');
    var painters = require('esui/painters');
    var esui = require('esui');
    require('./AdvancedColorPicker');
    require('./SimpleColorPicker');
    var FullColorPicker = eoo.create(Control, {
            type: 'FullColorPicker',
            initOptions: function (options) {
                var properties = {
                        hex: '000000',
                        displayHex: '000000',
                        alpha: 100,
                        displayAlpha: 100,
                        defaultMode: 'simple',
                        switchable: true,
                        hasAlpha: true
                    };
                u.extend(properties, FullColorPicker.defaultProperties, options);
                if (properties.mode === 'full' || properties.switchable === false) {
                    properties.switchable = false;
                }
                this.setProperties(properties);
            },
            initStructure: function () {
                var html = [];
                var advancedHTML = generateAdvancedHTML.call(this);
                var simpleHTML = generateSimpleHTML.call(this);
                if (this.defaultMode === 'full' || this.switchable) {
                    html = [
                        advancedHTML,
                        simpleHTML
                    ];
                } else if (this.defaultMode === 'simple') {
                    html = [simpleHTML];
                } else {
                    html = [advancedHTML];
                }
                if (this.switchable) {
                    var switchClass = this.helper.getPartClassName('mode-switch');
                    html.push('<div data-ui-variants="link" data-ui-type="Button" data-ui-child-name="switch" ');
                    html.push('class="' + switchClass + '">' + this.fullModeText + '</div>');
                }
                this.main.innerHTML = html.join('');
                this.initChildren();
                this.currentMode = this.defaultMode;
                this.addState(this.defaultMode);
            },
            initEvents: function () {
                var control = this;
                var advancedColorPicker = this.getChild('advanced');
                if (advancedColorPicker) {
                    advancedColorPicker.on('change', function () {
                        var hex = this.getDisplayHex();
                        var alpha = this.getDisplayAlpha();
                        control.displayHex = hex;
                        control.displayAlpha = alpha;
                        control.fire('change');
                    });
                }
                var SimpleColorPicker = this.getChild('simple');
                if (SimpleColorPicker) {
                    SimpleColorPicker.on('change', function () {
                        var color = this.getRawValue();
                        control.displayHex = color;
                        updateAdvancedColorPicker.call(control);
                        control.fire('change');
                    });
                }
                var switchButton = this.getChild('switch');
                if (switchButton) {
                    switchButton.on('click', u.bind(switchState, this));
                }
            },
            repaint: painters.createRepaint(Control.prototype.repaint, {
                name: [
                    'hex',
                    'alpha'
                ],
                paint: function (colorPicker, hex, alpha) {
                    if (hex == null && alpha == null) {
                        return;
                    }
                    colorPicker.displayHex = hex;
                    colorPicker.displayAlpha = alpha;
                    var advanced = colorPicker.getChild('advanced');
                    if (advanced) {
                        advanced.setProperties({
                            hex: hex,
                            alpha: alpha
                        });
                    }
                }
            }),
            getDisplayHex: function () {
                return this.displayHex;
            },
            getDisplayAlpha: function () {
                return this.displayAlpha;
            }
        });
    FullColorPicker.defaultProperties = {
        fullModeText: '\u5B8C\u6574\u6A21\u5F0F',
        advancedModeText: '\u9AD8\u7EA7\u6A21\u5F0F',
        simpleModeText: '\u7B80\u5355\u6A21\u5F0F'
    };
    function generateAdvancedHTML() {
        return '' + '<div class="' + this.helper.getPartClassName('advanced-section') + '">' + '<div data-ui-type="AdvancedColorPicker" data-ui-child-name="advanced"' + 'data-ui-no-alpha="' + (this.hasAlpha ? 'false' : 'true') + '">' + '</div>' + '</div>';
    }
    function generateSimpleHTML() {
        return '' + '<div class="' + this.helper.getPartClassName('simple-section') + '">' + '<div data-ui-type="SimpleColorPicker" data-ui-child-name="simple">' + '</div>' + '</div>';
    }
    function switchState() {
        var newMode;
        var switchButton = this.getChild('switch');
        if (this.currentMode === 'full') {
            newMode = this.defaultMode;
            switchButton.setContent(this.fullModeText);
        } else {
            newMode = 'full';
            if (this.currentMode === 'simple') {
                switchButton.setContent(this.simpleModeText);
            } else {
                switchButton.setContent(this.advancedModeText);
            }
        }
        this.removeState(this.currentMode);
        this.addState(newMode);
        this.currentMode = newMode;
    }
    function updateAdvancedColorPicker() {
        var colorPicker = this.getChild('advanced');
        if (colorPicker) {
            var color = this.displayHex;
            colorPicker.updateHex(color);
            var alpha = this.displayAlpha;
            colorPicker.updateAlpha(alpha);
        }
    }
    esui.register(FullColorPicker);
    return FullColorPicker;
});

define('esui/Panel', [
    'require',
    'underscore',
    './Control',
    'eoo',
    './painters',
    './main'
], function (require) {
    var u = require('underscore');
    var Control = require('./Control');
    var eoo = require('eoo');
    var painters = require('./painters');
    var esui = require('./main');
    var Panel = eoo.create(Control, {
            type: 'Panel',
            getCategory: function () {
                return 'container';
            },
            createMain: function (options) {
                if (!options.tagName) {
                    return this.$super([options]);
                }
                return document.createElement(options.tagName);
            },
            initOptions: function (options) {
                var properties = {};
                u.extend(properties, options);
                properties.tagName = this.main.nodeName.toLowerCase();
                this.setProperties(properties);
            },
            repaint: painters.createRepaint(Control.prototype.repaint, {
                name: 'content',
                paint: function (panel, content) {
                    if (content != null) {
                        panel.helper.disposeChildren();
                        panel.main.innerHTML = content;
                    }
                    panel.helper.initChildren();
                }
            }),
            setContent: function (html) {
                this.setProperties({ content: html });
            },
            prependContent: function (html) {
                addContent.call(this, html, true);
            },
            appendContent: function (html) {
                addContent.call(this, html, false);
            },
            getStyle: function (name) {
                name = normalizeStyleName(name);
                return this.main ? this.main.style[name] : '';
            },
            setStyle: function (name, value) {
                name = normalizeStyleName(name);
                if (this.main) {
                    this.main.style[name] = value || '';
                }
            }
        });
    function addContent(html, isPrepend) {
        var main = this.main;
        var container = document.createElement('div');
        container.innerHTML = html;
        var options = u.extend({}, this.renderOptions, {
                viewContext: this.viewContext,
                parent: this
            });
        var childNodes = container.childNodes;
        var children = [];
        for (var i = 0; i < childNodes.length; i++) {
            children.push(childNodes[i]);
        }
        u.each(children, function (child) {
            if (isPrepend) {
                main.insertBefore(child, main.firstChild);
            } else {
                main.appendChild(child);
            }
            esui.init(main, options);
        });
    }
    function normalizeStyleName(name) {
        if (name.indexOf('-') >= 0) {
            name = name.replace(/-\w/g, function (word) {
                return word.charAt(1).toUpperCase();
            });
        }
        return name;
    }
    esui.register(Panel);
    return Panel;
});

define('esui/Overlay', [
    'require',
    './lib',
    './main',
    './Panel',
    'jquery',
    'underscore',
    'eoo',
    './painters',
    './behavior/position'
], function (require) {
    var lib = require('./lib');
    var esui = require('./main');
    var Panel = require('./Panel');
    var $ = require('jquery');
    var u = require('underscore');
    var eoo = require('eoo');
    var painters = require('./painters');
    require('./behavior/position');
    var Overlay = eoo.create(Panel, {
            type: 'Overlay',
            initOptions: function (options) {
                var properties = {
                        fixed: false,
                        autoClose: true,
                        hasMask: false,
                        appendToElement: 'body'
                    };
                u.extend(properties, options);
                this.$super([properties]);
            },
            initStructure: function () {
                var $main = $(this.main);
                $main.appendTo(this.appendToElement);
                this.addState('hidden');
                this.$super(arguments);
            },
            repaint: painters.createRepaint(Panel.prototype.repaint, {
                name: [
                    'width',
                    'height'
                ],
                paint: function (overlay, width, height) {
                    if (!isPropertyEmpty(width)) {
                        if (width === 'auto') {
                            overlay.main.style.width = 'auto';
                        } else {
                            overlay.main.style.width = width + 'px';
                        }
                    }
                    if (!isPropertyEmpty(height)) {
                        if (height === 'auto') {
                            overlay.main.style.height = 'auto';
                        } else {
                            overlay.main.style.height = height + 'px';
                        }
                    }
                    if (!overlay.isHidden()) {
                        autoLayout.apply(overlay);
                    }
                }
            }, {
                name: [
                    'attachedDOM',
                    'attachedControl'
                ],
                paint: function (overlay, attachedDOM, attachedControl) {
                    var targetDOM = getTargetDOM.call(overlay, attachedDOM, attachedControl);
                    overlay.attachedTarget = targetDOM;
                }
            }),
            show: function () {
                if (this.helper.isInStage('INITED')) {
                    this.render();
                } else if (this.helper.isInStage('DISPOSED')) {
                    return;
                }
                if (this.autoClose) {
                    this.helper.addDOMEvent(document, 'mousedown', close);
                }
                if (this.fixed) {
                    this.helper.addDOMEvent(window, 'resize', resizeHandler);
                    this.helper.addDOMEvent(window, 'scroll', resizeHandler);
                }
                this.removeState('hidden');
                if (this.hasMask) {
                    showMask.call(this);
                }
                this.moveToTop();
                autoLayout.apply(this);
                this.fire('show');
            },
            hide: function () {
                if (!this.isHidden()) {
                    if (this.autoClose) {
                        this.helper.removeDOMEvent(document, 'mousedown', close);
                    }
                    if (this.fixed) {
                        this.helper.removeDOMEvent(window, 'resize', resizeHandler);
                        this.helper.removeDOMEvent(window, 'scroll', resizeHandler);
                    }
                    this.addState('hidden');
                    if (this.hasMask) {
                        hideMask.call(this);
                    }
                }
                this.fire('hide');
            },
            moveToTop: function () {
                var zIndex = this.getZIndex();
                this.main.style.zIndex = zIndex;
                var mask = getMask.call(this);
                if (mask) {
                    mask.style.zIndex = zIndex - 1;
                }
            },
            getZIndex: function () {
                var primaryClassName = this.helper.getPrimaryClassName();
                var hiddenPrimaryClassName = this.helper.getPrimaryClassName('hidden');
                var zIndex = 1203;
                var rawElements = $(document.body).children().toArray();
                var $ele;
                for (var i = 0, len = rawElements.length; i < len; i++) {
                    $ele = $(rawElements[i]);
                    if ($ele.hasClass(primaryClassName) && !$ele.hasClass(hiddenPrimaryClassName)) {
                        zIndex = Math.max(zIndex, $ele[0].style.zIndex) + 10;
                    }
                }
                return zIndex;
            },
            selfLayout: function (options) {
                var page = lib.page;
                var main = this.main;
                var properties = u.clone(options || {});
                var layerPosition = lib.getOffset(main);
                if (isPropertyEmpty(properties, 'left') && isPropertyEmpty(properties, 'right')) {
                    properties.left = (page.getViewWidth() - layerPosition.width) / 2;
                } else if (!isPropertyEmpty(properties, 'left') && !isPropertyEmpty(properties, 'right')) {
                    if (isPropertyEmpty(properties, 'width')) {
                        properties.width = page.getViewWidth() - properties.right - properties.left - $(this.main).css('padding-left') - $(this.main).css('padding-right') - $(this.main).css('border-left-width') - $(this.main).css('border-right-width');
                    }
                    properties = u.omit(properties, 'right');
                }
                properties.left = Math.max(properties.left, 0);
                properties.left = page.getScrollLeft() + properties.left;
                if (isPropertyEmpty(properties, 'top') && isPropertyEmpty(properties, 'bottom')) {
                    properties.top = (page.getViewHeight() - layerPosition.height) / 2;
                } else if (!isPropertyEmpty(properties, 'top') && !isPropertyEmpty(properties, 'bottom')) {
                    if (isPropertyEmpty(properties, 'height')) {
                        properties.height = page.getViewHeight() - properties.top - properties.bottom - $(this.main).css('padding-top') - $(this.main).css('padding-bottom') - $(this.main).css('border-top-width') - $(this.main).css('border-bottom-width');
                    }
                    properties = u.omit(properties, 'bottom');
                }
                properties.top = Math.max(properties.top, 0);
                properties.top = page.getScrollTop() + properties.top;
                renderLayer.call(this, properties);
            },
            attachLayout: function (target, options) {
                var main = this.main;
                options = options || [
                    'bottom',
                    'left'
                ];
                var myPosition = 'right';
                if (options[0] === 'right') {
                    myPosition = 'left';
                } else if (options[0] === 'top') {
                    myPosition = 'bottom';
                } else if (options[0] === 'bottom') {
                    myPosition = 'top';
                }
                $(main).position({
                    of: target,
                    at: options[1] + ' ' + options[0],
                    my: options[1] + ' ' + myPosition
                });
            },
            moveTo: function (top, left) {
                this.selfLayout({
                    top: top,
                    left: left
                });
            },
            resize: function () {
                autoLayout.apply(this);
            },
            dispose: function () {
                if (this.helper.isInStage('DISPOSED')) {
                    return;
                }
                $('#ctrl-mask-' + this.helper.getId()).remove();
                $(this.main).remove();
                this.$super(arguments);
            }
        });
    function close(e) {
        var target = e.target;
        var layer = this.main;
        if (!layer) {
            return;
        }
        var isChild = $.contains(layer, target) || layer === target;
        if (!isChild) {
            this.hide();
        }
    }
    function autoLayout() {
        var attachedTarget = this.attachedTarget;
        var attachedLayout = this.attachedLayout;
        if (attachedTarget != null) {
            if (u.isString(attachedLayout)) {
                attachedLayout = attachedLayout.split(',');
            }
            this.attachLayout(attachedTarget, attachedLayout);
        } else {
            var options = u.pick(this, 'left', 'right', 'top', 'bottom', 'width', 'height');
            this.selfLayout(options);
        }
    }
    function getTargetDOM(domId, control) {
        if (domId) {
            return lib.g(domId);
        } else if (control) {
            if (u.isString(control)) {
                control = this.viewContext.get(control) || {};
            }
            return control.main;
        }
        return null;
    }
    function renderLayer(options) {
        var main = this.main;
        var properties = u.clone(options || {});
        if (u.isArray(properties.align)) {
            var classList = u.filter(lib.getClassList(main), function (classItem) {
                    return !classItem.match(/top-|bottom-|right-|left-/);
                });
            classList.push(this.helper.getPartClasses(properties.align.join('-')));
            lib.setAttribute(main, 'className', classList.join(' '));
        }
        properties = u.omit(properties, 'align');
        main.style.top = '';
        main.style.bottom = '';
        main.style.left = '';
        main.style.right = '';
        u.each(properties, function (value, name) {
            if (!isPropertyEmpty(value)) {
                main.style[name] = value + 'px';
            }
        });
    }
    function isPropertyEmpty(properties, key) {
        if (key) {
            if (!properties.hasOwnProperty(key)) {
                return true;
            }
            properties = properties[key];
        }
        return properties == null || properties !== 0 && lib.trim(properties) === '';
    }
    function resizeHandler() {
        if (this.isHidden()) {
            return;
        }
        autoLayout.apply(this);
    }
    function getMask() {
        var id = 'ctrl-mask-' + this.helper.getId();
        var mask = lib.g(id);
        if (!mask && this.hasMask) {
            mask = document.createElement('div');
            mask.id = id;
            document.body.appendChild(mask);
        }
        return mask;
    }
    function showMask() {
        var mask = getMask.call(this);
        var maskClass = this.helper.getPartClassName('mask');
        mask.className = maskClass;
        mask.style.display = 'block';
    }
    function hideMask() {
        var mask = getMask.call(this);
        $(mask).remove();
    }
    esui.register(Overlay);
    return Overlay;
});

define('esui/Button', [
    'require',
    'underscore',
    './painters',
    './Control',
    'jquery',
    './main',
    'eoo'
], function (require) {
    var u = require('underscore');
    var painters = require('./painters');
    var Control = require('./Control');
    var $ = require('jquery');
    var esui = require('./main');
    var eoo = require('eoo');
    var Button = eoo.create(Control, {
            constructor: function () {
                this.$super(arguments);
            },
            type: 'Button',
            initOptions: function (options) {
                var properties = {
                        content: '',
                        disabled: false
                    };
                u.extend(properties, options);
                properties.tagName = this.main.nodeName.toLowerCase();
                var innerDiv = this.main.firstChild;
                if (!properties.content && innerDiv && innerDiv.nodeName.toLowerCase() !== 'div') {
                    properties.content = this.main.innerHTML;
                }
                this.setProperties(properties);
            },
            initEvents: function () {
                this.helper.delegateDOMEvent(this.main, 'click');
            },
            repaint: painters.createRepaint(Control.prototype.repaint, painters.style('width'), {
                name: 'height',
                paint: function (button, value) {
                    if (!value) {
                        return;
                    }
                    var $main = $(button.main);
                    $main.css({
                        height: value,
                        lineHeight: value + 'px'
                    });
                    var offsetHeight = $main.height();
                    if (offsetHeight === value) {
                        var newHeight = value + parseInt($main.css('borderTopWidth'), 10) + parseInt($main.css('borderBottomWidth'), 10);
                        $main.css('height', newHeight);
                    }
                }
            }, painters.html('content'), {
                name: 'disabled',
                paint: function (button, disabled) {
                    var $ele = $(button.main);
                    if ($ele.is('button,input')) {
                        $ele.attr('disabled', !!disabled);
                    }
                }
            }),
            setContent: function (content) {
                this.setProperties({ content: content });
            }
        });
    esui.register(Button);
    return Button;
});

define('ub-ria-ui/colorPicker/ColorPicker', [
    'require',
    'esui/lib',
    'esui/InputControl',
    'eoo',
    'esui',
    'esui/painters',
    'underscore',
    './FullColorPicker',
    'esui/Overlay',
    'esui/TextBox',
    'esui/Button'
], function (require) {
    var lib = require('esui/lib');
    var InputControl = require('esui/InputControl');
    var eoo = require('eoo');
    var esui = require('esui');
    var painters = require('esui/painters');
    var u = require('underscore');
    require('./FullColorPicker');
    require('esui/Overlay');
    require('esui/TextBox');
    require('esui/Button');
    var ColorPicker = eoo.create(InputControl, {
            type: 'ColorPicker',
            initOptions: function (options) {
                var properties = {
                        displayMode: 'attached',
                        featureMode: 'simple',
                        switchable: false,
                        hex: '000000',
                        alpha: 100,
                        hasAlpha: true
                    };
                u.extend(properties, ColorPicker.defaultProperties, options);
                this.setProperties(properties);
            },
            initStructure: function () {
                var controlHelper = this.helper;
                var mainTpl = '' + '<div class="${colorBlockFrameClass}" id="${colorBlockFrameId}">' + '<div class="${colorBlockClass}" id="${colorBlockId}"></div>' + '</div>' + '<div class="${colorInputClass}" id="${colorInputId}" data-ui-type="TextBox"' + 'data-ui-child-name="colorInput" data-ui-hint="#" data-ui-hint-type="prefix"' + 'data-ui-width="auto"></div>';
                if (this.hasAlpha) {
                    mainTpl += '' + '<div class="${alphaInputClass}" id="${alphaInputId}" data-ui-type="TextBox"' + 'data-ui-child-name="alphaInput" data-ui-hint="%" data-ui-hint-type="suffix"' + 'data-ui-width="auto"></div>';
                }
                this.main.innerHTML = lib.format(mainTpl, {
                    colorBlockFrameClass: controlHelper.getPartClassName('color-block-frame'),
                    colorBlockFrameId: controlHelper.getId('color-block-frame'),
                    colorBlockClass: controlHelper.getPartClassName('color-block'),
                    colorBlockId: controlHelper.getId('color-block'),
                    colorInputClass: controlHelper.getPartClassName('color-input'),
                    colorInputId: controlHelper.getId('color-input'),
                    alphaInputClass: controlHelper.getPartClassName('alpha-input'),
                    alphaInputId: controlHelper.getId('alpha-input')
                });
                this.initChildren();
            },
            initEvents: function () {
                this.$super(arguments);
                var colorBlock = this.helper.getPart('color-block');
                this.helper.addDOMEvent(colorBlock, 'click', function (e) {
                    e.stopPropagation();
                });
                this.helper.addDOMEvent(colorBlock, 'click', toggleLayer);
                var colorInput = this.getChild('colorInput');
                colorInput.on('input', u.bind(onColorInput, this));
                var alphaInput = this.getChild('alphaInput');
                if (alphaInput) {
                    alphaInput.on('input', u.bind(onAlphaInput, this));
                }
            },
            repaint: painters.createRepaint(InputControl.prototype.repaint, {
                name: [
                    'hex',
                    'alpha'
                ],
                paint: function (colorPicker, hex, alpha) {
                    updateColorDisplay.call(colorPicker);
                    syncValue.call(colorPicker);
                    colorPicker.fire('change');
                }
            }),
            setProperties: function (properties) {
                var changes = this.$super(arguments);
                if (changes.hasOwnProperty('rawValue')) {
                    this.fire('change');
                }
                return changes;
            },
            getRawValue: function () {
                var result = {};
                result.hex = this.hex;
                if (this.hasAlpha) {
                    result.alpha = this.alpha;
                }
                return result;
            }
        });
    ColorPicker.defaultProperties = {
        chooseColorText: '\u989C\u8272\u9009\u62E9',
        closeText: '\u5173\u95ED',
        okText: '\u786E\u5B9A',
        cancelText: '\u53D6\u6D88'
    };
    function onColorInput(e) {
        var colorInput = e.target;
        var hex = colorInput.getValue();
        if (hex.length > 6) {
            hex = hex.slice(0, 6);
        }
        hex = new Array(6 - hex.length + 1).join('0') + hex;
        var colorBlock = this.helper.getPart('color-block');
        colorBlock.style.background = '#' + hex;
        this.hex = hex;
        this.fire('change');
    }
    function onAlphaInput(e) {
        var alpha = e.target.getValue();
        this.alpha = alpha;
        this.fire('change');
    }
    function updateColorDisplay() {
        var colorBlock = this.helper.getPart('color-block');
        colorBlock.style.backgroundColor = '#' + this.hex;
        var colorInput = this.getChild('colorInput');
        colorInput.setValue(this.hex);
        if (this.hasAlpha) {
            var alphaInput = this.getChild('alphaInput');
            alphaInput.setValue(this.alpha);
        }
    }
    function syncValue() {
        var overlay = this.getChild('layer');
        if (overlay) {
            var properties = {};
            properties.hex = this.getChild('colorInput').getValue();
            if (this.hasAlpha) {
                properties.alpha = this.getChild('alphaInput').getValue();
            }
            var colorPicker = overlay.getChild('colorPicker');
            if (colorPicker) {
                colorPicker.setProperties(properties);
            }
        }
    }
    function createLayer() {
        var overlayMain = this.helper.createPart('layer', 'div');
        lib.addClass(overlayMain, this.helper.getPartClassName('layer'));
        var pickerContent = '' + this.helper.getPartBeginTag('head', 'div') + this.helper.getPartBeginTag('title', 'div') + this.chooseColorText + this.helper.getPartEndTag('title', 'div') + this.helper.getPartBeginTag('close-btn', 'div') + this.closeText + this.helper.getPartEndTag('close-btn', 'div') + this.helper.getPartEndTag('head', 'div') + '<div data-ui-type="FullColorPicker" data-ui-child-name="colorPicker"' + 'data-ui-default-mode="' + this.featureMode + '"' + 'data-ui-switchable="' + this.switchable + '"' + 'data-ui-has-alpha="' + this.hasAlpha + '">' + '</div>' + this.helper.getPartBeginTag('foot-frame', 'div') + this.helper.getPartBeginTag('foot', 'div') + '<div class="' + this.helper.getPartClassName('ok-btn') + '"' + 'data-ui="type:Button;childName:btnOk;variants:primary">' + this.okText + '</div>' + '<div class="' + this.helper.getPartClassName('cancel-btn') + '"' + 'data-ui="type:Button;childName:btnCancel;variants:link">' + this.cancelText + '</div>' + this.helper.getPartEndTag('foot', 'div') + this.helper.getPartEndTag('foot-frame', 'div');
        var colorPickerOverLay = esui.create('Overlay', {
                main: overlayMain,
                childName: 'layer',
                content: pickerContent
            });
        this.addChild(colorPickerOverLay);
        colorPickerOverLay.appendTo(this.main);
        colorPickerOverLay.addState(this.displayMode);
        var colorPicker = colorPickerOverLay.getChild('colorPicker');
        if (this.displayMode === 'attached') {
            var control = this;
            colorPicker.on('change', function (e) {
                var hex = this.getDisplayHex();
                var alpha = this.getDisplayAlpha();
                if (hex !== control.hex || alpha !== control.alpha) {
                    control.setProperties({
                        hex: hex,
                        alpha: alpha
                    });
                }
            });
        } else {
            var closeBtn = this.helper.getPart('close-btn');
            if (closeBtn) {
                this.helper.addDOMEvent(closeBtn, 'click', hideOverlay);
            }
            var btnOk = colorPickerOverLay.getChild('btnOk');
            var btnCancel = colorPickerOverLay.getChild('btnCancel');
            btnOk.on('click', u.bind(submit, this));
            btnCancel.on('click', u.bind(hideOverlay, this));
        }
        return this.getChild('layer');
    }
    function submit() {
        var pickerOverlay = this.getChild('layer');
        var fullColorPicker = pickerOverlay.getChild('colorPicker');
        this.setProperties({
            hex: fullColorPicker.getDisplayHex(),
            alpha: fullColorPicker.getDisplayAlpha()
        });
        pickerOverlay.hide();
        this.fire('submit');
    }
    function hideOverlay() {
        var pickerOverlay = this.getChild('layer');
        pickerOverlay.hide();
    }
    function showLayer() {
        var colorPickerOverLay = this.getChild('layer');
        var properties = {
                hasMask: true,
                fixed: false,
                autoClose: false
            };
        if (this.displayMode === 'attached') {
            properties = {
                attachedDOM: this.helper.getId('color-block-frame'),
                attachedLayout: 'bottom,left'
            };
        }
        colorPickerOverLay.setProperties(properties);
        colorPickerOverLay.show();
        colorPickerOverLay.resize();
    }
    function toggleLayer() {
        var layer = this.getChild('layer');
        if (!layer) {
            layer = createLayer.call(this);
        }
        if (layer.isHidden()) {
            syncValue.call(this);
            showLayer.call(this);
        } else {
            layer.hide();
        }
    }
    esui.register(ColorPicker);
    return ColorPicker;
});

define('ub-ria-ui/filter/Filter', [
    'require',
    'esui/lib',
    'underscore',
    'esui/InputControl',
    'eoo',
    'esui/painters',
    'esui',
    'jquery'
], function (require) {
    var lib = require('esui/lib');
    var u = require('underscore');
    var InputControl = require('esui/InputControl');
    var eoo = require('eoo');
    var painters = require('esui/painters');
    var esui = require('esui');
    var $ = require('jquery');
    var Filter = eoo.create(InputControl, {
            type: 'Filter',
            initOptions: function (options) {
                var properties = {
                        multiple: false,
                        custom: false,
                        customBtnLabel: '\u81EA\u5B9A\u4E49',
                        datasource: [],
                        value: null
                    };
                u.extend(properties, options);
                this.setProperties(properties);
            },
            initStructure: function () {
                var controlHelper = this.helper;
                var mainEle = this.main;
                var html = '<div id="${filterPanelId}" class="${filterPanelStyle}">' + '<label id="${labelId}"></label>' + '<div id="${contentPanelId}" class="${contentPanelStyle}"></div>' + '</div>';
                mainEle.innerHTML = lib.format(html, {
                    filterPanelStyle: controlHelper.getPartClassName('panel'),
                    filterPanelId: controlHelper.getId('items-wrapper-panel'),
                    labelId: controlHelper.getId('items-label'),
                    contentPanelId: controlHelper.getId('items-panel'),
                    contentPanelStyle: controlHelper.getPartClassName('items-panel')
                });
                this.initChildren(mainEle);
            },
            repaint: painters.createRepaint(InputControl.prototype.repaint, {
                name: [
                    'datasource',
                    'rawValue'
                ],
                paint: function (filter, datasource, rawValue) {
                    if (!u.isArray(rawValue)) {
                        rawValue = [rawValue];
                    }
                    u.each(filter.datasource, function (item, index) {
                        if (u.indexOf(rawValue, item.value) > -1) {
                            item.selected = true;
                        }
                    });
                    filter.buildItems();
                }
            }, {
                name: ['label'],
                paint: function (filter, label) {
                    $(filter.helper.getPart('items-label')).text(label);
                }
            }),
            initEvents: function () {
                var me = this;
                var controlHelper = me.helper;
                controlHelper.addDOMEvent(me.main, 'click', 'a', function (e) {
                    var itemClass = controlHelper.getPartClassName('item');
                    var cmdItemClass = controlHelper.getPartClassName('item-cmd');
                    var $t = $(e.target);
                    e.preventDefault();
                    if ($t.hasClass(itemClass)) {
                        var value = $t.attr('data-value');
                        var text = $t.text();
                        var item = {
                                value: value,
                                text: text
                            };
                        me.selectItem(item);
                    } else if ($t.hasClass(cmdItemClass)) {
                        me.fire('custom-link-click');
                    }
                });
            },
            buildItems: function () {
                var s = '';
                var helper = this.helper;
                u.forEach(this.datasource, function (item) {
                    var active = item.selected ? helper.getPartClassName('item-active') : '';
                    s += buildItem.call(this, item, active);
                }, this);
                var itemsPanel = helper.getPart('items-panel');
                itemsPanel.innerHTML = s;
                this.custom && this.buildCustomItem();
            },
            addItem: function (item) {
                this.datasource.push(item);
                this.buildItems();
            },
            buildCustomItem: function () {
                var html = '<a href="#" id="${customLinkId}" class="${style}">${text}</a>';
                var controlHelper = this.helper;
                var itemsPanel = controlHelper.getPart('items-panel');
                $(itemsPanel).append(lib.format(html, {
                    customLinkId: controlHelper.getId('custom-link'),
                    style: controlHelper.getPartClassName('item-cmd'),
                    text: this.customBtnLabel
                }));
            },
            unselectItem: function (item) {
                if (!item || !this.getItemByValue(item.value)) {
                    return;
                }
                var targetItem = this.getItemByValue(item.value);
                targetItem.selected = false;
                this.buildItems();
            },
            selectItem: function (item) {
                var selectedItem = this.getItemByValue(item.value);
                var lastItem;
                var oldSelected = selectedItem.selected;
                if (!this.multiple && !oldSelected) {
                    var selectedItems = this.getSelectedItems();
                    if (selectedItems.length > 0) {
                        lastItem = selectedItems[0];
                        lastItem.selected = false;
                    }
                }
                selectedItem.selected = !selectedItem.selected;
                this.fire('change', {
                    item: item,
                    lastItem: lastItem,
                    action: oldSelected ? 'unselect' : 'select'
                });
                this.buildItems();
            },
            getItemByValue: function (value, datasource) {
                var item;
                datasource = datasource || this.datasource;
                u.each(datasource, function (single, index) {
                    if (single.value === value) {
                        item = single;
                    }
                });
                return item;
            },
            getSelectedItems: function () {
                var items = [];
                u.each(this.datasource, function (item, index) {
                    if (item.selected) {
                        items.push(item);
                    }
                });
                return items;
            },
            getValue: function () {
                var items = this.getSelectedItems();
                var valueArr = [];
                u.each(items, function (item, index) {
                    valueArr.push(item.value);
                });
                return valueArr;
            }
        });
    function buildItem(item, style) {
        var html = '<a href="#" class="${style}" data-value="${value}">${text}</a>';
        style = style || '';
        return lib.format(html, {
            style: this.helper.getPartClassName('item') + ' ' + style,
            value: item.value,
            text: item.text
        });
    }
    esui.register(Filter);
    return Filter;
});

define('ub-ria-ui/filter/FilterResult', [
    'require',
    'esui/lib',
    'underscore',
    'esui/InputControl',
    'eoo',
    'esui/main',
    'esui/painters',
    'jquery',
    'esui/Label'
], function (require) {
    var lib = require('esui/lib');
    var u = require('underscore');
    var InputControl = require('esui/InputControl');
    var eoo = require('eoo');
    var esui = require('esui/main');
    var painters = require('esui/painters');
    var $ = require('jquery');
    require('esui/Label');
    var FilterResult = eoo.create(InputControl, {
            type: 'FilterResult',
            initOptions: function (options) {
                var properties = { datasource: [] };
                u.extend(properties, options);
                this.setProperties(properties);
            },
            initStructure: function () {
                var controlHelper = this.helper;
                var mainEle = this.main;
                var html = '<div id="${filterPanelId}" class="${filterPanelStyle}">' + '<label id="${labelId}"></label>' + '<div id="${contentPanelId}" class="${contentPanelStyle}"></div>' + '</div>';
                mainEle.innerHTML = lib.format(html, {
                    filterPanelStyle: controlHelper.getPartClassName('panel'),
                    filterPanelId: controlHelper.getId('items-wrapper-panel'),
                    labelId: controlHelper.getId('items-label'),
                    contentPanelId: controlHelper.getId('items-panel'),
                    contentPanelStyle: controlHelper.getPartClassName('items-panel')
                });
                this.initChildren(mainEle);
            },
            addItem: function (item) {
                if (this.getItemByValue(item.value)) {
                    return;
                }
                this.datasource.push(item);
                this.buildItems();
            },
            getSelectedItemsPanel: function () {
                var selectedPanelId = this.helper.getId('items-panel');
                return this.viewContext.get(selectedPanelId);
            },
            initEvents: function () {
                var me = this;
                this.helper.addDOMEvent(me.main, 'click', 'a', function (e) {
                    var $target = $(e.currentTarget);
                    var value = $target.attr('data-value');
                    var text = $target.children(':first-child').text();
                    var item = {
                            value: value,
                            text: text
                        };
                    me.removeItem(item);
                });
            },
            removeItem: function (item) {
                if (!item) {
                    return;
                }
                var selectedItem = this.getItemByValue(item.value);
                this.datasource = u.without(this.datasource, selectedItem);
                this.fire('change', { item: item });
                this.buildItems();
            },
            getItemByValue: function (value) {
                var item;
                u.each(this.datasource, function (single, index) {
                    if (single.value === value) {
                        item = single;
                    }
                });
                return item;
            },
            repaint: painters.createRepaint(InputControl.prototype.repaint, {
                name: ['datasource'],
                paint: function (resultPanel, datasource) {
                    resultPanel.buildItems();
                }
            }, {
                name: ['label'],
                paint: function (resultPanel, selectedLabel) {
                    $(resultPanel.helper.getPart('items-label')).text(selectedLabel);
                }
            }),
            buildItems: function () {
                var html = '<a href="#" class="${style}" data-value="${value}">' + '<span>${text}</span>' + '<span class="${iconClass} ${removeClass}"></span>' + '</a>';
                var s = '';
                var helper = this.helper;
                u.forEach(this.datasource, function (item) {
                    s += lib.format(html, {
                        value: item.value,
                        text: item.text,
                        style: helper.getPartClassName('item'),
                        iconClass: helper.getIconClass(),
                        removeClass: helper.getPartClassName('remove')
                    });
                });
                var selectedItemsPanel = helper.getPart('items-panel');
                $(selectedItemsPanel).html(s);
            },
            getSelectedItems: function () {
                var items = [];
                u.each(this.datasource, function (item, index) {
                    if (item.selected) {
                        items.push(item);
                    }
                });
                return items;
            },
            getValue: function () {
                var items = this.getSelectedItems();
                var valueArr = [];
                u.each(items, function (item, index) {
                    valueArr.push(item.value);
                });
                return valueArr;
            }
        });
    esui.register(FilterResult);
    return FilterResult;
});

define('ub-ria-ui/helper/swfHelper', [
    'require',
    'jquery'
], function (require) {
    var jQuery = require('jquery');
    (function ($, flash, Plugin) {
        var OBJECT = 'object';
        var ENCODE = true;
        function compareArrayIntegers(a, b) {
            var x = (a[0] || 0) - (b[0] || 0);
            return x > 0 || !x && a.length > 0 && compareArrayIntegers(a.slice(1), b.slice(1));
        }
        function objectToArguments(obj) {
            if (typeof obj !== OBJECT) {
                return obj;
            }
            var arr = [];
            var str = '';
            for (var i in obj) {
                if (typeof obj[i] === OBJECT) {
                    str = objectToArguments(obj[i]);
                } else {
                    str = [
                        i,
                        ENCODE ? encodeURI(obj[i]) : obj[i]
                    ].join('=');
                }
                arr.push(str);
            }
            return arr.join('&');
        }
        function objectFromObject(obj) {
            var arr = [];
            for (var i in obj) {
                if (obj[i]) {
                    arr.push([
                        i,
                        '="',
                        obj[i],
                        '"'
                    ].join(''));
                }
            }
            return arr.join(' ');
        }
        function paramsFromObject(obj) {
            var arr = [];
            for (var i in obj) {
                if (obj.hasOwnProperty(i)) {
                    arr.push([
                        '<param name="',
                        i,
                        '" value="',
                        objectToArguments(obj[i]),
                        '" />'
                    ].join(''));
                }
            }
            return arr.join('');
        }
        try {
            var flashVersion = Plugin.description || function () {
                    var newPlugin = new Plugin('ShockwaveFlash.ShockwaveFlash');
                    return newPlugin.GetVariable('$version');
                }();
        } catch (e) {
            flashVersion = 'Unavailable';
        }
        var flashVersionMatchVersionNumbers = flashVersion.match(/\d+/g) || [0];
        $[flash] = {
            available: flashVersionMatchVersionNumbers[0] > 0,
            activeX: Plugin && !Plugin.name,
            version: {
                original: flashVersion,
                array: flashVersionMatchVersionNumbers,
                string: flashVersionMatchVersionNumbers.join('.'),
                major: parseInt(flashVersionMatchVersionNumbers[0], 10) || 0,
                minor: parseInt(flashVersionMatchVersionNumbers[1], 10) || 0,
                release: parseInt(flashVersionMatchVersionNumbers[2], 10) || 0
            },
            hasVersion: function (version) {
                var versionArray = /string|number/.test(typeof version) ? version.toString().split('.') : /object/.test(typeof version) ? [
                        version.major,
                        version.minor
                    ] : version || [
                        0,
                        0
                    ];
                return compareArrayIntegers(flashVersionMatchVersionNumbers, versionArray);
            },
            encodeParams: true,
            expressInstall: 'expressInstall.swf',
            expressInstallIsActive: false,
            create: function (obj) {
                var instance = this;
                if (!obj.swf || instance.expressInstallIsActive || !instance.available && !obj.hasVersionFail) {
                    return false;
                }
                if (!instance.hasVersion(obj.hasVersion || 1)) {
                    instance.expressInstallIsActive = true;
                    if (typeof obj.hasVersionFail === 'function') {
                        if (!obj.hasVersionFail.apply(obj)) {
                            return false;
                        }
                    }
                    obj = {
                        swf: obj.expressInstall || instance.expressInstall,
                        height: 137,
                        width: 214,
                        flashvars: {
                            MMredirectURL: location.href,
                            MMplayerType: instance.activeX ? 'ActiveX' : 'PlugIn',
                            MMdoctitle: document.title.slice(0, 47) + ' - Flash Player Installation'
                        }
                    };
                }
                var attrs = {
                        data: obj.swf,
                        type: 'application/x-shockwave-flash',
                        id: obj.id || 'flash_' + Math.floor(Math.random() * 999999999),
                        width: obj.width || 320,
                        height: obj.height || 180,
                        style: obj.style || ''
                    };
                ENCODE = typeof obj.useEncode !== 'undefined' ? obj.useEncode : instance.encodeParams;
                obj.movie = obj.swf;
                obj.wmode = obj.wmode || 'opaque';
                delete obj.fallback;
                delete obj.hasVersion;
                delete obj.hasVersionFail;
                delete obj.height;
                delete obj.id;
                delete obj.swf;
                delete obj.useEncode;
                delete obj.width;
                var flashContainer = document.createElement('div');
                flashContainer.innerHTML = [
                    '<object ',
                    objectFromObject(attrs),
                    '>',
                    paramsFromObject(obj),
                    '</object>'
                ].join('');
                return flashContainer.firstChild;
            }
        };
        $.fn[flash] = function (options) {
            var $this = this.find(OBJECT).andSelf().filter(OBJECT);
            if (/string|object/.test(typeof options)) {
                this.each(function () {
                    var $this = $(this);
                    var flashObject;
                    options = typeof options === OBJECT ? options : { swf: options };
                    options.fallback = this;
                    flashObject = $[flash].create(options);
                    if (flashObject) {
                        $this.children().remove();
                        $this.html(flashObject);
                    }
                });
            }
            if (typeof options === 'function') {
                $this.each(function () {
                    var instance = this;
                    var jsInteractionTimeoutMs = 'jsInteractionTimeoutMs';
                    instance[jsInteractionTimeoutMs] = instance[jsInteractionTimeoutMs] || 0;
                    if (instance[jsInteractionTimeoutMs] < 660) {
                        if (instance.clientWidth || instance.clientHeight) {
                            options.call(instance);
                        } else {
                            setTimeout(function () {
                                $(instance)[flash](options);
                            }, instance[jsInteractionTimeoutMs] + 66);
                        }
                    }
                });
            }
            return $this;
        };
    }(jQuery, 'flash', navigator.plugins['Shockwave Flash'] || window.ActiveXObject));
});

define('esui/behavior/util', [
    'require',
    'jquery'
], function (require) {
    var $ = require('jquery');
    $.fn.extend({
        scrollParent: function (includeHidden) {
            var position = this.css('position');
            var excludeStaticParent = position === 'absolute';
            var overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/;
            var scrollParent = this.parents().filter(function () {
                    var parent = $(this);
                    if (excludeStaticParent && parent.css('position') === 'static') {
                        return false;
                    }
                    return overflowRegex.test(parent.css('overflow') + parent.css('overflow-y') + parent.css('overflow-x'));
                }).eq(0);
            return position === 'fixed' || !scrollParent.length ? $(this[0].ownerDocument || document) : scrollParent;
        },
        disableSelection: function () {
            var eventType = 'onselectstart' in document.createElement('div') ? 'selectstart' : 'mousedown';
            return function () {
                return this.on(eventType + '.esui-disableSelection', function (event) {
                    event.preventDefault();
                });
            };
        }(),
        enableSelection: function () {
            return this.off('.esui-disableSelection');
        }
    });
    return {
        safeActiveElement: function (document) {
            var activeElement;
            try {
                activeElement = document.activeElement;
            } catch (error) {
                activeElement = document.body;
            }
            if (!activeElement) {
                activeElement = document.body;
            }
            if (!activeElement.nodeName) {
                activeElement = document.body;
            }
            return activeElement;
        },
        safeBlur: function (element) {
            if (element && element.nodeName.toLowerCase() !== 'body') {
                $(element).blur();
            }
        },
        ie: !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase())
    };
});

define('esui/behavior/Draggable', [
    'require',
    'jquery',
    'underscore',
    './Mouse',
    './util',
    './bridge',
    'eoo'
], function (require) {
    var $ = require('jquery');
    var u = require('underscore');
    var Mouse = require('./Mouse');
    var behaviorUtil = require('./util');
    var jqBridge = require('./bridge');
    var eoo = require('eoo');
    var typeName = 'draggable';
    var Draggable = eoo.create(Mouse, {
            type: typeName,
            constructor: function (options) {
                options = u.extend({
                    addClasses: true,
                    appendTo: 'parent',
                    axis: false,
                    containment: false,
                    cursor: 'auto',
                    cursorAt: false,
                    grid: false,
                    handle: false,
                    helper: 'original',
                    iframeFix: false,
                    opacity: false,
                    refreshPositions: false,
                    revert: false,
                    revertDuration: 500,
                    scope: 'default',
                    scroll: true,
                    scrollSensitivity: 20,
                    scrollSpeed: 20,
                    snap: false,
                    snapMode: 'both',
                    snapTolerance: 20,
                    stack: false,
                    zIndex: false,
                    drag: null,
                    start: null,
                    stop: null
                }, options);
                this.$super(arguments);
                this.customEventPrefix = 'drag';
                this.plugins = {};
            },
            init: function () {
                var me = this;
                var element = me.element;
                var opts = me.options;
                me.$super(arguments);
                if (opts.helper === 'original') {
                    setPositionRelative.call(me);
                }
                if (opts.addClasses) {
                    me.addClass(element);
                }
                if (opts.disabled) {
                    me.addClass(element, 'disabled');
                }
                setHandleClassName.call(this);
            },
            dispose: function () {
                var fullDraggingClass = this.getClassName(true, 'dragging');
                if ((this.helper || this.element).is(fullDraggingClass)) {
                    this.destroyOnClear = true;
                    return;
                }
                removeHandleClassName.call(this);
                this.$super(arguments);
            },
            mouseCapture: function (event) {
                if (this.$super(arguments) === false) {
                    return false;
                }
                var options = this.options;
                blurActiveElement.call(this, event);
                var resizableHandleCls = this.getClassName(true, 'handle', 'resizable');
                if (this.helper || options.disabled || $(event.target).closest(resizableHandleCls).length > 0) {
                    return false;
                }
                this.handle = getHandle.call(this, event);
                if (!this.handle) {
                    return false;
                }
                blockFrames.call(this, options.iframeFix === true ? 'iframe' : options.iframeFix);
                return true;
            },
            mouseStart: function (event) {
                var options = this.options;
                this.helper = createHelper.call(this, event);
                this.addClass(this.helper, 'dragging');
                cacheHelperProportions.call(this);
                cacheMargins.call(this);
                this.cssPosition = this.helper.css('position');
                this.scrollParent = this.helper.scrollParent(true);
                this.offsetParent = this.helper.offsetParent();
                this.hasFixedAncestor = this.helper.parents().filter(function () {
                    return $(this).css('position') === 'fixed';
                }).length > 0;
                this.positionAbs = this.element.offset();
                refreshOffsets.call(this, event);
                this.originalPosition = this.position = generatePosition.call(this, event, false);
                this.originalPageX = event.pageX;
                this.originalPageY = event.pageY;
                options.cursorAt && adjustOffsetFromHelper.call(this, options.cursorAt);
                setContainment.call(this);
                if (this.trigger('start', event) === false) {
                    clear.call(this);
                    return false;
                }
                cacheHelperProportions.call(this);
                this.mouseDrag(event, true);
                return true;
            },
            mouseDrag: function (event, noPropagation) {
                if (this.hasFixedAncestor) {
                    this.offset.parent = getParentOffset.call(this);
                }
                this.position = generatePosition.call(this, event, true);
                this.positionAbs = convertPositionTo.call(this, 'absolute');
                if (!noPropagation) {
                    var ui = uiHash.call(this);
                    if (this.trigger('drag', u.extend({}, event, ui)) === false) {
                        this.mouseUp({});
                        return false;
                    }
                    this.position = ui.position;
                }
                this.helper[0].style.left = this.position.left + 'px';
                this.helper[0].style.top = this.position.top + 'px';
                return false;
            },
            mouseStop: function (event) {
                var me = this;
                if (this.options.revert === 'invalid' || this.options.revert === true) {
                    $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {
                        if (me.trigger('stop', event) !== false) {
                            clear.call(this);
                        }
                    });
                } else {
                    if (this.trigger('stop', event) !== false) {
                        clear.call(this);
                    }
                }
                return false;
            },
            mouseUp: function (event) {
                unblockFrames.call();
                if (this.handleElement.is(event.target)) {
                    this.element.focus();
                }
                return this.$super(arguments);
            },
            cancel: function () {
                var helperDraggingFullCls = this.getClassName(true, 'dragging');
                if (this.helper.is(helperDraggingFullCls)) {
                    this.mouseUp({});
                } else {
                    clear.call(this);
                }
                return this;
            }
        });
    function blockFrames(selector) {
        this.iframeBlocks = this.document.find(selector).map(function () {
            var iframe = $(this);
            return $('<div>').css('position', 'absolute').appendTo(iframe.parent()).outerWidth(iframe.outerWidth()).outerHeight(iframe.outerHeight()).offset(iframe.offset())[0];
        });
    }
    function unblockFrames() {
        if (this.iframeBlocks) {
            this.iframeBlocks.remove();
            delete this.iframeBlocks;
        }
    }
    function blurActiveElement(event) {
        if (!this.handleElement.is(event.target)) {
            return;
        }
        behaviorUtil.safeBlur(behaviorUtil.safeActiveElement(this.document[0]));
    }
    function refreshOffsets(event) {
        this.offset = {
            top: this.positionAbs.top - this.margins.top,
            left: this.positionAbs.left - this.margins.left,
            scroll: false,
            parent: getParentOffset.call(this),
            relative: getRelativeOffset.call(this)
        };
        this.offset.click = {
            left: event.pageX - this.offset.left,
            top: event.pageY - this.offset.top
        };
    }
    function getHandle(event) {
        return this.options.handle ? !!$(event.target).closest(this.element.find(this.options.handle)).length : true;
    }
    function setHandleClassName() {
        this.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element;
        this.addClass(this.handleElement, 'handle');
    }
    function removeHandleClassName() {
        this.removeClass(this.handleElement, 'handle');
    }
    function createHelper(event) {
        var options = this.options;
        var helperIsFunction = $.isFunction(options.helper);
        var helper = helperIsFunction ? $(options.helper.apply(this.element[0], [event])) : options.helper === 'clone' ? this.element.clone().removeAttr('id') : this.element;
        if (!helper.parents('body').length) {
            helper.appendTo(options.appendTo === 'parent' ? this.element[0].parentNode : options.appendTo);
        }
        if (helperIsFunction && helper[0] === this.element[0]) {
            setPositionRelative.call(this);
        }
        if (helper[0] !== this.element[0] && !/(fixed|absolute)/.test(helper.css('position'))) {
            helper.css('position', 'absolute');
        }
        return helper;
    }
    function setPositionRelative() {
        if (!/^(?:r|a|f)/.test(this.element.css('position'))) {
            this.element[0].style.position = 'relative';
        }
    }
    function adjustOffsetFromHelper(obj) {
        if (typeof obj === 'string') {
            obj = obj.split(/\s+/);
        }
        if ($.isArray(obj)) {
            obj = {
                left: +obj[0],
                top: +obj[1] || 0
            };
        }
        if ('left' in obj) {
            this.offset.click.left = obj.left + this.margins.left;
        }
        if ('right' in obj) {
            this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
        }
        if ('top' in obj) {
            this.offset.click.top = obj.top + this.margins.top;
        }
        if ('bottom' in obj) {
            this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
        }
    }
    function isRootNode(element) {
        return /(html|body)/i.test(element.tagName) || element === this.document[0];
    }
    function getParentOffset() {
        var po = this.offsetParent.offset();
        var document = this.document[0];
        if (this.cssPosition === 'absolute' && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
            po.left += this.scrollParent.scrollLeft();
            po.top += this.scrollParent.scrollTop();
        }
        if (isRootNode.call(this, this.offsetParent[0])) {
            po = {
                top: 0,
                left: 0
            };
        }
        return {
            top: po.top + (parseInt(this.offsetParent.css('borderTopWidth'), 10) || 0),
            left: po.left + (parseInt(this.offsetParent.css('borderLeftWidth'), 10) || 0)
        };
    }
    function getRelativeOffset() {
        if (this.cssPosition !== 'relative') {
            return {
                top: 0,
                left: 0
            };
        }
        var pos = this.element.position();
        var scrollIsRootNode = isRootNode.call(this, this.scrollParent[0]);
        return {
            top: pos.top - (parseInt(this.helper.css('top'), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollTop() : 0),
            left: pos.left - (parseInt(this.helper.css('left'), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollLeft() : 0)
        };
    }
    function cacheMargins() {
        this.margins = {
            left: parseInt(this.element.css('marginLeft'), 10) || 0,
            top: parseInt(this.element.css('marginTop'), 10) || 0,
            right: parseInt(this.element.css('marginRight'), 10) || 0,
            bottom: parseInt(this.element.css('marginBottom'), 10) || 0
        };
    }
    function cacheHelperProportions() {
        this.helperProportions = {
            width: this.helper.outerWidth(),
            height: this.helper.outerHeight()
        };
    }
    function setContainment() {
        this.relativeContainer = null;
        var options = this.options;
        if (!options.containment) {
            this.containment = null;
            return;
        }
        var document = this.document[0];
        if (options.containment === 'window') {
            this.containment = [
                $(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
                $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top,
                $(window).scrollLeft() + $(window).width() - this.helperProportions.width - this.margins.left,
                $(window).scrollTop() + ($(window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
            ];
            return;
        }
        if (options.containment === 'document') {
            this.containment = [
                0,
                0,
                $(document).width() - this.helperProportions.width - this.margins.left,
                ($(document).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
            ];
            return;
        }
        if (options.containment.constructor === Array) {
            this.containment = options.containment;
            return;
        }
        if (options.containment === 'parent') {
            options.containment = this.helper[0].parentNode;
        }
        var containmentElement = $(options.containment);
        var $containmentElement = containmentElement[0];
        if (!$containmentElement) {
            return;
        }
        var isUserScrollable = /(scroll|auto)/.test(containmentElement.css('overflow'));
        var containmentWidth = isUserScrollable ? Math.max($containmentElement.scrollWidth, $containmentElement.offsetWidth) : $containmentElement.offsetWidth;
        var containmentHeight = isUserScrollable ? Math.max($containmentElement.scrollHeight, $containmentElement.offsetHeight) : $containmentElement.offsetHeight;
        this.containment = [
            (parseInt(containmentElement.css('borderLeftWidth'), 10) || 0) + (parseInt(containmentElement.css('paddingLeft'), 10) || 0),
            (parseInt(containmentElement.css('borderTopWidth'), 10) || 0) + (parseInt(containmentElement.css('paddingTop'), 10) || 0),
            containmentWidth - (parseInt(containmentElement.css('borderRightWidth'), 10) || 0) - (parseInt(containmentElement.css('paddingRight'), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right,
            containmentHeight - (parseInt(containmentElement.css('borderBottomWidth'), 10) || 0) - (parseInt(containmentElement.css('paddingBottom'), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom
        ];
        this.relativeContainer = containmentElement;
    }
    function convertPositionTo(d, pos) {
        if (!pos) {
            pos = this.position;
        }
        var mod = d === 'absolute' ? 1 : -1;
        var scrollIsRootNode = isRootNode.call(this, this.scrollParent[0]);
        return {
            top: pos.top + this.offset.relative.top * mod + this.offset.parent.top * mod - (this.cssPosition === 'fixed' ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top) * mod,
            left: pos.left + this.offset.relative.left * mod + this.offset.parent.left * mod - (this.cssPosition === 'fixed' ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left) * mod
        };
    }
    function generatePosition(event, constrainPosition) {
        var scrollIsRootNode = isRootNode.call(this, this.scrollParent[0]);
        if (!scrollIsRootNode || !this.offset.scroll) {
            this.offset.scroll = {
                top: this.scrollParent.scrollTop(),
                left: this.scrollParent.scrollLeft()
            };
        }
        var pageX = event.pageX;
        var pageY = event.pageY;
        if (constrainPosition) {
            var containment;
            if (this.containment) {
                if (this.relativeContainer) {
                    var co = this.relativeContainer.offset();
                    containment = [
                        this.containment[0] + co.left,
                        this.containment[1] + co.top,
                        this.containment[2] + co.left,
                        this.containment[3] + co.top
                    ];
                } else {
                    containment = this.containment;
                }
                if (event.pageX - this.offset.click.left < containment[0]) {
                    pageX = containment[0] + this.offset.click.left;
                }
                if (event.pageY - this.offset.click.top < containment[1]) {
                    pageY = containment[1] + this.offset.click.top;
                }
                if (event.pageX - this.offset.click.left > containment[2]) {
                    pageX = containment[2] + this.offset.click.left;
                }
                if (event.pageY - this.offset.click.top > containment[3]) {
                    pageY = containment[3] + this.offset.click.top;
                }
            }
            var options = this.options;
            if (options.grid) {
                var top = options.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / options.grid[1]) * options.grid[1] : this.originalPageY;
                var originalTop = top - this.offset.click.top;
                pageY = containment ? originalTop >= containment[1] || originalTop > containment[3] ? top : originalTop >= containment[1] ? top - options.grid[1] : top + options.grid[1] : top;
                var left = options.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / options.grid[0]) * options.grid[0] : this.originalPageX;
                var originalLeft = left - this.offset.click.left;
                pageX = containment ? originalLeft >= containment[0] || originalLeft > containment[2] ? left : originalLeft >= containment[0] ? left - options.grid[0] : left + options.grid[0] : left;
            }
            if (options.axis === 'y') {
                pageX = this.originalPageX;
            }
            if (options.axis === 'x') {
                pageY = this.originalPageY;
            }
        }
        return {
            top: pageY - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (this.cssPosition === 'fixed' ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top),
            left: pageX - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (this.cssPosition === 'fixed' ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left)
        };
    }
    function clear() {
        this.removeClass(this.helper, 'dragging');
        if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
            this.helper.remove();
        }
        this.helper = null;
        this.cancelHelperRemoval = false;
        if (this.destroyOnClear) {
            this.dispose();
        }
    }
    function uiHash() {
        return {
            helper: this.helper,
            position: this.position,
            originalPosition: this.originalPosition,
            offset: this.positionAbs
        };
    }
    jqBridge(typeName, Draggable);
    return Draggable;
});

define('esui/Dialog', [
    'require',
    './Button',
    './Panel',
    './behavior/Draggable',
    './behavior/position',
    './lib',
    './Control',
    './main',
    './painters',
    'eoo',
    'jquery',
    'underscore'
], function (require) {
    require('./Button');
    require('./Panel');
    require('./behavior/Draggable');
    require('./behavior/position');
    var lib = require('./lib');
    var Control = require('./Control');
    var esui = require('./main');
    var painters = require('./painters');
    var eoo = require('eoo');
    var $ = require('jquery');
    var u = require('underscore');
    var maskIdPrefix = 'ctrl-mask';
    var Dialog = eoo.create(Control, {
            type: 'Dialog',
            initOptions: function (options) {
                parseMain(options);
                var properties = {
                        closeButton: true,
                        closeOnHide: true,
                        draggable: false,
                        mask: true,
                        title: '\u6211\u662F\u6807\u9898',
                        content: '<p>\u6211\u662F\u5185\u5BB9</p>',
                        defaultFoot: '' + '<div ' + 'class="' + this.helper.getPartClassName('ok-btn') + '" data-ui="type:Button;id:btnFootOk;' + 'childName:btnOk;variants:primary;">\u786E\u5B9A</div> ' + '<div ' + 'class="' + this.helper.getPartClassName('cancel-btn') + '" data-ui="type:Button;' + 'id:btnFootCancel;childName:btnCancel;variants:link">\u53D6\u6D88</div>',
                        needFoot: true,
                        roles: {},
                        setPositionOnScroll: true,
                        setPositionOnResize: true
                    };
                u.extend(properties, Dialog.defaultProperties, options);
                if (properties.needFoot) {
                    if (!properties.foot) {
                        properties.foot = properties.defaultFoot;
                    }
                }
                this.setProperties(properties);
            },
            initStructure: function () {
                $(this.main).appendTo(this.appendToElement);
                this.addState('hidden');
                createHead(this, this.roles.title);
                this.createBF('body', this.roles.content);
                if (this.needFoot) {
                    this.createBF('foot', this.roles.foot);
                }
            },
            initEvents: function () {
                if (this.closeButton) {
                    var close = lib.g(this.helper.getId('close-icon'));
                    if (close) {
                        this.helper.addDOMEvent(close, 'click', u.partial(closeClickHandler, this));
                    }
                }
            },
            createBF: function (type, mainDOM) {
                if (mainDOM) {
                    this.content = mainDOM.innerHTML;
                } else {
                    mainDOM = document.createElement('div');
                    if (type === 'body') {
                        var head = this.getChild('head');
                        if (head) {
                            lib.insertAfter(mainDOM, head.main);
                        } else if (this.main.firstChild) {
                            lib.insertBefore(mainDOM, head, this.main.firstChild);
                        } else {
                            this.main.appendChild(mainDOM);
                        }
                    } else {
                        this.main.appendChild(mainDOM);
                    }
                }
                $(mainDOM).addClass(this.helper.getPartClassName(type + '-panel'));
                var properties = {
                        main: mainDOM,
                        renderOptions: this.renderOptions
                    };
                var panel = esui.create('Panel', properties);
                panel.render();
                this.addChild(panel, type);
                return panel;
            },
            repaint: painters.createRepaint(Control.prototype.repaint, {
                name: 'height',
                paint: function (dialog, value) {
                    if (value === 'auto') {
                        dialog.main.style.height = 'auto';
                    } else if (value) {
                        dialog.main.style.height = value + 'px';
                    }
                    if (dialog.isShow) {
                        resizeHandler.apply(dialog);
                    }
                }
            }, {
                name: 'width',
                paint: function (dialog, value) {
                    if (value === 'auto') {
                        dialog.main.style.width = 'auto';
                    } else if (value) {
                        dialog.main.style.width = value + 'px';
                    }
                    if (dialog.isShow) {
                        resizeHandler.apply(dialog);
                    }
                }
            }, {
                name: 'title',
                paint: function (dialog, value) {
                    var titleId = dialog.helper.getId('title');
                    lib.g(titleId).innerHTML = value;
                }
            }, {
                name: 'content',
                paint: function (dialog, value) {
                    if (!value) {
                        return;
                    }
                    var bfTpl = '' + '<div class="${class}" id="${id}">' + '${content}' + '</div>';
                    var body = dialog.getBody();
                    var bodyId = dialog.helper.getId('body');
                    var bodyClass = dialog.helper.getPartClasses('body');
                    var data = {
                            'class': bodyClass.join(' '),
                            'id': bodyId,
                            'content': value
                        };
                    body.setContent(lib.format(bfTpl, data));
                }
            }, {
                name: 'foot',
                paint: function (dialog, value) {
                    var bfTpl = '' + '<div class="${class}" id="${id}">' + '${content}' + '</div>';
                    var footId = dialog.helper.getId('foot');
                    var footClass = dialog.helper.getPartClasses('foot');
                    var foot = dialog.getFoot();
                    if (value == null) {
                        dialog.needFoot = false;
                        if (foot) {
                            dialog.removeChild(foot);
                        }
                    } else {
                        dialog.needFoot = true;
                        var data = {
                                'class': footClass.join(' '),
                                'id': footId,
                                'content': value
                            };
                        if (!foot) {
                            foot = dialog.createBF('foot');
                        }
                        foot.setContent(lib.format(bfTpl, data));
                    }
                }
            }, {
                name: 'draggable',
                paint: function (dialog, draggable) {
                    var unbind = false;
                    if (draggable) {
                        dialog.addState('draggable');
                    } else {
                        dialog.removeState('draggable');
                        unbind = true;
                    }
                    initDragHandler(dialog, unbind);
                }
            }),
            getBody: function () {
                return this.getChild('body');
            },
            getHead: function () {
                return this.getChild('head');
            },
            getFoot: function () {
                return this.getChild('foot');
            },
            show: function () {
                var mask = this.mask;
                if (this.helper.isInStage('INITED')) {
                    this.render();
                } else if (this.helper.isInStage('DISPOSED')) {
                    return;
                }
                if (this.setPositionOnResize) {
                    this.helper.addDOMEvent(window, 'resize', resizeHandler);
                }
                if (this.setPositionOnScroll) {
                    this.helper.addDOMEvent(window, 'scroll', resizeHandler);
                }
                this.setWidth(this.width);
                this.removeState('hidden');
                resizeHandler.apply(this);
                var zIndex = 1203;
                var rawElements = document.body.children;
                var dialogNum = 0;
                for (var i = 0, len = rawElements.length; i < len; i++) {
                    if (rawElements[i].nodeType === 1) {
                        if (lib.hasClass(rawElements[i], this.helper.getPrimaryClassName()) && !lib.hasClass(rawElements[i], this.helper.getPrimaryClassName('hidden'))) {
                            dialogNum++;
                        }
                    }
                }
                zIndex += dialogNum * 10;
                this.main.style.zIndex = zIndex;
                if (mask) {
                    showMask(this, zIndex - 1);
                }
                if (this.isShow) {
                    return;
                }
                this.isShow = true;
                this.fire('show');
            },
            hide: function () {
                if (!this.isShow) {
                    return;
                }
                this.isShow = false;
                if (this.setPositionOnResize) {
                    this.helper.removeDOMEvent(window, 'resize', resizeHandler);
                }
                if (this.setPositionOnScroll) {
                    this.helper.removeDOMEvent(window, 'scroll', resizeHandler);
                }
                this.addState('hidden');
                if (this.mask) {
                    hideMask(this);
                }
                this.fire('hide');
            },
            setTitle: function (html) {
                this.setProperties({ title: html });
            },
            setContent: function (content) {
                this.setProperties({ content: content });
            },
            setFoot: function (foot) {
                this.setProperties({ foot: foot });
            },
            setHeight: function (height) {
                this.setProperties({ height: height });
            },
            setWidth: function (width) {
                this.setProperties({ width: width });
            },
            resize: function () {
                resizeHandler.apply(this);
            },
            dispose: function () {
                if (this.helper.isInStage('DISPOSED')) {
                    return;
                }
                this.hide();
                var domId = this.main.id;
                lib.removeNode(domId);
                Control.prototype.dispose.apply(this, arguments);
            }
        });
    Dialog.defaultProperties = { appendToElement: 'body' };
    function parseMain(options) {
        var main = options.main;
        if (!main) {
            return;
        }
        var $els = $(main).children();
        var roles = {};
        $els.each(function (idx, ele) {
            var roleName = $(ele).attr('data-role');
            if (roleName) {
                roles[roleName] = ele;
            }
        });
        options.roles = roles;
    }
    function createHead(control, mainDOM) {
        var title = 'title';
        var close = 'close-icon';
        var closeTpl = '<div class="${clsClass}" id="${clsId}"></div>';
        var closeIcon = '';
        var cls = [];
        if (control.closeButton) {
            cls = control.helper.getPartClasses(close);
            cls.push(control.helper.getIconClass('close'));
            closeIcon = lib.format(closeTpl, {
                clsId: control.helper.getId(close),
                clsClass: cls.join(' ')
            });
        }
        var headTpl = '' + '<div id="${titleId}" class="${titleClass}">' + '</div>' + '${closeIcon}';
        var headClass = control.helper.getPartClassName('head');
        var headData = {
                titleId: control.helper.getId(title),
                titleClass: control.helper.getPartClasses(title).join(' '),
                closeIcon: closeIcon
            };
        var headHtml = lib.format(headTpl, headData);
        if (mainDOM) {
            control.title = mainDOM.innerHTML;
        } else {
            mainDOM = document.createElement('div');
            if (control.main.firstChild) {
                lib.insertBefore(mainDOM, control.main.firstChild);
            } else {
                control.main.appendChild(mainDOM);
            }
        }
        mainDOM.innerHTML = headHtml;
        $(mainDOM).addClass(headClass);
        var properties = {
                main: mainDOM,
                renderOptions: control.renderOptions
            };
        var panel = esui.create('Panel', properties);
        panel.render();
        control.addChild(panel, 'head');
        return panel;
    }
    function closeClickHandler() {
        var event = this.fire('beforeclose');
        if (event.isDefaultPrevented()) {
            return false;
        }
        this.hide();
        this.fire('close');
        if (this.closeOnHide) {
            this.dispose();
        }
    }
    function resizeHandler() {
        var main = this.main;
        $(main).position({
            of: window,
            at: 'center',
            my: 'center'
        });
    }
    function initDragHandler(dialog, unbind) {
        var head = dialog.getChild('head').main;
        $(dialog.main).draggable({
            handle: head,
            addClasses: false,
            containment: 'window',
            disabled: unbind
        });
    }
    function showMask(dialog, zIndex) {
        var mask = getMask(dialog);
        var clazz = [
                dialog.helper.getPrefixClass('mask'),
                dialog.helper.getPrefixClass('mask-page')
            ];
        var maskClass = dialog.helper.getPartClasses('mask').join(' ');
        clazz.push(maskClass);
        mask.className = clazz.join(' ');
        mask.style.display = 'block';
        mask.style.zIndex = zIndex;
    }
    function hideMask(dialog) {
        var mask = getMask(dialog);
        if ('undefined' !== typeof mask) {
            lib.removeNode(mask);
        }
    }
    function initMask(maskId) {
        var el = document.createElement('div');
        el.id = maskId;
        document.body.appendChild(el);
    }
    function getMask(control) {
        var dialogId = control.helper.getId();
        var id = maskIdPrefix + '-' + dialogId;
        var mask = lib.g(id);
        if (!mask) {
            initMask(id);
        }
        return lib.g(id);
    }
    Dialog.OK_TEXT = '\u786E\u5B9A';
    Dialog.CANCEL_TEXT = '\u53D6\u6D88';
    Dialog.confirm = function (args) {
        var dialogPrefix = 'dialog-confirm';
        function btnClickHandler(dialog, type) {
            dialog.fire(type);
            dialog.dispose();
        }
        var title = u.escape(args.title) || '';
        var content = u.escape(args.content) || '';
        var okText = u.escape(args.okText) || Dialog.OK_TEXT;
        var cancelText = u.escape(args.cancelText) || Dialog.CANCEL_TEXT;
        var properties = {
                type: 'confirm',
                variants: 'confirm',
                title: ''
            };
        u.extend(properties, args);
        var tpl = [
                '<div class="${prefix}-icon ${prefix}-icon-${type}"><span class="${icon}"></span></div>',
                '<div class="${prefix}-text">${content}</div>'
            ].join('');
        properties.id = lib.getGUID(dialogPrefix);
        properties.closeButton = false;
        properties.mask = true;
        properties.alwaysTop = true;
        var type = properties.type;
        properties.type = null;
        var dialog = esui.create('Dialog', properties);
        dialog.appendTo(document.body);
        dialog.show();
        var okBtn = dialog.getFoot().getChild('btnOk');
        var cancelBtn = dialog.getFoot().getChild('btnCancel');
        okBtn.setContent(okText);
        cancelBtn.setContent(cancelText);
        dialog.setTitle(title);
        dialog.setContent(lib.format(tpl, {
            type: type,
            content: content,
            prefix: dialog.helper.getPrimaryClassName(),
            icon: dialog.helper.getIconClass('question-circle')
        }));
        if (properties.btnHeight) {
            okBtn.set('height', properties.btnHeight);
            cancelBtn.set('height', properties.btnHeight);
        }
        if (properties.btnWidth) {
            okBtn.set('width', properties.btnWidth);
            cancelBtn.set('width', properties.btnWidth);
        }
        okBtn.on('click', u.partial(btnClickHandler, dialog, 'ok'));
        cancelBtn.on('click', u.partial(btnClickHandler, dialog, 'cancel'));
        return dialog;
    };
    Dialog.alert = function (args) {
        var dialogPrefix = 'dialog-alert';
        var okPrefix = 'dialog-alert-ok';
        function btnClickHandler(dialog, okBtn) {
            dialog.fire('ok');
            okBtn.dispose();
            dialog.dispose();
        }
        var title = u.escape(args.title) || '';
        var content = u.escape(args.content) || '';
        var okText = u.escape(args.okText) || Dialog.OK_TEXT;
        var properties = {
                type: 'warning',
                variants: 'alert',
                title: ''
            };
        u.extend(properties, args);
        var tpl = [
                '<div class="${prefix}-icon ${prefix}-icon-${type}"><span class="${icon}"></span></div>',
                '<div class="${prefix}-text">${content}</div>'
            ].join('');
        var dialogId = lib.getGUID(dialogPrefix);
        properties.id = dialogId;
        properties.closeButton = false;
        properties.mask = true;
        properties.alwaysTop = true;
        var type = properties.type;
        properties.type = null;
        var dialog = esui.create('Dialog', properties);
        dialog.appendTo(document.body);
        dialog.setTitle(title);
        dialog.setContent(lib.format(tpl, {
            type: type,
            content: content,
            prefix: dialog.helper.getPrimaryClassName(),
            icon: dialog.helper.getIconClass('exclamation-circle')
        }));
        dialog.setFoot('' + '<div ' + 'class="' + dialog.helper.getPartClassName('ok-btn') + '"' + ' data-ui="type:Button;childName:okBtn;id:' + dialogId + '-' + okPrefix + ';variants:primary;">' + okText + '</div>');
        dialog.show();
        var okBtn = dialog.getFoot().getChild('okBtn');
        okBtn.on('click', u.partial(btnClickHandler, dialog, okBtn));
        if (properties.btnHeight) {
            okBtn.set('height', properties.btnHeight);
        }
        if (properties.btnwidth) {
            okBtn.set('width', properties.btnwidth);
        }
        return dialog;
    };
    esui.register(Dialog);
    return Dialog;
});

define('ub-ria-ui/LightBox', [
    'require',
    'esui',
    'esui/lib',
    'underscore',
    'eoo',
    'esui/Control',
    'esui/painters',
    'jquery',
    './helper/swfHelper',
    'esui/Dialog'
], function (require) {
    var esui = require('esui');
    var lib = require('esui/lib');
    var u = require('underscore');
    var eoo = require('eoo');
    var Control = require('esui/Control');
    var painters = require('esui/painters');
    var $ = require('jquery');
    require('./helper/swfHelper');
    require('esui/Dialog');
    var LightBox = eoo.create(Control, {
            constructor: function () {
                this.$super(arguments);
                this.dialog = null;
            },
            type: 'LightBox',
            initOptions: function (options) {
                var properties = {
                        currentIndex: 0,
                        width: 'auto',
                        height: 'auto',
                        dialogVariants: 'lightbox',
                        loadingStyle: this.helper.getPartClassName('media-loading'),
                        loadFailedStyle: this.helper.getPartClassName('media-load-failed'),
                        group: null,
                        groupContainerId: null
                    };
                u.extend(properties, LightBox.defaultProperties, options);
                this.setProperties(properties);
            },
            initStructure: function () {
                var properties = {
                        content: '',
                        closeButton: true,
                        mask: true,
                        alwaysTop: true,
                        closeOnHide: false,
                        width: 'auto'
                    };
                u.extend(properties, {
                    title: this.title || '',
                    foot: this.foot || '',
                    draggable: this.draggable || false,
                    needfoot: this.needfoot || false,
                    variants: this.dialogVariants
                });
                var dialog = esui.create('Dialog', properties);
                dialog.appendTo(document.body);
                this.dialog = dialog;
            },
            initEvents: function () {
                this.initCarousel();
                var leftLink = lib.g(this.dialog.helper.getId('link-left'));
                var rightLink = lib.g(this.dialog.helper.getId('link-right'));
                var me = this;
                this.dialog.helper.addDOMEvent(leftLink, 'click', function (e) {
                    me.showPreviousMedia();
                });
                this.dialog.helper.addDOMEvent(rightLink, 'click', function (e) {
                    me.showNextMedia();
                });
                if (this.group) {
                    var container = this.groupContainerId ? lib.g(this.groupContainerId) : document.body;
                    me.helper.addDOMEvent(container, 'click', '[data-lightbox-group]', function (e) {
                        var target = e.currentTarget;
                        e.preventDefault();
                        var $groupElements = $(container).find('[data-lightbox-group="' + me.group + '"]');
                        var i = $groupElements.index(target);
                        var datasource = [];
                        $groupElements.each(function (i, element) {
                            var $el = $(element);
                            var item = { url: $el.attr('href') };
                            var dataType = $el.attr('data-lightbox-type');
                            item.width = $el.attr('data-lightbox-width');
                            item.height = $el.attr('data-lightbox-height');
                            dataType && (item.type = dataType);
                            datasource.push(item);
                        });
                        me.datasource = datasource;
                        me.show({ currentIndex: i });
                    });
                }
            },
            initCarousel: function () {
                var tpl = [
                        '<div id="${mediaId}" class="${mediaStyle}"></div>',
                        '<div id="${linkId}" class="${linkStyle}">',
                        '<a href="javascript:;" id="${leftLinkId}" class="${leftLinkStyle}"></a>',
                        '<a href="javascript:;" id="${rightLinkId}" class="${rightLinkStyle}"></a>',
                        '</div>'
                    ].join('');
                var body = this.dialog.getBody();
                var dialogHelper = this.dialog.helper;
                var leftIcon = dialogHelper.getPartClassName('lightbox-content-link-left') + ' ' + dialogHelper.getIconClass();
                var rightIcon = dialogHelper.getPartClassName('lightbox-content-link-right') + ' ' + dialogHelper.getIconClass();
                body.setContent(lib.format(tpl, {
                    mediaId: dialogHelper.getId('media'),
                    mediaStyle: dialogHelper.getPartClassName('lightbox-content-media'),
                    linkId: dialogHelper.getId('link'),
                    linkStyle: dialogHelper.getPartClassName('lightbox-content-link'),
                    leftLinkId: dialogHelper.getId('link-left'),
                    leftLinkStyle: leftIcon,
                    rightLinkId: dialogHelper.getId('link-right'),
                    rightLinkStyle: rightIcon
                }));
            },
            mediaContainer: function () {
                return lib.g(this.dialog.helper.getId('media'));
            },
            show: function (args) {
                args && this.setProperties(args);
                var link = lib.g(this.dialog.helper.getId('link'));
                link.style.display = this.datasource.length <= 1 ? 'none' : '';
                this.showMedia();
            },
            hide: function () {
                this.dialog.hide();
            },
            setContent: function (list) {
                this.setProperties({ datasource: list });
            },
            showMedia: function () {
                var data = this.datasource[this.currentIndex];
                this.showLoading();
                if (!data.type) {
                    if (/\.(?:jpg|png|gif|jpeg|bmp)$/i.test(data.url)) {
                        data.type = 'image';
                    } else if (/\.swf/i.test(data.url)) {
                        data.type = 'flash';
                    } else if (/\.(?:mp4|flv|mov|mkv|mpg|avi|rmvb|rm|ogg|wmv|mp3|wma|mid)/i.test(data.url)) {
                        data.type = 'video';
                    }
                }
                this.preview(data);
            },
            showLoading: function () {
                $(this.dialog.main).addClass(this.helper.getPartClassName('loading'));
            },
            hideLoading: function () {
                $(this.dialog.main).removeClass(this.helper.getPartClassName('loading'));
            },
            preview: function (options) {
                if (options) {
                    var type = options.type;
                    options.id = options.id || 'preiew-' + Math.random();
                    options.width = options.width || this.width;
                    options.height = options.height || this.height;
                    type = type.charAt(0).toUpperCase() + type.slice(1).toLowerCase();
                    (this['preview' + type] || this.previewNotSupported).call(this, options);
                }
            },
            previewImage: function (options) {
                var me = this;
                var img = new Image();
                img.onload = function () {
                    me.hideLoading();
                    me.mediaContainer().innerHTML = '';
                    me.mediaContainer().appendChild(img);
                    me.dialog.show();
                    img.onload = img.onerror = null;
                };
                img.onerror = function () {
                    me.hideLoading();
                    me.mediaContainer().innerHTML = lib.format(this.LOAD_FAILED_TPL, me);
                    img.onload = img.onerror = null;
                    me.dialog.show();
                };
                img.src = options.url;
                if (options.width) {
                    img.style.width = options.width + 'px';
                }
                if (options.height) {
                    img.style.height = options.height + 'px';
                }
            },
            previewFlash: function (options) {
                var html = getFlashHtml(options);
                this.hideLoading();
                this.mediaContainer().innerHTML = '';
                this.mediaContainer().appendChild(html);
                this.dialog.show();
            },
            previewVideo: function (options) {
                var url = options.url;
                var html = '';
                if (/\.flv/.test(url)) {
                    html = getFlvHtml(options, this.swfPath);
                } else if (/\.mp4|\.mov/.test(url)) {
                    html = getVideoHtml(options, this);
                }
                var $container = $(this.mediaContainer());
                this.hideLoading();
                $container.html('');
                $container.append($(html));
                this.dialog.show();
            },
            previewNotSupported: function () {
                this.hideLoading();
                this.mediaContainer().innerHTML = this.NOT_SUPPORT_MESSAGE;
                this.dialog.show();
            },
            showNextMedia: function () {
                this.currentIndex = ++this.currentIndex % this.datasource.length;
                this.showMedia();
            },
            showPreviousMedia: function () {
                this.currentIndex = (--this.currentIndex + this.datasource.length) % this.datasource.length;
                this.showMedia();
            },
            repaint: painters.createRepaint(Control.prototype.repaint, {
                name: ['title'],
                paint: function (control, title) {
                    control.dialog.setTitle(title || '');
                }
            })
        });
    LightBox.defaultProperties = {
        NOT_SUPPORT_MESSAGE: '\u6682\u4E0D\u652F\u6301\u8BE5\u683C\u5F0F\u9884\u89C8',
        VIDEO_TPL: [
            '<video id="${id}" title="${title}" width="${width}" height="${height}" src="${src}" autoplay="autoplay">',
            '\u8BE5\u6D4F\u89C8\u5668\u6682\u4E0D\u652F\u6301\u6B64\u683C\u5F0F\u89C6\u9891\u9884\u89C8',
            '</video>'
        ].join(''),
        LOAD_FAILED_TPL: '<div class="${loadFailedStyle}">\u52A0\u8F7D\u56FE\u7247\u5931\u8D25</div>'
    };
    function getFlashHtml(options) {
        return $.flash.create({
            id: options.id || 'preview-fla',
            swf: options.url,
            width: options.width,
            height: options.height,
            wmode: 'transparent'
        });
    }
    function getFlvHtml(options, swfPath) {
        return $.flash.create({
            id: options.id || 'preview-flv',
            swf: swfPath,
            width: options.width,
            height: options.height,
            wmode: 'transparent',
            flashvars: 'play_url=' + options.url
        });
    }
    function getVideoHtml(options, me) {
        return lib.format(me.VIDEO_TPL, {
            id: options.id || 'preview-video',
            title: options.title,
            src: options.url,
            width: options.width,
            height: options.height
        });
    }
    esui.register(LightBox);
    return LightBox;
});

define('esui/Select', [
    'require',
    'underscore',
    './lib',
    './InputControl',
    './Layer',
    'eoo',
    './painters',
    'jquery',
    './main'
], function (require) {
    var u = require('underscore');
    var lib = require('./lib');
    var InputControl = require('./InputControl');
    var Layer = require('./Layer');
    var eoo = require('eoo');
    var painters = require('./painters');
    var $ = require('jquery');
    var esui = require('./main');
    var SelectLayer = eoo.create(Layer, {
            constructor: function () {
                this.$super(arguments);
            },
            create: function () {
                var ele = this.$super(arguments);
                $(this.control.main).after(ele);
                return ele;
            },
            nodeName: 'ol',
            render: function (element) {
                var html = '';
                for (var i = 0; i < this.control.datasource.length; i++) {
                    var item = this.control.datasource[i];
                    var classes = this.control.helper.getPartClasses('item');
                    if (item.disabled) {
                        classes.push.apply(classes, this.control.helper.getPartClasses('item-disabled'));
                    }
                    html += '<li data-index="' + i + '" ' + 'class="' + classes.join(' ') + '">';
                    html += this.control.getItemHTML(item);
                    html += '</li>';
                }
                element.innerHTML = html;
            },
            initBehavior: function (element) {
                var helper = this.control.helper;
                helper.addDOMEvent(element, 'click', '.' + helper.getPrimaryClassName('item'), selectValue);
                $(element).addClass(helper.getPrefixClass('dropdown'));
            },
            syncState: function (element) {
                var classes = this.control.helper.getPrimaryClassName('item-selected');
                var $items = $(element).children();
                var selected = this.control.selectedIndex;
                $items.each(function (index, ele) {
                    var $item = $(ele);
                    if (index === selected) {
                        $item.addClass(classes);
                    } else {
                        $item.removeClass(classes);
                    }
                });
            },
            dock: { strictWidth: true }
        });
    var Select = eoo.create(InputControl, {
            constructor: function () {
                this.$super(arguments);
                this.layer = new SelectLayer(this);
            },
            type: 'Select',
            initOptions: function (options) {
                var defaults = {
                        datasource: [],
                        tabIndex: 0
                    };
                var properties = {};
                u.extend(properties, defaults, options);
                if (this.main.nodeName.toLowerCase() === 'select') {
                    properties.datasource = [];
                    var elements = this.main.getElementsByTagName('option');
                    for (var i = 0, length = elements.length; i < length; i++) {
                        var item = elements[i];
                        var dataItem = {
                                name: item.name || item.text,
                                value: item.value
                            };
                        if (item.disabled) {
                            dataItem.disabled = true;
                        }
                        properties.datasource.push(dataItem);
                        if (item.selected && properties.selectedIndex == null && properties.value == null && properties.rawValue == null) {
                            properties.selectedIndex = item.value ? i : 0;
                        }
                    }
                    this.helper.extractOptionsFromInput(this.main, properties);
                }
                this.setProperties(properties);
            },
            itemTemplate: '<span>${text}</span>',
            getItemHTML: function (item) {
                var data = {
                        text: u.escape(item.name || item.text),
                        value: u.escape(item.value)
                    };
                return lib.format(this.itemTemplate, data);
            },
            displayTemplate: '${text}',
            getDisplayHTML: function (item) {
                if (!item) {
                    return u.escape(this.emptyText || '');
                }
                var data = {
                        text: u.escape(item.name || item.text),
                        value: u.escape(item.value)
                    };
                return lib.format(this.displayTemplate, data);
            },
            initStructure: function () {
                var helper = this.helper;
                var arrow = 'arrow';
                var span = 'span';
                var mainElement = this.main;
                if (mainElement.nodeName.toLowerCase() === 'select') {
                    helper.replaceMain();
                    mainElement = this.main;
                }
                this.layer.autoCloseExcludeElements = [mainElement];
                mainElement.tabIndex = this.tabIndex;
                mainElement.innerHTML = helper.getPartHTML('text', span) + helper.getPartHTML(arrow, span);
                $(helper.getPart(arrow)).addClass(helper.getIconClass());
            },
            initEvents: function () {
                this.helper.addDOMEvent(this.main, 'click', toggle);
                this.layer.on('rendered', u.bind(addLayerClass, this));
            },
            getRawValue: function () {
                if (this.selectedIndex < 0) {
                    return null;
                }
                var item = this.datasource[this.selectedIndex];
                return item ? item.value : null;
            },
            repaint: painters.createRepaint(InputControl.prototype.repaint, painters.style('width'), painters.style('height'), {
                name: 'datasource',
                paint: function (select) {
                    select.layer.repaint();
                }
            }, {
                name: [
                    'selectedIndex',
                    'emptyText',
                    'datasource'
                ],
                paint: updateValue
            }, {
                name: [
                    'disabled',
                    'hidden',
                    'readOnly'
                ],
                paint: function (select, disabled, hidden, readOnly) {
                    if (disabled || hidden || readOnly) {
                        select.layer.hide();
                    }
                }
            }),
            updateDatasource: function (datasource) {
                if (!datasource) {
                    datasource = this.datasource;
                }
                this.datasource = datasource;
                var record = { name: 'datasource' };
                this.repaint([record], { datasource: record });
            },
            setProperties: function (properties) {
                if (properties.datasource == null) {
                    properties.datasource = this.datasource;
                }
                if (properties.value == null && properties.rawValue == null && properties.selectedIndex == null && properties.datasource === this.datasource) {
                    properties.selectedIndex = this.selectedIndex;
                }
                if (!properties.hasOwnProperty('emptyText')) {
                    properties.emptyText = this.emptyText;
                }
                adjustValueProperties(properties);
                var changes = this.$super(arguments);
                if (changes.hasOwnProperty('selectedIndex')) {
                    this.fire('change');
                }
                return changes;
            },
            dispose: function () {
                if (this.helper.isInStage('DISPOSED')) {
                    return;
                }
                if (this.layer) {
                    this.layer.dispose();
                    this.layer = null;
                }
                this.$super(arguments);
            },
            getSelectedItem: function () {
                return this.get('datasource')[this.get('selectedIndex')];
            }
        });
    function toggle(e) {
        this.layer.toggle.call(this.layer, e);
        focusItem.call(this, this.get('selectedIndex'));
    }
    function focusItem(index) {
        var content = this.layer.getElement();
        var item = $(content).find('li:nth-child(' + (index + 1) + ')');
        item = item && item[0];
        if (item) {
            var itemOffsetTop = item.offsetTop;
            var itemOffsetHeight = item.offsetHeight;
            var scrollTop = content.scrollTop;
            var contentOffsetHeight = content.clientHeight;
            var bottomDistance = itemOffsetTop + itemOffsetHeight;
            if (scrollTop > itemOffsetTop) {
                scrollTop = itemOffsetTop;
            } else if (bottomDistance > scrollTop + contentOffsetHeight) {
                scrollTop = bottomDistance - contentOffsetHeight;
            }
            content.scrollTop = scrollTop;
        }
    }
    function selectValue(e) {
        var target = e.currentTarget;
        if (!this.helper.isPart(target, 'item-disabled')) {
            var index = target.getAttribute('data-index');
            this.set('selectedIndex', +index);
            this.layer.hide();
        }
    }
    function adjustValueProperties(context) {
        if (context.selectedIndex == null && context.rawValue == null && context.value == null) {
            context.selectedIndex = -1;
        }
        if (context.rawValue != null) {
            context.value = null;
            context.selectedIndex = null;
        } else if (context.value != null) {
            context.selectedIndex = null;
        }
        if (context.selectedIndex == null && (context.value != null || context.rawValue != null)) {
            context.selectedIndex = -1;
            var value = context.rawValue || context.value;
            for (var i = 0; i < context.datasource.length; i++) {
                if (context.datasource[i].value === value) {
                    context.selectedIndex = i;
                    break;
                }
            }
            delete context.value;
            delete context.rawValue;
        }
        if (context.selectedIndex < 0 || context.selectedIndex >= context.datasource.length) {
            if (context.emptyText) {
                context.selectedIndex = -1;
            } else {
                context.selectedIndex = -1;
                for (var j = 0; j < context.datasource.length; j++) {
                    if (!context.datasource[j].disabled) {
                        context.selectedIndex = j;
                        break;
                    }
                }
            }
        }
    }
    function addLayerClass() {
        this.fire('layerrendered', { layer: this.layer });
    }
    function updateValue(select) {
        var textHolder = select.helper.getPart('text');
        var selectedItem = select.selectedIndex === -1 ? null : select.datasource[select.selectedIndex];
        var text = select.getDisplayHTML(selectedItem);
        textHolder.innerHTML = text;
        textHolder.title = text;
        var layerElement = select.layer.getElement(false);
        if (layerElement) {
            select.layer.syncState(layerElement);
        }
    }
    esui.register(Select);
    return Select;
});

define('esui/MonthView', [
    'require',
    './Button',
    './Select',
    './Panel',
    'jquery',
    './lib',
    './Control',
    './main',
    'moment',
    'eoo',
    './painters',
    'underscore'
], function (require) {
    require('./Button');
    require('./Select');
    require('./Panel');
    var $ = require('jquery');
    var lib = require('./lib');
    var Control = require('./Control');
    var esui = require('./main');
    var m = require('moment');
    var eoo = require('eoo');
    var painters = require('./painters');
    var u = require('underscore');
    var MonthView = eoo.create(Control, {
            type: 'MonthView',
            initOptions: function (options) {
                var properties = {
                        viewValue: {},
                        mode: 'single',
                        dateItemRender: null
                    };
                u.extend(properties, MonthView.defaultProperties, options);
                this.setProperties(properties);
            },
            setProperties: function (properties) {
                var format = properties.paramFormat || this.paramFormat;
                if (properties.range) {
                    properties.range = rangeAdapter(properties.range, format);
                }
                var now = new Date();
                var mode = properties.mode || this.mode;
                if (properties.rawValue == null) {
                    if (properties.value) {
                        properties.rawValue = parseValueByMode(properties.value, mode, format);
                    } else {
                        if (this.rawValue == null) {
                            if (mode === 'single') {
                                properties.rawValue = now;
                            } else {
                                properties.rawValue = [];
                            }
                        }
                    }
                }
                var year = properties.year;
                var month = properties.month;
                if (!year && month == null) {
                    if (mode === 'single') {
                        if (properties.rawValue) {
                            year = properties.rawValue.getFullYear();
                            month = properties.rawValue.getMonth() + 1;
                        }
                    } else {
                        year = now.getFullYear();
                        month = now.getMonth() + 1;
                    }
                }
                if (year && month) {
                    properties.year = parseInt(year, 10);
                    properties.month = parseInt(month, 10) - 1;
                } else if (properties.hasOwnProperty('year')) {
                    if (this.month == null) {
                        delete properties.year;
                    }
                } else if (properties.hasOwnProperty('month')) {
                    if (this.year == null) {
                        delete properties.month;
                    } else {
                        properties.month = parseInt(month, 10) - 1;
                    }
                }
                var changes = Control.prototype.setProperties.apply(this, arguments);
                if (changes.hasOwnProperty('rawValue')) {
                    this.fire('change');
                }
                return changes;
            },
            initStructure: function () {
                this.main.innerHTML = getMainHTML(this);
                this.initChildren(this.main);
                if (this.mode === 'multi') {
                    this.addState('multi-select');
                }
            },
            initEvents: function () {
                var monthBack = this.getChild('monthBack');
                monthBack.on('click', u.partial(goToPrevMonth, this));
                var monthForward = this.getChild('monthForward');
                monthForward.on('click', u.partial(goToNextMonth, this));
                var monthSel = this.getChild('monthSel');
                monthSel.on('change', u.partial(changeMonth, this, monthSel));
                monthSel.on('layerrendered', u.partial(addCustomClassesForSelectLayer, this, 'month-select'));
                var yearSel = this.getChild('yearSel');
                yearSel.on('change', u.partial(changeYear, this, yearSel));
                yearSel.on('layerrendered', u.partial(addCustomClassesForSelectLayer, this, 'year-select'));
                var controlHelper = this.helper;
                var selectors = [
                        '.' + controlHelper.getPartClassName('month-item'),
                        '.' + controlHelper.getPartClassName('month-select-all'),
                        '.' + controlHelper.getPartClassName('month-title'),
                        '.' + controlHelper.getPartClassName('month-row-select')
                    ];
                controlHelper.addDOMEvent(controlHelper.getPart('monthMain'), 'click', selectors.join(','), monthViewClick);
            },
            repaint: painters.createRepaint(Control.prototype.repaint, {
                name: [
                    'range',
                    'rawValue',
                    'year',
                    'month'
                ],
                paint: function (monthView, range, rawValue, year, month) {
                    if (rawValue) {
                        if (monthView.mode === 'multi') {
                            parseToCache(monthView);
                        }
                    }
                    repaintMonthView(monthView, monthView.year, monthView.month);
                }
            }, {
                name: 'disabled',
                paint: function (monthView, disabled) {
                    var monthBack = monthView.getChild('monthBack');
                    monthBack.setProperties({ disabled: disabled });
                    var monthForward = monthView.getChild('monthForward');
                    monthForward.setProperties({ disabled: disabled });
                    var monthSel = monthView.getChild('monthSel');
                    monthSel.setProperties({ disabled: disabled });
                    var yearSel = monthView.getChild('yearSel');
                    yearSel.setProperties({ disabled: disabled });
                }
            }),
            disable: function () {
                this.setProperties({ disabled: true });
                this.addState('disabled');
            },
            enable: function () {
                this.setProperties({ disabled: false });
                this.removeState('disabled');
            },
            setRange: function (range) {
                this.setProperties({ range: range });
            },
            setRawValue: function (date) {
                this.setProperties({ rawValue: date });
            },
            getRawValue: function () {
                return this.rawValue;
            },
            getValue: function () {
                return this.stringifyValue(this.rawValue);
            },
            stringifyValue: function (rawValue) {
                var paramFormat = this.paramFormat;
                if (this.mode === 'single') {
                    return m(rawValue).format(this.paramFormat) || '';
                }
                var dateStrs = [];
                var oneDay = 86400000;
                for (var i = 0; i < rawValue.length; i++) {
                    if (i === 0) {
                        dateStrs.push(m(rawValue[i]).format(paramFormat));
                    } else {
                        if (rawValue[i] - rawValue[i - 1] > oneDay) {
                            dateStrs.push(m(rawValue[i - 1]).format(paramFormat));
                            dateStrs.push(m(rawValue[i]).format(paramFormat));
                        } else if (i === rawValue.length - 1) {
                            dateStrs.push(m(rawValue[i]).format(paramFormat));
                        } else {
                            continue;
                        }
                    }
                }
                return dateStrs.join(',');
            },
            parseValue: function (value) {
                return parseValueByMode(value, this.mode, this.paramFormat);
            },
            setRawValueWithoutFireChange: function (value) {
                this.rawValue = value;
                parseToCache(this);
            },
            getDateItemHTML: function (date) {
                return lib.g(getItemId(this, date));
            }
        });
    MonthView.defaultProperties = {
        range: {
            begin: new Date(1982, 10, 4),
            end: new Date(2046, 10, 4)
        },
        paramFormat: 'YYYY-MM-DD',
        dayNamesMin: [
            '\u4E00',
            '\u4E8C',
            '\u4E09',
            '\u56DB',
            '\u4E94',
            '\u516D',
            '\u65E5'
        ],
        monthSelectLabel: '\u6708',
        yearSelectLabel: '\u5E74'
    };
    function getYearOptions(monthView) {
        var range = monthView.viewRange || monthView.range;
        var ds = [];
        var end = range.end.getFullYear();
        for (var i = range.begin.getFullYear(); i <= end; i++) {
            ds.push({
                text: i,
                value: i
            });
        }
        return ds;
    }
    function getMonthOptions(monthView, year) {
        var range = monthView.viewRange || monthView.range;
        var ds = [];
        var len = 11;
        var i = 0;
        if (year === range.begin.getFullYear()) {
            i = range.begin.getMonth();
        }
        if (year === range.end.getFullYear()) {
            len = range.end.getMonth();
        }
        for (; i <= len; i++) {
            ds.push({
                text: i + 1,
                value: i
            });
        }
        return ds;
    }
    function getMainHTML(monthView) {
        var tpl = [
                '<div class="${headClass}"><table><tr>',
                '<td class="${monthBackTdClass}">',
                '<div class="${monthBackClass}"',
                ' data-ui-type="Button"',
                ' data-ui-child-name="monthBack"',
                ' data-ui-id="${monthBackId}"',
                '><span class="${monthBackIcon}"></span></div>',
                '</td>',
                '<td class="${yearSelectTdClass}">',
                '<div class="${yearSelectClass}"',
                ' data-ui="type:Select;childName:yearSel;variants:compact;',
                ' id:${yearSelId};"></div>',
                '</td>',
                '<td class="${selectLabelClass}">',
                '<div>${yearSelectLabel}</div>',
                '</td>',
                '<td class="${monthSelectTdClass}">',
                '<div class="${monthSelectClass}"',
                ' data-ui="type:Select;childName:monthSel;variants:compact;',
                ' id:${monthSelId};"></div>',
                '</td>',
                '<td class="${selectLabelClass}">',
                '<div>${monthSelectLabel}</div>',
                '</td>',
                '<td class="${monthForTdClass}">',
                '<div class="${monthForClass}"',
                ' data-ui-type="Button"',
                ' data-ui-child-name="monthForward"',
                ' data-ui-id="${monthForwardId}"',
                '><span class="${monthForwardIcon}"></span></div>',
                '</td>',
                '</tr></table></div>',
                '<div id="${monthMainId}" class="${monthMainClass}"></div>'
            ];
        tpl = tpl.join('');
        var controlHelper = monthView.helper;
        return lib.format(tpl, {
            headClass: controlHelper.getPartClassName('head'),
            monthBackId: controlHelper.getId('monthBack'),
            monthBackIcon: controlHelper.getIconClass('caret-left'),
            monthForwardId: controlHelper.getId('monthForward'),
            monthForwardIcon: controlHelper.getIconClass('caret-right'),
            yearSelId: controlHelper.getId('yearSel'),
            monthSelId: controlHelper.getId('monthSel'),
            monthMainId: controlHelper.getId('monthMain'),
            monthMainClass: controlHelper.getPartClassName('month'),
            monthBackClass: controlHelper.getPartClassName('month-back'),
            monthForClass: controlHelper.getPartClassName('month-forward'),
            yearSelectClass: controlHelper.getPartClassName('year-select'),
            monthSelectClass: controlHelper.getPartClassName('month-select'),
            monthBackTdClass: controlHelper.getPartClassName('month-back-td'),
            monthForTdClass: controlHelper.getPartClassName('month-forward-td'),
            yearSelectTdClass: controlHelper.getPartClassName('year-select-td'),
            monthSelectTdClass: controlHelper.getPartClassName('month-select-td'),
            selectLabelClass: controlHelper.getPartClassName('select-label'),
            yearSelectLabel: monthView.yearSelectLabel,
            monthSelectLabel: monthView.monthSelectLabel
        });
    }
    function generateMonthViewHead(monthView, html) {
        var controlHelper = monthView.helper;
        var titles = [];
        if (monthView.mode === 'multi') {
            titles.push('');
        }
        titles = titles.concat(monthView.dayNamesMin);
        var tplHead = '' + '<table border="0" cellpadding="0" cellspacing="0" ' + 'class="${className}"><thead><tr>';
        html.push(lib.format(tplHead, { className: controlHelper.getPartClassName('month-main') }));
        var tplHeadItem = '' + '<td id="${id}" data-index="${index}" class="${className}">' + '${text}</td>';
        var headItemClass = controlHelper.getPartClassName('month-title');
        var headItemId = controlHelper.getId('month-title');
        var emptyHeadItemClass = controlHelper.getPartClassName('month-select-all');
        var tLen = titles.length;
        for (var tIndex = 0; tIndex < tLen; tIndex++) {
            html.push(lib.format(tplHeadItem, {
                className: titles[tIndex] === '' ? emptyHeadItemClass : headItemClass,
                text: titles[tIndex],
                index: tIndex,
                id: headItemId + '-' + tIndex
            }));
        }
        html.push('</tr></thead>');
    }
    function generateMonthViewBody(monthView, html) {
        var controlHelper = monthView.helper;
        html.push('<tbody><tr>');
        var tplItem = '' + '<td data-year="${year}" data-month="${month}" ' + 'data-date="${date}" class="${className}" ' + 'id="${id}">${date}</td>';
        var rowSelectClass = controlHelper.getPartClassName('month-row-select');
        var tplRowSelectId = controlHelper.getId('row-select');
        var rowTagIndex = 0;
        var tplRowSelectTpl = '' + '<td id="${id}" class="' + rowSelectClass + '">&gt;</td>';
        var index = 0;
        var year = monthView.year;
        var month = monthView.month;
        var repeater = new Date(year, month, 1);
        var nextMonth = new Date(year, month + 1, 1);
        var begin = 1 - (repeater.getDay() + 6) % 7;
        repeater.setDate(begin);
        var itemClass = controlHelper.getPartClassName('month-item');
        var todayClass = controlHelper.getPartClassName('month-item-today');
        var virClass = controlHelper.getPartClassName('month-item-virtual');
        var disabledClass = controlHelper.getPartClassName('month-item-disabled');
        var range = monthView.range;
        if (monthView.mode === 'multi') {
            html.push(lib.format(tplRowSelectTpl, { id: tplRowSelectId + '-' + rowTagIndex++ }));
        }
        while (nextMonth - repeater > 0 || index % 7 !== 0) {
            if (begin > 1 && index % 7 === 0) {
                html.push('</tr><tr>');
                if (monthView.mode === 'multi') {
                    html.push(lib.format(tplRowSelectTpl, { id: tplRowSelectId + '-' + rowTagIndex++ }));
                }
            }
            var virtual = repeater.getMonth() !== month;
            var disabled = false;
            if (repeater < range.begin) {
                disabled = true;
            } else if (repeater > range.end) {
                disabled = true;
            }
            var currentClass = itemClass;
            if (virtual) {
                currentClass += ' ' + virClass;
            } else if (m().isSame(repeater, 'day')) {
                currentClass += ' ' + todayClass;
            }
            if (disabled) {
                currentClass += ' ' + disabledClass;
            }
            var dateData = {
                    year: repeater.getFullYear(),
                    month: repeater.getMonth(),
                    date: repeater.getDate(),
                    className: currentClass,
                    id: getItemId(monthView, repeater)
                };
            if (monthView.dateItemRender) {
                html.push(monthView.dateItemRender(tplItem, dateData));
            } else {
                html.push(lib.format(tplItem, dateData));
            }
            repeater = new Date(year, month, ++begin);
            index++;
        }
        monthView.rowTagNum = rowTagIndex;
        html.push('</tr></tbody></table>');
    }
    function getMonthMainHTML(monthView) {
        var html = [];
        generateMonthViewHead(monthView, html);
        generateMonthViewBody(monthView, html);
        return html.join('');
    }
    function getItemId(monthView, date) {
        return monthView.helper.getId(date.getFullYear() + '-' + date.getMonth() + '-' + date.getDate());
    }
    function monthViewClick(e) {
        var tar = e.currentTarget;
        var $tar = $(tar);
        var controlHelper = this.helper;
        var allSelectClass = controlHelper.getPartClassName('month-select-all');
        var headClass = controlHelper.getPartClassName('month-title');
        var itemClass = controlHelper.getPartClassName('month-item');
        var rowSelectClass = controlHelper.getPartClassName('month-row-select');
        var virClass = controlHelper.getPartClassName('month-item-virtual');
        var disabledClass = controlHelper.getPartClassName('month-item-disabled');
        if ($tar.hasClass(itemClass) && !$tar.hasClass(virClass) && !$tar.hasClass(disabledClass)) {
            selectByItem(this, tar);
            this.fire('itemclick', tar);
        } else if (this.mode === 'multi') {
            if ($tar.hasClass(rowSelectClass)) {
                selectByTagClick(this, tar);
                return;
            }
            if ($tar.hasClass(headClass)) {
                selectByColumn(this, tar);
                return;
            }
            if ($tar.hasClass(allSelectClass)) {
                selectAll(this, $tar);
            }
        }
    }
    function parseToCache(monthView) {
        var rawValue = monthView.rawValue;
        monthView.viewValue = {};
        for (var i = 0; i < rawValue.length; i++) {
            var singleDay = rawValue[i];
            var year = singleDay.getFullYear();
            var month = singleDay.getMonth();
            var date = singleDay.getDate();
            var id = year + '-' + month + '-' + date;
            monthView.viewValue[id] = {
                isSelected: true,
                value: new Date(year, month, date)
            };
        }
    }
    function isItemSelectable(monthView, dateItem) {
        var controlHelper = monthView.helper;
        var virtualClass = controlHelper.getPartClassName('month-item-virtual');
        var disabledClass = controlHelper.getPartClassName('month-item-disabled');
        var $dateItem = $(dateItem);
        if (!$dateItem.hasClass(virtualClass) && !$dateItem.hasClass(disabledClass)) {
            return 1;
        } else if ($dateItem.hasClass(virtualClass) && !$dateItem.hasClass(disabledClass)) {
            return -1;
        }
        return 0;
    }
    function batchRepaintRowTag(monthView) {
        var rowTagNum = monthView.rowTagNum;
        var rowTagId = monthView.helper.getId('row-select');
        for (var i = 0; i < rowTagNum; i++) {
            var rowTag = lib.g(rowTagId + '-' + i);
            repaintRowTag(monthView, rowTag);
        }
    }
    function repaintRowTag(monthView, rowTag) {
        var controlHelper = monthView.helper;
        var selectedClass = controlHelper.getPartClassName('month-item-selected');
        var dateItem = rowTag.nextSibling;
        var isAllSelected = true;
        var selectableNum = 0;
        while (dateItem) {
            if (isItemSelectable(monthView, dateItem) === 1) {
                ++selectableNum;
                if (!$(dateItem).hasClass(selectedClass)) {
                    isAllSelected = false;
                    break;
                }
            }
            dateItem = dateItem.nextSibling;
        }
        if (selectableNum === 0) {
            isAllSelected = false;
        }
        setTagSelected(rowTag, isAllSelected, controlHelper.getPartClassName('month-row-select-selected'));
    }
    function selectByColumn(monthView, columnTag) {
        var index = columnTag.getAttribute('data-index');
        var controlHelper = monthView.helper;
        var columnSelectedClass = controlHelper.getPartClassName('month-title-selected');
        var selectAll = !$(columnTag).hasClass(columnSelectedClass);
        setTagSelected(columnTag, selectAll, columnSelectedClass);
        var rowTagNum = monthView.rowTagNum;
        var rowTagId = controlHelper.getId('row-select');
        var viewValue = monthView.viewValue;
        var changedDates = [];
        for (var i = 0; i < rowTagNum; i++) {
            var rowTag = lib.g(rowTagId + '-' + i);
            var sibling = rowTag.parentNode.children[index];
            if (isItemSelectable(monthView, sibling) === 1) {
                var date = sibling.getAttribute('data-date');
                var month = sibling.getAttribute('data-month');
                var year = sibling.getAttribute('data-year');
                var id = year + '-' + month + '-' + date;
                viewValue[id] = {
                    isSelected: selectAll,
                    value: new Date(year, month, date)
                };
                changedDates.push(id);
            }
        }
        if (changedDates && changedDates.length > 0) {
            updateMultiRawValue(monthView);
            updateMultiSelectState(monthView, changedDates, selectAll);
            batchRepaintRowTag(monthView);
            repaintAllSelectTag(monthView);
        }
    }
    function setTagSelected(tagItem, isSelected, cls) {
        var $tagItem = $(tagItem);
        $tagItem.removeClass(cls);
        if (isSelected) {
            $tagItem.addClass(cls);
        }
    }
    function batchRepaintColumnTag(monthView) {
        var headItemId = monthView.helper.getId('month-title');
        for (var i = 1; i <= 7; i++) {
            var columnTag = lib.g(headItemId + '-' + i);
            repaintColumnTag(monthView, columnTag);
        }
    }
    function repaintColumnTag(monthView, columnTagItem) {
        var controlHelper = monthView.helper;
        var selectedClass = controlHelper.getPartClassName('month-item-selected');
        var index = columnTagItem.getAttribute('data-index');
        var isAllSelected = true;
        var selectableNum = 0;
        var rowTagNum = monthView.rowTagNum;
        var rowTagId = controlHelper.getId('row-select');
        for (var i = 0; i < rowTagNum; i++) {
            var rowTag = lib.g(rowTagId + '-' + i);
            var sibling = rowTag.parentNode.children[index];
            if (isItemSelectable(monthView, sibling) === 1) {
                ++selectableNum;
                if (!$(sibling).hasClass(selectedClass)) {
                    isAllSelected = false;
                    break;
                }
            }
        }
        if (selectableNum === 0) {
            isAllSelected = false;
        }
        setTagSelected(columnTagItem, isAllSelected, controlHelper.getPartClassName('month-title-selected'));
    }
    function selectByTagClick(monthView, rowTag) {
        var row = rowTag.parentNode;
        var controlHelper = monthView.helper;
        var rowSelectClass = controlHelper.getPartClassName('month-row-select');
        var rowSelectedClass = controlHelper.getPartClassName('month-row-select-selected');
        var virtualClass = controlHelper.getPartClassName('month-item-virtual');
        var disabledClass = controlHelper.getPartClassName('month-item-disabled');
        var selectAll = !$(rowTag).hasClass(rowSelectedClass);
        setTagSelected(rowTag, selectAll, rowSelectedClass);
        var viewValue = monthView.viewValue;
        var changedDates = [];
        $(row).children().each(function (i, child) {
            var $child = $(child);
            if (!$child.hasClass(rowSelectClass) && !$child.hasClass(virtualClass) && !$child.hasClass(disabledClass)) {
                var date = $child.attr('data-date');
                var month = $child.attr('data-month');
                var year = $child.attr('data-year');
                var id = year + '-' + month + '-' + date;
                viewValue[id] = {
                    isSelected: selectAll,
                    value: new Date(year, month, date)
                };
                changedDates.push(id);
            }
        });
        if (changedDates && changedDates.length > 0) {
            updateMultiRawValue(monthView);
            updateMultiSelectState(monthView, changedDates, selectAll);
            batchRepaintColumnTag(monthView);
            repaintAllSelectTag(monthView);
        }
    }
    function repaintAllSelectTag(monthView) {
        var rowTagNum = monthView.rowTagNum;
        var controlHelper = monthView.helper;
        var rowTagId = controlHelper.getId('row-select');
        var selectAllTag = lib.g(controlHelper.getId('month-title-0'));
        var rowSelectedClass = controlHelper.getPartClassName('month-row-select-selected');
        var selectedRowNum = 0;
        for (var i = 0; i < rowTagNum; i++) {
            var rowTag = lib.g(rowTagId + '-' + i);
            if ($(rowTag).hasClass(rowSelectedClass)) {
                selectedRowNum++;
            }
        }
        setTagSelected(selectAllTag, selectedRowNum === rowTagNum, rowSelectedClass);
    }
    function selectAll(monthView, $tar) {
        var controlHelper = monthView.helper;
        var rowTagNum = monthView.rowTagNum;
        var rowTagId = controlHelper.getId('row-select');
        var rowSelctedClass = controlHelper.getPartClassName('month-row-select-selected');
        var rowTag;
        var slected = $tar.hasClass(rowSelctedClass);
        for (var i = 0; i < rowTagNum; i++) {
            rowTag = lib.g(rowTagId + '-' + i);
            if (slected) {
                $(rowTag).addClass(rowSelctedClass);
            } else {
                $(rowTag).removeClass(rowSelctedClass);
            }
            selectByTagClick(monthView, rowTag);
        }
    }
    function updateMultiRawValue(monthView) {
        var selectedDates = [];
        for (var key in monthView.viewValue) {
            if (monthView.viewValue[key].isSelected) {
                selectedDates.push(monthView.viewValue[key].value);
            }
        }
        selectedDates.sort(function (a, b) {
            return a - b;
        });
        monthView.rawValue = selectedDates;
        monthView.fire('change');
    }
    function updateMultiSelectState(monthView, dates, selectAll) {
        if (selectAll) {
            paintMultiSelected(monthView, dates);
        } else {
            resetMultiSelected(monthView, dates);
        }
    }
    function resetMultiSelected(monthView, dates) {
        var controlHelper = monthView.helper;
        var id;
        var item;
        var dLength = dates.length;
        for (var i = 0; i < dLength; i++) {
            id = controlHelper.getId(dates[i]);
            item = lib.g(id);
            $(item).removeClass(controlHelper.getPartClassName('month-item-selected'));
        }
    }
    function paintMultiSelected(monthView, dates) {
        var controlHelper = monthView.helper;
        var id;
        var item;
        var dLength = dates.length;
        for (var i = 0; i < dLength; i++) {
            id = controlHelper.getId(dates[i]);
            item = lib.g(id);
            $(item).addClass(controlHelper.getPartClassName('month-item-selected'));
        }
    }
    function switchState(monthView, item, className) {
        var controlHelper = monthView.helper;
        if (!item) {
            return false;
        }
        var $item = $(item);
        var cls = controlHelper.getPartClassName(className);
        if ($item.hasClass(cls)) {
            $item.removeClass(cls);
            return false;
        }
        $item.addClass(cls);
        return true;
    }
    function selectByItem(monthView, item) {
        var date = item.getAttribute('data-date');
        var month = item.getAttribute('data-month');
        var year = item.getAttribute('data-year');
        var id = year + '-' + month + '-' + date;
        if (monthView.mode === 'multi') {
            var state = switchState(monthView, item, 'month-item-selected');
            monthView.viewValue[id] = {
                isSelected: state,
                value: new Date(year, month, date)
            };
            updateMultiRawValue(monthView);
            var rowTag = item.parentNode.firstChild;
            repaintRowTag(monthView, rowTag);
            batchRepaintColumnTag(monthView);
            repaintAllSelectTag(monthView);
        } else {
            var itemSelectClass = monthView.helper.getPartClassName('month-item-selected');
            if ($(item).hasClass(itemSelectClass)) {
                return;
            }
            var newDate = new Date(year, month, date);
            updateSingleSelectState(monthView, monthView.rawValue, newDate);
            monthView.rawValue = newDate;
            monthView.fire('change');
        }
    }
    function reviseYearMonth(monthView, year, month) {
        var me = monthView;
        var range = me.viewRange || me.range;
        var rangeBegin = range.begin.getFullYear() * 12 + range.begin.getMonth();
        var rangeEnd = range.end.getFullYear() * 12 + range.end.getMonth();
        var viewMonth = year * 12 + month;
        var view = new Date(year, month, 1);
        month = view.getMonth();
        if (rangeBegin - viewMonth > 0) {
            month += rangeBegin - viewMonth;
        } else if (viewMonth - rangeEnd > 0) {
            month -= viewMonth - rangeEnd;
        }
        view.setMonth(month);
        month = view.getMonth();
        year = view.getFullYear();
        return {
            year: year,
            month: month
        };
    }
    function repaintMonthView(monthView, year, month) {
        if (year == null) {
            year = monthView.year;
        }
        if (month == null) {
            month = monthView.month;
        }
        var me = monthView;
        var revisedYearMonth = reviseYearMonth(me, year, month);
        me.month = revisedYearMonth.month;
        me.year = revisedYearMonth.year;
        var yearSelect = me.getChild('yearSel');
        var lastYear = yearSelect.getValue();
        yearSelect.setProperties({
            datasource: getYearOptions(me),
            value: me.year
        });
        if (+lastYear === me.year) {
            yearSelect.fire('change');
        }
    }
    function updateSingleSelectState(monthView, oldDate, newDate) {
        if (oldDate !== newDate) {
            if (oldDate) {
                var lastSelectedItem = lib.g(getItemId(monthView, oldDate));
                if (lastSelectedItem) {
                    switchState(monthView, lastSelectedItem, 'month-item-selected');
                }
            }
            var curSelectedItem = lib.g(getItemId(monthView, newDate));
            if (curSelectedItem) {
                if (isItemSelectable(monthView, curSelectedItem)) {
                    switchState(monthView, curSelectedItem, 'month-item-selected');
                } else {
                    monthView.rawValue = null;
                    return null;
                }
            }
        }
        return newDate;
    }
    function goToNextMonth(monthView) {
        var nowDate = new Date(monthView.year, monthView.month, 1);
        var newDate = m(nowDate).add('month', 1);
        repaintMonthView(monthView, newDate.year(), newDate.month());
    }
    function goToPrevMonth(monthView) {
        var nowDate = new Date(monthView.year, monthView.month, 1);
        var newDate = m(nowDate).subtract('month', 1);
        repaintMonthView(monthView, newDate.year(), newDate.month());
    }
    function changeYear(monthView, yearSel) {
        var year = parseInt(yearSel.getValue(), 10);
        monthView.year = year;
        var month = monthView.month;
        var revisedYearMonth = reviseYearMonth(monthView, year, month);
        month = revisedYearMonth.month;
        monthView.month = month;
        var monthSelect = monthView.getChild('monthSel');
        var changes = monthSelect.setProperties({
                datasource: getMonthOptions(monthView, monthView.year),
                value: monthView.month
            });
        if (!changes.hasOwnProperty('rawValue')) {
            changeMonth(monthView, monthSelect);
        }
        monthView.fire('changeyear');
    }
    function changeMonth(monthView, monthSel) {
        var month = parseInt(monthSel.getValue(), 10);
        monthView.month = month;
        updateMain(monthView);
        monthView.fire('changemonth');
    }
    function updateMain(monthView) {
        var controlHelper = monthView.helper;
        var monthMainId = controlHelper.getId('monthMain');
        var monthMain = lib.g(monthMainId);
        monthMain.innerHTML = getMonthMainHTML(monthView);
        var rowElements = monthMain.getElementsByTagName('tr');
        var lastRow = rowElements[rowElements.length - 1];
        controlHelper.addPartClasses('last-row', lastRow);
        updateSelectStateByValue(monthView);
    }
    function rangeAdapter(range, format) {
        var begin;
        var end;
        if (typeof range === 'string') {
            var beginAndEnd = range.split(',');
            begin = m(beginAndEnd[0], format).toDate();
            end = m(beginAndEnd[1], format).toDate();
        } else {
            begin = range.begin;
            end = range.end;
        }
        if (begin > end) {
            return {
                begin: end,
                end: begin
            };
        }
        return {
            begin: begin,
            end: end
        };
    }
    function parseValueByMode(value, mode, format) {
        if (mode === 'single') {
            return m(value, format).toDate();
        }
        var dateStrs = value.split(',');
        var dates = [];
        for (var i = 0; i < dateStrs.length - 1; i += 2) {
            var begin = m(dateStrs[i], format).toDate();
            var end = m(dateStrs[i + 1], format).toDate();
            var temp;
            if (!begin || !end) {
                continue;
            }
            if (begin - end === 0) {
                dates.push(begin);
            } else {
                temp = begin;
                while (temp <= end) {
                    dates.push(temp);
                    temp = new Date(temp.getFullYear(), temp.getMonth(), temp.getDate() + 1);
                }
            }
        }
        return dates;
    }
    function updateSelectStateByValue(monthView) {
        var controlHelper = monthView.helper;
        if (monthView.mode !== 'multi') {
            updateSingleSelectState(monthView, null, monthView.rawValue);
            return;
        }
        var viewValue = monthView.viewValue;
        for (var key in viewValue) {
            if (viewValue.hasOwnProperty(key)) {
                var item = lib.g(controlHelper.getId(key));
                if (item) {
                    var isSelectable = isItemSelectable(monthView, item);
                    if (isSelectable === 1) {
                        if (viewValue[key].isSelected) {
                            controlHelper.addPartClasses('month-item-selected', item);
                        } else {
                            controlHelper.removePartClasses('month-item-selected', item);
                        }
                    } else if (isSelectable === 0) {
                        viewValue[key].isSelected = false;
                        updateMultiRawValue(monthView);
                    }
                }
            }
        }
        batchRepaintRowTag(monthView);
        batchRepaintColumnTag(monthView);
        repaintAllSelectTag(monthView);
    }
    function addCustomClassesForSelectLayer(monthView, selectClass, e) {
        var layerClasses = monthView.helper.getPartClasses(selectClass + '-layer');
        var layer = this.layer;
        layer.addCustomClasses(layerClasses);
        monthView.fire('selectlayerrendered', { layer: layer });
    }
    esui.register(MonthView);
    return MonthView;
});

define('ub-ria-ui/MultiCalendar', [
    'require',
    'esui/Button',
    'esui/MonthView',
    'eoo',
    'esui/lib',
    'esui/InputControl',
    'esui/Layer',
    'esui/main',
    'moment',
    'underscore',
    'jquery',
    'esui/painters'
], function (require) {
    require('esui/Button');
    require('esui/MonthView');
    var eoo = require('eoo');
    var lib = require('esui/lib');
    var InputControl = require('esui/InputControl');
    var Layer = require('esui/Layer');
    var ui = require('esui/main');
    var moment = require('moment');
    var u = require('underscore');
    var $ = require('jquery');
    var painters = require('esui/painters');
    var MultiCalendarLayer = eoo.create(Layer, {
            create: function () {
                var ele = this.$super(arguments);
                $(this.control.main).after(ele);
                $(ele).addClass(this.control.helper.getPrefixClass('multicalendar-layer'));
                return ele;
            },
            render: function (element) {
                var multiCalendar = this.control;
                var controlHelper = multiCalendar.helper;
                var tpl = '' + '<div data-ui="type: MonthView; childName: prevMonthView" class="${prevClass}"></div>' + '<div data-ui="type: MonthView; childName: nextMonthView" class="${nextClass}"></div>';
                element.innerHTML = lib.format(tpl, {
                    prevClass: controlHelper.getPartClassName('prev-month'),
                    nextClass: controlHelper.getPartClassName('next-month')
                });
                controlHelper.initChildren(element);
                paintLayer(multiCalendar, multiCalendar.rawValue, 'render');
            },
            toggle: function () {
                var element = this.getElement();
                if (!element || !$(element).is(':visible')) {
                    var multiCalendar = this.control;
                    paintLayer(multiCalendar, multiCalendar.rawValue, 'repaint');
                    this.show();
                } else {
                    this.hide();
                }
            }
        });
    var MultiCalendar = eoo.create(InputControl, {
            constructor: function (options) {
                this.now = new Date();
                this.$super(arguments);
                this.layer = new MultiCalendarLayer(this);
            },
            type: 'MultiCalendar',
            styleType: 'Calendar',
            initOptions: function (options) {
                var now = new Date();
                var properties = {
                        rawValue: now,
                        autoHideLayer: false
                    };
                u.extend(properties, MultiCalendar.defaultProperties, options);
                if (lib.isInput(this.main)) {
                    this.helper.extractOptionsFromInput(this.main, properties);
                }
                this.paramFormat = properties.paramFormat;
                if (properties.value) {
                    properties.rawValue = this.parseValue(properties.value);
                }
                this.setProperties(properties);
            },
            initStructure: function () {
                var controlHelper = this.helper;
                var mainElement = this.main;
                var calendar = 'calendar';
                if (lib.isInput(mainElement)) {
                    controlHelper.replaceMain();
                    mainElement = this.main;
                }
                var template = '' + '<div class="${classes}" id="${id}">${value}</div>' + '<div class="${arrow}"><span class="${icon}"></span></div>';
                $(mainElement).addClass(controlHelper.getPrefixClass(calendar));
                mainElement.innerHTML = lib.format(template, {
                    classes: controlHelper.getPartClassName('text'),
                    id: controlHelper.getId('text'),
                    arrow: controlHelper.getPartClassName('arrow'),
                    icon: controlHelper.getIconClass(calendar)
                });
                this.layer.autoCloseExcludeElements = [mainElement];
            },
            initEvents: function () {
                this.helper.addDOMEvent(this.main, 'click', u.bind(this.layer.toggle, this.layer));
            },
            repaint: painters.createRepaint(InputControl.prototype.repaint, {
                name: [
                    'rawValue',
                    'range'
                ],
                paint: function (multiCalendar, rawValue, range) {
                    if (range) {
                        range = multiCalendar.convertToRaw(range, multiCalendar.range);
                        multiCalendar.range = range;
                    }
                    if (rawValue) {
                        multiCalendar.rawValue = rawValue;
                        updateDisplayText(multiCalendar);
                    }
                    if (multiCalendar.layer) {
                        paintLayer(multiCalendar, multiCalendar.rawValue, 'repaint');
                    }
                }
            }, {
                name: [
                    'disabled',
                    'hidden',
                    'readOnly'
                ],
                paint: function (multiCalendar, disabled, hidden, readOnly) {
                    if (disabled || hidden || readOnly) {
                        multiCalendar.layer.hide();
                    }
                }
            }),
            parseValue: function (value) {
                var date = moment(value, this.paramFormat).toDate();
                return date;
            },
            stringifyValue: function (rawValue) {
                return moment(rawValue).format(this.dateFormat) || '';
            },
            convertToRaw: function (value, defaultRange) {
                var format = this.paramFormat;
                if (u.isString(value)) {
                    var strDates = value.split(',');
                    return {
                        begin: strDates[0] ? moment(strDates[0], format).toDate() : defaultRange.begin,
                        end: strDates[1] ? moment(strDates[1], format).toDate() : defaultRange.end
                    };
                }
                return {
                    begin: value.begin ? value.begin : defaultRange.begin,
                    end: value.end ? value.end : defaultRange.end
                };
            },
            dispose: function () {
                if (this.helper.isInStage('DISPOSED')) {
                    return;
                }
                if (this.layer) {
                    this.layer.dispose();
                    this.layer = null;
                }
                this.$super(arguments);
            }
        });
    MultiCalendar.defaultProperties = {
        range: {
            begin: new Date(1983, 8, 3),
            end: new Date(2046, 10, 4)
        },
        dateFormat: 'YYYY-MM-DD',
        paramFormat: 'YYYY-MM-DD',
        displayFormat: 'YYYY-MM-DD'
    };
    function paintLayer(multiCalendar, rawValue, state) {
        var prevMonthView = multiCalendar.getChild('prevMonthView');
        var nextMonthView = multiCalendar.getChild('nextMonthView');
        var range = multiCalendar.range;
        var monthViewRanges = getMonthViewRange(range);
        var nextMonthRawValue = moment(multiCalendar.rawValue).add(1, 'month');
        var nextMonth = nextMonthRawValue.month() + 1;
        var nextYear = nextMonthRawValue.year();
        var inLastMonth = moment(rawValue).format('YYYY-MM') === moment(monthViewRanges.nextRange.end).format('YYYY-MM');
        if (!inLastMonth) {
            nextMonthView && nextMonthView.setProperties({
                range: monthViewRanges.nextRange,
                month: nextMonth,
                year: nextYear
            });
            prevMonthView && prevMonthView.setProperties({
                rawValue: rawValue,
                range: monthViewRanges.prevRange
            });
        } else {
            nextMonthView && nextMonthView.setProperties({
                range: monthViewRanges.nextRange,
                rawValue: rawValue
            });
            prevMonthView && prevMonthView.setProperties({
                rawValue: rawValue,
                year: moment(multiCalendar.rawValue).year(),
                month: moment(multiCalendar.rawValue).month()
            });
        }
        if (state === 'render') {
            var rightArrow = prevMonthView.getChild('monthForward').main;
            var leftArrow = nextMonthView.getChild('monthBack').main;
            $(rightArrow).remove();
            $(leftArrow).remove();
            prevMonthView.on('change', u.bind(syncMonthView, multiCalendar));
            prevMonthView.on('changemonth', u.bind(changePrevMonth, multiCalendar));
            nextMonthView.on('change', u.bind(syncMonthView, multiCalendar));
            nextMonthView.on('changemonth', u.bind(changeNextMonth, multiCalendar));
            if (multiCalendar.autoHideLayer) {
                prevMonthView.on('itemclick', u.bind(multiCalendar.layer.toggle, multiCalendar.layer));
                nextMonthView.on('itemclick', u.bind(multiCalendar.layer.toggle, multiCalendar.layer));
            }
        }
    }
    function getMonthViewRange(range) {
        var ranges = {};
        var startDate = moment(range.begin).endOf('month').toDate();
        startDate.setDate(startDate.getDate() + 1);
        var endDate = moment(range.end).startOf('month').toDate();
        endDate.setDate(endDate.getDate() - 1);
        var prevRange = {
                begin: range.begin,
                end: endDate
            };
        var nextRange = {
                begin: startDate,
                end: range.end
            };
        ranges.prevRange = prevRange;
        ranges.nextRange = nextRange;
        return ranges;
    }
    function changePrevMonth(e) {
        var multiCalendar = this;
        var prevMonthView = e.target;
        var nextMonthView = multiCalendar.getChild('nextMonthView');
        var year = prevMonthView.year;
        var month = prevMonthView.month + 1;
        var m = moment(year + '-' + month, 'YYYY-MM').add(1, 'month');
        nextMonthView.setProperties({
            year: m.year(),
            month: m.month() + 1
        });
    }
    function changeNextMonth(e) {
        var multiCalendar = this;
        var nextMonthView = e.target;
        var prevMonthView = multiCalendar.getChild('prevMonthView');
        var m = moment(nextMonthView.year + '-' + nextMonthView.month, 'YYYY-MM');
        prevMonthView.setProperties({
            year: m.year(),
            month: m.month() + 1
        });
    }
    function syncMonthView(e) {
        var currMonthView = e.target;
        var date = currMonthView.getRawValue();
        if (!date) {
            return;
        }
        this.rawValue = date;
        updateDisplayText(this);
        this.fire('change');
    }
    function updateDisplayText(multiCalendar) {
        var textHolder = multiCalendar.helper.getPart('text');
        textHolder.innerHTML = u.escape(moment(multiCalendar.getRawValue()).format(multiCalendar.displayFormat));
    }
    ui.register(MultiCalendar);
    return MultiCalendar;
});

define('ub-ria-ui/selectors/FilterRichSelectorGroup', [
    'require',
    '../util',
    'esui/Panel',
    'esui/painters',
    'eoo',
    'esui'
], function (require) {
    var u = require('../util');
    var Panel = require('esui/Panel');
    var exports = {};
    exports.type = 'FilterRichSelectorGroup';
    exports.getCategory = function () {
        return 'input';
    };
    exports.initOptions = function (options) {
        var properties = { multi: true };
        u.extend(properties, options);
        u.parseBoolean(properties);
        this.$super([properties]);
    };
    exports.initStructure = function () {
        this.helper.initChildren();
        var selectors = this.children;
        u.each(selectors, function (selector) {
            var main = selector.main;
            var role = selector.main.getAttribute('data-ui-role');
            if (role) {
                this[role] = selector;
            }
        }, this);
        this.filter.on('load', function (e) {
            var event = this.fire('load', { item: e.item });
            var data = event.data;
            var selectedItems = u.filter(data, function (item) {
                    return u.findWhere(this.getRawValue(), { id: item.id }) != null;
                }, this);
            this.source.setProperties({
                datasource: data,
                selectedData: selectedItems
            });
        }, this);
        this.source.on('add', function (e) {
            var newSelecteItems;
            if (this.target) {
                newSelecteItems = u.deepClone(this.getRawValue()) || [];
                if (e.item) {
                    if (e.status) {
                        var selectedItem = u.omit(e.item, e.item.isSelected);
                        newSelecteItems.push(selectedItem);
                    } else {
                        newSelecteItems = u.filter(newSelecteItems, function (item) {
                            item.id !== e.item.id;
                        });
                    }
                } else {
                    var selectedItems = e.target.getSelectedItems();
                    newSelecteItems = u.union(newSelecteItems, selectedItems);
                }
                this.target.setProperties({ datasource: newSelecteItems });
            } else {
                newSelecteItems = this.source.getSelectedItems();
            }
            this.rawValue = newSelecteItems;
            this.fire('add');
            this.fire('change');
        }, this);
        this.target && this.target.on('delete', function (arg) {
            var items = arg.items;
            this.source && this.source.selectItems(items, false);
            this.fire('delete');
            this.fire('change');
        }, this);
    };
    exports.repaint = require('esui/painters').createRepaint(Panel.prototype.repaint, {
        name: 'rawValue',
        paint: function (control, rawValue) {
            control.target && control.target.setProperties({ datasource: rawValue });
        }
    }, {
        name: 'filterData',
        paint: function (control, filterData) {
            control.filter && control.filter.setProperties({ datasource: filterData });
        }
    });
    exports.stringifyValue = function (rawValue) {
        var selectedIds = [];
        if (!u.isArray(rawValue)) {
            selectedIds = [rawValue];
        } else {
            u.each(rawValue, function (item) {
                selectedIds.push(item.id);
            });
        }
        return selectedIds.join(',');
    };
    exports.getRawValue = function () {
        if (this.target) {
            return this.target.getRawValue();
        }
        return this.rawValue;
    };
    var FilterRichSelectorGroup = require('eoo').create(Panel, exports);
    require('esui').register(FilterRichSelectorGroup);
    return FilterRichSelectorGroup;
});

define('esui/SearchBox', [
    'require',
    'eoo',
    './lib',
    'esui',
    './Control',
    './painters',
    'underscore',
    'jquery',
    './TextBox',
    './Button'
], function (require) {
    var eoo = require('eoo');
    var lib = require('./lib');
    var esui = require('esui');
    var Control = require('./Control');
    var painters = require('./painters');
    var u = require('underscore');
    var $ = require('jquery');
    require('./TextBox');
    require('./Button');
    var SearchBox = eoo.create(Control, {
            type: 'SearchBox',
            initOptions: function (options) {
                var properties = {
                        searchMode: 'normal',
                        buttonContent: '',
                        buttonVariants: 'primary icon',
                        buttonPosition: 'left',
                        text: '',
                        searched: false,
                        width: ''
                    };
                u.extend(properties, options);
                if (lib.isInput(this.main)) {
                    if (!properties.placeholder) {
                        properties.placeholder = lib.getAttribute(this.main, 'placeholder');
                    }
                    if (!properties.text) {
                        properties.text = this.main.value;
                    }
                    if (!properties.maxLength && (lib.hasAttribute(this.main, 'maxlength') || this.main.maxLength > 0)) {
                        properties.maxLength = this.main.maxLength;
                    }
                }
                if (!properties.title) {
                    properties.title = this.main.title;
                }
                if (properties.text) {
                    properties.searched = true;
                }
                Control.prototype.initOptions.call(this, properties);
            },
            initStructure: function () {
                var tpl = '' + '<div data-ui-type="TextBox" data-ui-mode="text" data-ui-child-name="text"' + 'data-ui-placeholder="${placeholder}" data-ui-icon="${clearClasses}"' + 'data-ui-variants="icon-right" data-ui-width="auto">' + '</div>';
                var addonTPL = getAddonHTML.apply(this);
                if (this.buttonPosition === 'left') {
                    tpl = addonTPL + tpl;
                } else if (this.buttonPosition === 'right') {
                    tpl += addonTPL;
                }
                var html = lib.format(tpl, {
                        placeholder: this.placeholder,
                        clearClasses: this.helper.getIconClass('times-circle')
                    });
                if (lib.isInput(this.main)) {
                    this.helper.replaceMain();
                }
                if (this.buttonPosition) {
                    $(this.main).addClass(this.helper.getPrefixClass('textbox-wrapper'));
                }
                this.main.innerHTML = html;
                this.helper.initChildren(this.main);
            },
            initEvents: function () {
                var textbox = this.getChild('text');
                var me = this;
                textbox.on('input', u.bind(onInput, me));
                textbox.on('keypress', function (e) {
                    if (e.keyCode === 13) {
                        e.preventDefault();
                    }
                });
                textbox.on('enter', function () {
                    me.fire('search');
                });
                textbox.on('iconclick', u.bind(clear, me));
                textbox.on('focus', u.bind(me.addState, me, 'focus'));
                textbox.on('blur', u.bind(me.removeState, me, 'focus'));
                var searchButton = me.getChild('search');
                if (searchButton) {
                    searchButton.on('click', function () {
                        me.fire('search');
                    });
                }
            },
            getValue: function () {
                var text = this.getChild('text');
                return text.getValue();
            },
            repaint: painters.createRepaint(Control.prototype.repaint, painters.attribute('title'), {
                name: [
                    'maxLength',
                    'placeholder',
                    'text',
                    'height',
                    'disabled',
                    'readOnly'
                ],
                paint: function (box, maxLength, placeholder, text, height, disabled, readOnly) {
                    var properties = {
                            maxLength: maxLength,
                            placeholder: placeholder,
                            value: text,
                            height: height,
                            disabled: disabled,
                            readOnly: readOnly
                        };
                    box.getChild('text').setProperties(properties);
                }
            }, {
                name: 'disabled',
                paint: function (box, disabled) {
                    var searchButton = box.getChild('search');
                    searchButton && searchButton.set('disabled', disabled);
                }
            }, {
                name: 'width',
                paint: function (box, width) {
                    if (width && !isNaN(width)) {
                        box.main.style.width = width + 'px';
                    }
                }
            }, {
                name: 'searched',
                paint: function (box, searched) {
                    var method = searched ? 'addState' : 'removeState';
                    box[method]('searched');
                }
            }, {
                name: 'searchMode',
                paint: function (box, searchMode) {
                    box.addState(searchMode);
                }
            }),
            getTextProperty: function () {
                var textbox = this.getChild('text');
                return textbox ? textbox.getValue() : this.text;
            }
        });
    function getAddonHTML() {
        var addonContent = '<span class="${searchIconClasses}"></span>';
        addonContent = '' + '<button data-ui="type:Button;childName:search;variants:${buttonVariants}"' + 'class="${searchClasses}">' + (this.buttonContent ? this.buttonContent : addonContent) + '</button>';
        var tpl = '' + '<div class="${addonClasses}">' + addonContent + '</div>';
        var helper = this.helper;
        return lib.format(tpl, {
            searchIconClasses: helper.getIconClass('search'),
            buttonVariants: this.buttonVariants,
            searchClasses: helper.getPartClassName('search'),
            addonClasses: helper.getPrefixClass('textbox-addon')
        });
    }
    function onInput() {
        var me = this;
        var textbox = this.getChild('text');
        var method = textbox.getValue() ? 'addState' : 'removeState';
        this[method]('searched');
        if (me.searchMode === 'instant') {
            me.fire('search');
        }
    }
    function clear() {
        var textbox = this.getChild('text');
        textbox.setValue('');
        this.removeState('searched');
        if (this.searchMode === 'instant') {
            this.fire('search');
        } else {
            this.fire('clear');
        }
    }
    esui.register(SearchBox);
    return SearchBox;
});

define('ub-ria-ui/selectors/RichSelector', [
    'require',
    'esui/Label',
    'esui/Panel',
    'esui/SearchBox',
    'esui/lib',
    'esui/InputControl',
    'underscore',
    'eoo',
    'esui/painters',
    'esui'
], function (require) {
    require('esui/Label');
    require('esui/Panel');
    require('esui/SearchBox');
    var lib = require('esui/lib');
    var InputControl = require('esui/InputControl');
    var u = require('underscore');
    var eoo = require('eoo');
    var painters = require('esui/painters');
    var esui = require('esui');
    var RichSelector = eoo.create(InputControl, {
            type: 'RichSelector',
            initOptions: function (options) {
                var properties = {
                        hasHead: true,
                        needHeadCount: true,
                        title: '\u6807\u9898\u540D',
                        needBatchAction: false,
                        batchActionLabel: '\u6279\u91CF\u64CD\u4F5C',
                        hasSearchBox: true,
                        hasFoot: true,
                        itemName: '\u7ED3\u679C',
                        emptyText: '\u6CA1\u6709\u76F8\u5E94\u7684\u641C\u7D22\u7ED3\u679C',
                        holdState: false,
                        mode: 'add',
                        multi: true,
                        allowUnselectNode: false
                    };
                u.extend(properties, options);
                this.$super([properties]);
            },
            getHeadHTML: function () {
                var helper = this.helper;
                var actionLink = '';
                var headCount = '';
                if (this.needBatchAction) {
                    var linkClassName = helper.getPartClassName('batch-action-link');
                    var linkId = this.helper.getId('batch-action');
                    actionLink = '' + '<a class="' + linkClassName + '" id="' + linkId + '" >' + this.batchActionLabel + '</a>';
                }
                if (this.hasHead && this.needHeadCount) {
                    var countClass = helper.getPartClassName('head-count');
                    headCount = '<span class="' + countClass + '" data-ui="type:Label;childName:headTotalCount;title:;"></span>';
                }
                var head = [
                        '<div data-ui="type:Panel;childName:head;"',
                        ' class="${headClass}">',
                        '<span class="${headTitleClass}" data-ui="type:Label;childName:title;title:;">',
                        '${title}</span>${totalCount}',
                        '${actionLink}',
                        '</div>'
                    ].join('\n');
                head = lib.format(head, {
                    headClass: helper.getPartClassName('head'),
                    headTitleClass: helper.getPartClassName('head-title'),
                    title: this.title,
                    actionLink: actionLink,
                    totalCount: headCount
                });
                return head;
            },
            getFootHTML: function () {
                return [
                    '<div data-ui="type:Panel;childName:foot;"',
                    ' class="' + this.helper.getPartClassName('foot') + '">',
                    '<span data-ui="type:Label;childName:totalCount">',
                    '</span>',
                    '</div>'
                ].join('\n');
            },
            getSearchBoxHTML: function () {
                return [
                    '<div data-ui="type:Panel;childName:searchBoxArea"',
                    ' class="' + this.helper.getPartClassName('search-wrapper') + '">',
                    '    <div data-ui="type:SearchBox;childName:itemSearch;" ',
                    '      data-ui-button-variants="bordered icon"></div>',
                    '</div>'
                ].join('');
            },
            initStructure: function () {
                var tpl = [
                        '${head}',
                        '<div data-ui="type:Panel;childName:body;" class="${bodyClass}">',
                        '    ${searchInput}',
                        '    <div data-ui="type:Panel;childName:content" class="${contentClass}">',
                        '        <div data-ui="type:Label;childName:emptyText" ',
                        '           class="${emptyTextClass}">${emptyText}</div>',
                        '        <div data-ui="type:Panel;childName:queryList" class="${queryListClass}"></div>',
                        '    </div>',
                        '</div>',
                        '${footInfo}'
                    ];
                this.main.innerHTML = lib.format(tpl.join('\n'), {
                    head: this.hasHead ? this.getHeadHTML() : '',
                    bodyClass: this.helper.getPartClassName('body'),
                    searchInput: this.hasSearchBox ? this.getSearchBoxHTML() : '',
                    contentClass: this.helper.getPartClassName('content-wrapper'),
                    emptyTextClass: this.helper.getPartClassName('empty-text'),
                    emptyText: this.emptyText,
                    queryListClass: this.helper.getPartClassName('query-list'),
                    footInfo: this.hasFoot ? this.getFootHTML() : ''
                });
                this.initChildren();
                this.addState(this.mode || 'delete');
                if (this.needBatchAction) {
                    this.helper.addDOMEvent(this.helper.getPart('batch-action'), 'click', u.bind(this.batchAction, this));
                }
                if (this.hasSearchBox) {
                    this.addState('has-search');
                    var searchBox = this.getSearchBox();
                    searchBox.on('search', u.bind(search, this));
                    searchBox.on('clear', u.bind(this.clearQuery, this));
                }
                var queryList = this.getQueryList().main;
                this.helper.addDOMEvent(queryList, 'click', u.bind(this.eventDispatcher, this));
            },
            eventDispatcher: function (e) {
                return false;
            },
            search: function (args) {
                var filterData = [];
                var event = this.fire('search', filterData);
                if (!event.isDefaultPrevented()) {
                    var searchBox = this.getSearchBox();
                    if (searchBox) {
                        var defaultFilter = { value: lib.trim(searchBox.getValue()) };
                        filterData.push(defaultFilter);
                    }
                }
                if (filterData.length) {
                    this.queryItem(filterData);
                    this.refreshFoot();
                    this.refreshHead();
                    this.addState('queried');
                } else {
                    this.clearQuery();
                }
            },
            clearQuery: function () {
                resetSearchState(this);
                this.clearData();
                this.refreshContent();
                this.refreshFoot();
                this.refreshHead();
                this.fire('clearquery');
                return false;
            },
            getContent: function () {
                var body = this.getChild('body');
                if (body) {
                    return body.getChild('content');
                }
                return null;
            },
            getKeyword: function () {
                var searchBox = this.getSearchBox();
                var isQuery = this.isQuery();
                if (searchBox && isQuery) {
                    return lib.trim(searchBox.getValue());
                }
                return null;
            },
            getQueryList: function () {
                var content = this.getContent();
                if (content) {
                    return content.getChild('queryList');
                }
                return null;
            },
            getSearchBox: function () {
                var searchBoxArea = this.getChild('body').getChild('searchBoxArea');
                if (searchBoxArea) {
                    return searchBoxArea.getChild('itemSearch');
                }
            },
            getTotalCountPanel: function () {
                var foot = this.getChild('foot');
                if (!foot) {
                    return null;
                }
                return foot.getChild('totalCount');
            },
            getHeadTotalCountPanel: function () {
                var head = this.getChild('head');
                if (!head) {
                    return null;
                }
                return head.getChild('headTotalCount');
            },
            isQuery: function () {
                return this.hasState('queried');
            },
            batchAction: function () {
                if (this.mode === 'delete') {
                    this.deleteAll();
                    this.refreshFoot();
                    this.refreshHead();
                } else if (this.mode === 'add') {
                    this.selectAll();
                }
                return false;
            },
            deleteAll: function () {
                return false;
            },
            addAll: function () {
                return false;
            },
            adaptData: function () {
            },
            refresh: function () {
                var adaptedData = this.adaptData();
                var needRefreshContent = true;
                if (this.hasSearchBox && this.isQuery()) {
                    if (this.holdState) {
                        this.search(this.getKeyword());
                        needRefreshContent = false;
                    } else {
                        resetSearchState(this);
                    }
                }
                if (needRefreshContent) {
                    this.refreshContent();
                    this.processDataAfterRefresh(adaptedData);
                    this.refreshFoot();
                    this.refreshHead();
                }
            },
            processDataAfterRefresh: function (adaptedData) {
            },
            refreshFoot: function () {
                if (!this.hasFoot) {
                    return;
                }
                var count = this.getCurrentStateItemsCount();
                var totalCountPanel = this.getTotalCountPanel();
                if (totalCountPanel) {
                    var itemName = u.escape(this.itemName);
                    totalCountPanel.setText('\u5171 ' + count + ' \u4E2A' + itemName);
                }
            },
            refreshHead: function () {
                if (!this.hasHead || !this.needHeadCount) {
                    return;
                }
                var count = this.getCurrentStateItemsCount();
                var totalCountPanel = this.getHeadTotalCountPanel();
                if (totalCountPanel) {
                    totalCountPanel.setText('\uFF08' + count + '\uFF09');
                }
            },
            getCurrentStateItemsCount: function () {
                return 0;
            },
            repaint: painters.createRepaint(InputControl.prototype.repaint, {
                name: 'title',
                paint: function (control, title) {
                    var head = control.getChild('head');
                    var titleLabel = head && head.getChild('title');
                    titleLabel && titleLabel.setText(title);
                }
            }, painters.style('width')),
            getSelectedItems: function () {
                return [];
            },
            getSelectedItemsFullStructure: function () {
                return {};
            },
            selectItems: function (items, toBeSelected) {
            },
            setRawValue: function (value) {
                if (!u.isArray(value)) {
                    value = [value];
                }
                if (!this.multi && value.length > 1) {
                    value = value.slice(0);
                }
                this.selectItems(value, true);
            },
            getRawValue: function () {
                var selectedItems = this.getSelectedItems();
                if (!this.multi) {
                    return selectedItems[0];
                }
                return selectedItems;
            },
            stringifyValue: function (rawValue) {
                var selectedIds = [];
                if (!u.isArray(rawValue)) {
                    selectedIds = [rawValue];
                } else {
                    u.each(rawValue, function (item) {
                        selectedIds.push(item.id);
                    });
                }
                return selectedIds.join(',');
            }
        });
    function search(e) {
        this.search();
    }
    function resetSearchState(control) {
        control.removeState('queried');
        var searchBox = control.getSearchBox();
        if (searchBox) {
            searchBox.set('text', '');
        }
    }
    esui.register(RichSelector);
    return RichSelector;
});

define('ub-ria-ui/selectors/RichSelectorGroup', [
    'require',
    'eoo',
    'esui/Panel',
    'esui',
    'underscore'
], function (require) {
    var eoo = require('eoo');
    var Panel = require('esui/Panel');
    var esui = require('esui');
    var u = require('underscore');
    var RichSelectorGroup = eoo.create(Panel, {
            type: 'RichSelectorGroup',
            getCategory: function () {
                return 'input';
            },
            initStructure: function () {
                this.helper.initChildren();
            },
            initEvents: function () {
                var filter = this.getChild('filter');
                var source = this.getChild('source');
                var target = this.getChild('target');
                filter && filter.on('load', this.fire.bind(this, 'load'));
                source && source.on('add', u.bind(function (e) {
                    var newdata = e.target.getSelectedItemsFullStructure();
                    target && target.setProperties({ datasource: newdata });
                    this.fire('add');
                    this.fire('change');
                }, this));
                target && target.on('delete', u.bind(function (event, data) {
                    source && source.selectItems(data.items, false);
                    this.fire('delete');
                    this.fire('change');
                }, this));
            },
            getRealTargetSelector: function () {
                var source = this.getChild('source');
                var target = this.getChild('target');
                if (target) {
                    return target;
                }
                return source;
            },
            getValue: function () {
                return this.getRealTargetSelector().getValue();
            },
            getRawValue: function () {
                return this.getRealTargetSelector().getRawValue();
            },
            validate: function () {
                var target = this.getRealTargetSelector();
                if (typeof target.validate === 'function') {
                    return target.validate();
                }
            }
        });
    esui.register(RichSelectorGroup);
    return RichSelectorGroup;
});

define('esui/TreeStrategy', [
    'require',
    'underscore',
    'eoo'
], function (require) {
    var u = require('underscore');
    var eoo = require('eoo');
    var TreeStrategy = eoo.create({
            constructor: function (options) {
                var defaults = { defaultExpand: false };
                u.extend(this, defaults, options);
            },
            isLeafNode: function (node) {
                return !node.children || !node.children.length;
            },
            shouldExpand: function (node) {
                return this.defaultExpand;
            },
            attachTo: function (tree) {
                this.enableToggleStrategy(tree);
                this.enableSelectStrategy(tree);
            },
            enableToggleStrategy: function (tree) {
                tree.on('expand', function (e, data) {
                    this.expandNode(data.node.id);
                });
                tree.on('collapse', function (e, data) {
                    this.collapseNode(data.node.id, false);
                });
            },
            enableSelectStrategy: function (tree) {
                tree.on('select', function (e, data) {
                    this.selectNode(data.node.id);
                });
                tree.on('unselect', function (e, data) {
                    if (tree.get('allowUnselectNode')) {
                        tree.unselectNode(data.node.id);
                    }
                });
            }
        });
    return TreeStrategy;
});

define('ub-ria-ui/selectors/SelectorTreeStrategy', [
    'require',
    'esui/lib',
    'esui/TreeStrategy',
    'eoo',
    'underscore'
], function (require) {
    var lib = require('esui/lib');
    var TreeStrategy = require('esui/TreeStrategy');
    var eoo = require('eoo');
    var u = require('underscore');
    var SelectorTreeStrategy = eoo.create(TreeStrategy, {
            constructor: function (options) {
                var defaults = {
                        defaultExpand: true,
                        orientExpand: false
                    };
                u.extend(this, defaults, options);
            },
            isLeafNode: function (node) {
                return !node.children;
            },
            shouldExpand: function (node) {
                if (this.orientExpand) {
                    return !node.isSelected;
                }
                return this.defaultExpand;
            },
            enableSelectStrategy: function (tree) {
                var treeStrategy = this;
                tree.on('select', function (e, data) {
                    var canSelect = true;
                    var isLeafNode = treeStrategy.isLeafNode(data.node);
                    if (treeStrategy.mode !== 'load') {
                        if (treeStrategy.onlyLeafSelect && !isLeafNode) {
                            canSelect = false;
                        }
                    } else {
                        if (!isLeafNode) {
                            canSelect = false;
                        }
                    }
                    if (canSelect) {
                        this.selectNode(data.node.id);
                    }
                });
                tree.on('unselect', function (e, data) {
                    if (tree.get('allowUnselectNode')) {
                        tree.unselectNode(data.node.id);
                    }
                });
            }
        });
    return SelectorTreeStrategy;
});

define('ub-ria-ui/selectors/TableRichSelector', [
    'require',
    'esui',
    'esui/lib',
    'underscore',
    'eoo',
    'esui/painters',
    './RichSelector'
], function (require) {
    var esui = require('esui');
    var lib = require('esui/lib');
    var u = require('underscore');
    var eoo = require('eoo');
    var painters = require('esui/painters');
    var RichSelector = require('./RichSelector');
    var TableRichSelector = eoo.create(RichSelector, {
            type: 'TableRichSelector',
            styleType: 'RichSelector',
            initOptions: function (options) {
                var properties = {
                        firedOnIcon: false,
                        datasource: [],
                        selectedData: [],
                        fields: [{
                                field: 'name',
                                title: '\u540D\u79F0',
                                content: 'name',
                                searchScope: 'partial',
                                isDefaultSearchField: true
                            }],
                        hasRowHead: true
                    };
                u.extend(properties, options);
                this.$super([properties]);
            },
            initStructure: function () {
                this.$super(arguments);
                lib.addClass(this.main, this.helper.getPrefixClass('tablerichselector'));
            },
            repaint: painters.createRepaint(RichSelector.prototype.repaint, {
                name: [
                    'datasource',
                    'selectedData',
                    'disabledData',
                    'fields'
                ],
                paint: function (control, datasource, selectedData, disabledData, fields) {
                    control.refresh();
                    control.fire('change');
                }
            }),
            adaptData: function () {
                this.allData = lib.deepClone(this.datasource);
                var indexData = {};
                u.each(this.allData, function (item, index) {
                    indexData[item.id] = { index: index };
                });
                var selectedData = this.selectedData || [];
                if (!this.multi) {
                    if (!u.isArray(selectedData)) {
                        this.currentSelectedId = selectedData;
                        selectedData = [{ id: selectedData }];
                    } else if (selectedData.length) {
                        this.currentSelectedId = selectedData[0].id;
                    }
                }
                u.each(selectedData, function (item, index) {
                    if (indexData[item.id] !== undefined) {
                        indexData[item.id].isSelected = true;
                    }
                });
                var disabledData = this.disabledData || [];
                u.each(disabledData, function (item, index) {
                    if (indexData[item.id] !== undefined) {
                        indexData[item.id].isDisabled = true;
                    }
                });
                this.indexData = indexData;
                this.fieldsIndex = {};
                this.defaultSearchFields = [];
                u.each(this.fields, function (field) {
                    this.fieldsIndex[field.field] = field;
                    if (field.isDefaultSearchField) {
                        this.defaultSearchFields.push(field.field);
                    }
                }, this);
                return {
                    allData: this.allData,
                    indexData: this.indexData
                };
            },
            refreshContent: function () {
                var data = this.isQuery() ? this.queriedData : this.allData;
                if (!data || data.length === 0) {
                    this.addState('empty');
                } else {
                    this.removeState('empty');
                }
                var htmlArray = [];
                if (this.hasRowHead) {
                    htmlArray.push(this.createTableHead());
                }
                htmlArray.push(this.createTableContent(data));
                var queryList = this.getQueryList();
                queryList.setContent(htmlArray.join(''));
            },
            createTableHead: function () {
                var tableClass = this.helper.getPartClassName('head-table');
                var tableId = this.helper.getId('head-table');
                var tpl = ['<table border=0 class="' + tableClass + '" id="' + tableId + '"><tr>'];
                var colmNum = this.fields.length;
                for (var i = 0; i < colmNum; i++) {
                    var field = this.fields[i];
                    tpl.push('' + '<th class="th' + i + '"' + ' style="width:' + field.width + 'px;">' + field.title || '' + '</th>');
                }
                tpl.push('<th></th>');
                tpl.push('</tr></table>');
                return tpl.join(' ');
            },
            rowTpl: '<tr id="${rowId}" class="${rowClass}" index="${index}">${content}</tr>',
            createTableContent: function (data) {
                var indexData = this.indexData;
                var helper = this.helper;
                var tableClasses = helper.getPartClassName('content-table');
                var tableId = helper.getId('content-table');
                var tpl = ['<table border=0 class="' + tableClasses + '" id="' + tableId + '">'];
                var baseRowClasses = helper.getPartClassName('row');
                var selectedRowClasses = helper.getPartClassName('row-selected');
                var disabledRowClasses = helper.getPartClassName('row-disabled');
                u.each(data, function (item, index) {
                    var rowClasses = [baseRowClasses];
                    var indexItem = indexData[item.id];
                    if (indexItem.isSelected) {
                        rowClasses.push(selectedRowClasses);
                    }
                    if (indexItem.isDisabled) {
                        rowClasses.push(disabledRowClasses);
                    }
                    tpl.push(lib.format(this.rowTpl, {
                        rowId: this.helper.getId('row-' + item.id),
                        rowClass: rowClasses.join(' '),
                        index: indexItem.index,
                        content: createRow(this, item, index)
                    }));
                }, this);
                tpl.push('</table>');
                return tpl.join(' ');
            },
            eventDispatcher: function (e) {
                var tar = e.target;
                var helper = this.helper;
                var rowClasses = helper.getPartClassName('row');
                var actionClasses = helper.getPartClassName('row-action-icon');
                while (tar && tar !== document.body) {
                    var rowDOM;
                    if (this.hasIcon && this.fireOnIcon && lib.hasClass(tar, actionClasses)) {
                        rowDOM = tar.parentNode;
                    } else {
                        if (lib.hasClass(tar, rowClasses)) {
                            rowDOM = tar;
                        }
                    }
                    if (rowDOM) {
                        this.operateRow(rowDOM);
                        return;
                    }
                    tar = tar.parentNode;
                }
            },
            operateRow: function (row) {
                var disabledClasses = this.helper.getPartClassName('row-disabled');
                if (lib.hasClass(row, disabledClasses)) {
                    return;
                }
                var index = parseInt(row.getAttribute('index'), 10);
                var item = this.allData[index];
                if (!item) {
                    return;
                }
                if (this.mode === 'add') {
                    actionForAdd(this, row, item);
                } else if (this.mode === 'delete') {
                    actionForDelete(this, row, item);
                } else if (this.mode === 'load') {
                    actionForLoad(this, row, item);
                }
            },
            selectAll: function () {
                var data = this.isQuery() ? this.queriedData : this.allData;
                var control = this;
                u.each(data, function (item) {
                    selectItem(control, item.id, true);
                });
                this.fire('add');
                this.fire('change');
            },
            selectItems: function (items, toBeSelected) {
                var indexData = this.indexData;
                var control = this;
                u.each(items, function (item) {
                    var id = item.id !== undefined ? item.id : item;
                    var itemIndex = indexData[id];
                    if (itemIndex !== null && itemIndex !== undefined) {
                        selectItem(control, id, toBeSelected);
                    }
                });
            },
            deleteAll: function () {
                var items = u.clone(this.datasource);
                this.set('datasource', []);
                this.fire('delete', { items: items });
                this.fire('change');
            },
            queryItem: function (filters) {
                filters = filters || [];
                function checkHitByFilterItem(field, expectValue, data) {
                    var hit = false;
                    if (typeof expectValue === 'string') {
                        expectValue = lib.trim(expectValue);
                    }
                    if (this.fieldsIndex[field].searchScope === 'partial') {
                        if (data[field].indexOf(expectValue) !== -1) {
                            hit = true;
                        }
                    } else if (data[field] === expectValue) {
                        hit = true;
                    }
                    return hit;
                }
                function checkRowHit(data, index) {
                    return !u.any(filters, function (filter) {
                        var searchFields = [];
                        if (filter.keys === undefined) {
                            searchFields = this.defaultSearchFields;
                        } else {
                            searchFields = filter.keys;
                        }
                        return !u.any(searchFields, function (searchField) {
                            return checkHitByFilterItem.call(this, searchField, filter.value, data);
                        }, this);
                    }, this);
                }
                this.queriedData = u.filter(this.allData, checkRowHit, this);
                this.afterQueryHandler();
            },
            afterQueryHandler: function () {
                this.addState('queried');
                this.refreshContent();
            },
            clearData: function () {
                this.queriedData = [];
            },
            getSelectedItems: function () {
                var rawData = this.datasource;
                var indexData = this.indexData;
                var mode = this.mode;
                if (mode === 'delete') {
                    return this.allData;
                }
                var selectedData = u.filter(rawData, function (item, index) {
                        return indexData[item.id].isSelected;
                    });
                return selectedData;
            },
            getSelectedItemsFullStructure: function () {
                return this.getSelectedItems();
            },
            getCurrentStateItemsCount: function () {
                var data = this.isQuery() ? this.queriedData : this.allData;
                data = data || [];
                return data.length;
            }
        });
    function createRow(control, item, index, tr) {
        var fields = control.fields;
        var html = [];
        var fieldClasses = control.helper.getPartClassName('row-field');
        var cursor = 0;
        u.each(fields, function (field, i) {
            var content = field.content;
            var innerHTML = 'function' === typeof content ? content.call(control, item, index, i) : u.escape(item[content]);
            if (tr) {
                var td = tr.insertCell(i);
                td.style.width = field.width + 'px';
                td.title = innerHTML;
                td.innerHTML = innerHTML;
            } else {
                var contentHtml = '' + '<td class="' + fieldClasses + '" title="' + innerHTML + '" style="width:' + field.width + 'px;">' + innerHTML + '</td>';
                html.push(contentHtml);
            }
            cursor++;
        });
        var arrowClasses = control.helper.getPartClassName('row-action-icon') + ' ' + control.helper.getIconClass();
        var arrowHTML = '<span class="' + arrowClasses + '"></span>';
        if (tr) {
            var td = tr.insertCell(cursor);
            td.innerHTML = arrowHTML;
        } else {
            html.push('<td>' + arrowHTML + '</td>');
            return html.join(' ');
        }
    }
    function actionForAdd(control, row, item) {
        var selectedClasses = control.helper.getPartClassName('row-selected');
        var fire = false;
        var eventArgs = {
                item: item,
                status: 1
            };
        if (lib.hasClass(row, selectedClasses)) {
            if (control.allowUnselectNode) {
                selectItem(control, item.id, false);
                fire = true;
                eventArgs.status = -1;
            }
        } else {
            selectItem(control, item.id, true);
            fire = true;
        }
        if (fire) {
            control.fire('add', eventArgs);
            control.fire('change');
        }
    }
    function selectItem(control, id, toBeSelected) {
        if (!control.multi) {
            unselectCurrent(control);
            control.currentSelectedId = toBeSelected ? id : null;
        }
        updateSingleItemStatus(control, id, toBeSelected);
    }
    function unselectCurrent(control) {
        var curId = control.currentSelectedId;
        updateSingleItemStatus(control, curId, false);
        control.currentSelectedId = null;
    }
    function updateSingleItemStatus(control, id, toBeSelected) {
        var indexItem = control.indexData[id];
        if (!indexItem) {
            return;
        }
        indexItem.isSelected = toBeSelected;
        var itemDOM = control.helper.getPart('row-' + id);
        var changeClass = toBeSelected ? lib.addClass : lib.removeClass;
        changeClass(itemDOM, control.helper.getPartClassName('row-selected'));
    }
    function actionForDelete(control, row, item) {
        deleteItem(control, item.id);
        control.fire('delete', { items: [item] });
        control.fire('change');
    }
    function deleteItem(control, id) {
        var indexData = control.indexData;
        var index = indexData[id].index;
        var newData = [].slice.call(control.datasource, 0);
        newData.splice(index, 1);
        control.set('datasource', newData);
    }
    function actionForLoad(control, row, item) {
        var selectedClasses = control.helper.getPartClassName('row-selected');
        if (!lib.hasClass(row, selectedClasses)) {
            selectItem(control, item.id, true);
            control.fire('load', { item: item });
            control.fire('change');
        }
    }
    esui.register(TableRichSelector);
    return TableRichSelector;
});

define('ub-ria-ui/selectors/TableRichSelectorWithFilter', [
    'require',
    'esui',
    'esui/lib',
    'underscore',
    'eoo',
    'esui/painters',
    'esui/Select',
    'esui/Panel',
    './TableRichSelector'
], function (require) {
    var esui = require('esui');
    var lib = require('esui/lib');
    var u = require('underscore');
    var eoo = require('eoo');
    var painters = require('esui/painters');
    require('esui/Select');
    require('esui/Panel');
    var TableRichSelector = require('./TableRichSelector');
    var TableRichSelectorWithFilter = eoo.create(TableRichSelector, {
            type: 'TableRichSelectorWithFilter',
            styleType: 'RichSelector',
            createTableHead: function () {
                var tableClass = this.helper.getPartClassName('head-table');
                var tpl = ['<table border=0 class="' + tableClass + '"><tr>'];
                var colmNum = this.fields.length;
                for (var i = 0; i < colmNum; i++) {
                    var field = this.fields[i];
                    if (field.field !== this.filterField) {
                        tpl.push('' + '<th class="th' + i + '"' + ' style="width:' + field.width + 'px;">' + field.title || '' + '</th>');
                    } else {
                        tpl.push('' + '<th class="th' + i + '" style="width:' + field.width + 'px;">' + '    <div data-ui="type:Select;childName:filterSel;variants:compact;"></div>' + '</th>');
                    }
                }
                tpl.push('<th></th>');
                tpl.push('</tr></table>');
                return tpl.join(' ');
            },
            getSearchBoxHTML: function () {
                var searchBoxHTML = this.$super(arguments);
                var filterHTML = '<div class="${queryListClass}" data-ui-type="Panel"' + ' data-ui-child-name="filter"></div>';
                filterHTML = lib.format(filterHTML, { queryListClass: this.helper.getPrefixClass('richselector-query-list') });
                return searchBoxHTML + filterHTML;
            },
            refreshFilter: function () {
                var filter = this.getFilter();
                filter.setContent(this.createTableHead());
                var filterSelect = filter.getChild('filterSel');
                if (filterSelect) {
                    filterSelect.setProperties({ datasource: this.filterDatasource });
                    filterSelect.on('change', u.bind(this.search, this));
                }
            },
            repaint: painters.createRepaint(TableRichSelector.prototype.repaint, {
                name: 'fields',
                paint: function (control, fields) {
                    control.refreshFilter();
                }
            }),
            initStructure: function () {
                this.$super(arguments);
                this.addState('with-filter');
            },
            refreshContent: function () {
                this.hasRowHead = false;
                this.$super(arguments);
            },
            search: function (args) {
                var filterData = [];
                var searchBox = this.getSearchBox();
                if (searchBox) {
                    filterData.push({ value: lib.trim(searchBox.getValue()) });
                }
                var filterSelect = this.getFilter().getChild('filterSel');
                if (filterSelect) {
                    var value = filterSelect.getValue();
                    if (value && value !== '') {
                        filterData.push({
                            keys: [this.filterField],
                            value: filterSelect.getValue()
                        });
                    }
                }
                if (filterData.length) {
                    this.queryItem(filterData);
                    this.refreshFoot();
                    this.refreshHead();
                    this.addState('queried');
                } else {
                    this.clearQuery();
                }
            },
            getFilter: function () {
                return this.getChild('body').getChild('filter');
            }
        });
    esui.register(TableRichSelectorWithFilter);
    return TableRichSelectorWithFilter;
});

define('ub-ria-ui/TogglePanel', [
    'require',
    'esui/Control',
    'esui',
    'eoo',
    'esui/painters',
    'underscore',
    'esui/Layer',
    'jquery',
    'esui/Panel'
], function (require) {
    var Control = require('esui/Control');
    var esui = require('esui');
    var eoo = require('eoo');
    var painters = require('esui/painters');
    var u = require('underscore');
    var Layer = require('esui/Layer');
    var $ = require('jquery');
    require('esui/Panel');
    var TogglePanel = eoo.create(Control, {
            type: 'TogglePanel',
            initOptions: function (options) {
                var defaults = {
                        expanded: false,
                        position: 'layer'
                    };
                var properties = u.extend(defaults, options);
                this.setProperties(properties);
            },
            initStructure: function () {
                var $children = $(this.main).children();
                var titleElem = $children[0];
                var contentElem = $children[1];
                initTitle.call(this, titleElem);
                var position = this.position;
                initContentPanel.call(this, contentElem);
                if (position === 'layer') {
                    initContentLayer.call(this, contentElem, titleElem);
                }
            },
            toggleContent: function () {
                this.toggleStates();
                this.fire('change');
            },
            toggleStates: function () {
                this.setProperties({ expanded: !this.expanded });
            },
            initEvents: function () {
                var me = this;
                me.$super(arguments);
                var titlePanel = me.getChild('title');
                me.helper.addDOMEvent(titlePanel.main, 'click', u.bind(onToggle, me));
            },
            repaint: painters.createRepaint(Control.prototype.repaint, {
                name: 'title',
                paint: function (panel, title) {
                    panel.getChild('title').set('content', title);
                }
            }, {
                name: 'content',
                paint: function (panel, content) {
                    panel.getChild('content').set('content', content);
                }
            }, {
                name: 'expanded',
                paint: function (panel, expanded) {
                    var layerMode = panel.position === 'layer';
                    var method = expanded ? 'addState' : 'removeState';
                    panel[method]('expanded');
                    panel[method]('active');
                    method = expanded ? 'show' : 'hide';
                    if (layerMode) {
                        panel.layer[method]();
                    } else {
                        panel.getChild('content')[method]();
                    }
                }
            }, painters.style('height'), painters.style('height')),
            isExpanded: function () {
                return this.hasState('expanded');
            }
        });
    function initTitle(titleElem) {
        var titlePanel = esui.create('Panel', { main: titleElem });
        this.helper.addPartClasses('title', titlePanel.main);
        this.addChild(titlePanel, 'title');
        titlePanel.render();
        this.set('title', titleElem && titleElem.innerHTML);
    }
    function initContentPanel(contentElem) {
        var options = {
                main: contentElem,
                childName: 'content',
                viewContext: this.viewContext,
                renderOptions: this.renderOptions
            };
        var contentPanel = esui.create('Panel', options);
        this.helper.addPartClasses('content', contentPanel.main);
        this.addChild(contentPanel, 'content');
        contentPanel.render();
    }
    function initContentLayer(contentElem, titleElem) {
        var me = this;
        contentElem.id = me.helper.getId('layer');
        var layer = new Layer(me);
        me.layer = layer;
        layer.prepareLayer(contentElem);
        layer.on('hide', function () {
            me.setProperties({ expanded: false });
        });
        layer.autoCloseExcludeElements = [titleElem];
    }
    function onToggle() {
        this.toggleContent();
    }
    esui.register(TogglePanel);
    return TogglePanel;
});

define('ub-ria-ui/selectors/ToggleSelector', [
    'require',
    'jquery',
    'esui',
    'esui/lib',
    'underscore',
    '../TogglePanel',
    'eoo'
], function (require) {
    var $ = require('jquery');
    var esui = require('esui');
    var lib = require('esui/lib');
    var u = require('underscore');
    var TogglePanel = require('../TogglePanel');
    var eoo = require('eoo');
    var ToggleSelector = eoo.create(TogglePanel, {
            type: 'ToggleSelector',
            getCategory: function () {
                return 'input';
            },
            initOptions: function (options) {
                var properties = {
                        textField: null,
                        collapseAfterChange: true
                    };
                options = u.extend(properties, options);
                this.$super(arguments);
            },
            initStructure: function () {
                var me = this;
                var controlHelper = this.helper;
                me.$super(arguments);
                var $mainElement = $(me.main);
                var $children = $mainElement.children();
                var $text = $children.eq(0);
                var $contentLayer = $children.eq(1);
                var $caret = $('<span></span>').addClass(controlHelper.getPrefixClass('select-arrow') + ' ' + controlHelper.getIconClass());
                $mainElement.addClass(controlHelper.getPrefixClass('select'));
                $text.addClass(controlHelper.getPrefixClass('select-text'));
                $mainElement.append($caret);
                $contentLayer.insertAfter($mainElement);
            },
            initEvents: function () {
                var me = this;
                var target = me.viewContext.getSafely(me.targetControl);
                var controlHelper = me.helper;
                target.on('change', u.bind(changeHandler, me));
                target.on('add', u.bind(addHandler, me));
                me.updateDisplayText(target);
                controlHelper.addDOMEvent(me.main, 'click', me.toggleContent);
            },
            toggleContent: function () {
                if (!this.isDisabled()) {
                    this.toggleStates();
                }
            },
            updateDisplayText: function (target) {
                var displayText = this.title;
                if (target.helper.isInStage('RENDERED')) {
                    var rawValue = target.getRawValue();
                    if (u.isArray(rawValue)) {
                        rawValue = rawValue[0];
                    }
                    if (rawValue && rawValue[this.textField]) {
                        displayText = rawValue[this.textField];
                    }
                }
                this.set('title', u.escape(displayText));
            },
            getRawValue: function () {
                var target = this.viewContext.getSafely(this.targetControl);
                var rawValue = target.getRawValue();
                if (rawValue) {
                    return rawValue[this.valueField];
                }
            },
            setRawValue: function (value) {
                var target = this.viewContext.getSafely(this.targetControl);
                target.setRawValue(value);
            },
            getValue: function () {
                return this.getRawValue();
            },
            setValue: function (value) {
                var rawValue = [{ id: value }];
                this.setRawValue(rawValue);
            },
            validate: function () {
                var target = this.viewContext.get(this.targetControl);
                if (!target) {
                    return true;
                }
                if (typeof target.validate === 'function') {
                    return target.validate();
                }
            }
        });
    function changeHandler(e) {
        var event = this.fire('change');
        if (!event.isDefaultPrevented()) {
            this.updateDisplayText(e.target);
        }
    }
    function addHandler(e) {
        if (this.collapseAfterChange) {
            this.toggleContent();
        }
    }
    esui.register(ToggleSelector);
    return ToggleSelector;
});

define('esui/Tree', [
    'require',
    'eoo',
    './main',
    './Control',
    './lib',
    'underscore',
    './painters',
    'jquery',
    './TreeStrategy'
], function (require) {
    var eoo = require('eoo');
    var esui = require('./main');
    var Control = require('./Control');
    var lib = require('./lib');
    var u = require('underscore');
    var painters = require('./painters');
    var $ = require('jquery');
    var TreeStrategy = require('./TreeStrategy');
    var NullTreeStrategy = eoo.create(TreeStrategy, {
            attachTo: function () {
            }
        });
    var INDICATOR_TEXT_MAPPING = {
            collapsed: '\u5C55\u5F00',
            expanded: '\u6536\u8D77',
            busy: '\u52A0\u8F7D\u4E2D',
            empty: '\u65E0\u5185\u5BB9'
        };
    var Tree = eoo.create(Control, {
            type: 'Tree',
            initOptions: function (options) {
                var defaults = {
                        datasource: {},
                        selectMode: 'single',
                        hideRoot: false,
                        strategy: new NullTreeStrategy(),
                        selectedNodes: [],
                        selectedNodeIndex: {},
                        checkboxes: false
                    };
                var properties = u.extend(defaults, options);
                if (properties.allowUnselectNode == null) {
                    properties.allowUnselectNode = properties.selectMode !== 'single';
                }
                this.setProperties(properties);
            },
            itemTemplate: '<span>${text}</span>',
            getItemHTML: function (node) {
                var data = {
                        id: u.escape(node.id),
                        text: u.escape(node.text)
                    };
                return lib.format(this.itemTemplate, data);
            },
            clickNode: function (e) {
                toggleAndSelectNode.apply(this, arguments);
            },
            initStructure: function () {
                this.strategy.attachTo(this);
            },
            initEvents: function () {
                this.helper.addDOMEvent(this.main, 'click', this.clickNode);
            },
            removeNodeFromIndex: function (id) {
                var node = this.nodeIndex[id];
                if (!node) {
                    return;
                }
                this.nodeIndex[id] = undefined;
                if (!node.children) {
                    return;
                }
                u.each(node.children, this.removeNodeFromIndex, this);
            },
            repaint: painters.createRepaint(Control.prototype.repaint, {
                name: 'datasource',
                paint: function (tree, datasource) {
                    tree.selectedNodes = [];
                    tree.selectedNodeIndex = {};
                    tree.nodeIndex = buildNodeIndex(datasource);
                    tree.main.innerHTML = getNodeHTML(tree, datasource, 0, true, 'div');
                }
            }, {
                name: 'hideRoot',
                paint: function (tree, hideRoot) {
                    var method = hideRoot ? 'addState' : 'removeState';
                    tree[method]('hide-root');
                }
            }),
            triggerSelectStrategy: function (id) {
                var node = this.nodeIndex[id];
                if (!node) {
                    return;
                }
                if (this.selectedNodeIndex[id]) {
                    this.fire('unselect', { node: node });
                } else {
                    this.fire('select', { node: node });
                }
            },
            getSelectedNodes: function () {
                return this.selectedNodes.slice();
            },
            toggleNodeSelection: function (id) {
                var method = this.selectedNodeIndex[id] ? 'unselectNode' : 'selectNode';
                this[method](id);
            },
            selectNode: function (id, silent) {
                var node = this.nodeIndex[id];
                if (!node) {
                    return;
                }
                var added = addSelectedNode(this, node);
                if (!added) {
                    return;
                }
                if (this.selectMode === 'single' && this.selectedNodes.length > 1) {
                    unselectNode(this, this.selectedNodes[0].id, {
                        force: true,
                        silent: true,
                        modifyDOM: true
                    });
                }
                var nodeElement = lib.g(this.helper.getId('content-wrapper-' + id));
                this.helper.addPartClasses('content-wrapper-selected', nodeElement);
                if (!silent) {
                    this.fire('selectnode', { node: node });
                    this.fire('selectionchange');
                }
            },
            unselectNode: function (id, silent) {
                unselectNode(this, id, {
                    force: true,
                    silent: silent,
                    modifyDOM: true
                });
            },
            expandNode: function (id, children) {
                var helper = this.helper;
                var nodeElement = lib.g(helper.getId('node-' + id));
                if (!nodeElement) {
                    return;
                }
                var level = +$(nodeElement).attr('data-level');
                if (children || nodeElement.lastChild.nodeName.toLowerCase() !== 'ul') {
                    var node = this.nodeIndex[id];
                    if (!node) {
                        return;
                    }
                    if (children) {
                        if (node.children) {
                            for (var i = 0; i < node.children.length; i++) {
                                unselectNode(this, node.children[i].id, {
                                    force: true,
                                    silent: true,
                                    modifyDOM: false
                                });
                                this.removeNodeFromIndex(node.children[i].id);
                            }
                        }
                        node.children = children;
                        buildNodeIndex(node, this.nodeIndex);
                    }
                    nodeElement.innerHTML = getNodeContentHTML(this, node, level, true);
                } else {
                    var indicator = lib.g(helper.getId('indicator-' + id));
                    indicator.innerHTML = INDICATOR_TEXT_MAPPING.expanded;
                    var indicatorClasses = [].concat(helper.getPartClasses('node-indicator'), helper.getPartClasses('node-indicator-level-' + level), helper.getPartClasses('node-indicator-current'), helper.getPartClasses('node-indicator-expanded'));
                    indicator.className = indicatorClasses.join(' ');
                    var rootClasses = [].concat(helper.getPartClasses('sub-root'), helper.getPartClasses('sub-root-expanded'));
                    nodeElement.lastChild.className = rootClasses.join(' ');
                }
                var node2 = this.nodeIndex[id];
                var nodeClasses = getNodeClasses(this, node2, level, true);
                nodeElement.className = nodeClasses;
            },
            collapseNode: function (id, removeChild) {
                var helper = this.helper;
                var nodeElement = lib.g(helper.getId('node-' + id));
                if (!nodeElement) {
                    return;
                }
                var node = this.nodeIndex[id];
                var childRoot = nodeElement.getElementsByTagName('ul')[0];
                if (childRoot) {
                    if (removeChild) {
                        childRoot.parentNode.removeChild(childRoot);
                        if (node.children) {
                            for (var i = 0; i < node.children.length; i++) {
                                unselectNode(this, node.children[i].id, {
                                    force: true,
                                    silent: false,
                                    modifyDOM: false
                                });
                            }
                        }
                    } else {
                        var rootClasses = [].concat(helper.getPartClasses('sub-root'), helper.getPartClasses('sub-root-collapsed'));
                        childRoot.className = rootClasses.join(' ');
                    }
                }
                var level = +$(nodeElement).attr('data-level');
                var nodeClasses = getNodeClasses(this, node, level, false);
                nodeElement.className = nodeClasses;
                var indicator = lib.g(helper.getId('indicator-' + id));
                var indicatorClasses = [].concat(helper.getPartClasses('node-indicator'), helper.getPartClasses('node-indicator-level-' + level), helper.getPartClasses('node-indicator-current'), helper.getPartClasses('node-indicator-collapsed'));
                indicator.className = indicatorClasses.join(' ');
                indicator.innerHTML = INDICATOR_TEXT_MAPPING.collapsed;
            },
            toggleNode: function (id, children, removeChild) {
                if (!this.nodeIndex[id]) {
                    return;
                }
                var nodeElement = lib.g(this.helper.getId('node-' + id));
                if (!nodeElement) {
                    return;
                }
                if (isEmpty(this, nodeElement)) {
                    return;
                }
                if (isExpanded(this, nodeElement)) {
                    this.collapseNode(id, removeChild);
                } else {
                    this.expandNode(id, children);
                }
            },
            triggerToggleStrategy: function (id) {
                var node = this.nodeIndex[id];
                if (!node) {
                    return;
                }
                var nodeElement = lib.g(this.helper.getId('node-' + id));
                if (!nodeElement) {
                    return;
                }
                if (isEmpty(this, nodeElement)) {
                    return;
                }
                if (isExpanded(this, nodeElement)) {
                    this.fire('collapse', { node: node });
                } else {
                    this.fire('expand', { node: node });
                }
            },
            indicateNodeLoading: function (id) {
                var helper = this.helper;
                var nodeElement = lib.g(helper.getId('node-' + id));
                if (!nodeElement) {
                    return;
                }
                var children = $(nodeElement).children();
                var level = 0;
                while (!helper.isPart(children[level], 'item-content')) {
                    level++;
                }
                var indicator = children[level];
                indicator.innerHTML = INDICATOR_TEXT_MAPPING.busy;
                var classes = [].concat(helper.getPartClasses('node-indicator'), helper.getPartClasses('node-indicator-level-' + level), helper.getPartClasses('node-indicator-current'), helper.getPartClasses('node-indicator-busy'));
                indicator.className = classes.join(' ');
            },
            dispose: function () {
                this.$super(arguments);
                this.nodeIndex = null;
                this.selectedNodes = null;
                this.selectedNodeIndex = null;
            }
        });
    function getIndicatorHTML(tree, node, type, currentLevel, sourceLevel) {
        var helper = tree.helper;
        var diff = sourceLevel - currentLevel;
        var diffType = diff === 0 ? 'current' : diff === 1 ? 'previous' : 'far-previous';
        var classes = [].concat(helper.getPartClasses('node-indicator'), helper.getPartClasses('node-indicator-' + type), helper.getPartClasses('node-indicator-level-' + currentLevel), helper.getPartClasses('node-indicator-' + diffType));
        var text = diff === 0 ? INDICATOR_TEXT_MAPPING[type || 'collapsed'] : '\u7B2C' + currentLevel + '\u7EA7';
        var html = '<span ';
        if (diff === 0) {
            html += 'id="' + helper.getId('indicator-' + node.id) + '" ';
        }
        html += 'class="' + classes.join(' ') + '">' + text + '</span>';
        return html;
    }
    function getNodeContentHTML(tree, node, level, expanded) {
        var helper = tree.helper;
        var wrapperClasses = helper.getPartClasses('content-wrapper');
        if (tree.selectedNodeIndex[node.id]) {
            wrapperClasses = wrapperClasses.concat(helper.getPartClasses('content-wrapper-selected'));
        }
        wrapperClasses = wrapperClasses.join(' ');
        var wrapperId = helper.getId('content-wrapper-' + node.id);
        var html = '<div id="' + wrapperId + '" class="' + wrapperClasses + '">';
        var indicatorType = tree.strategy.isLeafNode(node) ? 'empty' : expanded ? 'expanded' : 'collapsed';
        for (var i = 0; i <= level; i++) {
            html += getIndicatorHTML(tree, node, indicatorType, i, level);
        }
        var nodeContent = tree.getItemHTML(node);
        if (tree.checkboxes) {
            nodeContent = lib.format('<div class="' + helper.getPrefixClass('checkbox-custom') + '"><label>${contentHTML}</label></div>', { contentHTML: nodeContent });
        }
        var itemWrapperClasses = helper.getPartClasses('item-content');
        html += '<div class="' + itemWrapperClasses.join(' ') + '">' + nodeContent + '</div>';
        html += '</div>';
        if (expanded && !tree.strategy.isLeafNode(node)) {
            var classes = [].concat(helper.getPartClasses('sub-root'), helper.getPartClasses('sub-root-' + indicatorType));
            html += '<ul class="' + classes.join(' ') + '">';
            var child;
            for (var j = 0; j < node.children.length; j++) {
                child = node.children[j];
                html += getNodeHTML(tree, child, level + 1, tree.strategy.shouldExpand(child));
            }
            html += '</ul>';
        }
        return html;
    }
    function getNodeClasses(tree, node, level, expanded) {
        var helper = tree.helper;
        var state = tree.strategy.isLeafNode(node) ? 'empty' : expanded ? 'expanded' : 'collapsed';
        var classes = [].concat(helper.getPartClasses('node'), helper.getPartClasses('node-' + state), helper.getPartClasses('node-level-' + level));
        if (node === tree.datasource) {
            classes = [].concat(helper.getPartClasses('root'), helper.getPartClasses('root-' + state), classes);
        }
        return classes.join(' ');
    }
    function getNodeHTML(tree, node, level, expanded, nodeName) {
        var tpl = '<${nodeName} class="${classes}" id="${id}"' + ' data-id="${nodeId}" data-level="${level}">' + '${content}' + '</${nodeName}>';
        nodeName = nodeName || 'li';
        return lib.format(tpl, {
            nodeName: nodeName,
            classes: getNodeClasses(tree, node, level, expanded),
            id: tree.helper.getId('node-' + node.id),
            nodeId: node.id,
            level: level,
            content: getNodeContentHTML(tree, node, level, expanded)
        });
    }
    function toggleAndSelectNode(e) {
        var target = e.target;
        var indicatorClass = this.helper.getPartClasses('node-indicator')[0];
        var isValidToggleEvent = $(target).hasClass(indicatorClass);
        var isValidSelectEvent = !isValidToggleEvent;
        if (!isValidToggleEvent) {
            var wrapperClass = this.helper.getPartClasses('content-wrapper')[0];
            while (target && target !== this.main && !$(target).hasClass(wrapperClass)) {
                target = target.parentNode;
            }
            if ($(target).hasClass(wrapperClass)) {
                isValidToggleEvent = this.wideToggleArea;
                isValidSelectEvent = isValidSelectEvent && true;
            }
        }
        if (!isValidToggleEvent && !isValidSelectEvent) {
            return;
        }
        while (target && target !== this.main && !$(target).attr('data-id')) {
            target = target.parentNode;
        }
        var id = $(target).attr('data-id');
        if (isValidToggleEvent) {
            this.triggerToggleStrategy(id);
        }
        if (isValidSelectEvent) {
            this.triggerSelectStrategy(id);
        }
    }
    function buildNodeIndex(node, index) {
        index = index || {};
        index[node.id] = node;
        if (node.children) {
            for (var i = 0; i < node.children.length; i++) {
                buildNodeIndex(node.children[i], index);
            }
        }
        return index;
    }
    function isEmpty(tree, nodeElement) {
        var className = tree.helper.getPartClasses('node-empty')[0];
        return $(nodeElement).hasClass(className);
    }
    function isExpanded(tree, nodeElement) {
        var className = tree.helper.getPartClasses('node-expanded')[0];
        return $(nodeElement).hasClass(className);
    }
    function addSelectedNode(tree, node) {
        if (tree.selectedNodeIndex[node.id]) {
            return false;
        }
        tree.selectedNodes.push(node);
        tree.selectedNodeIndex[node.id] = node;
        return true;
    }
    function removeSelectedNode(tree, node) {
        if (tree.selectedNodeIndex[node.id]) {
            delete tree.selectedNodeIndex[node.id];
            for (var i = 0; i < tree.selectedNodes.length; i++) {
                if (tree.selectedNodes[i] === node) {
                    tree.selectedNodes.splice(i, 1);
                }
            }
            return true;
        }
        return false;
    }
    function unselectNode(tree, id, options) {
        if (!options.force && !tree.allowUnselectNode) {
            return;
        }
        var node = tree.nodeIndex[id];
        if (!node) {
            return;
        }
        var removed = removeSelectedNode(tree, node);
        if (removed) {
            if (options.modifyDOM) {
                var nodeElement = lib.g(tree.helper.getId('content-wrapper-' + id));
                tree.helper.removePartClasses('content-wrapper-selected', nodeElement);
            }
            if (!options.silent) {
                tree.fire('unselectnode', { node: node });
                tree.fire('selectionchange');
            }
        }
    }
    esui.register(Tree);
    return Tree;
});

define('ub-ria-ui/selectors/TreeRichSelector', [
    'require',
    'esui/Tree',
    'esui',
    'eoo',
    'underscore',
    'esui/lib',
    './RichSelector',
    './SelectorTreeStrategy',
    'esui/painters',
    'jquery'
], function (require) {
    require('esui/Tree');
    var esui = require('esui');
    var eoo = require('eoo');
    var u = require('underscore');
    var lib = require('esui/lib');
    var RichSelector = require('./RichSelector');
    var TreeStrategy = require('./SelectorTreeStrategy');
    var painters = require('esui/painters');
    var $ = require('jquery');
    var TreeRichSelector = eoo.create(RichSelector, {
            type: 'TreeRichSelector',
            styleType: 'RichSelector',
            initOptions: function (options) {
                var properties = {
                        datasource: null,
                        orientExpand: false,
                        wideToggleArea: false,
                        onlyLeafSelect: true,
                        hideRoot: true,
                        needSyncParentChild: true,
                        treeVariants: 'icon angle hoverable'
                    };
                u.extend(properties, options);
                this.$super([properties]);
            },
            initStructure: function () {
                this.$super(arguments);
                $(this.main).addClass(this.helper.getPrefixClass('treerichselector'));
                if (this.onlyLeafSelect) {
                    this.addState('only-leaf-selectable');
                }
            },
            repaint: painters.createRepaint(RichSelector.prototype.repaint, {
                name: 'datasource',
                paint: function (control, datasource) {
                    control.refresh();
                }
            }, {
                name: 'selectedData',
                paint: function (control, selectedData) {
                    if (selectedData == null) {
                        return;
                    }
                    var allData = control.allData;
                    if (allData && allData.children) {
                        var oldSelectedData = control.getSelectedItems();
                        control.selectItems(oldSelectedData, false);
                        control.selectItems(selectedData, true);
                        control.fire('add');
                        control.fire('change');
                    }
                }
            }),
            adaptData: function () {
                var selectedData = [];
                this.allData = lib.deepClone(this.datasource);
                var indexData = {};
                if (this.allData && this.allData.children) {
                    this.walkTree(this.allData, this.allData.children, function (parent, child) {
                        indexData[child.id] = {
                            parentId: parent.id,
                            node: child,
                            isSelected: false
                        };
                        if (child.hasOwnProperty('isSelected')) {
                            indexData[child.id].isSelected = child.isSelected;
                        }
                        if (indexData[child.id].isSelected === true) {
                            selectedData.push(child);
                        }
                    });
                }
                this.indexData = indexData;
                return {
                    indexData: indexData,
                    selectedData: selectedData
                };
            },
            processDataAfterRefresh: function (adaptedData) {
                if (this.mode !== 'delete') {
                    this.selectItems(adaptedData.selectedData, true);
                }
            },
            refreshContent: function () {
                var treeData = this.isQuery() ? this.queriedData : this.allData;
                if (!treeData || !treeData.children || !treeData.children.length) {
                    this.addState('empty');
                } else {
                    this.removeState('empty');
                }
                if (!treeData || !treeData.children) {
                    return;
                }
                var queryList = this.getQueryList();
                var tree = queryList.getChild('tree');
                if (!tree) {
                    var options = {
                            childName: 'tree',
                            datasource: treeData,
                            allowUnselectNode: this.allowUnselectNode,
                            strategy: new TreeStrategy({
                                mode: this.mode,
                                onlyLeafSelect: this.onlyLeafSelect,
                                orientExpand: this.orientExpand
                            }),
                            wideToggleArea: this.wideToggleArea,
                            hideRoot: this.hideRoot,
                            selectMode: this.multi ? 'multiple' : 'single',
                            variants: this.treeVariants
                        };
                    if (this.getItemHTML) {
                        options.getItemHTML = this.getItemHTML;
                    }
                    if (this.itemTemplate) {
                        options.itemTemplate = this.itemTemplate;
                    }
                    tree = esui.create('Tree', options);
                    queryList.addChild(tree);
                    tree.appendTo(queryList.main);
                    var control = this;
                    tree.on('selectnode', function (e, data) {
                        var node = data.node;
                        control.handlerAfterClickNode(node);
                    });
                    tree.on('unselectnode', function (e, data) {
                        control.handlerAfterClickNode(data.node);
                    });
                } else {
                    tree.setProperties({
                        datasource: lib.deepClone(treeData),
                        keyword: this.getKeyword()
                    });
                }
            },
            getStateNode: function (id) {
                return this.indexData[id];
            },
            getItemState: function (id, stateName) {
                if (this.indexData[id]) {
                    var stateNode = this.getStateNode(id);
                    return stateNode[stateName];
                }
                return null;
            },
            setItemState: function (id, stateName, stateValue) {
                if (this.indexData[id]) {
                    var stateNode = this.getStateNode(id);
                    stateNode[stateName] = stateValue;
                }
            },
            getDatasourceWithState: function () {
                var datasource = lib.deepClone(this.datasource);
                var indexData = this.indexData;
                this.walkTree(datasource, datasource.children, function (parent, child) {
                    child.isSelected = indexData[child.id].isSelected;
                });
                return datasource;
            },
            handlerAfterClickNode: function (node) {
                var item = this.indexData[node.id];
                if (!item) {
                    return;
                }
                if (this.mode === 'add') {
                    this.actionForAdd(item);
                } else if (this.mode === 'delete') {
                    this.actionForDelete(item);
                } else if (this.mode === 'load') {
                    this.actionForLoad(item);
                }
            },
            actionForAdd: function (item) {
                var stateNode = this.getStateNode(item.node.id);
                var toBeSelected = true;
                if (stateNode.isSelected && this.allowUnselectNode) {
                    toBeSelected = false;
                }
                this.setItemState(item.node.id, 'isSelected', toBeSelected);
                if (!this.multi) {
                    if (this.currentSeletedId) {
                        this.setItemState(this.currentSeletedId, 'isSelected', !toBeSelected);
                    }
                    if (toBeSelected) {
                        this.currentSeletedId = item.node.id;
                    }
                } else {
                    trySyncParentAndChildrenStates(this, item, toBeSelected);
                }
                this.fire('add', { item: item.node });
                this.fire('change');
            },
            selectAll: function () {
                var data = this.isQuery() ? this.queriedData : this.allData;
                var children = data.children;
                var control = this;
                this.walkTree(data, children, function (parent, child) {
                    selectItem(control, child.id, true);
                });
                this.fire('add');
                this.fire('change');
            },
            selectItems: function (nodes, toBeSelected) {
                var indexData = this.indexData;
                if (!indexData) {
                    return;
                }
                var control = this;
                u.each(nodes, function (node) {
                    var id = node.id !== undefined ? node.id : node;
                    var item = indexData[id];
                    if (item != null && item !== undefined) {
                        selectItem(control, id, toBeSelected);
                        trySyncParentAndChildrenStates(control, item, toBeSelected);
                    }
                });
            },
            actionForDelete: function (item) {
                var event = this.fire('delete', { items: [item.node] });
                if (!event.isDefaultPrevented()) {
                    deleteItem(this, item.node.id);
                    this.fire('change');
                }
            },
            deleteAll: function () {
                var event = this.fire('delete', { items: this.getSelectedItems() });
                if (!event.isDefaultPrevented()) {
                    this.set('datasource', null);
                    this.fire('change');
                }
            },
            actionForLoad: function (item) {
                this.setItemState(item.node.id, 'isActive', true);
                if (this.currentActiveId) {
                    this.setItemState(this.currentActiveId, 'isActive', false);
                    if (!this.getStateNode(this.currentActiveId).isSelected) {
                        var tree = this.getQueryList().getChild('tree');
                        tree.unselectNode(this.currentActiveId, true);
                    }
                }
                this.currentActiveId = item.node.id;
                this.fire('load', { item: item.node });
                this.fire('change');
            },
            getLeafItems: function (data, isSelected) {
                data = data || this.allData && this.allData.children || [];
                var leafItems = [];
                var me = this;
                u.each(data, function (item) {
                    if (isLeaf(item)) {
                        var valid = isSelected === this.getItemState(item.id, 'isSelected');
                        if (me.mode === 'delete' || valid) {
                            leafItems.push(item);
                        }
                    } else {
                        leafItems = u.union(leafItems, me.getLeafItems(item.children, isSelected));
                    }
                }, this);
                return leafItems;
            },
            getSelectedItems: function () {
                if (!this.allData) {
                    return [];
                }
                var selectedItems = [];
                var control = this;
                this.walkTree(this.allData, this.allData.children, function (parent, child) {
                    if (control.mode === 'delete' || control.getStateNode(child.id).isSelected) {
                        selectedItems.push(child);
                    }
                });
                return selectedItems;
            },
            getSelectedTree: function () {
                var control = this;
                var copyData = lib.deepClone(this.allData);
                this.walkTree(copyData, copyData.children, function (parent, child) {
                    var selectedChildren = getSelectedNodesUnder(child, control);
                    if (selectedChildren.length) {
                        child.children = selectedChildren;
                    } else {
                        child.children = null;
                    }
                });
                copyData.children = u.filter(copyData.children, function (node) {
                    return node.children || control.indexData[node.id].isSelected;
                });
                return copyData;
            },
            getSelectedItemsFullStructure: function () {
                return this.getSelectedTree();
            },
            clearQuery: function () {
                this.$super(arguments);
                if (this.mode !== 'delete') {
                    var selectedData = this.getSelectedItems();
                    this.selectItems(selectedData, true);
                }
                return false;
            },
            clearData: function () {
                this.queriedData = {};
            },
            queryItem: function (filters) {
                var keyword = filters[0].value;
                var filteredTreeData = [];
                filteredTreeData = queryFromNode(keyword, this.allData);
                this.queriedData = {
                    id: getTopId(this),
                    text: '\u7B26\u5408\u6761\u4EF6\u7684\u7ED3\u679C',
                    children: filteredTreeData
                };
                this.addState('queried');
                this.refreshContent();
                var selectedData = this.getSelectedItems();
                if (this.mode !== 'delete') {
                    this.selectItems(selectedData, true);
                }
            },
            walkTree: function (parent, children, callback) {
                u.each(children, function (child, key) {
                    callback(parent, child);
                    this.walkTree(child, child.children, callback);
                }, this);
            },
            getFilteredItemsCount: function () {
                var node = this.isQuery() ? this.queriedData : this.allData;
                var count = getChildrenCount(this, node, true);
                return count;
            },
            getCurrentStateItemsCount: function () {
                var node = this.isQuery() ? this.queriedData : this.allData;
                if (!node) {
                    return 0;
                }
                var count = getChildrenCount(this, node, true);
                return count;
            }
        });
    function selectItem(control, id, toBeSelected) {
        var tree = control.getQueryList().getChild('tree');
        var indexData = control.indexData;
        var item = indexData[id];
        if (!item) {
            return;
        }
        if (!control.multi && toBeSelected) {
            unselectCurrent(control);
            control.currentSeletedId = id;
        }
        control.setItemState(id, 'isSelected', toBeSelected);
        if (toBeSelected) {
            tree.selectNode(id, true);
        } else {
            tree.unselectNode(id, true);
        }
    }
    function unselectCurrent(control) {
        var curId = control.currentSeletedId;
        var treeList = control.getQueryList().getChild('tree');
        treeList.unselectNode(curId);
        control.currentSeletedId = null;
    }
    function trySyncParentAndChildrenStates(control, item, toBeSelected) {
        if (!control.needSyncParentChild) {
            return;
        }
        trySyncParentStates(control, item, toBeSelected);
        trySyncChildrenStates(control, item, toBeSelected);
    }
    function trySyncChildrenStates(control, item, toBeSelected) {
        var indexData = control.indexData;
        var node = item.node;
        var children = node.children || [];
        u.each(children, function (child) {
            selectItem(control, child.id, toBeSelected);
            trySyncChildrenStates(control, indexData[child.id], toBeSelected);
        });
    }
    function trySyncParentStates(control, item, toBeSelected) {
        var indexData = control.indexData;
        var parentId = item.parentId;
        var parentItem = indexData[parentId];
        if (parentItem) {
            var brothers = parentItem.node.children || [];
            var allSelected = !u.find(brothers, function (brother) {
                    return !control.getItemState(brother.id, 'isSelected');
                });
            selectItem(control, parentId, allSelected);
            trySyncParentStates(control, parentItem, allSelected);
        }
    }
    function deleteItem(control, id) {
        var indexData = control.indexData;
        var item = indexData[id];
        var parentId = item.parentId;
        var parentItem = indexData[parentId];
        var node;
        if (!parentItem) {
            node = control.allData;
        } else {
            node = parentItem.node;
        }
        var children = node.children || [];
        var newChildren = u.without(children, item.node);
        if (newChildren.length === 0 && parentId !== getTopId(control)) {
            deleteItem(control, parentId);
        } else {
            node.children = newChildren;
            control.setProperties({ datasource: control.allData });
        }
    }
    function getSelectedNodesUnder(parentNode, control) {
        var children = parentNode.children;
        return u.filter(children, function (node) {
            return this.getItemState(node.id, 'isSelected');
        }, control);
    }
    function queryFromNode(keyword, node) {
        var filteredTreeData = [];
        var treeData = node.children;
        u.each(treeData, function (data, key) {
            var filteredData;
            if (data.text.indexOf(keyword) !== -1) {
                filteredData = u.clone(data);
            }
            if (data.children && data.children.length) {
                var filteredChildren = queryFromNode(keyword, data);
                if (filteredChildren.length > 0) {
                    if (!filteredData) {
                        filteredData = u.clone(data);
                    }
                    filteredData.children = filteredChildren;
                }
            }
            if (filteredData) {
                filteredTreeData.push(filteredData);
            }
        });
        return filteredTreeData;
    }
    function isLeaf(node) {
        return !node.children;
    }
    function getChildrenCount(control, node, onlyLeaf) {
        var count = 1;
        if (onlyLeaf) {
            if (isLeaf(node)) {
                if (!node.id || node.id === getTopId(control)) {
                    return 0;
                }
                return 1;
            }
            count = 0;
        } else {
            if (node.id === getTopId(control)) {
                count = 0;
            }
        }
        count += u.reduce(node.children, function (sum, child) {
            return sum + getChildrenCount(control, child, onlyLeaf);
        }, 0);
        return count;
    }
    function getTopId(control) {
        return control.datasource.id;
    }
    esui.register(TreeRichSelector);
    return TreeRichSelector;
});

define('ub-ria-ui/Slider', [
    'require',
    'esui/Panel',
    'esui/TextBox',
    'esui/Select',
    'esui',
    'underscore',
    'esui/lib',
    'esui/InputControl',
    'eoo',
    'esui/painters',
    'esui/behavior/Mouse',
    'jquery'
], function (require) {
    require('esui/Panel');
    require('esui/TextBox');
    require('esui/Select');
    var esui = require('esui');
    var u = require('underscore');
    var lib = require('esui/lib');
    var InputControl = require('esui/InputControl');
    var eoo = require('eoo');
    var painters = require('esui/painters');
    require('esui/behavior/Mouse');
    var $ = require('jquery');
    var Slider = eoo.create(InputControl, {
            type: 'Slider',
            initOptions: function (options) {
                var defaults = {
                        orientation: '',
                        start: 0,
                        end: 10,
                        step: 1,
                        min: null,
                        max: null,
                        isShowSelectedBG: true,
                        range: false
                    };
                var properties = {};
                u.extend(properties, defaults, options);
                properties.min = properties.min || properties.start;
                properties.max = properties.max || properties.end;
                properties.min = Math.max(properties.min, properties.start);
                properties.max = Math.min(properties.max, properties.end);
                if (properties.orientation === 'vertical') {
                    properties.leftTop = 'top';
                    properties.rightBottom = 'bottom';
                    properties.widthHeight = 'height';
                    properties.pageXY = 'pageY';
                } else {
                    properties.leftTop = 'left';
                    properties.rightBottom = 'right';
                    properties.widthHeight = 'width';
                    properties.pageXY = 'pageX';
                }
                properties = adaptValue.call(this, properties);
                this.$super([properties]);
            },
            parseValue: function (value, properties) {
                if (properties && properties.range || this.range) {
                    if (typeof value === 'string') {
                        var arr = value.split(',');
                        return [
                            +arr[0],
                            +arr[1]
                        ];
                    }
                }
                return value;
            },
            setProperties: function (properties) {
                if (properties.hasOwnProperty('rawValue')) {
                    properties = adaptValue.call(this, properties);
                }
                this.$super([properties]);
            },
            createBody: function () {
                var bodyElement = this.bodyElement = this.helper.createPart('body');
                var cursorElement = this.cursorElement = this.helper.createPart('body-cursor');
                bodyElement.appendChild(cursorElement);
                if (this.range) {
                    var cursorElementTwo = this.cursorElementTwo = this.helper.createPart('body-cursortwo');
                    $(this.cursorElementTwo).addClass(this.helper.getPartClassName('body-cursor'));
                    bodyElement.appendChild(cursorElementTwo);
                }
                if (this.isShowSelectedBG) {
                    var bodySelectedElement = this.bodySelectedElement = this.helper.createPart('body-selected');
                    bodyElement.appendChild(bodySelectedElement);
                }
                this.main.appendChild(bodyElement);
                initBodyElements(this);
            },
            initStructure: function () {
                if (this.orientation === 'vertical') {
                    $(this.main).addClass(this.helper.getPartClassName('vertical'));
                }
                /\d+/.test(this.size) && (this.main.style[this.widthHeight] = this.size + 'px');
                this.createBody();
            },
            initEvents: function () {
                bindCursorEvents.call(this);
            },
            getValue: function () {
                var value;
                if (this.range) {
                    value = [
                        this.minRangeValue,
                        this.maxRangeValue
                    ];
                } else {
                    value = this.getRawValue();
                }
                return value;
            },
            repaint: painters.createRepaint(InputControl.prototype.repaint, {
                name: 'rawValue',
                paint: function (slider, value) {
                    setByValue(slider, value, true);
                }
            }),
            dispose: function () {
                this.bodyElement = null;
                this.cursorElement = null;
                this.bodySelectedElement = null;
                this.activeCursorElement = null;
                if (this.range) {
                    this.cursorElementTwo = null;
                }
                this.$super(arguments);
            }
        });
    function adaptValue(properties) {
        var value = properties.value;
        delete properties.value;
        if (value != null && properties.rawValue == null) {
            properties.rawValue = this.parseValue(value, properties);
        }
        properties.min = typeof properties.min !== 'undefined' ? properties.min : this.min;
        properties.max = typeof properties.max !== 'undefined' ? properties.max : this.max;
        if (properties.range || this.range) {
            properties.rawValue = typeof properties.rawValue === 'undefined' ? [
                properties.min,
                properties.max
            ] : properties.rawValue;
            properties.minRangeValue = properties.rawValue[0];
            properties.maxRangeValue = properties.rawValue[1];
            properties.minRangeValue = Math.max(properties.minRangeValue, properties.min);
            properties.maxRangeValue = Math.min(properties.maxRangeValue, properties.max);
            properties.rawValue = [
                properties.minRangeValue,
                properties.maxRangeValue
            ];
        } else {
            properties.rawValue = typeof properties.rawValue === 'undefined' ? properties.min : properties.rawValue;
            properties.rawValue = Math.max(properties.rawValue, properties.min);
            properties.rawValue = Math.min(properties.rawValue, properties.max);
        }
        return properties;
    }
    function bindCursorEvents() {
        var body = this.helper.getPart('body');
        if (body) {
            $(body).mouse({
                start: u.bind(mousedownHandler, this),
                drag: u.bind(mousemoveHandler, this),
                stop: u.bind(mouseupHandler, this)
            });
            this.helper.addDOMEvent(body, 'click', mousedownHandler);
        }
    }
    function getValueByLeftTop(cursorLeftTop) {
        var widthHeight = this.widthHeight;
        var tmpWidthHeight = this[widthHeight];
        var selectedWidthHeight = cursorLeftTop;
        var similarValue = selectedWidthHeight / tmpWidthHeight * (this.end - this.start);
        similarValue = similarValue - similarValue % this.step;
        var value = this.start + Math.round(similarValue);
        return value;
    }
    function getLeftTopByValue(value) {
        var widthHeight = this.widthHeight;
        var tmpwidthHeight = this[widthHeight];
        var start = this.start;
        var end = this.end;
        var cursorLeftTop = (value - start) / (end - start) * tmpwidthHeight;
        return cursorLeftTop;
    }
    function setByValue(slider, value) {
        var cursorElement = slider.cursorElement;
        var cursorLeftTop;
        var leftTop = slider.leftTop;
        var widthHeight = slider.widthHeight;
        if (slider.range) {
            var cursorElementTwo = slider.cursorElementTwo;
            var cursorLeftTopTwo = getLeftTopByValue.call(slider, value[1]);
            cursorElementTwo.style[leftTop] = cursorLeftTopTwo + 'px';
            cursorLeftTop = getLeftTopByValue.call(slider, value[0]);
            if (value[0] === value[1] && value[0] === slider.max) {
                cursorElement.style.zIndex = 3;
                cursorElementTwo.style.zIndex = 2;
            } else {
                cursorElement.style.zIndex = 2;
                cursorElementTwo.style.zIndex = 3;
            }
        } else {
            cursorLeftTop = getLeftTopByValue.call(slider, value);
        }
        cursorElement.style[leftTop] = cursorLeftTop + 'px';
        if (slider.isShowSelectedBG) {
            if (slider.range) {
                slider.bodySelectedElement.style[leftTop] = cursorLeftTop + 'px';
                slider.bodySelectedElement.style[widthHeight] = cursorLeftTopTwo - cursorLeftTop + 'px';
            } else {
                slider.bodySelectedElement.style[widthHeight] = cursorLeftTop + 'px';
            }
        }
    }
    function mousemoveHandler(e, isMouseUp, data) {
        if (!u.isBoolean(isMouseUp)) {
            data = isMouseUp;
            isMouseUp = false;
        }
        var target = this.activeCursorElement;
        var cursorElement = this.cursorElement;
        var pageXY = this.pageXY;
        var leftTop = this.leftTop;
        var widthHeight = this.widthHeight;
        var cursorLeftTop;
        if (this.range) {
            var isFirst = false;
            var otherLeftTop;
            var otherValue;
            if (target.id === cursorElement.id) {
                otherLeftTop = getLeftTopByValue.call(this, this.maxRangeValue);
                otherValue = this.maxRangeValue;
                isFirst = true;
                cursorLeftTop = Math.max(this.minStartPos - this.startPos, e[pageXY] - this.startPos);
                cursorLeftTop = Math.min(cursorLeftTop, otherLeftTop);
            } else {
                otherLeftTop = getLeftTopByValue.call(this, this.minRangeValue);
                otherValue = this.minRangeValue;
                cursorLeftTop = Math.max(otherLeftTop, e[pageXY] - this.startPos);
                cursorLeftTop = Math.min(cursorLeftTop, this.maxEndPos - this.startPos);
            }
        } else {
            target = cursorElement;
            cursorLeftTop = Math.max(this.minStartPos - this.startPos, e[pageXY] - this.startPos);
            cursorLeftTop = Math.min(cursorLeftTop, this.maxEndPos - this.startPos);
        }
        var value;
        var curValue = getValueByLeftTop.call(this, cursorLeftTop);
        if (this.range) {
            if (isFirst) {
                value = [
                    curValue,
                    otherValue
                ];
            } else {
                value = [
                    otherValue,
                    curValue
                ];
            }
        } else {
            value = curValue;
        }
        if (!isMouseUp) {
            cursorLeftTop = getLeftTopByValue.call(this, curValue);
            target.style[this.leftTop] = cursorLeftTop + 'px';
            if (this.isShowSelectedBG) {
                if (this.range) {
                    var tmpWidthHeight;
                    if (isFirst) {
                        this.bodySelectedElement.style[leftTop] = cursorLeftTop + 'px';
                        tmpWidthHeight = otherLeftTop - cursorLeftTop;
                    } else {
                        this.bodySelectedElement.style[leftTop] = otherLeftTop + 'px';
                        tmpWidthHeight = cursorLeftTop - otherLeftTop;
                    }
                    this.bodySelectedElement.style[widthHeight] = tmpWidthHeight + 'px';
                } else {
                    this.bodySelectedElement.style[widthHeight] = cursorLeftTop + 'px';
                }
            }
            this.fire('move', value);
        }
        return value;
    }
    function mouseupHandler(e) {
        $(this.activeCursorElement).removeClass(this.helper.getPartClassName('body-cursor-active'));
        var value = mousemoveHandler.call(this, e, true);
        this.rawValue = value;
        this.minRangeValue = value[0];
        this.maxRangeValue = value[1];
        setByValue(this, value, true);
        this.fire('change', value);
    }
    function initBodyElements(slider) {
        var bodyElement = slider.bodyElement;
        var bodyPos = lib.getOffset(bodyElement);
        var leftTop = slider.leftTop;
        var rightBottom = slider.rightBottom;
        var widthHeight = slider.widthHeight;
        slider[widthHeight] = bodyPos[widthHeight];
        if (typeof slider.min !== 'undefined') {
            var minLeftTop = getLeftTopByValue.call(slider, slider.min);
            slider.minStartPos = bodyPos[leftTop] + minLeftTop;
            slider.startPos = bodyPos[leftTop];
        }
        if (typeof slider.max !== 'undefined') {
            var maxLeftTop = getLeftTopByValue.call(slider, slider.max);
            slider.maxEndPos = bodyPos[leftTop] + maxLeftTop;
            slider.endPos = bodyPos[rightBottom];
        }
    }
    function findNearestCursorElement(e) {
        var pageXY = this.pageXY;
        var leftTop = this.leftTop;
        var bodyElement = this.helper.getPart('body');
        var bodyPos = lib.getOffset(bodyElement);
        var mouseLeftTop = e[pageXY] - bodyPos[leftTop];
        if (this.range) {
            var firstLeftTop = getLeftTopByValue.call(this, this.minRangeValue);
            var secondLeftTop = getLeftTopByValue.call(this, this.maxRangeValue);
            var middleLeftTop = firstLeftTop + (secondLeftTop - firstLeftTop) / 2;
            if (mouseLeftTop > middleLeftTop && this.cursorElementTwo) {
                return this.cursorElementTwo;
            }
        }
        return this.cursorElement;
    }
    function mousedownHandler(e) {
        if (this.disabled === true) {
            return false;
        }
        var cursorElement = findNearestCursorElement.call(this, e);
        this.activeCursorElement = cursorElement;
        $(cursorElement).addClass(this.helper.getPartClassName('body-cursor-active'));
        initBodyElements(this);
        mousemoveHandler.call(this, e);
        return true;
    }
    esui.register(Slider);
    return Slider;
});

define('esui/behavior/mousewheel', [
    'require',
    'jquery'
], function (require) {
    var $ = require('jquery');
    var lowestDelta;
    var toFix = [
            'wheel',
            'mousewheel'
        ];
    if ($.event.fixHooks) {
        for (var i = toFix.length; i;) {
            $.event.fixHooks[toFix[--i]] = $.event.mouseHooks;
        }
    }
    var special = $.event.special.mousewheel = {
            setup: function () {
                if (this.addEventListener) {
                    this.addEventListener('wheel', handler, false);
                } else if (this.attachEvent) {
                    this.attachEvent('mousewheel', handler);
                } else {
                    this.onmousewheel = handler;
                }
                $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
                $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
            },
            teardown: function () {
                if (this.removeEventListener) {
                    this.removeEventListener('wheel', handler, false);
                } else if (this.detachEvent) {
                    this.detachEvent('mousewheel', handler);
                } else {
                    this.onmousewheel = null;
                }
                $.removeData(this, 'mousewheel-line-height');
                $.removeData(this, 'mousewheel-page-height');
            },
            getLineHeight: function (elem) {
                var $elem = $(elem);
                var $parent = $elem.offsetParent();
                return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
            },
            getPageHeight: function (elem) {
                return $(elem).height();
            }
        };
    $.fn.extend({
        mousewheel: function (fn) {
            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
        },
        unmousewheel: function (fn) {
            return this.unbind('mousewheel', fn);
        }
    });
    function normalize(delta) {
        return Math[delta >= 1 ? 'floor' : 'ceil'](delta / lowestDelta);
    }
    function handler(event) {
        var orgEvent = event || window.event;
        event = $.event.fix(orgEvent);
        event.type = 'mousewheel';
        var deltaY = 0;
        var deltaX = 0;
        if ('detail' in orgEvent) {
            deltaY = orgEvent.detail * -1;
        }
        if ('wheelDelta' in orgEvent) {
            deltaY = orgEvent.wheelDelta;
        }
        if ('wheelDeltaY' in orgEvent) {
            deltaY = orgEvent.wheelDeltaY;
        }
        if ('wheelDeltaX' in orgEvent) {
            deltaX = orgEvent.wheelDeltaX * -1;
        }
        var delta = deltaY === 0 ? deltaX : deltaY;
        if ('deltaY' in orgEvent) {
            deltaY = orgEvent.deltaY * -1;
            delta = deltaY;
        }
        if ('deltaX' in orgEvent) {
            deltaX = orgEvent.deltaX;
            if (deltaY === 0) {
                delta = deltaX * -1;
            }
        }
        if (deltaY === 0 && deltaX === 0) {
            return;
        }
        if (orgEvent.deltaMode === 1) {
            var lineHeight = $.data(this, 'mousewheel-line-height');
            delta *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        } else if (orgEvent.deltaMode === 2) {
            var pageHeight = $.data(this, 'mousewheel-page-height');
            delta *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }
        var absDelta = Math.max(Math.abs(deltaY), Math.abs(deltaX));
        if (!lowestDelta || absDelta < lowestDelta) {
            lowestDelta = absDelta;
        }
        delta = normalize(delta);
        deltaX = normalize(deltaX);
        deltaY = normalize(deltaY);
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        event.deltaMode = 0;
        var args = Array.prototype.slice.call(arguments, 1);
        args.unshift(event, delta, deltaX, deltaY);
        return ($.event.dispatch || $.event.handle).apply(this, args);
    }
});

define('ub-ria-ui/Spinner', [
    'require',
    'eoo',
    'esui/InputControl',
    'esui/lib',
    'underscore',
    'moment',
    'esui',
    'esui/painters',
    'jquery',
    'esui/behavior/mousewheel'
], function (require) {
    var eoo = require('eoo');
    var InputControl = require('esui/InputControl');
    var lib = require('esui/lib');
    var u = require('underscore');
    var m = require('moment');
    var ui = require('esui');
    var u = require('underscore');
    var painters = require('esui/painters');
    var $ = require('jquery');
    require('esui/behavior/mousewheel');
    var Spinner = eoo.create(InputControl, {
            type: 'Spinner',
            constructor: function () {
                this.$super(arguments);
                this.timer = 0;
                this.longTimer = 0;
            },
            initOptions: function (options) {
                var properties = {};
                u.extend(properties, Spinner.defaultProperties, options);
                var format = properties.format;
                var max = properties.max;
                var min = properties.min;
                if (format === 'number') {
                    max = max === 'indefinite' ? Number.MAX_VALUE : parseToNum(max);
                    min = min === 'indefinite' ? -Number.MAX_VALUE : parseToNum(min);
                } else {
                    max = max === 'indefinite' ? m().add(50, 'years') : m(max, format);
                    min = min === 'indefinite' ? m().subtract(50, 'years') : m(min, format);
                }
                properties.max = max;
                properties.min = min;
                var scale = properties.scale;
                if (format === 'number') {
                    scale = scale + '';
                    var dotPosition = scale.indexOf('.');
                    if (dotPosition > -1) {
                        properties.precision = scale.length - dotPosition - 1;
                    } else {
                        properties.precision = 0;
                    }
                }
                if (format !== 'number' && /^\s*\{/.test(scale)) {
                    properties.scale = $.parseJSON(scale);
                }
                this.setProperties(properties);
            },
            initStructure: function () {
                var helper = this.helper;
                var spinnerTpl = [
                        '<input id="${inputId}" type="text" />',
                        '<span id="${upId}" class="${upClass} ${iconClass}"></span>',
                        '<span id=${downId} class="${downClass} ${iconClass}"></span>'
                    ].join('');
                var mainElement = this.main;
                mainElement.innerHTML = lib.format(spinnerTpl, {
                    inputId: helper.getId('input'),
                    upId: helper.getId('up'),
                    upClass: helper.getPartClasses('up'),
                    downId: helper.getId('down'),
                    downClass: helper.getPartClasses('down'),
                    iconClass: helper.getIconClass()
                });
                $(mainElement).addClass(helper.getPrefixClass('textbox'));
            },
            initEvents: function () {
                var helper = this.helper;
                var up = helper.getPart('up');
                var down = helper.getPart('down');
                helper.addDOMEvent(up, 'mousedown', mouseDownHandler);
                helper.addDOMEvent(down, 'mousedown', mouseDownHandler);
                helper.addDOMEvent(up, 'mouseup', mouseUpHandler);
                helper.addDOMEvent(down, 'mouseup', mouseUpHandler);
                helper.addDOMEvent(up, 'mouseout', mouseUpHandler);
                helper.addDOMEvent(down, 'mouseout', mouseUpHandler);
                var input = this.getInput();
                helper.addDOMEvent(input, 'focus', function () {
                    helper.addDOMEvent(this.main, 'mousewheel', mouseWheelHandler);
                });
                helper.addDOMEvent(input, 'blur', function () {
                    helper.removeDOMEvent(this.main, 'mousewheel', mouseWheelHandler);
                });
            },
            repaint: painters.createRepaint(InputControl.prototype.repaint, {
                name: ['rawValue'],
                paint: function (spinner, rawValue) {
                    var max = spinner.max;
                    var min = spinner.min;
                    var format = spinner.format;
                    if (spinner.format === 'number') {
                        rawValue = parseToNum(rawValue);
                        rawValue = Math.max(rawValue, min);
                        rawValue = Math.min(rawValue, max);
                    } else {
                        rawValue = m(rawValue, format);
                        if (rawValue.isValid()) {
                            rawValue = m.max(rawValue, min);
                            rawValue = m.min(rawValue, max);
                        } else {
                            rawValue = min;
                        }
                        rawValue = m(rawValue, format).format(format);
                    }
                    setInputValue.call(spinner, rawValue);
                }
            }, {
                name: ['width'],
                paint: function (spinner, width) {
                    width = parseInt(width, 10);
                    spinner.main.style.width = width + 'px';
                }
            }, {
                name: [
                    'disabled',
                    'readOnly'
                ],
                paint: function (spinner, disabled, readOnly) {
                    var input = spinner.getInput();
                    input.disabled = disabled;
                    input.readOnly = readOnly;
                }
            }),
            getInput: function () {
                return lib.g(this.helper.getId('input'));
            },
            getValue: function () {
                var input = this.getInput();
                return input.value;
            },
            setValue: function (value) {
                setInputValue.call(this, value);
            }
        });
    function parseToNum(value) {
        if (value) {
            value = parseFloat(value);
        }
        return isNaN(value) ? '' : value;
    }
    var Direct = {
            UP: 'up',
            DOWN: 'down'
        };
    function updateDate(direct) {
        var input = this.getInput();
        var scale = typeof this.scale === 'object' ? this.scale : parseToNum(this.scale);
        var timeFormat = this.format;
        var value = m(input.value, timeFormat);
        var max = this.max;
        var min = this.min;
        value = value.isValid() ? value : min;
        if (direct === Direct.UP) {
            value = value.add(scale.value, scale.key);
            if (m.max(value, max) === max) {
                value = m(value, timeFormat).format(timeFormat);
            } else {
                if (!!this.turn && this.turn !== 'false') {
                    value = m(min, timeFormat).format(timeFormat);
                } else {
                    value = m(max, timeFormat).format(timeFormat);
                }
            }
        } else {
            value = value.subtract(scale.value, scale.key);
            if (m.min(value, min) === min) {
                value = m(value, timeFormat).format(timeFormat);
            } else {
                if (!!this.turn && this.turn !== 'false') {
                    value = m(max, timeFormat).format(timeFormat);
                } else {
                    value = m(min, timeFormat).format(timeFormat);
                }
            }
        }
        setInputValue.call(this, value);
    }
    function updateNumber(direct) {
        var input = this.getInput();
        var scale = parseToNum(this.scale);
        var value = parseToNum(input.value);
        var max = this.max;
        var min = this.min;
        if (direct === Direct.UP) {
            value += scale;
            if (value > max) {
                if (!!this.turn && this.turn !== 'false') {
                    value = min;
                } else {
                    value = max;
                }
            }
        } else {
            value -= scale;
            if (value < min) {
                if (!!this.turn && this.turn !== 'false') {
                    value = max;
                } else {
                    value = min;
                }
            }
        }
        setInputValue.call(this, value);
    }
    function updateValue(direct) {
        if (this.format !== 'number') {
            updateDate.call(this, direct);
        } else {
            updateNumber.call(this, direct);
        }
    }
    function scrollValue(e) {
        if (!this.disabled && !this.readOnly) {
            var direct = e.target.id === this.helper.getId('up') ? Direct.UP : Direct.DOWN;
            var args = { direct: direct };
            var eventArgs = this.fire('scrollValue', args);
            if (!eventArgs.isDefaultPrevented()) {
                updateValue.call(this, direct);
            }
        }
    }
    function autoUpdate(e) {
        var me = this;
        this.timer = setInterval(function () {
            return scrollValue.call(me, e);
        }, +parseToNum(this.timeInterval));
        this.longTimer = setTimeout(function () {
            clearInterval(me.timer);
            me.timer = setInterval(function () {
                return scrollValue.call(me, e);
            }, parseToNum(this.timeInterval) / 2);
        }, 3000);
    }
    function mouseWheelHandler(e, direct) {
        direct = direct === 1 ? Direct.UP : Direct.DOWN;
        updateValue.call(this, direct);
        e.preventDefault();
    }
    function mouseDownHandler(e) {
        var delayTime = 1200 - this.timeInterval;
        scrollValue.call(this, e);
        var me = this;
        this.timer = setTimeout(function () {
            return autoUpdate.call(me, e);
        }, delayTime);
        e.preventDefault();
    }
    function mouseUpHandler(e) {
        clearInterval(this.timer);
        clearTimeout(this.timer);
        clearTimeout(this.longTimer);
        this.timer = 0;
        this.longTimer = 0;
    }
    function setInputValue(value) {
        if (this.precision) {
            value = value.toFixed(this.precision);
        }
        var input = this.getInput();
        input.value = value;
    }
    Spinner.defaultProperties = {
        turn: true,
        scale: 1,
        width: 200,
        height: 30,
        max: 'indefinite',
        min: 'indefinite',
        format: 'number',
        timeInterval: 100
    };
    ui.register(Spinner);
    return Spinner;
});

define('ub-ria-ui/Sticky', [
    'require',
    'underscore',
    'esui',
    'esui/lib',
    'esui/Control',
    'eoo',
    'jquery'
], function (require) {
    var u = require('underscore');
    var esui = require('esui');
    var lib = require('esui/lib');
    var Control = require('esui/Control');
    var eoo = require('eoo');
    var $ = require('jquery');
    var sticked = [];
    var Sticky = eoo.create(Control, {
            type: 'Sticky',
            initOptions: function (options) {
                var properties = { top: 0 };
                u.extend(properties, options);
                this.setProperties(properties);
            },
            initStructure: function () {
                var main = this.main;
                var height = $(main).css('position') !== 'absolute' ? main.offsetHeight : '';
                var cssFloat = $(main).css('float');
                cssFloat = cssFloat === 'none' ? '' : cssFloat;
                var $placeHolder = $('<div></div>').css({
                        'height': height + 'px',
                        'float': cssFloat,
                        'margin': $(main).css('margin')
                    }).addClass(this.helper.getPartClassName('placeholder'));
                $(main).wrap($placeHolder);
                this.initialTop = $(main).offset().top;
            },
            initEvents: function () {
                if (sticked.length === 0) {
                    this.helper.addDOMEvent(window, 'scroll', checkScrollPosition);
                }
                sticked.push(this);
            },
            dispose: function () {
                reset(this);
                sticked = u.without(sticked, this);
                if (sticked.length === 0) {
                    this.helper.addDOMEvent(window, 'scroll', checkScrollPosition);
                }
                $(this.main).unwrap();
                this.$super(arguments);
            }
        });
    function documentHeight() {
        return $(document).height();
    }
    function check(sticky) {
        if (sticky.disabled) {
            return false;
        }
        var scrollTop = $(window).scrollTop();
        var dwh = documentHeight() - $(window).height;
        var extra = scrollTop > dwh ? dwh - scrollTop : 0;
        var etse = sticky.initialTop - sticky.top - extra;
        return scrollTop >= etse;
    }
    function reset(sticky) {
        sticky.currentTop = null;
        $(sticky.main).css({
            position: '',
            top: '',
            width: '',
            margin: 0 + 'px',
            left: ''
        });
    }
    function checkScrollPosition() {
        var scrollTop = $(document).scrollTop();
        if (!sticked.length || scrollTop < 0) {
            return;
        }
        var dwh = documentHeight() - $(window).height();
        var extra = scrollTop > dwh ? dwh - scrollTop : 0;
        for (var i = 0; i < sticked.length; i++) {
            var sticky = sticked[i];
            var main = sticky.main;
            if (!main.offsetWidth || !main.offsetHeight) {
                continue;
            }
            if (!check(sticky)) {
                if (!isNaN(sticky.currentTop)) {
                    reset(sticky);
                }
            } else {
                var newTop = 0;
                if (sticky.top >= 0) {
                    var stickyHeight = main.offsetHeight;
                    newTop = documentHeight() - stickyHeight - sticky.top - scrollTop - extra;
                    newTop = newTop < 0 ? newTop + sticky.top : sticky.top;
                }
                if (sticky.currentTop !== newTop) {
                    var width = sticky.getWidthFrom ? lib.g(sticky.getWidthFrom).offsetWidth : main.offsetWidth;
                    $(main).css({
                        width: width + 'px',
                        position: 'fixed',
                        top: parseInt(newTop, 10) + 'px',
                        left: $(main).offset().left + 'px'
                    });
                    sticky.currentTop = newTop;
                }
            }
        }
    }
    esui.register(Sticky);
    return Sticky;
});

define('ub-ria-ui/TokenField', [
    'require',
    'esui',
    'jquery',
    'underscore',
    'esui/lib',
    'esui/InputControl',
    'eoo',
    'esui/painters',
    'esui/TextBox'
], function (require) {
    var esui = require('esui');
    var $ = require('jquery');
    var u = require('underscore');
    var lib = require('esui/lib');
    var InputControl = require('esui/InputControl');
    var eoo = require('eoo');
    var painters = require('esui/painters');
    require('esui/TextBox');
    var TokenField = eoo.create(InputControl, {
            constructor: function () {
                this.$super(arguments);
                this.data = {};
            },
            type: 'TokenField',
            initOptions: function (options) {
                var properties = {
                        width: 300,
                        inputWidth: 90,
                        minLength: 0,
                        limit: 0,
                        delimiter: ',',
                        tokens: '',
                        repeat: false
                    };
                u.extend(properties, options);
                properties.name = properties.name || this.main.getAttribute('name');
                this.setProperties(properties);
            },
            initStructure: function () {
                if (this.main.nodeName.toLowerCase() === 'input') {
                    this.helper.replaceMain();
                    this.main.id = this.helper.getId();
                }
                var html = [
                        '<input type="text" name="${inputName}" autocomplete="off"',
                        ' class="${inputClasses}"',
                        ' data-ui-type="TextBox"',
                        ' data-ui-width="${width}"',
                        ' data-ui-id="${inputId}" />'
                    ].join('');
                this.main.innerHTML = lib.format(html, {
                    inputName: this.name,
                    inputId: this.helper.getId('input'),
                    inputClasses: this.helper.getPartClasses('input'),
                    width: this.inputWidth
                });
                this.initChildren(this.main);
                this.setTokens(this.tokens, false);
            },
            initEvents: function () {
                var controlHelper = this.helper;
                controlHelper.addDOMEvent(this.main, 'click', this.focusInput);
                var itemClass = this.helper.getPartClassName('item');
                controlHelper.addDOMEvent(this.main, 'click', '.' + itemClass, this.remove);
                var input = this.getInput();
                var inputElem = input.getFocusTarget();
                input.on('focus', u.bind(this.focus, this));
                input.on('blur', u.bind(this.blur, this));
                input.on('enter', u.bind(this.enter, this));
                controlHelper.addDOMEvent(inputElem, 'keydown', this.keydown);
                controlHelper.addDOMEvent(inputElem, 'keyup', this.keyup);
            },
            getInput: function () {
                var inputId = this.helper.getId('input');
                return this.viewContext.get(inputId);
            },
            createToken: function (token) {
                if (typeof token === 'string') {
                    token = {
                        value: token,
                        label: token
                    };
                } else {
                    token = u.extend({}, token);
                }
                token.value = lib.trim(token.value);
                token.label = lib.trim(token.label) || token.value;
                if (!token.value || !token.label || token.label.length <= this.minLength) {
                    return;
                }
                if (this.limit && this.getTokens().length >= this.limit) {
                    return;
                }
                this.fire('beforecreate', { token: token });
                var $tokenElem = $('<div></div>');
                $tokenElem.addClass(this.helper.getPartClassName('item'));
                $tokenElem.html(this.helper.getPartHTML('label', 'span') + this.helper.getPartHTML('close', 'span'));
                var guid = lib.getGUID();
                $tokenElem.attr('data-id', guid);
                this.data[guid] = token;
                var input = this.getInput();
                var inputElem = input.main;
                var $tokenLabel = $tokenElem.children(':first-child');
                $tokenLabel.html(token.label);
                var $closeButton = $tokenElem.children(':last-child');
                $closeButton.addClass(this.helper.getIconClass());
                $tokenElem.insertBefore(inputElem);
                this.fire('aftercreate', { token: token });
            },
            focusInput: function (e) {
                var input = this.getInput();
                input.getFocusTarget().focus();
            },
            focus: function (e) {
                this.focused = true;
                this.helper.addStateClasses('focus');
            },
            blur: function (e) {
                this.focused = false;
                this.helper.removeStateClasses('focus');
            },
            keydown: function (e) {
                var input = this.getInput();
                switch (e.keyCode) {
                case 8:
                    if (input.getFocusTarget() === document.activeElement) {
                        this.lastInputValue = input.getRawValue();
                    }
                    break;
                default:
                    break;
                }
            },
            keyup: function (e) {
                if (!this.focused) {
                    return;
                }
                var input = this.getInput();
                var inputValue = input.getRawValue();
                switch (e.keyCode) {
                case 8:
                case 46:
                    if (input.getFocusTarget() === document.activeElement) {
                        if (inputValue.length || this.lastInputValue) {
                            break;
                        }
                        this.remove();
                    }
                    break;
                }
            },
            enter: function (e) {
                var input = e.target;
                var inputValue = input.getRawValue();
                if (input.getFocusTarget() === document.activeElement && inputValue.length) {
                    createTokensFromInput.call(this);
                }
            },
            remove: function (e) {
                var me = this;
                var target = e && e.currentTarget;
                if (!target) {
                    target = $(me.getInput().main).prev();
                }
                var $t = $(target);
                if ($t.size() > 0) {
                    var dataId = $(target).attr('data-id');
                    $t.remove();
                    delete me.data[dataId];
                }
            },
            setTokens: function (tokens, isAdd) {
                if (!tokens) {
                    return;
                }
                var itemClass = this.helper.getPartClassName('item');
                var me = this;
                if (!isAdd) {
                    $(this.main).children().each(function (idx, tokenElem) {
                        var $ele = $(tokenElem);
                        if ($ele.hasClass(itemClass)) {
                            var dataId = $ele.attr('data-id');
                            delete me.data[dataId];
                            $ele.remove();
                        }
                    });
                }
                if (typeof tokens === 'string') {
                    tokens = tokens.split(this.delimiter);
                }
                u.each(tokens, function (token) {
                    me.createToken(token);
                });
            },
            getTokens: function () {
                var tokens = [];
                var me = this;
                $(this.main).children().each(function (idx, tokenElem) {
                    var $ele = $(tokenElem);
                    var dataId = $ele.attr('data-id');
                    if (dataId) {
                        var token = me.data[dataId];
                        if (token) {
                            tokens.push(token);
                        }
                    }
                });
                return tokens;
            },
            getRawValue: function () {
                var separator = this.delimiter;
                return u.map(this.getTokens(), function (token) {
                    return token.value;
                }).join(separator);
            },
            repaint: painters.createRepaint(InputControl.prototype.repaint, painters.style('width'), {
                name: [
                    'disabled',
                    'readOnly'
                ],
                paint: function (textbox, disabled, readOnly) {
                    var input = textbox.getInput();
                    input.setProperties({
                        disabled: disabled,
                        readOnly: readOnly
                    });
                }
            })
        });
    function flashToken(tokenElem) {
        var me = this;
        setTimeout(function () {
            me.helper.addPartClasses('flash', tokenElem);
        }, 0);
        setTimeout(function () {
            me.helper.removePartClasses('flash', tokenElem);
        }, 300);
    }
    function checkRepeatToken(tokenValue) {
        var repeatToken = {};
        u.each(this.data, function (token, dataId) {
            if (token.value === tokenValue) {
                repeatToken.dataId = dataId;
                repeatToken.token = token;
                return false;
            }
        });
        if (repeatToken.dataId) {
            repeatToken.tokenElement = $(this.main).find('div[data-id=' + repeatToken.dataId + ']')[0];
        }
        return repeatToken;
    }
    function createTokensFromInput() {
        var input = this.getInput();
        var inputValue = input.getRawValue();
        if (inputValue.length < this.minLength) {
            return;
        }
        if (!this.repeat) {
            var repeatToken = checkRepeatToken.call(this, inputValue);
            if (repeatToken.token) {
                flashToken.call(this, repeatToken.tokenElement);
                u.isFunction(this.repeatCallback) && this.repeatCallback(repeatToken);
                return;
            }
        }
        var before = this.getRawValue();
        this.setTokens(inputValue, true);
        if (before === this.getRawValue() && inputValue.length) {
            return;
        }
        input.setRawValue('');
    }
    esui.register(TokenField);
    return TokenField;
});

define('esui/behavior/Selectable', [
    'require',
    './Mouse',
    'jquery',
    'underscore',
    'eoo',
    './bridge'
], function (require) {
    var Mouse = require('./Mouse');
    var $ = require('jquery');
    var u = require('underscore');
    var eoo = require('eoo');
    var Selectable = eoo.create(Mouse, {
            type: 'selectable',
            constructor: function (options, element) {
                options = u.extend({
                    appendTo: 'body',
                    autoRefresh: true,
                    filter: '*',
                    tolerance: 'touch',
                    selected: null,
                    unselected: null,
                    selecting: null,
                    unselecting: null,
                    distance: 0
                }, options);
                this.$super(arguments);
            },
            init: function () {
                this.$super(arguments);
                var me = this;
                this.addClass();
                var selectees;
                this.refresh = function () {
                    selectees = $(me.options.filter, me.element[0]);
                    this.addClass(selectees, 'selectee');
                    selectees.each(function () {
                        var $this = $(this);
                        var pos = $this.offset();
                        $.data(this, 'selectable-item', {
                            element: this,
                            $element: $this,
                            left: pos.left,
                            top: pos.top,
                            right: pos.left + $this.outerWidth(),
                            bottom: pos.top + $this.outerHeight(),
                            startselected: false,
                            selected: me.hasClass('selected'),
                            selecting: me.hasClass('selecting'),
                            unselecting: me.hasClass('unselecting')
                        });
                    });
                };
                this.refresh();
                this.selectees = selectees;
                var helperClass = this.getClassName('helper');
                this.helper = $('<div class="' + helperClass + '"></div>');
            },
            mouseStart: function (event) {
                var me = this;
                var options = this.options;
                this.mousePosition = [
                    event.pageX,
                    event.pageY
                ];
                if (this.options.disabled) {
                    return;
                }
                this.selectees = $(options.filter, this.element[0]);
                this.$super(arguments);
                $(options.appendTo).append(this.helper);
                this.helper.css({
                    left: event.pageX,
                    top: event.pageY,
                    width: 0,
                    height: 0
                });
                if (options.autoRefresh) {
                    this.refresh();
                }
                var selectedClass = this.getClassName(true, 'selected');
                this.selectees.filter(selectedClass).each(function () {
                    var selectee = $.data(this, 'selectable-item');
                    var $element = selectee.$element;
                    selectee.startselected = true;
                    if (!event.metaKey && !event.ctrlKey) {
                        me.removeClass($element, 'selected');
                        me.addClass($element, 'unselecting');
                        selectee.selected = false;
                        selectee.unselecting = true;
                        me.trigger('unselecting', event, { unselecting: selectee.element });
                    }
                });
                $(event.target).parents().addBack().each(function () {
                    var selectee = $.data(this, 'selectable-item');
                    if (selectee) {
                        var $element = selectee.$element;
                        var doSelect = !event.metaKey && !event.ctrlKey || !me.hasClass($element, 'selected');
                        me.removeClass($element, doSelect ? 'unselecting' : 'selected');
                        me.addClass($element, doSelect ? 'selecting' : 'unselecting');
                        selectee.unselecting = !doSelect;
                        selectee.selecting = doSelect;
                        selectee.selected = doSelect;
                        if (doSelect) {
                            me.trigger('selecting', event, { selecting: selectee.element });
                        } else {
                            me.trigger('unselecting', event, { unselecting: selectee.element });
                        }
                        return false;
                    }
                });
                return true;
            },
            mouseDrag: function (event) {
                if (this.options.disabled) {
                    return;
                }
                var x1 = this.mousePosition[0];
                var x2 = event.pageX;
                var minX = Math.min(x1, x2);
                var maxX = Math.max(x1, x2);
                var y1 = this.mousePosition[1];
                var y2 = event.pageY;
                var minY = Math.min(y1, y2);
                var maxY = Math.max(y1, y2);
                this.helper.css({
                    left: minX,
                    top: minY,
                    width: maxX - minX,
                    height: maxY - minY
                });
                var me = this;
                var options = this.options;
                this.selectees.each(function () {
                    var selectee = $.data(this, 'selectable-item');
                    var $element = selectee.$element;
                    var hit = false;
                    if (!selectee || selectee.element === me.element[0]) {
                        return;
                    }
                    if (options.tolerance === 'touch') {
                        hit = !(selectee.left > maxX || selectee.right < minX || selectee.top > maxY || selectee.bottom < minY);
                    } else if (options.tolerance === 'fit') {
                        hit = selectee.left > minX && selectee.right < maxX && selectee.top > minY && selectee.bottom < maxY;
                    }
                    if (hit) {
                        if (selectee.selected) {
                            me.removeClass($element, 'selected');
                            selectee.selected = false;
                        }
                        if (selectee.unselecting) {
                            me.removeClass($element, 'unselecting');
                            selectee.unselecting = false;
                        }
                        if (!selectee.selecting) {
                            me.addClass($element, 'selecting');
                            selectee.selecting = true;
                            me.trigger('selecting', event, { selecting: selectee.element });
                        }
                    } else {
                        if (selectee.selecting) {
                            if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
                                me.removeClass($element, 'selecting');
                                selectee.selecting = false;
                                me.addClass($element, 'selected');
                                selectee.selected = true;
                            } else {
                                me.removeClass($element, 'selecting');
                                selectee.selecting = false;
                                if (selectee.startselected) {
                                    me.addClass($element, 'unselecting');
                                    selectee.unselecting = true;
                                }
                                me.trigger('unselecting', event, { unselecting: selectee.element });
                            }
                        }
                        if (selectee.selected) {
                            if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {
                                me.removeClass($element, 'selected');
                                selectee.selected = false;
                                me.addClass($element, 'unselecting');
                                selectee.unselecting = true;
                                me.trigger('unselecting', event, { unselecting: selectee.element });
                            }
                        }
                    }
                });
                return false;
            },
            mouseStop: function (event) {
                var me = this;
                $(this.getClassName(true, 'unselecting'), this.element[0]).each(function () {
                    var selectee = $.data(this, 'selectable-item');
                    me.removeClass(selectee.$element, 'unselecting');
                    selectee.unselecting = false;
                    selectee.startselected = false;
                    me.trigger('unselected', event, { unselected: selectee.element });
                });
                $(this.getClassName(true, 'selecting'), this.element[0]).each(function () {
                    var selectee = $.data(this, 'selectable-item');
                    var $element = selectee.$element;
                    me.removeClass($element, 'selecting');
                    me.addClass($element, 'selected');
                    selectee.selecting = false;
                    selectee.selected = true;
                    selectee.startselected = true;
                    me.trigger('selected', event, { selected: selectee.element });
                });
                this.$super(arguments);
                this.helper.remove();
                return false;
            },
            dispose: function () {
                this.$super(arguments);
                var me = this;
                this.selectees.each(function () {
                    var selectee = $.data(this, 'selectable-item');
                    me.removeClass(selectee, 'selectee');
                });
                this.removeClass('selectable, selectable-disabled');
                this.selectees.removeData('selectable-item');
            }
        });
    require('./bridge')('selectable', Selectable);
    return Selectable;
});

define('esui/BoxGroup', [
    'require',
    'underscore',
    './lib',
    './InputControl',
    'jquery',
    './painters',
    './main',
    'eoo'
], function (require) {
    var u = require('underscore');
    var lib = require('./lib');
    var InputControl = require('./InputControl');
    var $ = require('jquery');
    var painters = require('./painters');
    var esui = require('./main');
    var BoxGroup = require('eoo').create(InputControl, {
            type: 'BoxGroup',
            initOptions: function (options) {
                var properties = {
                        datasource: [],
                        orientation: 'horizontal',
                        boxType: 'radio',
                        boxClass: ''
                    };
                u.extend(properties, options);
                var datasource = properties.datasource;
                if (!datasource.length) {
                    extractDatasourceFromDOM(this.main, properties);
                }
                if (!properties.hasOwnProperty('rawValue') && !properties.hasOwnProperty('value')) {
                    if (properties.boxType === 'radio' && datasource.length) {
                        properties.rawValue = [datasource[0].value];
                    } else {
                        properties.rawValue = [];
                    }
                }
                this.setProperties(properties);
            },
            setProperties: function (properties) {
                if ((properties.datasource || properties.boxType) && (!properties.rawValue && !properties.value) && (!this.rawValue || !this.rawValue.length)) {
                    properties.rawValue = [];
                }
                var changes = this.$super([properties]);
                if (changes.hasOwnProperty('rawValue')) {
                    this.fire('change');
                }
            },
            repaint: painters.createRepaint(InputControl.prototype.repaint, {
                name: [
                    'datasource',
                    'boxType'
                ],
                paint: render
            }, {
                name: [
                    'disabled',
                    'readOnly'
                ],
                paint: function (group, disabled, readOnly) {
                    u.each(group.getBoxElements(), function (box) {
                        box.disabled = disabled;
                        box.readOnly = readOnly;
                    });
                }
            }, {
                name: 'rawValue',
                paint: function (group, rawValue) {
                    rawValue = rawValue || [];
                    group.rawValue = rawValue;
                    var map = {};
                    for (var i = 0; i < rawValue.length; i++) {
                        map[rawValue[i]] = true;
                    }
                    u.each(group.getBoxElements(), function (box) {
                        box.checked = map.hasOwnProperty(box.value);
                        syncCheckedState.call(group, box);
                    });
                }
            }, {
                name: 'orientation',
                paint: function (group, orientation) {
                    group.removeState('vertical');
                    group.removeState('horizontal');
                    group.addState(orientation);
                }
            }),
            parseValue: function (value) {
                return value.split(',');
            },
            getBoxElements: function () {
                return this.main.getElementsByTagName('input');
            }
        });
    function extractDatasourceFromDOM(element, options) {
        var boxes = element.getElementsByTagName('input');
        var labels = element.getElementsByTagName('label');
        var labelIndex = {};
        for (var i = labels.length - 1; i >= 0; i--) {
            var label = labels[i];
            var forAttribute = lib.getAttribute(label, 'for');
            if (forAttribute) {
                labelIndex[forAttribute] = label;
            }
        }
        var datasource = [];
        var values = [];
        for (var j = 0, max = boxes.length; j < max; j++) {
            var box = boxes[j];
            if (box.type === options.boxType && (options.name || '') === box.name) {
                var item = { value: box.value };
                var label2 = box.id && labelIndex[box.id];
                item.title = label2 ? $(label2).text() : '';
                if (!item.title) {
                    item.title = box.title || (box.value === 'on' ? box.value : '');
                }
                datasource.push(item);
                if (lib.hasAttribute(box, 'checked')) {
                    values.push(box.value);
                }
            }
        }
        options.datasource = datasource;
        if (!options.rawValue && !options.value) {
            options.rawValue = values;
        }
    }
    function syncCheckedState(element) {
        var $label = $(element.parentNode);
        var checkedClass = this.helper.getPartClassName('wrapper-checked');
        if (element.checked) {
            $label.addClass(checkedClass);
        } else {
            $label.removeClass(checkedClass);
        }
    }
    function syncValue() {
        u.each(this.getBoxElements(), syncCheckedState, this);
        var result = u.chain(this.getBoxElements()).where({ checked: true }).pluck('value').value();
        this.rawValue = result;
        this.fire('change');
    }
    var itemTemplate = [
            '<div title="${title}" class="${wrapperClass}">',
            '    <input type="${type}" name="${name}" id="${id}" title="${title}" value="${value}"${checked} />',
            '    <label for="${id}">${title}</label>',
            '</div>'
        ].join('');
    function render(group, datasource, boxType) {
        function bindUnbindBoxEvents(addEvent) {
            var eventName = group.main.addEventListener ? 'change' : 'click';
            u.each(group.getBoxElements(), function (box) {
                group.helper[addEvent ? 'addDOMEvent' : 'removeDOMEvent'](box, eventName, syncValue);
            });
        }
        bindUnbindBoxEvents(false);
        var html = '';
        var classes = [].concat(group.helper.getPartClasses(boxType), group.helper.getPartClasses('wrapper'));
        var classList = [];
        var boxClass = group.boxClass;
        if (boxClass) {
            classList.push(boxClass);
        }
        classes = classes.concat(classList);
        var valueIndex = lib.toDictionary(group.rawValue);
        var name = group.name || lib.getGUID();
        for (var i = 0; i < datasource.length; i++) {
            var item = datasource[i];
            var wrapperClass = '';
            if (valueIndex[item.value]) {
                wrapperClass += ' ' + group.helper.getPartClassName('wrapper-checked');
            }
            var data = {
                    wrapperClass: classes.join(' ') + wrapperClass,
                    id: group.helper.getId('box-' + i),
                    type: group.boxType,
                    name: name,
                    title: lib.trim(item.title || item.name || item.text),
                    value: item.value,
                    checked: valueIndex[item.value] ? ' checked="checked"' : ''
                };
            html += lib.format(itemTemplate, data);
        }
        group.main.innerHTML = html;
        bindUnbindBoxEvents(true);
    }
    esui.register(BoxGroup);
    return BoxGroup;
});

define('esui/Calendar', [
    'require',
    './MonthView',
    'underscore',
    'moment',
    './lib',
    './main',
    './InputControl',
    './Layer',
    'eoo',
    'jquery',
    './painters'
], function (require) {
    require('./MonthView');
    var u = require('underscore');
    var moment = require('moment');
    var lib = require('./lib');
    var esui = require('./main');
    var InputControl = require('./InputControl');
    var Layer = require('./Layer');
    var eoo = require('eoo');
    var $ = require('jquery');
    var painters = require('./painters');
    var CalendarLayer = eoo.create(Layer, {
            create: function () {
                var ele = this.$super(arguments);
                $(this.control.main).after(ele);
                return ele;
            },
            render: function (element) {
                element.innerHTML = '<div data-ui-type="MonthView" ' + 'data-ui-child-name="monthView"></div>';
                var calendar = this.control;
                calendar.helper.initChildren(element);
                var monthView = calendar.getChild('monthView');
                monthView.setProperties({
                    rawValue: calendar.rawValue,
                    range: calendar.range
                });
                monthView.on('change', u.bind(syncMonthViewValue, calendar));
                if (calendar.autoHideLayer) {
                    monthView.on('itemclick', u.bind(calendar.layer.toggle, calendar.layer));
                }
            },
            toggle: function () {
                var element = this.getElement();
                if (!element || !$(element).is(':visible')) {
                    var calendar = this.control;
                    var monthView = calendar.getChild('monthView');
                    monthView.setProperties({
                        rawValue: calendar.rawValue,
                        range: calendar.range
                    });
                    this.show();
                } else {
                    this.hide();
                }
            }
        });
    var Calendar = eoo.create(InputControl, {
            constructor: function () {
                this.$super(arguments);
                this.layer = new CalendarLayer(this);
            },
            type: 'Calendar',
            initOptions: function (options) {
                var now = new Date();
                var properties = {
                        rawValue: now,
                        autoHideLayer: false
                    };
                u.extend(properties, Calendar.defaultProperties, options);
                if (lib.isInput(this.main)) {
                    this.helper.extractOptionsFromInput(this.main, properties);
                }
                this.paramFormat = properties.paramFormat;
                if (options.value) {
                    properties.rawValue = this.parseValue(properties.value);
                }
                var range = properties.range;
                if (typeof range === 'string') {
                    var beginAndEnd = range.split(',');
                    var begin = this.parseValue(beginAndEnd[0]);
                    var end = this.parseValue(beginAndEnd[1]);
                    properties.range = {
                        begin: begin,
                        end: end
                    };
                }
                this.setProperties(properties);
            },
            initStructure: function () {
                var controlHelper = this.helper;
                if (lib.isInput(this.main)) {
                    controlHelper.replaceMain();
                }
                this.layer.autoCloseExcludeElements = [this.main];
                var template = [
                        '<div class="${classes}" id="${id}">${value}</div>',
                        '<div class="${arrow}"><span class="${iconCalendar}"></span></div>'
                    ];
                this.main.innerHTML = lib.format(template.join(''), {
                    classes: controlHelper.getPartClassName('text'),
                    id: controlHelper.getId('text'),
                    arrow: controlHelper.getPartClassName('arrow'),
                    iconCalendar: controlHelper.getIconClass()
                });
            },
            initEvents: function () {
                this.helper.addDOMEvent(this.main, 'click', u.bind(this.layer.toggle, this.layer));
            },
            repaint: painters.createRepaint(InputControl.prototype.repaint, {
                name: [
                    'rawValue',
                    'range'
                ],
                paint: function (calendar, rawValue, range) {
                    updateDisplayText(calendar);
                    var monthView = calendar.getChild('monthView');
                    if (monthView) {
                        monthView.setProperties({
                            rawValue: rawValue,
                            range: range
                        });
                    }
                }
            }, {
                name: [
                    'disabled',
                    'hidden',
                    'readOnly'
                ],
                paint: function (calendar, disabled, hidden, readOnly) {
                    if (disabled || hidden || readOnly) {
                        calendar.layer.hide();
                    }
                }
            }),
            setRange: function (range) {
                this.setProperties({ range: range });
            },
            stringifyValue: function (rawValue) {
                return moment(rawValue).format(this.dateFormat) || '';
            },
            parseValue: function (value) {
                var date = moment(value, this.paramFormat).toDate();
                return date;
            },
            dispose: function () {
                if (this.helper.isInStage('DISPOSED')) {
                    return;
                }
                this.$super(arguments);
                if (this.layer) {
                    this.layer.dispose();
                    this.layer = null;
                }
            }
        });
    Calendar.defaultProperties = {
        range: {
            begin: new Date(1983, 8, 3),
            end: new Date(2046, 10, 4)
        },
        dateFormat: 'YYYY-MM-DD',
        paramFormat: 'YYYY-MM-DD',
        displayFormat: 'YYYY-MM-DD'
    };
    function syncMonthViewValue() {
        var monthView = this.getChild('monthView');
        var date = monthView.getRawValue();
        if (!date) {
            return;
        }
        this.rawValue = date;
        updateDisplayText(this);
        this.fire('change');
    }
    function updateDisplayText(calendar) {
        var textHolder = calendar.helper.getPart('text');
        textHolder.innerHTML = u.escape(moment(calendar.getRawValue()).format(calendar.displayFormat));
    }
    esui.register(Calendar);
    return Calendar;
});

define('esui/CheckBox', [
    'require',
    'underscore',
    'jquery',
    './lib',
    './InputControl',
    'eoo',
    './painters',
    './main'
], function (require) {
    var u = require('underscore');
    var $ = require('jquery');
    var lib = require('./lib');
    var InputControl = require('./InputControl');
    var eoo = require('eoo');
    var painters = require('./painters');
    var CheckBox = eoo.create(InputControl, {
            type: 'CheckBox',
            getCategory: function () {
                return 'check';
            },
            initOptions: function (options) {
                var properties = {
                        value: this.main.value || 'on',
                        checked: this.main.checked || false
                    };
                u.extend(properties, options);
                properties.name = properties.name || this.main.getAttribute('name');
                var datasource = properties.datasource;
                delete properties.datasource;
                this.setProperties(properties);
                if (datasource != null) {
                    if (u.isArray(datasource)) {
                        this.checked = u.any(datasource, function (item) {
                            return item.value === this.value;
                        }, this);
                    } else if (this.rawValue === datasource) {
                        this.checked = true;
                    }
                }
                if (!this.title) {
                    this.title = this.main.title || (this.getValue() === 'on' ? '' : this.getValue());
                }
            },
            initStructure: function () {
                if ($(this.main).is('input')) {
                    var classList = this.main.className;
                    this.main.className = '';
                    this.boxId = this.main.id || this.helper.getId('box');
                    this.helper.replaceMain();
                    this.main.id = this.helper.getId();
                    if (classList) {
                        $(this.main).addClass(classList);
                    }
                } else {
                    this.boxId = this.helper.getId('box');
                }
                var html = '<input type="checkbox" name="${name}" id="${id}" />' + '<label id="${textId}" for="${id}" class="${box}"></label>';
                this.main.innerHTML = lib.format(html, {
                    name: this.name,
                    id: this.boxId,
                    textId: this.helper.getId('text'),
                    box: this.helper.getPartClasses('box')
                });
            },
            initEvents: function () {
                var box = lib.g(this.boxId);
                this.helper.addDOMEvent(box, 'click', function (e) {
                    this.fire('click');
                    if (!box.addEventListener) {
                        syncChecked.call(this, e);
                    }
                });
                if (box.addEventListener) {
                    this.helper.addDOMEvent(box, 'change', syncChecked);
                }
            },
            setProperties: function (properties) {
                var changes = this.$super(arguments);
                if (changes.hasOwnProperty('checked')) {
                    this.fire('change');
                }
            },
            getFocusTarget: function () {
                var box = lib.g(this.boxId);
                return box;
            },
            updateTitle: function (title) {
                this.title = title;
                title = u.escape(title);
                this.helper.getPart('text').innerHTML = title;
                $(this.boxId).attr('title', title);
            },
            updateIndeterminate: function (indeterminate) {
                this.helper.getPart('box').indeterminate = indeterminate;
            },
            repaint: painters.createRepaint(InputControl.prototype.repaint, {
                name: [
                    'rawValue',
                    'checked',
                    'indeterminate'
                ],
                paint: function (box, rawValue, checked, indeterminate) {
                    if (indeterminate !== undefined) {
                        box.updateIndeterminate(indeterminate);
                        delete box.indeterminate;
                    }
                    var value = box.stringifyValue(rawValue);
                    box = lib.g(box.boxId);
                    box.value = value;
                    box.checked = checked;
                }
            }, {
                name: [
                    'disabled',
                    'readOnly'
                ],
                paint: function (box, disabled, readOnly) {
                    var box1 = lib.g(box.boxId);
                    box1.disabled = disabled;
                    box1.readOnly = readOnly;
                }
            }, {
                name: 'title',
                paint: function (box, title) {
                    box.updateTitle(title);
                }
            }),
            setChecked: function (checked) {
                this.setProperties({ checked: checked });
            },
            isChecked: function () {
                if (this.helper.isInStage('RENDERED')) {
                    var box = lib.g(this.boxId);
                    return box.checked;
                }
                return this.checked;
            }
        });
    function syncChecked(e) {
        var checked = lib.g(this.boxId).checked;
        this.setProperties({ checked: checked });
    }
    require('./main').register(CheckBox);
    return CheckBox;
});

define('esui/CommandMenu', [
    'require',
    'underscore',
    'jquery',
    './lib',
    './Control',
    './Layer',
    './main',
    'eoo',
    './painters'
], function (require) {
    var u = require('underscore');
    var $ = require('jquery');
    var lib = require('./lib');
    var Control = require('./Control');
    var Layer = require('./Layer');
    var main = require('./main');
    var eoo = require('eoo');
    var painters = require('./painters');
    var CommandMenuLayer = eoo.create(Layer, {
            nodeName: 'ul',
            dock: { strictWidth: true },
            create: function () {
                var ele = this.$super(arguments);
                var $ele = $(ele);
                var ctrl = this.control;
                $ele.addClass(ctrl.helper.getPrefixClass('dropdown'));
                $(ctrl.main).after($ele);
                return ele;
            },
            render: function (element) {
                var html = '';
                var ctrl = this.control;
                var helper = ctrl.helper;
                for (var i = 0; i < ctrl.datasource.length; i++) {
                    var classes = [helper.getPartClassName('node')];
                    if (i === ctrl.activeIndex) {
                        classes.push(helper.getPartClassName('node-active'));
                    }
                    if (ctrl.datasource[i].disabled) {
                        classes.push(helper.getPartClassName('node-disabled'));
                    }
                    html += '<li data-index="' + i + '"' + ' class="' + classes.join(' ') + '">';
                    html += ctrl.getItemHTML(ctrl.datasource[i]);
                    html += '</li>';
                }
                element.innerHTML = html;
            },
            initBehavior: function (element) {
                var helper = this.control.helper;
                helper.addDOMEvent(element, 'click', '.' + helper.getPrimaryClassName('node'), selectItem);
            }
        });
    function selectItem(e) {
        var target = e.currentTarget;
        var index = +target.getAttribute('data-index');
        var item = this.datasource[index];
        if (item.disabled) {
            return;
        }
        if (typeof item.handler === 'function') {
            item.handler.call(this, item, index);
        }
        this.layer.hide();
        this.fire('select', {
            item: item,
            index: index
        });
    }
    var CommandMenu = eoo.create(Control, {
            constructor: function () {
                this.$super(arguments);
                this.layer = new CommandMenuLayer(this);
            },
            type: 'CommandMenu',
            itemTemplate: '<span>${text}</span>',
            getItemHTML: function (item) {
                var data = { text: u.escape(item.text) };
                return lib.format(this.itemTemplate, data);
            },
            initStructure: function () {
                var mainElement = this.main;
                if (!this.displayHTML) {
                    this.displayHTML = mainElement.innerHTML;
                }
                this.layer.autoCloseExcludeElements = [mainElement];
                $(mainElement).addClass(this.helper.getPrefixClass('button'));
            },
            initEvents: function () {
                this.helper.addDOMEvent(this.main, 'click', u.bind(this.layer.toggle, this.layer));
            },
            repaint: painters.createRepaint(Control.prototype.repaint, painters.style('width'), painters.style('height'), {
                name: 'datasource',
                paint: function (menu) {
                    menu.layer.repaint();
                }
            }, painters.text('displayText'), {
                name: 'displayHTML',
                paint: function (menu, displayHTML) {
                    if (!menu.displayText) {
                        menu.main.innerHTML = displayHTML;
                    }
                }
            }, {
                name: [
                    'disabled',
                    'hidden',
                    'readOnly'
                ],
                paint: function (menu, disabled, hidden, readOnly) {
                    if (disabled || hidden || readOnly) {
                        menu.layer.hide();
                    }
                }
            }),
            dispose: function () {
                if (this.helper.isInStage('DISPOSED')) {
                    return;
                }
                this.layer.autoCloseExcludeElements = [];
                if (this.layer) {
                    this.layer.dispose();
                    this.layer = null;
                }
                this.$super(arguments);
            }
        });
    main.register(CommandMenu);
    return CommandMenu;
});

define('esui/Crumb', [
    'require',
    'underscore',
    'jquery',
    './lib',
    './Control',
    './painters',
    './main',
    'eoo'
], function (require) {
    var u = require('underscore');
    var $ = require('jquery');
    var lib = require('./lib');
    var Control = require('./Control');
    var painters = require('./painters');
    var esui = require('./main');
    var eoo = require('eoo');
    var Crumb = eoo.create(Control, {
            type: 'Crumb',
            initOptions: function (options) {
                var properties = { path: [] };
                u.extend(properties, Crumb.defaultProperties, options);
                var $children = $(this.main).children();
                if (!options.path && $children.size() > 0) {
                    $children.each(function (idx, element) {
                        var $ele = $(element);
                        var node = { text: $ele.text() };
                        if ($ele.is('a')) {
                            node.href = $ele.attr('href');
                        }
                        properties.path.push(node);
                    });
                }
                this.setProperties(properties);
            },
            initEvents: function () {
                var nodeSelector = '.' + this.helper.getPrimaryClassName('node');
                this.helper.addDOMEvent(this.main, 'click', nodeSelector, click);
            },
            getNodeHTML: function (node, index) {
                var controlHelper = this.helper;
                var classes = [controlHelper.getPrimaryClassName('node')];
                if (index === 0) {
                    classes.push(controlHelper.getPrimaryClassName('node-first'));
                }
                if (index === this.path.length - 1) {
                    classes.push(controlHelper.getPrimaryClassName('node-last'));
                }
                var template = node.href ? this.linkNodeTemplate : this.textNodeTemplate;
                var data = {
                        href: u.escape(node.href),
                        text: u.escape(node.text),
                        index: index,
                        classes: classes.join(' ')
                    };
                return lib.format(template, data);
            },
            getSeparatorHTML: function () {
                return lib.format(this.separatorTemplate, {
                    classes: this.helper.getPartClassName('separator'),
                    text: u.escape(this.separator)
                });
            },
            repaint: painters.createRepaint(Control.prototype.repaint, {
                name: [
                    'path',
                    'separator'
                ],
                paint: function (crumb, path) {
                    var html = u.map(path, crumb.getNodeHTML, crumb);
                    var separator = crumb.getSeparatorHTML();
                    crumb.main.innerHTML = html.join(separator);
                }
            })
        });
    Crumb.defaultProperties = {
        separator: '>',
        textNodeTemplate: '<span class="${classes}" data-index="${index}">${text}</span>',
        linkNodeTemplate: '<a class="${classes}" href="${href}" data-index="${index}">${text}</a>',
        separatorTemplate: '<span class="${classes}">${text}</span>'
    };
    function click(e) {
        var $node = $(e.currentTarget);
        var dataIndex = $node.attr('data-index');
        dataIndex = parseInt(dataIndex, 10) || $node.prevAll().size() / 2;
        var returnedEvent = this.fire('click', { item: this.path[dataIndex] });
        returnedEvent.isDefaultPrevented() && e.preventDefault();
        returnedEvent.isPropagationStopped() && e.stopPropagation();
    }
    esui.register(Crumb);
    return Crumb;
});

define('esui/Table', [
    'require',
    'eoo',
    './main',
    './lib',
    'underscore',
    './Control',
    './painters',
    'jquery',
    './behavior/Mouse'
], function (require) {
    var eoo = require('eoo');
    var esui = require('./main');
    var lib = require('./lib');
    var u = require('underscore');
    var Control = require('./Control');
    var painters = require('./painters');
    var $ = require('jquery');
    require('./behavior/Mouse');
    var Table = eoo.create(Control, {
            constructor: function (options) {
                var protectedProperties = {
                        followHeightArr: [
                            0,
                            0
                        ],
                        followWidthArr: [],
                        handlers: []
                    };
                this.$super([u.extend({}, options, protectedProperties)]);
            },
            type: 'Table',
            initOptions: function (options) {
                var properties = {};
                u.extend(properties, Table.defaultProperties, options);
                this.setProperties(properties);
            },
            initStructure: function () {
                this.realWidth = getWidth(this);
                if (this.realWidth) {
                    this.main.style.width = this.realWidth + 'px';
                }
                resetMainZIndex(this);
                initBaseBuilderList(this);
                initResizeHandler(this);
                initMainEventhandler(this);
            },
            repaint: function (changes, changesIndex) {
                this.$super(arguments);
                var table = this;
                if (!table.realWidth) {
                    table.realWidth = getWidth(table);
                    if (table.realWidth) {
                        table.main.style.width = table.realWidth + 'px';
                    }
                }
                var defaultProperties = Table.defaultProperties;
                var allProperities = {};
                if (!changes) {
                    for (var property in defaultProperties) {
                        if (defaultProperties.hasOwnProperty(property)) {
                            allProperities[property] = true;
                        }
                    }
                } else {
                    for (var i = 0; i < changes.length; i++) {
                        var record = changes[i];
                        allProperities[record.name] = true;
                    }
                }
                var fieldsChanged = false;
                var colsWidthChanged = false;
                var tbodyChange = false;
                if (allProperities.fields || allProperities.select || allProperities.selectMode || allProperities.sortable) {
                    initFields(table);
                    fieldsChanged = true;
                }
                if (fieldsChanged || allProperities.breakLine || allProperities.colPadding || allProperities.fontSize) {
                    initMinColsWidth(table);
                    initColsWidth(table);
                    colsWidthChanged = true;
                }
                if (fieldsChanged || colsWidthChanged || allProperities.noHead || allProperities.order || allProperities.orderBy || allProperities.selectedIndex) {
                    renderHead(table);
                }
                if (allProperities.followHead || allProperities.noFollowHeadCache) {
                    initFollowHead(table);
                    initTopResetHandler(table);
                }
                if (fieldsChanged || colsWidthChanged || allProperities.encode || allProperities.noDataHtml || allProperities.datasource || allProperities.selectedIndex) {
                    renderBody(table);
                    tbodyChange = true;
                }
                if (tbodyChange || allProperities.bodyMaxHeight) {
                    updateBodyMaxHeight(table);
                }
                if (fieldsChanged || colsWidthChanged || allProperities.foot) {
                    renderFoot(table);
                }
                table.extraRepaint = painters.createRepaint([
                    {
                        name: 'disabled',
                        paint: setDisabledStyle
                    },
                    {
                        name: 'width',
                        paint: handleResize
                    },
                    {
                        name: 'zIndex',
                        paint: resetMainZIndex
                    }
                ]);
                table.extraRepaint(changes, changesIndex);
                if (tbodyChange && table.helper.isInStage('RENDERED')) {
                    switch (table.select) {
                    case 'multi':
                        setSelectedIndex(table, []);
                        table.fire('select', { selectedIndex: table.selectedIndex });
                        break;
                    }
                }
                if (table.realWidth !== getWidth(table)) {
                    handleResize(table);
                }
            },
            getId: function (id) {
                return getId(this, id);
            },
            getBodyCellId: function (rowIndex, fieldIndex) {
                return getBodyCellId(this, rowIndex, fieldIndex);
            },
            setCellText: function (text, rowIndex, columnIndex, isEncodeHtml) {
                if (isEncodeHtml) {
                    text = u.escape(text);
                }
                text = isNullOrEmpty(text) ? '&nbsp' : text;
                lib.g(getId(this, 'cell-textfield-' + rowIndex + '-' + columnIndex)).innerHTML = text;
            },
            getClass: function (name) {
                return getClass(this, name);
            },
            getRow: function (index) {
                return getRow(this, index);
            },
            addRowBuilders: function (builders) {
                addRowBuilderList(this, builders);
            },
            addHandlers: function (eventType, handlers) {
                if (!handlers.length) {
                    handlers = [handlers];
                }
                return addHandlers(this, this.main, eventType, handlers);
            },
            removeHandlers: function (eventType, handlers) {
                if (!handlers.length) {
                    handlers = [handlers];
                }
                removeHandlers(this, this.main, eventType, handlers);
            },
            adjustWidth: function () {
                handleResize(this);
            },
            setDatasource: function (datasource) {
                this.datasource = datasource;
                setSelectedIndex(this, []);
                var record = { name: 'datasource' };
                var record2 = { name: 'selectedIndex' };
                this.repaint([
                    record,
                    record2
                ], {
                    datasource: record,
                    selectedIndex: record2
                });
            },
            updateRowAt: function (index, data) {
                data && (this.datasource[index] = data);
                var dataItem = this.datasource[index];
                var rowEl = getRow(this, index);
                if (dataItem && rowEl) {
                    this.fire('beforerowupdate', {
                        index: index,
                        data: dataItem
                    });
                    var container = document.createElement('div');
                    container.innerHTML = getRowHtml(this, data, index, this.rowBuilderList);
                    var newRowEl = container.children[0];
                    rowEl.parentNode.replaceChild(newRowEl, rowEl);
                    this.fire('afterrowupdate', {
                        index: index,
                        data: dataItem
                    });
                }
            },
            getSelectedItems: function () {
                var selectedIndex = this.selectedIndex;
                var result = [];
                if (selectedIndex) {
                    var datasource = this.datasource;
                    if (datasource) {
                        for (var i = 0; i < selectedIndex.length; i++) {
                            result.push(datasource[selectedIndex[i]]);
                        }
                    }
                }
                return result;
            },
            setRowSelected: function (index, isSelected) {
                var table = this;
                var isMutil = table.select === 'multi';
                var selectedHandler = isMutil ? selectMulti : selectSingle;
                if (u.isArray(index)) {
                    if (isMutil) {
                        u.each(index, function (value) {
                            selectedHandler(table, value, isSelected);
                        });
                    } else {
                        selectedHandler(table, index[0], isSelected);
                    }
                } else {
                    selectedHandler(table, index, isSelected);
                }
                if (isMutil) {
                    resetMutilSelectedStatus(table);
                }
            },
            setAllRowSelected: function (isSelected) {
                this.setRowSelected(-1, isSelected);
            },
            resetFollowHead: function () {
                resetFollowHead(this);
            },
            dispose: function () {
                var helper = this.helper;
                if (helper.isInStage('DISPOSED')) {
                    return;
                }
                helper.beforeDispose();
                var main = this.main;
                if (main) {
                    this.followDoms = null;
                    var mark = lib.g(getId(this, 'drag-mark'));
                    if (mark) {
                        document.body.removeChild(mark);
                    }
                }
                this.rowBuilderList = null;
                this.headPanel.disposeChildren();
                this.bodyPanel.disposeChildren();
                this.headPanel = null;
                this.bodyPanel = null;
                helper.dispose();
                helper.afterDispose();
            }
        });
    Table.defaultProperties = {
        noDataHtml: '\u6CA1\u6709\u6570\u636E',
        subEntryOpenTip: '\u70B9\u51FB\u5C55\u5F00',
        subEntryCloseTip: '\u70B9\u51FB\u6536\u8D77',
        noFollowHeadCache: false,
        followHead: false,
        sortable: false,
        encode: false,
        columnResizable: false,
        rowWidthOffset: -1,
        select: '',
        selectMode: 'box',
        subrowMutex: 1,
        subEntryWidth: 18,
        breakLine: false,
        hasTip: false,
        hasSubrow: false,
        tipWidth: 18,
        sortWidth: 9,
        fontSize: 13,
        colPadding: 8,
        zIndex: 0,
        overflowX: 'hidden'
    };
    function hasValue(obj) {
        return !(typeof obj === 'undefined' || obj === null);
    }
    function isNullOrEmpty(obj) {
        return !hasValue(obj) || !obj.toString().length;
    }
    function setAttr(element, key, value) {
        lib.setAttribute(element, 'data-' + key, value);
    }
    function getAttr(element, key) {
        return lib.getAttribute(element, 'data-' + key);
    }
    function getStyleNum(element, styleName) {
        var result = lib.getStyle(element, styleName);
        return result === '' ? 0 : parseInt(result, 10) || 0;
    }
    function getId(table, name) {
        return table.helper.getId(name);
    }
    function getClass(table, name) {
        return table.helper.getPartClasses(name).join(' ');
    }
    function getHead(table) {
        return lib.g(getId(table, 'head'));
    }
    function getBody(table) {
        return lib.g(getId(table, 'body'));
    }
    function getFoot(table) {
        return lib.g(getId(table, 'foot'));
    }
    function getRow(table, index) {
        return lib.g(getId(table, 'row') + index);
    }
    function getHeadCheckbox(table) {
        return lib.g(getId(table, 'select-all'));
    }
    function setSelectedIndex(table, selectedIndex) {
        table.selectedIndex = selectedIndex;
        var selectedIndexMap = {};
        for (var i = selectedIndex.length - 1; i >= 0; i--) {
            selectedIndexMap[selectedIndex[i]] = 1;
        }
        table.selectedIndexMap = selectedIndexMap;
    }
    function isRowSelected(table, index) {
        if (table.selectedIndexMap) {
            return !!table.selectedIndexMap[index];
        }
        return false;
    }
    function getBodyWidth(table) {
        var bodyWidth = 0;
        var fields = table.realFields;
        var minColsWidth = table.minColsWidth;
        for (var i = 0, len = fields.length; i < len; i++) {
            var field = fields[i];
            bodyWidth += field.width || minColsWidth[i];
        }
        return bodyWidth;
    }
    function getWidth(table) {
        if (table.width) {
            return table.width;
        }
        var rulerDiv = document.createElement('div');
        var parent = table.main.parentNode;
        parent.appendChild(rulerDiv);
        var width = rulerDiv.offsetWidth;
        rulerDiv.parentNode.removeChild(rulerDiv);
        return width;
    }
    function initFields(table) {
        if (!table.fields) {
            return;
        }
        var fields = table.fields;
        var realFields = fields.slice(0);
        var len = realFields.length;
        while (len--) {
            if (!realFields[len]) {
                realFields.splice(len, 1);
            }
        }
        table.realFields = realFields;
        if (!table.select) {
            return;
        }
        switch (table.select.toLowerCase()) {
        case 'multi':
            realFields.unshift(getMultiSelectField(table));
            break;
        case 'single':
            realFields.unshift(getSingleSelectField(table));
            break;
        }
    }
    var tplTablePrefix = '<table cellpadding="0" cellspacing="0" ' + 'width="${width}" data-control-table="${controlTableId}">';
    function initFollowHead(table) {
        if (table.followHead) {
            cachingFollowDoms(table);
            if (!table.noFollowHeadCache) {
                resetFollowOffset(table);
            }
        }
    }
    function resetFollowHead(table) {
        if (table.followHead) {
            cachingFollowDoms(table);
            resetFollowOffset(table);
        }
    }
    function cachingFollowDoms(table) {
        if (!table.followHead) {
            return;
        }
        var followDoms = table.followDoms = [];
        var walker = table.main.parentNode.firstChild;
        var tableId = table.id;
        while (walker) {
            if (walker.nodeType === 1 && getAttr(walker, 'follow-thead') === tableId) {
                followDoms.push(walker);
            }
            walker = walker.nextSibling;
        }
        resetFollowDomsWidth(table);
        resetFollowHeight(table);
    }
    function resetFollowHeight(table) {
        var followDoms = table.followDoms;
        var followHeights = table.followHeightArr;
        followHeights[0] = 0;
        var i = 0;
        for (var len = followDoms.length; i < len; i++) {
            var dom = followDoms[i];
            followHeights[i + 1] = followHeights[i] + dom.offsetHeight;
        }
        followHeights[i + 1] = followHeights[i];
        followHeights.lenght = i + 2;
    }
    function resetFollowDomsWidth(table) {
        var followDoms = table.followDoms;
        var followWidths = table.followWidthArr;
        for (var i = 0, len = followDoms.length; i < len; i++) {
            var dom = followDoms[i];
            var followWidth = getStyleNum(dom, 'padding-left') + getStyleNum(dom, 'padding-right') + getStyleNum(dom, 'border-left-width') + getStyleNum(dom, 'border-right-width');
            followWidths[i] = followWidth;
            followDoms[i].style.width = table.realWidth - followWidth + 'px';
        }
    }
    function resetFollowOffset(table) {
        var followDoms = table.followDoms;
        var followOffest = lib.getOffset(followDoms[0] || table.main);
        table.followTop = followOffest.top;
        table.followLeft = followOffest.left;
    }
    function initMinColsWidth(table) {
        var fields = table.realFields;
        var result = [];
        var fontSize = table.fontSize;
        var extraWidth = table.colPadding * 2 + 5;
        if (!table.noHead) {
            for (var i = 0, len = fields.length; i < len; i++) {
                var field = fields[i];
                var width = field.minWidth;
                if (!width && !field.breakLine) {
                    width = field.title.length * fontSize + extraWidth + (table.sortable && field.sortable ? table.sortWidth : 0) + (field.tip ? table.tipWidth : 0);
                }
                result[i] = width;
            }
        } else {
            var minWidth = fontSize + extraWidth;
            for (i = 0, len = fields.length; i < len; i++) {
                result[i] = minWidth;
            }
        }
        table.minColsWidth = result;
    }
    function initColsWidth(table) {
        var fields = table.realFields;
        var canExpand = [];
        table.colsWidth = [];
        var bodyWidth = table.overflowX === 'auto' ? getBodyWidth(table) : table.realWidth;
        bodyWidth = Math.max(bodyWidth, table.realWidth);
        table.bodyWidth = bodyWidth;
        var leftWidth = bodyWidth - 1;
        for (var i = 0, len = fields.length; i < len; i++) {
            var field = fields[i];
            var width = field.width;
            width = width ? parseInt(width, 10) : 0;
            table.colsWidth.push(width);
            leftWidth -= width;
            if (!field.stable) {
                canExpand.push(i);
            }
        }
        len = canExpand.length;
        var leaveAverage = Math.round(leftWidth / len);
        var index;
        var offset;
        var minWidth;
        for (i = 0; i < len; i++) {
            index = canExpand[i];
            offset = Math.abs(leftWidth) < Math.abs(leaveAverage) ? leftWidth : leaveAverage;
            leftWidth -= offset;
            table.colsWidth[index] += offset;
            minWidth = table.minColsWidth[index];
            if (minWidth > table.colsWidth[index]) {
                leftWidth += table.colsWidth[index] - minWidth;
                table.colsWidth[index] = minWidth;
            }
        }
        if (leftWidth < 0) {
            i = 0;
            while (i < len && leftWidth !== 0) {
                index = canExpand[i];
                minWidth = table.minColsWidth[index];
                if (minWidth < table.colsWidth[index]) {
                    offset = table.colsWidth[canExpand[i]] - minWidth;
                    offset = offset > Math.abs(leftWidth) ? leftWidth : -offset;
                    leftWidth += Math.abs(offset);
                    table.colsWidth[index] += offset;
                }
                i++;
            }
        } else if (leftWidth > 0) {
            table.colsWidth[canExpand[0]] += leftWidth;
        }
    }
    function renderFoot(table) {
        var foot = getFoot(table);
        if (!(table.foot instanceof Array)) {
            foot && (foot.style.display = 'none');
        } else {
            if (!foot) {
                foot = document.createElement('div');
                foot.id = getId(table, 'foot');
                foot.className = getClass(table, 'foot');
                setAttr(foot, 'control-table', table.id);
                table.main.appendChild(foot);
            }
            foot.style.display = '';
            if (table.realWidth) {
                foot.style.width = table.realWidth + 'px';
            }
            foot.innerHTML = getFootHtml(table);
        }
    }
    function getFootHtml(table) {
        var html = [];
        var footArray = table.foot;
        var fieldIndex = 0;
        var colsWidth = table.colsWidth;
        var thCellClass = getClass(table, 'fcell');
        var thTextClass = getClass(table, 'fcell-text');
        var rowWidthOffset = table.rowWidthOffset;
        html.push(lib.format(tplTablePrefix, {
            width: '100%',
            controlTableId: table.id
        }), '<tr>');
        for (var i = 0, len = footArray.length; i < len; i++) {
            var footInfo = footArray[i];
            var colWidth = colsWidth[fieldIndex];
            var colspan = footInfo.colspan || 1;
            var thClass = [thCellClass];
            var contentHtml = footInfo.content;
            if ('function' === typeof contentHtml) {
                contentHtml = contentHtml.call(table);
            }
            if (isNullOrEmpty(contentHtml)) {
                contentHtml = '&nbsp;';
            }
            for (var j = 1; j < colspan; j++) {
                colWidth += colsWidth[fieldIndex + j];
            }
            fieldIndex += colspan;
            if (footInfo.align) {
                thClass.push(getClass(table, 'cell-align-' + footInfo.align));
            }
            colWidth += rowWidthOffset;
            colWidth < 0 && (colWidth = 0);
            html.push('<th id="' + getFootCellId(table, i) + '" ' + 'class="' + thClass.join(' ') + '"', ' style="width:' + colWidth + 'px;', (colWidth ? '' : 'display:none;') + '">', '<div class="' + thTextClass + '">', contentHtml, '</div></th>');
        }
        html.push('</tr></table>');
        return html.join('');
    }
    function renderHead(table) {
        var head = getHead(table);
        var headPanelId = getId(table, 'head-panel');
        if (!head) {
            head = document.createElement('div');
            head.id = getId(table, 'head');
            head.className = getClass(table, 'head');
            setAttr(head, 'control-table', table.id);
            table.main.appendChild(head);
            head.innerHTML = lib.format('<div id="${id}" data-ui="type:Panel;id:${id};"></div>', { id: headPanelId });
            table.initChildren(head);
            table.headPanel = table.viewContext.get(headPanelId);
            table.helper.addDOMEvent(head, 'mousemove', headMoveHandler);
            $(head).mouse({
                start: u.partial(dragStartHandler, table),
                drag: u.partial(dragingHandler, table),
                stop: u.partial(dragEndHandler, table)
            });
        }
        if (table.noHead) {
            head.style.display = 'none';
            return;
        }
        head.style.display = '';
        if (table.bodyWidth) {
            head.style.width = table.bodyWidth + 'px';
        }
        lib.g(headPanelId).innerHTML = getHeadHtml(table);
        initHeadChildren(table, table.viewContext.get(headPanelId));
    }
    function initHeadChildren(table, headPanel) {
        if (headPanel.children) {
            headPanel.disposeChildren();
        }
        if (table.hasTip) {
            headPanel.initChildren();
        }
    }
    var tplSortIcon = '<div class="${className}"></div>';
    var tplTitleTip = '<div id="${id}" ' + 'class="${className}" ' + 'data-ui="type:Tip;id:${id};content:${content}">' + '</div>';
    function getHeadHtml(table) {
        var fields = table.realFields;
        var thCellClass = getClass(table, 'hcell');
        var thTextClass = getClass(table, 'hcell-text');
        var breakClass = getClass(table, 'cell-break');
        var iconClass = table.helper.getIconClass();
        var sortClass = getClass(table, 'hsort') + ' ' + iconClass;
        var selClass = getClass(table, 'hcell-sel');
        var canDragBegin = -1;
        var canDragEnd = -1;
        var rowWidthOffset = table.rowWidthOffset;
        if (!table.disabled) {
            for (var i = 0, len = fields.length; i < len; i++) {
                if (!fields[i].stable) {
                    canDragBegin = i;
                    break;
                }
            }
            for (i = len - 1; i >= 0; i--) {
                if (!fields[i].stable) {
                    canDragEnd = i;
                    break;
                }
            }
        }
        var html = [];
        html.push(lib.format(tplTablePrefix, {
            width: '100%',
            controlTableId: table.id
        }), '<tr>');
        u.each(fields, function (field, i) {
            var thClass = [thCellClass];
            var title = field.title;
            var sortable = table.sortable && field.sortable;
            var currentSort = sortable && field.field && field.field === table.orderBy;
            var realThTextClass = thTextClass;
            if (i === 0) {
                realThTextClass += ' ' + getClass(table, 'hcell-text-first');
            }
            if (i === len - 1) {
                realThTextClass += ' ' + getClass(table, 'hcell-text-last');
            }
            var sortIconHtml = '';
            if (sortable) {
                thClass.push(getClass(table, 'hcell-sort'));
                if (currentSort) {
                    thClass.push(getClass(table, 'hcell-' + table.order));
                }
                sortIconHtml = lib.format(tplSortIcon, { className: sortClass });
            }
            if (field.align) {
                thClass.push(getClass(table, 'cell-align-' + field.align));
            }
            if (table.breakLine || field.breakLine) {
                thClass.push(breakClass);
            }
            var titleTipHtml = '';
            var titleTipContent = '';
            var tip = field.tip;
            if (typeof tip === 'function') {
                titleTipContent = tip.call(table);
            } else {
                titleTipContent = tip;
            }
            if (titleTipContent) {
                titleTipHtml = lib.format(tplTitleTip, {
                    id: getId(table, 'htip' + i),
                    className: getClass(table, 'htip'),
                    content: titleTipContent
                });
                table.hasTip = true;
            }
            var contentHtml;
            if (typeof title === 'function') {
                contentHtml = title.call(table);
            } else {
                contentHtml = title;
            }
            if (isNullOrEmpty(contentHtml)) {
                contentHtml = '&nbsp;';
            }
            var tpl = '<th id="${cellId}" data-index="${index}" class="${classes}"' + ' ${sortable} ${dragRight} ${dragLeft} ' + 'style="width:${width}px; ${display}">' + '<div class="${realThTextClass} ${selClass}">' + '${content}' + '</div>' + '</th>';
            html.push(lib.format(tpl, {
                cellId: getTitleCellId(table, i),
                index: i,
                classes: thClass.join(' '),
                sorable: sortable ? 'data-sortable="1"' : '',
                dragRight: i >= canDragBegin && i < canDragEnd ? 'data-dragright="1"' : '',
                dragLeft: i <= canDragEnd && i > canDragBegin ? 'data-dragleft="1"' : '',
                width: table.colsWidth[i] + rowWidthOffset,
                display: table.colsWidth[i] ? '' : 'display:none',
                realThTextClass: realThTextClass,
                selClass: field.select ? selClass : '',
                content: titleTipHtml + contentHtml + sortIconHtml
            }));
        });
        html.push('</tr></table>');
        return html.join('');
    }
    function getTitleCellId(table, index) {
        return getId(table, 'title-cell') + index;
    }
    function getFootCellId(table, index) {
        return getId(table, 'foot-cell') + index;
    }
    function isDragging(table) {
        var head = table.helper.getPart('head');
        var mouse = $(head).mouse('instance');
        return !!mouse.mouseStarted;
    }
    function titleOverHandler(element, e) {
        titleOver(this, element);
    }
    function titleOver(table, element) {
        if (isDragging(table) || table.dragReady) {
            return;
        }
        table.helper.addPartClasses('hcell-hover', element);
        if (table.sortable) {
            table.sortReady = 1;
            var index = getAttr(element, 'index');
            var field = table.realFields[index];
            if (field && field.sortable) {
                table.helper.addPartClasses('hcell-sort-hover', element);
            }
        }
    }
    function titleOutHandler(cell, e) {
        titleOut(this, cell);
    }
    function titleOut(table, element) {
        table.helper.removePartClasses('hcell-hover', element);
        if (table.sortable) {
            table.sortReady = 0;
            table.helper.removePartClasses('hcell-sort-hover', element);
        }
    }
    function titleClickHandler(cell, e) {
        var table = this;
        if (table.sortable && table.sortReady) {
            var index = getAttr(cell, 'index');
            var field = table.realFields[index];
            if (field.sortable) {
                var orderBy = table.orderBy;
                var order = table.order;
                if (orderBy === field.field) {
                    order = !order || order === 'asc' ? 'desc' : 'asc';
                } else {
                    order = 'desc';
                }
                table.setProperties({
                    order: order,
                    orderBy: field.field
                });
                table.fire('sort', {
                    field: field,
                    order: order
                });
            }
        }
    }
    function headMoveHandler(e) {
        var table = this;
        if (!table.columnResizable || isDragging(table)) {
            return;
        }
        var dragClass = 'startdrag';
        var range = 8;
        var target = e.originalEvent.target;
        target = findDragCell(table, target);
        if (!target) {
            return;
        }
        var head = table.helper.getPart('head');
        var pageX = e.pageX || e.clientX + lib.page.getScrollLeft();
        var pos = lib.getOffset(target);
        var sortable = getAttr(target, 'sortable');
        if (getAttr(target, 'dragleft') && pageX - pos.left < range) {
            sortable && titleOut(table, target);
            table.helper.addPartClasses(dragClass, head);
            table.dragPoint = 'left';
            table.dragReady = 1;
        } else if (getAttr(target, 'dragright') && pos.left + target.offsetWidth - pageX < range) {
            sortable && titleOut(table, target);
            table.helper.addPartClasses(dragClass, head);
            table.dragPoint = 'right';
            table.dragReady = 1;
        } else {
            table.helper.removePartClasses(dragClass, head);
            table.dragPoint = '';
            table.dragReady = 0;
            titleOver(table, target);
        }
    }
    function findDragCell(table, target) {
        while (target.nodeType === 1) {
            if (target.nodeName === 'TH') {
                return target;
            }
            target = target.parentNode;
        }
        return null;
    }
    function dragStartHandler(table, e) {
        if (!table.columnResizable) {
            return false;
        }
        table.fire('startdrag');
        table.fire('dragstart');
        var dragClass = getClass(table, 'startdrag');
        var target = e.originalEvent.target;
        target = findDragCell(table, target);
        if (!target) {
            return false;
        }
        if (lib.g(getId(table, 'head')).className.indexOf(dragClass) < 0) {
            return false;
        }
        table.htmlHeight = document.documentElement.clientHeight;
        table.dragIndex = getAttr(target, 'index');
        table.dragStart = e.pageX || e.clientX + lib.page.getScrollLeft();
        initTableOffset(table);
        showDragMark(table, table.dragStart);
        return true;
    }
    function initTableOffset(table) {
        var tableOffset = lib.getOffset(table.main);
        table.top = tableOffset.top;
        table.left = tableOffset.left;
    }
    function dragingHandler(table, e) {
        e = e || window.event;
        showDragMark(table, e.pageX || e.clientX + lib.page.getScrollLeft());
        return false;
    }
    function showDragMark(table, left) {
        var mark = getDragMark(table);
        var right = table.left + table.realWidth;
        var rangeLeft = table.left + 1;
        var rangeRight = right - 1;
        left = left < rangeLeft ? rangeLeft : left;
        left = left > rangeRight ? rangeRight : left;
        if (!mark) {
            mark = createDragMark(table);
        }
        mark.style.top = table.top + 'px';
        mark.style.left = left + 'px';
        mark.style.zIndex = table.zIndex || '';
        var height = table.htmlHeight - table.top + lib.page.getScrollTop();
        var mainHeight = table.main.offsetHeight;
        height = mainHeight > height ? height : mainHeight;
        mark.style.height = height + 'px';
    }
    function hideDragMark(table) {
        var mark = getDragMark(table);
        mark.style.left = '-10000px';
        mark.style.top = '-10000px';
    }
    function createDragMark(table) {
        var mark = document.createElement('div');
        mark.id = getId(table, 'drag-mark');
        mark.className = getClass(table, 'mark ');
        mark.style.top = '-10000px';
        mark.style.left = '-10000px';
        document.body.appendChild(mark);
        return mark;
    }
    function getDragMark(table) {
        return lib.g(getId(table, 'drag-mark'));
    }
    function dragEndHandler(table, e) {
        var index = parseInt(table.dragIndex, 10);
        if (table.dragPoint === 'left') {
            index--;
        }
        var colsWidth = table.colsWidth;
        var minWidth = table.minColsWidth[index];
        var pageX = e.pageX;
        var offsetX = pageX - table.dragStart;
        var currentWidth = colsWidth[index] + offsetX;
        if (currentWidth < minWidth) {
            offsetX += minWidth - currentWidth;
            currentWidth = minWidth;
        }
        var alters = [];
        var alterWidths = [];
        var alterWidth;
        var fields = table.realFields;
        var fieldLen = fields.length;
        var alterSum = 0;
        for (var i = index + 1; i < fieldLen; i++) {
            if (!fields[i].stable && colsWidth[i] > 0) {
                alters.push(i);
                alterWidth = colsWidth[i];
                alterWidths.push(alterWidth);
                alterSum += alterWidth;
            }
        }
        var revise = 0;
        var leave = offsetX;
        var alterLen = alters.length;
        for (i = 0; i < alterLen; i++) {
            var alter = alters[i];
            alterWidth = alterWidths[i];
            var roughWidth = offsetX * alterWidth / alterSum;
            var offsetWidth = leave > 0 ? Math.ceil(roughWidth) : Math.floor(roughWidth);
            offsetWidth = Math.abs(offsetWidth) < Math.abs(leave) ? offsetWidth : leave;
            alterWidth -= offsetWidth;
            leave -= offsetWidth;
            minWidth = table.minColsWidth[alter];
            if (alterWidth < minWidth) {
                revise += minWidth - alterWidth;
                alterWidth = minWidth;
            }
            colsWidth[alter] = alterWidth;
        }
        currentWidth -= revise;
        colsWidth[index] = currentWidth;
        resetColumns(table);
        hideDragMark(table);
        table.fire('enddrag');
        table.fire('dragend');
        return false;
    }
    function renderBody(table) {
        var tBody = getBody(table);
        var tBodyPanelId = getId(table, 'body-panel');
        if (!tBody) {
            var type = 'body';
            var id = getId(table, type);
            tBody = document.createElement('div');
            tBody.id = id;
            tBody.className = getClass(table, type);
            table.main.appendChild(tBody);
            tBody.innerHTML = lib.format('<div id="${id}" data-ui="type:Panel;id:${id}"></div>', { id: tBodyPanelId });
            table.initChildren(tBody);
            table.bodyPanel = table.viewContext.get(tBodyPanelId);
        }
        var style = tBody.style;
        style.overflowX = 'auto';
        style.overflowY = 'auto';
        if (table.bodyWidth) {
            style.width = table.bodyWidth + 'px';
        }
        table.bodyPanel.disposeChildren();
        lib.g(tBodyPanelId).innerHTML = getBodyHtml(table);
        table.fire('bodyChange');
    }
    function updateBodyMaxHeight(table) {
        var tBody = getBody(table);
        var style = tBody.style;
        var dataLen = table.datasource.length;
        var bodyMaxHeight = table.bodyMaxHeight;
        if (bodyMaxHeight > 0 && dataLen > 0) {
            var totalHeight = bodyMaxHeight;
            var bodyContainer = lib.g(getId(table, 'body-panel'));
            if (bodyContainer) {
                totalHeight = bodyContainer.offsetHeight;
            }
            if (totalHeight >= bodyMaxHeight) {
                style.height = bodyMaxHeight + 'px';
                return;
            }
        }
        style.height = 'auto';
    }
    var noDataHtmlTpl = '<div class="${className}">${html}</div>';
    function getBodyHtml(table) {
        var data = table.datasource || [];
        var dataLen = data.length;
        var html = [];
        if (!dataLen) {
            return lib.format(noDataHtmlTpl, {
                className: getClass(table, 'body-nodata'),
                html: table.noDataHtml
            });
        }
        var rowBuilderList = table.rowBuilderList;
        for (var i = 0; i < dataLen; i++) {
            var item = data[i];
            html.push(getRowHtml(table, item, i, rowBuilderList));
        }
        return html.join('');
    }
    function getBodyCellId(table, rowIndex, fieldIndex) {
        return getId(table, 'cell') + rowIndex + '-' + fieldIndex;
    }
    var tplRowPrefix = '<div id="${id}" class="${className}" data-index="${index}" ${attr}>';
    function addRowBuilderList(table, builderList) {
        var rowBuilderList = table.rowBuilderList || [];
        for (var i = 0, l = builderList.length; i < l; i++) {
            var builder = builderList[i];
            if (!builder.getColHtml) {
                continue;
            }
            if (builder.getSubrowHtml) {
                table.hasSubrow = true;
            }
            if (!hasValue(builder.index)) {
                builder.index = 1000;
            }
            rowBuilderList.push(builder);
        }
        rowBuilderList.sort(function (a, b) {
            return a.index - b.index;
        });
        table.rowBuilderList = rowBuilderList;
    }
    function initBaseBuilderList(table) {
        addRowBuilderList(table, [{
                index: 1,
                getRowArgs: getRowBaseArgs,
                getColHtml: getColBaseHtml
            }]);
    }
    function getRowHtml(table, data, index, builderList) {
        var html = [];
        var fields = table.realFields;
        var rowWidthOffset = table.rowWidthOffset;
        var extraArgsList = [];
        var rowClass = [];
        var rowAttr = [];
        for (var i = 0, l = builderList.length; i < l; i++) {
            var builder = builderList[i];
            var rowArgs = builder.getRowArgs ? builder.getRowArgs(table, index) || {} : {};
            extraArgsList.push(rowArgs);
            rowArgs.rowClass && rowClass.push(rowArgs.rowClass);
            rowArgs.rowAttr && rowAttr.push(rowArgs.rowAttr);
        }
        function sortByIndex(a, b) {
            return a.index - b.index;
        }
        u.each(fields, function (field, i) {
            var colWidth = table.colsWidth[i];
            var colClass = [];
            var textClass = [];
            var colAttr = [];
            var textAttr = [];
            var textHtml = [];
            var allHtml = [];
            var textStartIndex = -1;
            for (var s = 0, t = builderList.length; s < t; s++) {
                var colResult = builderList[s].getColHtml(table, data, field, index, i, extraArgsList[s]);
                if (!colResult) {
                    continue;
                }
                var colHtml = colResult.html;
                if (colResult.colClass) {
                    colClass.push(colResult.colClass);
                }
                if (colResult.textClass) {
                    textClass.push(colResult.textClass);
                }
                if (colResult.colAttr) {
                    colAttr.push(colResult.colAttr);
                }
                if (colResult.textAttr) {
                    textAttr.push(colResult.textAttr);
                }
                if (hasValue(colHtml)) {
                    if (colResult.notInText) {
                        colResult.index = s;
                        allHtml.push(colResult);
                    } else {
                        textHtml.push(colHtml);
                        textStartIndex < 0 && (textStartIndex = s);
                    }
                }
            }
            var contentHtml;
            textHtml = [
                '<div class="' + textClass.join(' ') + '" ',
                textAttr.join(' ') + '>',
                textHtml.join(''),
                '</div>'
            ].join('');
            allHtml.push({
                html: textHtml,
                index: textStartIndex
            });
            allHtml.sort(sortByIndex);
            if (allHtml.length > 1) {
                contentHtml = [
                    '<table width="100%" cellpadding="0" cellspacing="0">',
                    '<tr>'
                ];
                for (s = 0, t = allHtml.length; s < t; s++) {
                    var aHtml = allHtml[s];
                    contentHtml.push('<td ', hasValue(aHtml.width) ? ' width="' + aHtml.width + '" ' : '', aHtml.align ? ' align="' + aHtml.align + '">' : '>', aHtml.html, '</td>');
                }
                contentHtml.push('</tr></table>');
                contentHtml = contentHtml.join('');
            } else {
                contentHtml = textHtml;
            }
            html.push('<td id="' + getBodyCellId(table, index, i) + '" ', 'class="' + colClass.join(' ') + '" ', colAttr.join(' ') + ' ', 'style="width:' + (colWidth + rowWidthOffset) + 'px;', (colWidth ? '' : 'display:none') + '" ', 'data-control-table="' + table.id + '" ', 'data-row="' + index + '" data-col="' + i + '">', contentHtml, '</td>');
        });
        html.unshift(lib.format(tplRowPrefix, {
            id: getId(table, 'row') + index,
            className: rowClass.join(' '),
            attr: rowAttr.join(' '),
            index: index
        }), lib.format(tplTablePrefix, {
            width: '100%',
            controlTableId: table.id
        }));
        html.push('</tr></table></div>');
        if (table.hasSubrow) {
            for (i = 0, l = builderList.length; i < l; i++) {
                var subrowBuilder = builderList[i].getSubrowHtml;
                if (subrowBuilder) {
                    html.push(subrowBuilder(table, index, extraArgsList[i]));
                }
            }
        }
        return html.join('');
    }
    function getRowBaseArgs(table, rowIndex) {
        var datasource = table.datasource || [];
        var dataLen = datasource.length;
        return {
            tdCellClass: getClass(table, 'cell'),
            tdBreakClass: getClass(table, 'cell-break'),
            tdTextClass: getClass(table, 'cell-text'),
            fieldLen: table.realFields.length,
            rowClass: [
                getClass(table, 'row'),
                getClass(table, 'row-' + (rowIndex % 2 ? 'odd' : 'even')),
                isRowSelected(table, rowIndex) ? getClass(table, 'row-selected') : '',
                dataLen - 1 === rowIndex ? getClass(table, 'row-last') : ''
            ].join(' ')
        };
    }
    var baseColTextTpl = '<span id="${colTextId}">${content}</span>';
    function getColBaseHtml(table, data, field, rowIndex, fieldIndex, extraArgs) {
        var tdCellClass = extraArgs.tdCellClass;
        var tdBreakClass = extraArgs.tdBreakClass;
        var tdTextClass = extraArgs.tdTextClass;
        var tdClass = [tdCellClass];
        var textClass = [tdTextClass];
        var content = field.content;
        if (fieldIndex === 0) {
            textClass.push(getClass(table, 'cell-text-first'));
        }
        if (fieldIndex === extraArgs.fieldLen - 1) {
            textClass.push(getClass(table, 'cell-text-last'));
        }
        if (table.breakLine || field.breakLine) {
            tdClass.push(tdBreakClass);
        }
        if (field.select) {
            textClass.push(getClass(table, 'cell-sel'));
        }
        if (field.align) {
            tdClass.push(getClass(table, 'cell-align-' + field.align));
        }
        if (field.field && field.field === table.orderBy) {
            tdClass.push(getClass(table, 'cell-sorted'));
        }
        var contentHtml = 'function' === typeof content ? content.call(table, data, rowIndex, fieldIndex) : table.encode ? u.escape(data[content]) : data[content];
        if (isNullOrEmpty(contentHtml)) {
            contentHtml = '&nbsp;';
        }
        return {
            colClass: tdClass.join(' '),
            textClass: textClass.join(' '),
            html: lib.format(baseColTextTpl, {
                colTextId: getId(table, 'cell-textfield-' + rowIndex + '-' + fieldIndex),
                content: contentHtml
            })
        };
    }
    function rowOverHandler(element, e) {
        if (isDragging(this)) {
            return;
        }
        this.helper.addPartClasses('row-hover', element);
    }
    function rowOutHandler(element, e) {
        this.helper.removePartClasses('row-hover', element);
    }
    function rowClickHandler(element, e) {
        var table = this;
        var rowClassName = table.helper.getPartClasses('cell-text')[0];
        if (table.selectMode === 'line' && lib.hasClass(e.target, rowClassName)) {
            if (table.dontSelectLine) {
                table.dontSelectLine = false;
                return;
            }
            var index = getAttr(element, 'index');
            switch (table.select) {
            case 'multi':
                var input = lib.g(getId(table, 'multi-select') + index);
                selectMulti(table, index, !input.checked);
                resetMutilSelectedStatus(table);
                break;
            case 'single':
                selectSingle(table, index, true);
                break;
            }
        }
    }
    function initResizeHandler(table) {
        table.viewWidth = lib.page.getViewWidth();
        table.viewHeight = lib.page.getViewHeight();
        var resizeHandler = function () {
            var viewWidth = lib.page.getViewWidth();
            var viewHeight = lib.page.getViewHeight();
            if (viewWidth === table.viewWidth && viewHeight === table.viewHeight) {
                return;
            }
            table.viewWidth = viewWidth;
            table.viewHeight = viewHeight;
            handleResize(table);
        };
        table.helper.addDOMEvent(window, 'resize', resizeHandler);
    }
    function handleResize(table) {
        var head = getHead(table);
        var foot = getFoot(table);
        table.realWidth = getWidth(table);
        var widthStr = table.realWidth + 'px';
        if (table.realWidth) {
            table.main.style.width = widthStr;
        }
        initColsWidth(table);
        resetColumns(table);
        var bodyWidthStr = table.bodyWidth + 'px';
        if (table.realWidth) {
            getBody(table).style.width = bodyWidthStr;
            head && (head.style.width = bodyWidthStr);
            foot && (foot.style.width = widthStr);
        }
        if (table.followHead) {
            resetFollowDomsWidth(table);
            resetFollowHeight(table);
        }
        initTableOffset(table);
        table.fire('resize');
        table.topReseter && table.topReseter();
    }
    function setPos(element, pos, top, left) {
        if (element) {
            element.style.top = top + 'px';
            element.style.left = left + 'px';
            element.style.position = pos;
        }
    }
    function initTopResetHandler(table) {
        if (!table.followHead || table.topReseter) {
            return;
        }
        var domHead = getHead(table);
        var placeHolderId = getId(table, 'top-placeholder');
        var domPlaceholder = document.createElement('div');
        domPlaceholder.id = placeHolderId;
        domPlaceholder.style.width = '100%';
        domPlaceholder.style.display = 'none';
        lib.insertBefore(domPlaceholder, table.main);
        domPlaceholder = null;
        table.topReseter = function () {
            if (!table.followHead) {
                return;
            }
            var scrollTop = lib.page.getScrollTop();
            var posStyle = lib.ie && lib.ie < 7 ? 'absolute' : 'fixed';
            var mainHeight = table.main.offsetHeight;
            var absolutePosition = posStyle === 'absolute';
            var placeHolder = lib.g(placeHolderId);
            var followDoms = table.followDoms;
            if (table.noFollowHeadCache) {
                var position = domHead.style.position;
                if (position !== 'fixed' && position !== 'absolute') {
                    resetFollowOffset(table);
                }
            }
            var i;
            if (scrollTop > table.followTop && (absolutePosition || scrollTop - table.followTop < mainHeight)) {
                var scrollLeft = lib.page.getScrollLeft();
                var fhArr = table.followHeightArr;
                var fhLen = fhArr.length;
                initTableOffset(table);
                var curLeft = absolutePosition ? table.left : table.left - scrollLeft;
                placeHolder.style.height = fhArr[fhLen - 1] + domHead.offsetHeight + 'px';
                placeHolder.style.display = '';
                if (lib.ie && lib.ie < 8) {
                    domHead.style.zIndex = table.zIndex + 1;
                }
                if (absolutePosition) {
                    var len = followDoms.length;
                    for (i = 0; i < len; i++) {
                        setPos(followDoms[i], posStyle, fhArr[i] + scrollTop, curLeft);
                    }
                    setPos(domHead, posStyle, fhArr[fhLen - 1] + scrollTop, curLeft);
                } else {
                    for (i = 0, len = followDoms.length; i < len; i++) {
                        setPos(followDoms[i], posStyle, fhArr[i], curLeft);
                    }
                    setPos(domHead, posStyle, fhArr[fhLen - 1], curLeft);
                }
            } else {
                placeHolder.style.height = 0;
                placeHolder.style.display = 'none';
                posStyle = '';
                for (i = 0, len = followDoms.length; i < len; i++) {
                    setPos(followDoms[i], posStyle, 0, 0);
                }
                setPos(domHead, posStyle, 0, 0);
                domHead.style.zIndex = '';
            }
        };
        table.helper.addDOMEvent(window, 'scroll', table.topReseter);
    }
    function resetColumns(table) {
        var colsWidth = table.colsWidth;
        var foot = table.foot;
        var id = table.id;
        var len = foot instanceof Array && foot.length;
        var tds = getBody(table).getElementsByTagName('td');
        var tdsLen = tds.length;
        var rowWidthOffset = table.rowWidthOffset;
        var i;
        var j;
        var width;
        var td;
        if (len) {
            var colIndex = 0;
            for (i = 0; i < len; i++) {
                var item = foot[i];
                width = colsWidth[colIndex];
                var colspan = item.colspan || 1;
                for (j = 1; j < colspan; j++) {
                    width += colsWidth[colIndex + j];
                }
                colIndex += colspan;
                td = lib.g(getFootCellId(table, i));
                width = Math.max(width + rowWidthOffset, 0);
                td.style.width = width + 'px';
                td.style.display = width ? '' : 'none';
            }
        }
        len = colsWidth.length;
        if (!table.noHead) {
            for (i = 0; i < len; i++) {
                width = Math.max(colsWidth[i] + rowWidthOffset, 0);
                td = lib.g(getTitleCellId(table, i));
                td.style.width = width + 'px';
                td.style.display = width ? '' : 'none';
            }
        }
        j = 0;
        for (i = 0; i < tdsLen; i++) {
            td = tds[i];
            if (getAttr(td, 'control-table') === id) {
                width = Math.max(colsWidth[j % len] + rowWidthOffset, 0);
                td.style.width = width + 'px';
                td.style.display = width ? '' : 'none';
                j++;
            }
        }
    }
    var mutilSelectAllTpl = '<div class="${checkboxClassName}">' + '<input ' + 'type="checkbox" ' + 'id="${id}" ' + 'class="${className}" ' + 'data-index="${index}" ' + '${disabled}/><label for="${id}"></label></div>';
    var mutilSelectTpl = '<div class="${checkboxClassName}">' + '<input type="checkbox" id="${id}" class="${className}" ' + 'data-index="${index}" ${disabled} ${checked} />' + '<label for="${id}"></label></div>';
    function getMultiSelectField(table) {
        var helper = table.helper;
        var cls = [
                helper.getPrefixClass('checkbox-custom'),
                helper.getPrefixClass('checkbox-single')
            ].join(' ');
        return {
            width: 30,
            stable: true,
            select: true,
            title: function (item, index) {
                var data = {
                        id: getId(table, 'select-all'),
                        className: getClass(table, 'select-all'),
                        disabled: table.disabled ? 'disabled="disabled"' : '',
                        index: index,
                        checkboxClassName: cls
                    };
                return lib.format(mutilSelectAllTpl, data);
            },
            content: function (item, index) {
                var data = {
                        id: getId(table, 'multi-select') + index,
                        className: getClass(table, 'multi-select'),
                        disabled: table.disabled ? 'disabled="disabled"' : '',
                        index: index,
                        checked: isRowSelected(table, index) ? 'checked="checked"' : '',
                        checkboxClassName: cls
                    };
                return lib.format(mutilSelectTpl, data);
            }
        };
    }
    var singleSelectTpl = '<div class="${checkboxClassName}">' + '<input type="radio" id="${id}" name="${name}" class="${className}" ' + 'data-index="${index}" ${disabled} ${checked} />' + '<label for="${id}"></label></div>';
    function getSingleSelectField(table) {
        return {
            width: 30,
            stable: true,
            title: '&nbsp;',
            select: true,
            content: function (item, index) {
                var id = getId(table, 'single-select');
                var data = {
                        id: id + index,
                        name: id,
                        className: getClass(table, 'single-select'),
                        index: index,
                        disabled: table.disabled ? 'disabled="disabled"' : '',
                        checked: isRowSelected(table, index) ? 'checked="checked"' : '',
                        checkboxClassName: table.helper.getPrefixClass('radio-custom')
                    };
                return lib.format(singleSelectTpl, data);
            }
        };
    }
    function rowCheckboxClick(element) {
        var index = getAttr(element, 'index');
        selectMulti(this, index);
        resetMutilSelectedStatus(this);
    }
    function selectMulti(table, index, isSelected) {
        var selectedClass = 'row-selected';
        var helper = table.helper;
        var row;
        var input;
        if (index >= 0) {
            input = lib.g(getId(table, 'multi-select') + index);
            if (input) {
                hasValue(isSelected) && (input.checked = isSelected);
                row = getRow(table, index);
                if (input.checked) {
                    helper.addPartClasses(selectedClass, row);
                } else {
                    helper.removePartClasses(selectedClass, row);
                }
            }
        } else if (hasValue(isSelected)) {
            var inputs = findSelectBox(table, 'checkbox');
            for (var i = 0, len = inputs.length; i < len; i++) {
                input = inputs[i];
                input.checked = isSelected;
                var inputIndex = getAttr(input, 'index');
                row = getRow(table, inputIndex);
                if (isSelected) {
                    helper.addPartClasses(selectedClass, row);
                } else {
                    helper.removePartClasses(selectedClass, row);
                }
            }
        }
    }
    function resetMutilSelectedStatus(table) {
        var selectAll = getHeadCheckbox(table);
        var inputs = findSelectBox(table, 'checkbox');
        var allChecked = true;
        var selected = [];
        var cbIdPrefix = getId(table, 'multi-select');
        for (var i = 0, len = inputs.length; i < len; i++) {
            var input = inputs[i];
            if (input.id.indexOf(cbIdPrefix) >= 0) {
                var inputIndex = getAttr(input, 'index');
                if (!input.checked) {
                    allChecked = false;
                } else {
                    selected.push(inputIndex);
                }
            }
        }
        setSelectedIndex(table, selected);
        table.fire('select', { selectedIndex: selected });
        selectAll.checked = allChecked;
    }
    function toggleSelectAll() {
        selectAll(this, getHeadCheckbox(this).checked);
    }
    function findSelectBox(table, type) {
        var inputs = getBody(table).getElementsByTagName('input');
        var result = [];
        for (var i = 0, len = inputs.length; i < len; i++) {
            var input = inputs[i];
            var inputId = input.id;
            if (input.getAttribute('type') === type && inputId) {
                result.push(input);
            }
        }
        return result;
    }
    function selectAll(table, checked) {
        selectMulti(table, -1, checked);
        resetMutilSelectedStatus(table);
    }
    function selectSingleHandler(element) {
        selectSingle(this, getAttr(element, 'index'), true);
    }
    function selectSingle(table, index, isSelected) {
        var selectedIndex = table.selectedIndex;
        if (index >= 0) {
            var input = lib.g(getId(table, 'single-select') + index);
            if (input) {
                hasValue(isSelected) && (input.checked = isSelected);
                table.fire('select', { selectedIndex: index });
                if (selectedIndex && selectedIndex.length) {
                    table.helper.removePartClasses('row-selected', getRow(table, selectedIndex[0]));
                }
                if (isSelected) {
                    setSelectedIndex(table, [index]);
                    table.helper.addPartClasses('row-selected', getRow(table, index));
                }
            }
        }
    }
    function resetMainZIndex(table) {
        table.main.style.zIndex = table.zIndex || '';
    }
    function setDisabledStyle(table) {
        var inputs = findSelectBox(table, table.select === 'multi' ? 'checkbox' : 'radio');
        for (var i = inputs.length - 1; i >= 0; i--) {
            if (table.disabled) {
                inputs[i].setAttribute('disabled', 'disabled');
            } else {
                inputs[i].removeAttribute('disabled');
            }
        }
        if (table.select === 'multi') {
            var selectAll = getHeadCheckbox(table);
            if (selectAll) {
                if (table.disabled) {
                    selectAll.setAttribute('disabled', 'disabled');
                } else {
                    selectAll.removeAttribute('disabled');
                }
            }
        }
        if (table.children && table.children.length) {
            var children = table.children;
            for (i = children.length - 1; i >= 0; i--) {
                children[i].setDisabled(table.disabled);
            }
        }
    }
    var rclass = /[\t\r\n]/g;
    function getClassMatch(className) {
        var cssClass = ' ' + className + ' ';
        return function (element) {
            var elClassName = ' ' + element.className + ' ';
            return elClassName.replace(rclass, ' ').indexOf(cssClass) >= 0;
        };
    }
    function createHandlerItem(handler, matchFn) {
        var fn = null;
        if (matchFn) {
            fn = 'function' === typeof matchFn ? matchFn : getClassMatch(matchFn);
        }
        return {
            handler: handler,
            matchFn: fn
        };
    }
    function getHandlers(table, element, eventType) {
        var realId = element.id;
        var handlers = table.handlers[realId];
        if (!handlers) {
            handlers = table.handlers[realId] = {};
        }
        if (eventType) {
            handlers = table.handlers[eventType];
            if (!handlers) {
                handlers = table.handlers[eventType] = [];
            }
        }
        return handlers;
    }
    function addHandlers(table, element, eventType, handlers) {
        var handlerQueue = getHandlers(table, element, eventType);
        var addedHandlers = [];
        if (!handlerQueue.length) {
            addDelegate(table, element, eventType);
        }
        for (var i = 0, l = handlers.length; i < l; i++) {
            var item = handlers[i];
            var hanlderItem = createHandlerItem(item.handler, item.matchFn);
            handlerQueue.push(hanlderItem);
            addedHandlers.push(hanlderItem);
        }
        return addedHandlers;
    }
    function removeHandlers(table, element, eventType, handlers) {
        var handlerQueue = getHandlers(table, element, eventType);
        for (var i = 0, len = handlers.length; i < len; i++) {
            var handler = handlers[i];
            for (var j = 0, l = handlerQueue.length; j < l; j++) {
                if (handlerQueue[j] === handler) {
                    handlerQueue.splice(j, 1);
                    j--;
                }
            }
        }
        if (!handlerQueue.length) {
            removeDelegate(table, element, eventType);
        }
    }
    function getDelegateHandler(element, handlerQueue, scope) {
        return function (e) {
            var cur = e.target;
            while (cur) {
                if (cur.nodeType === 1) {
                    for (var i = handlerQueue.length - 1; i >= 0; i--) {
                        var handlerItem = handlerQueue[i];
                        if (!handlerItem.matchFn || handlerItem.matchFn(cur)) {
                            handlerItem.handler.call(scope, cur, e);
                        }
                    }
                }
                if (cur === element) {
                    break;
                }
                cur = cur.parentNode;
            }
        };
    }
    function addDelegate(control, element, eventType) {
        var handlerQueue = getHandlers(control, element, eventType);
        control.helper.addDOMEvent(element, eventType, getDelegateHandler(element, handlerQueue, control));
    }
    function removeDelegate(control, element, eventType) {
        control.helper.removeDOMEvent(element, eventType);
    }
    function initMainEventhandler(table) {
        var helper = table.helper;
        var rowClass = helper.getPartClassName('row');
        var titleClass = helper.getPartClassName('hcell');
        var selectAllClass = helper.getPartClassName('select-all');
        var multiSelectClass = helper.getPartClassName('multi-select');
        var singleSelectClass = helper.getPartClassName('single-select');
        addHandlers(table, table.main, 'mouseover', [
            {
                handler: rowOverHandler,
                matchFn: rowClass
            },
            {
                handler: titleOverHandler,
                matchFn: titleClass
            }
        ]);
        addHandlers(table, table.main, 'mouseout', [
            {
                handler: rowOutHandler,
                matchFn: rowClass
            },
            {
                handler: titleOutHandler,
                matchFn: titleClass
            }
        ]);
        addHandlers(table, table.main, 'click', [
            {
                handler: rowClickHandler,
                matchFn: rowClass
            },
            {
                handler: titleClickHandler,
                matchFn: titleClass
            },
            {
                handler: toggleSelectAll,
                matchFn: selectAllClass
            },
            {
                handler: rowCheckboxClick,
                matchFn: multiSelectClass
            },
            {
                handler: selectSingleHandler,
                matchFn: singleSelectClass
            }
        ]);
    }
    esui.register(Table);
    return Table;
});

define('esui/extension/AutoSort', [
    'require',
    'underscore',
    '../Table',
    '../Extension',
    'eoo',
    'esui'
], function (require) {
    var u = require('underscore');
    var Table = require('../Table');
    var Extension = require('../Extension');
    var eoo = require('eoo');
    var esui = require('esui');
    var AutoSort = eoo.create(Extension, {
            type: 'AutoSort',
            activate: function () {
                if (!(this.target instanceof Table)) {
                    return;
                }
                this.target.on('sort', sort);
                this.$super(arguments);
            },
            inactivate: function () {
                if (!(this.target instanceof Table)) {
                    return;
                }
                this.target.un('sort', sort);
                this.$super(arguments);
            }
        });
    function sort(e) {
        var computeDiff = e.field.comparer;
        if (!computeDiff) {
            var fieldName = e.field.field;
            computeDiff = function (x, y) {
                if (fieldName) {
                    x = x[fieldName];
                    y = y[fieldName];
                }
                return u.isString(x) && u.isString(y) ? x.localeCompare(y) : x - y;
            };
        }
        function compare(x, y) {
            var diff = computeDiff(x, y);
            return e.order === 'asc' ? diff : -diff;
        }
        var datasource = this.datasource;
        datasource.sort(compare);
        this.setDatasource(datasource);
    }
    esui.registerExtension(AutoSort);
    return AutoSort;
});

define('esui/extension/Command', [
    'require',
    'underscore',
    '../lib',
    '../Extension',
    'eoo',
    '../main'
], function (require) {
    var u = require('underscore');
    var lib = require('../lib');
    var Extension = require('../Extension');
    var eoo = require('eoo');
    var esui = require('../main');
    var Command = eoo.create(Extension, {
            constructor: function (options) {
                options = options || {};
                if (!options.events) {
                    options.events = ['click'];
                } else {
                    options.events = lib.splitTokenList(options.events);
                }
                this.$super(arguments);
            },
            type: 'Command',
            handleCommand: function (e) {
                var target = e.target;
                var endpoint = this.main && this.main.parentNode;
                while (target && target !== endpoint) {
                    if (target.nodeType === 1 && (target.disabled !== true || e.type !== 'click')) {
                        var commandName = target.getAttribute('data-command');
                        if (commandName) {
                            var args = target.getAttribute('data-command-args');
                            var event = this.fire('command', {
                                    name: commandName,
                                    triggerType: e.type,
                                    args: args
                                }, e);
                            if (event.isPropagationStopped()) {
                                return;
                            }
                        }
                    }
                    target = target.parentNode;
                }
            },
            activate: function () {
                for (var i = 0; i < this.events.length; i++) {
                    this.target.helper.addDOMEvent(this.target.main, this.events[i], this.handleCommand);
                }
                this.$super(arguments);
            },
            inactivate: function () {
                for (var i = 0; i < this.events.length; i++) {
                    this.target.helper.removeDOMEvent(this.target.main, this.events[i], this.handleCommand);
                }
                this.$super(arguments);
            }
        });
    Command.createDispatcher = function (config) {
        var map = config;
        if (u.isArray(config)) {
            map = {};
            for (var i = 0; i < config.length; i++) {
                var item = config[i];
                var name = item.triggerType ? item.triggerType + ':' + item.name : item.name;
                map[name] = item.handler;
            }
        }
        return function (e) {
            var handler = map[e.triggerType + ':' + e.name];
            var method;
            if (!handler) {
                handler = map[e.name];
            }
            if (!handler) {
                method = 'execute' + lib.pascalize(e.name) + lib.pascalize(e.triggerType);
                handler = this[method];
            }
            if (typeof handler !== 'function') {
                method = 'execute' + lib.pascalize(e.name);
                handler = this[method];
            }
            if (typeof handler !== 'function') {
                handler = map[e.triggerType + ':*'];
            }
            if (!handler) {
                handler = map['*'];
            }
            if (typeof handler === 'function') {
                handler.apply(this, arguments);
            }
        };
    };
    esui.registerExtension(Command);
    return Command;
});

define('esui/extension/CustomData', [
    'require',
    '../Extension',
    '../main',
    'eoo'
], function (require) {
    var Extension = require('../Extension');
    var esui = require('../main');
    var eoo = require('eoo');
    var CustomData = eoo.create(Extension, {
            type: 'CustomData',
            activate: function () {
                var dataProperty = /^data[A-Z0-9]/;
                this.$super(arguments);
                var data = this.target.data;
                if (typeof data !== 'object') {
                    data = esui.parseAttribute(this.target.data);
                }
                for (var key in this.target) {
                    if (this.target.hasOwnProperty(key) && dataProperty.test(key)) {
                        var dataKey = key.charAt(4).toLowerCase() + key.slice(5);
                        data[dataKey] = this.target[key];
                    }
                }
                this.target.getData = function (key) {
                    return data[key];
                };
                this.target.setData = function (key, value) {
                    data[key] = value;
                };
            },
            inactivate: function () {
                this.$super(arguments);
                delete this.target.getData;
                delete this.target.setData;
            }
        });
    esui.registerExtension(CustomData);
    return CustomData;
});

define('esui/validator/ValidityState', ['eoo'], function () {
    var eoo = require('eoo');
    var ValidityState = eoo.create({
            constructor: function (state, message) {
                this.state = state;
                this.message = message || '';
            },
            getMessage: function () {
                return this.message;
            },
            getState: function () {
                return this.state;
            },
            setMessage: function (message) {
                this.message = message;
            },
            setState: function (state) {
                this.state = state;
            }
        });
    return ValidityState;
});

define('esui/validator/Rule', [
    'require',
    './ValidityState',
    '../lib',
    'eoo'
], function (require) {
    var ValidityState = require('./ValidityState');
    var lib = require('../lib');
    var eoo = require('eoo');
    var Rule = eoo.create({
            type: null,
            errorMessage: '${title}\u9A8C\u8BC1\u5931\u8D25',
            check: function (value, control) {
                return new ValidityState(true, '');
            },
            getErrorMessage: function (control) {
                var errorMessage = control.get(this.type + 'ErrorMessage') || this.errorMessage;
                return lib.format(errorMessage, control);
            },
            getLimitCondition: function (control) {
                return control.get(this.type);
            },
            getName: function () {
                return this.type;
            }
        });
    return Rule;
});

define('esui/validator/MaxLengthRule', [
    'require',
    './Rule',
    './ValidityState',
    'eoo',
    '../main',
    '../lib'
], function (require) {
    var Rule = require('./Rule');
    var ValidityState = require('./ValidityState');
    var eoo = require('eoo');
    var esui = require('../main');
    var lib = require('../lib');
    var MaxLengthRule = eoo.create(Rule, {
            type: 'maxLength',
            errorMessage: '${title}\u4E0D\u80FD\u8D85\u8FC7${maxLength}\u4E2A\u5B57\u7B26',
            check: function (value, control) {
                return new ValidityState(value.length <= this.getLimitCondition(control), this.getErrorMessage(control));
            },
            getErrorMessage: function (control) {
                var errorMessage = control.get(this.type + 'ErrorMessage') || this.errorMessage;
                var maxLength = this.getLimitCondition(control);
                var data = {
                        title: control.get('title'),
                        maxLength: maxLength,
                        length: maxLength
                    };
                return lib.format(errorMessage, data);
            },
            getLimitCondition: function (control) {
                return control.get('length') || control.get('maxLength');
            }
        });
    esui.registerRule(MaxLengthRule, 100);
    return MaxLengthRule;
});

define('esui/validator/MaxRule', [
    'require',
    './Rule',
    './ValidityState',
    'eoo',
    '../main'
], function (require) {
    var Rule = require('./Rule');
    var ValidityState = require('./ValidityState');
    var eoo = require('eoo');
    var esui = require('../main');
    var MaxRule = eoo.create(Rule, {
            type: 'max',
            errorMessage: '${title}\u4E0D\u80FD\u5927\u4E8E${max}',
            check: function (value, control) {
                var valueOfNumber = +value;
                var isValidNumber = !isNaN(valueOfNumber) && valueOfNumber <= this.getLimitCondition(control);
                return new ValidityState(!value || isValidNumber, this.getErrorMessage(control));
            }
        });
    esui.registerRule(MaxRule, 301);
    return MaxRule;
});

define('esui/validator/MinRule', [
    'require',
    './Rule',
    './ValidityState',
    'eoo',
    '../main'
], function (require) {
    var Rule = require('./Rule');
    var ValidityState = require('./ValidityState');
    var eoo = require('eoo');
    var esui = require('../main');
    var MinRule = eoo.create(Rule, {
            type: 'min',
            errorMessage: '${title}\u4E0D\u80FD\u5C0F\u4E8E${min}',
            check: function (value, control) {
                var valueOfNumber = +value;
                var isValidNumber = !isNaN(valueOfNumber) && valueOfNumber >= this.getLimitCondition(control);
                return new ValidityState(!value || isValidNumber, this.getErrorMessage(control));
            }
        });
    esui.registerRule(MinRule, 300);
    return MinRule;
});

define('esui/validator/RequiredRule', [
    'require',
    './Rule',
    './ValidityState',
    'eoo',
    '../main'
], function (require) {
    var Rule = require('./Rule');
    var ValidityState = require('./ValidityState');
    var eoo = require('eoo');
    var esui = require('../main');
    var RequiredRule = eoo.create(Rule, {
            type: 'required',
            errorMessage: '${title}\u4E0D\u80FD\u4E3A\u7A7A',
            check: function (value, control) {
                return new ValidityState(!!value, this.getErrorMessage(control));
            }
        });
    esui.registerRule(RequiredRule, 0);
    return RequiredRule;
});

define('esui/validator/PatternRule', [
    'require',
    './Rule',
    './ValidityState',
    'eoo',
    '../main'
], function (require) {
    var Rule = require('./Rule');
    var ValidityState = require('./ValidityState');
    var eoo = require('eoo');
    var esui = require('../main');
    var PatternRule = eoo.create(Rule, {
            type: 'pattern',
            errorMessage: '${title}\u683C\u5F0F\u4E0D\u7B26\u5408\u8981\u6C42',
            check: function (value, control) {
                var regex = new RegExp(this.getLimitCondition(control));
                return new ValidityState(!value || regex.test(value), this.getErrorMessage(control));
            }
        });
    esui.registerRule(PatternRule, 200);
    return PatternRule;
});

define('esui/extension/TableEdit', [
    'require',
    '../validator/MaxLengthRule',
    '../validator/MaxRule',
    '../validator/MinRule',
    '../validator/RequiredRule',
    '../validator/PatternRule',
    '../Extension',
    '../lib',
    '../main',
    '../Table',
    '../validator/ValidityState',
    '../validator/Validity',
    '../Layer',
    'underscore',
    'eoo'
], function (require) {
    require('../validator/MaxLengthRule');
    require('../validator/MaxRule');
    require('../validator/MinRule');
    require('../validator/RequiredRule');
    require('../validator/PatternRule');
    var Extension = require('../Extension');
    var lib = require('../lib');
    var esui = require('../main');
    var Table = require('../Table');
    var ValidityState = require('../validator/ValidityState');
    var Validity = require('../validator/Validity');
    var Layer = require('../Layer');
    var u = require('underscore');
    var eoo = require('eoo');
    var layContentTpl = [
            '<div class="${optClass}">',
            '<div id="${inputFieldId}"></div>',
            '<div class="${editorBtnClass}">',
            '<button data-ui="id:${okId};type:Button;variants:primary">${okText}</button> ',
            '<button data-ui="id:${cancelId};type:Button;variants:link">',
            '${cancelText}',
            '</button>',
            '</div>',
            '</div>',
            '<div class="${errorClass}" id="${errorId}"></div>'
        ].join('');
    var inputFieldId = 'ctrl-table-editor-inputField';
    var inputId = 'ctrl-table-editorInput';
    var validId = 'ctrl-table-editor-validityLabel';
    var okId = 'ctrl-table-editor-ok';
    var cancelId = 'ctrl-table-editor-cancel';
    var errorId = 'ctrl-table-editor-error';
    var okText = '\u786E\u5B9A';
    var cancelText = '\u53D6\u6D88';
    var inputTpl = '<input data-ui="type:TextBox;id:${inputId}"/>';
    var validTpl = '<label data-ui="type:Validity;id:${validId}"></label>';
    var currentRowIndex = -1;
    var currentColIndex = -1;
    var currentState = 0;
    var layer = null;
    var inputCtrl = null;
    var okButton = null;
    var cancelButton = null;
    var currentTable = null;
    var currentField = null;
    var guid = 1;
    var TableEdit = eoo.create(Extension, {
            type: 'TableEdit',
            activate: function () {
                var target = this.target;
                if (!(target instanceof Table)) {
                    return;
                }
                target.startEdit = startEdit;
                target.cancelEdit = cancelEdit;
                target.hideEditLayer = hideEditLayer;
                target.showEditError = showEditError;
                target.addRowBuilders([{
                        index: 3,
                        getColHtml: getColHtml
                    }]);
                target.addHandlers('click', {
                    handler: entranceClickHandler,
                    matchFn: target.helper.getPartClassName('cell-editentry')
                });
                target.on('enddrag', tableEndDragHandler);
                target.on('resize', tableResizeHandler);
                this.$super(arguments);
            },
            inactivate: function () {
                var target = this.target;
                if (!(target instanceof Table)) {
                    return;
                }
                delete target.startEdit;
                delete target.cancelEdit;
                target.un('enddrag', tableEndDragHandler);
                target.un('resize', tableResizeHandler);
                disposeEditorControl(target);
                this.$super(arguments);
            }
        });
    function init(table, options) {
        currentTable = table;
        currentRowIndex = options.rowIndex;
        currentColIndex = options.columnIndex;
        if (!layer) {
            layer = Layer.create();
            document.body.appendChild(layer);
            layer.className = table.helper.getPartClassName('editor');
            initLayer();
        }
        layer.style.zIndex = table.zIndex || '';
        initInputControl(options);
    }
    function initLayer() {
        fillLayer();
        initButtonControl();
    }
    function initButtonControl() {
        var controlMap = esui.init(layer);
        okButton = getControlFromMap(controlMap, okId);
        cancelButton = getControlFromMap(controlMap, cancelId);
        okButton.on('click', getOkHandler());
        cancelButton.on('click', getCancelHandler());
        setButtonDisabled(1);
    }
    function initInputControl(options) {
        if (options.field && currentField !== options.field) {
            inputCtrl && inputCtrl.dispose();
            inputCtrl = null;
            var newInputId = inputId + guid++;
            var newValidId = validId + guid;
            var inputField = lib.g(inputFieldId);
            var errorField = lib.g(errorId);
            inputField.innerHTML = lib.format(inputTpl, { inputId: newInputId });
            errorField.innerHTML = lib.format(validTpl, { validId: newValidId });
            var inputCtrlOptions = { properties: {} };
            inputCtrlOptions.properties[newInputId] = u.extend({
                id: newInputId,
                validityLabel: validId + guid
            }, options.field.editRules);
            inputCtrl = esui.init(inputField, inputCtrlOptions)[0];
            esui.init(errorField);
            inputCtrl.on('enter', getOkHandler());
            currentField = options.field;
        }
    }
    function disposeEditorControl(table) {
        if (table === currentTable) {
            hideLayer();
            inputCtrl.dispose();
            okButton.dispose();
            cancelButton.dispose();
            try {
                layer && document.body.removeChild(layer);
            } catch (ex) {
            }
            layer = null;
            inputCtrl = null;
            okButton = null;
            cancelButton = null;
            currentTable = null;
            currentField = null;
        }
    }
    function fillLayer() {
        layer.innerHTML = lib.format(layContentTpl, {
            inputFieldId: inputFieldId,
            okId: okId,
            cancelId: cancelId,
            okText: okText,
            cancelText: cancelText,
            optClass: currentTable.helper.getPartClassName('editor-opt'),
            errorClass: currentTable.helper.getPartClassName('editor-error'),
            errorId: errorId,
            editorBtnClass: currentTable.helper.getPartClassName('editor-buttons')
        });
    }
    function getControlFromMap(controlMap, id) {
        for (var i = controlMap.length - 1; i >= 0; i--) {
            var control = controlMap[i];
            if (control.id === id) {
                return control;
            }
        }
    }
    function hideLayer() {
        layer && (layer.style.display = 'none');
    }
    function showLayer() {
        layer && (layer.style.display = '');
    }
    function showErrorMsg(error) {
        if (error) {
            var validity = new Validity();
            validity.addState('TableEditCustomRule', new ValidityState(false, error));
            inputCtrl.showValidity(validity);
        }
    }
    function clearErrorMsg(error) {
        var validity = new Validity();
        validity.addState('TableEditCustomRule', new ValidityState(true));
        inputCtrl.showValidity(validity);
    }
    function getOkHandler() {
        return function () {
            saveEdit();
        };
    }
    function saveEdit() {
        if (inputCtrl.validate()) {
            var eventArgs = {
                    value: getValue(),
                    rowIndex: currentRowIndex,
                    columnIndex: currentColIndex,
                    field: currentTable.realFields[currentColIndex]
                };
            var event = currentTable.fire('saveedit', eventArgs);
            fieldHanlder(currentTable, 'saveedit', eventArgs);
            if (!event.isDefaultPrevented()) {
                saveSuccessHandler.call(currentTable, eventArgs);
            } else {
                saveFailedHandler.call(currentTable, eventArgs);
            }
        }
    }
    function saveSuccessHandler(eventArgs) {
        if (this === currentTable) {
            hideLayer();
            currentState = 0;
        }
    }
    function saveFailedHandler(eventArgs) {
        if (this === currentTable && eventArgs.errorMsg) {
            showErrorMsg(eventArgs.errorMsg);
        }
    }
    function getCancelHandler() {
        return function () {
            stop();
        };
    }
    function tableEndDragHandler() {
        if (this === currentTable) {
            layerFollow(this);
        }
    }
    function tableResizeHandler() {
        if (this === currentTable) {
            layerFollow(this);
        }
    }
    function layerFollow(table) {
        if (layer) {
            var entrance = lib.g(table.getBodyCellId(currentRowIndex, currentColIndex));
            if (entrance) {
                Layer.attachTo(layer, entrance);
            }
        }
    }
    function stop() {
        currentState = 0;
        hideLayer();
        setButtonDisabled(1);
        var eventArgs = {
                rowIndex: currentRowIndex,
                columnIndex: currentColIndex,
                field: currentTable.realFields[currentColIndex]
            };
        currentTable.fire('canceledit', eventArgs);
        fieldHanlder(currentTable, 'canceledit', eventArgs);
    }
    function start(table, options) {
        if (currentState && currentTable) {
            stop();
        }
        currentState = 1;
        init(table, options);
        setButtonDisabled(0);
        showLayer();
        var entrance = lib.g(table.getBodyCellId(options.rowIndex, options.columnIndex));
        Layer.attachTo(layer, entrance);
        setValue(options.value);
        clearErrorMsg();
    }
    function setButtonDisabled(disabled) {
        okButton.setDisabled(disabled);
        cancelButton.setDisabled(disabled);
    }
    function setValue(value) {
        inputCtrl.setValue(value);
    }
    function getValue() {
        return inputCtrl.getValue();
    }
    function entranceClickHandler(element, e) {
        var table = this;
        if (table.startEdit) {
            var rowIndex = lib.getAttribute(element, 'data-row');
            var columnIndex = lib.getAttribute(element, 'data-col');
            table.startEdit(rowIndex, columnIndex, element);
        }
    }
    function startEdit(rowIndex, columnIndex, element) {
        if (this.editable) {
            var field = this.realFields[columnIndex];
            var eventArgs = {
                    rowIndex: rowIndex,
                    columnIndex: columnIndex,
                    field: field
                };
            var event = this.fire('startedit', eventArgs);
            fieldHanlder(this, 'startedit', eventArgs);
            if (!event.isDefaultPrevented()) {
                var data = this.datasource[rowIndex];
                var content = field.editContent;
                var value = 'function' === typeof content ? content.call(this, data, rowIndex, columnIndex) : data[field.field];
                start(this, {
                    field: field,
                    rowIndex: rowIndex,
                    columnIndex: columnIndex,
                    element: element,
                    value: value
                });
            }
        }
    }
    function cancelEdit() {
        if (this === currentTable) {
            stop();
        }
    }
    function hideEditLayer() {
        if (this === currentTable) {
            hideLayer();
        }
    }
    function showEditError() {
        if (this === currentTable) {
            showLayer();
        }
    }
    var editentryTpl = '<div class="${className}" ' + 'data-row="${row}" data-col="${col}"></div>';
    function getColHtml(table, data, field, rowIndex, fieldIndex, extraArgs) {
        var fieldEditable = field.editable;
        if ('function' === typeof fieldEditable) {
            fieldEditable = fieldEditable.call(table, data, rowIndex, fieldIndex, extraArgs);
        }
        var iconClass = table.helper.getIconClass();
        if (table.editable && fieldEditable) {
            return {
                textClass: table.getClass('cell-editable'),
                html: lib.format(editentryTpl, {
                    className: table.getClass('cell-editentry') + ' ' + iconClass,
                    row: rowIndex,
                    col: fieldIndex
                })
            };
        }
    }
    function fieldHanlder(table, eventType, args) {
        var handler = args.field['on' + eventType];
        if (handler && '[object Function]' === Object.prototype.toString.call(handler)) {
            handler.call(table, args);
        }
    }
    esui.registerExtension(TableEdit);
    return TableEdit;
});

define('esui/extension/TableSubrow', [
    'require',
    '../Extension',
    '../lib',
    '../main',
    '../Table',
    'jquery',
    'eoo'
], function (require) {
    var Extension = require('../Extension');
    var lib = require('../lib');
    var esui = require('../main');
    var Table = require('../Table');
    var $ = require('jquery');
    var eoo = require('eoo');
    var TableSubrow = eoo.create(Extension, {
            type: 'TableSubrow',
            activate: function () {
                var target = this.target;
                if (!(target instanceof Table)) {
                    return;
                }
                var subentryClass = target.helper.getPartClassName('subentry');
                target.addRowBuilders([{
                        index: 0,
                        getRowArgs: getSubrowArgs,
                        getColHtml: getSubEntryHtml,
                        getSubrowHtml: getSubrowHtml
                    }]);
                target.addHandlers('click', {
                    handler: fireSubrow,
                    matchFn: subentryClass
                });
                target.addHandlers('mouseover', {
                    handler: entryOverHandler,
                    matchFn: subentryClass
                });
                target.addHandlers('mouseout', {
                    handler: entryOutHandler,
                    matchFn: subentryClass
                });
                target.getSubrow = function (index) {
                    return getSubrow(this, index);
                };
                target.setSubrowContent = function (content, index) {
                    var subrowPanel = getSubrowContainer(this, index);
                    if (subrowPanel) {
                        subrowPanel.set('content', content);
                    }
                };
                target.getSubrowContainer = function (index) {
                    return getSubrowContainer(this, index);
                };
                target.openSubrow = function (index) {
                    var entry = lib.g(getSubentryId(this, index));
                    openSubrow(this, index, entry);
                };
                target.closeSubrow = function (index) {
                    var entry = lib.g(getSubentryId(this, index));
                    closeSubrow(this, index, entry);
                };
                this.$super(arguments);
            },
            inactivate: function () {
                var target = this.target;
                if (!(target instanceof Table)) {
                    return;
                }
                delete target.getSubrow;
                this.$super(arguments);
            }
        });
    function getId(table, name) {
        return table.helper.getId(name);
    }
    function getClass(table, name) {
        return table.helper.getPartClassName(name);
    }
    function setAttr(element, key, value) {
        $(element).attr('data-' + key, value);
    }
    function hasValue(obj) {
        return !(typeof obj === 'undefined' || obj === null);
    }
    function getSubrowId(table, index) {
        return getId(table, 'subrow') + index;
    }
    function getSubentryId(table, index) {
        return getId(table, 'subentry') + index;
    }
    function getSubrowArgs(table, rowIndex) {
        return { subrow: table.subrow && table.subrow !== 'false' };
    }
    function entryOverHandler(element, e) {
        entryOver(this, element);
    }
    function entryOver(table, element) {
        var opened = /subentry-opened/.test(element.className);
        var classBase = 'subentry-hover';
        if (opened) {
            classBase = 'subentry-opened-hover';
        }
        table.helper.addPartClasses(classBase, element);
    }
    function entryOutHandler(element, e) {
        entryOut(this, element);
    }
    function entryOut(table, element) {
        table.helper.removePartClasses(table, 'subentry-hover', element);
        table.helper.removePartClasses(table, 'subentry-opened-hover', element);
    }
    function fireSubrow(el, e) {
        var table = this;
        var $el = $(el);
        var index = $el.data('index');
        var datasource = table.datasource;
        var dataLen = datasource instanceof Array && datasource.length;
        if (!dataLen || index >= dataLen) {
            return;
        }
        if (!$el.data('subrowopened')) {
            var dataItem = datasource[index];
            var eventArgs = {
                    index: index,
                    item: dataItem
                };
            var event = table.fire('subrowopen', eventArgs);
            if (!event.isDefaultPrevented()) {
                openSubrow(table, index, el);
            }
        } else {
            closeSubrow(table, index, el);
        }
        entryOver(table, el);
    }
    function closeSubrow(table, index, entry) {
        var eventArgs = {
                index: index,
                item: table.datasource[index]
            };
        eventArgs = table.fire('subrowclose', eventArgs);
        if (!eventArgs.isDefaultPrevented()) {
            entryOut(table, entry);
            table.subrowIndex = null;
            table.helper.removePartClasses('subentry-opened', entry);
            table.helper.removePartClasses('row-unfolded', table.getRow(index));
            setAttr(entry, 'title', table.subEntryOpenTip);
            setAttr(entry, 'subrowopened', '');
            lib.g(getSubrowId(table, index)).style.display = 'none';
            return true;
        }
        return false;
    }
    function openSubrow(table, index, entry) {
        var currentIndex = table.subrowIndex;
        var closeSuccess = 1;
        if (hasValue(currentIndex)) {
            closeSuccess = closeSubrow(table, currentIndex, lib.g(getSubentryId(table, currentIndex)));
        }
        if (!closeSuccess) {
            return;
        }
        table.helper.addPartClasses('subentry-opened', entry);
        table.helper.addPartClasses('row-unfolded', table.getRow(index));
        setAttr(entry, 'title', table.subEntryCloseTip);
        setAttr(entry, 'subrowopened', '1');
        lib.g(getSubrowId(table, index)).style.display = '';
        table.subrowMutex && (table.subrowIndex = index);
    }
    var tplSubEntry = '<div ' + 'class="${className}" ' + 'id="${id}" ' + 'title="${title}" ' + 'data-index="${index}">' + '</div>';
    var tplSubPanel = '<div ' + 'data-ui="type:Panel;id:${id}" ' + 'data-index="${index}">' + '</div>';
    function getSubEntryHtml(table, data, field, rowIndex, fieldIndex, extraArgs) {
        var subrow = extraArgs.subrow;
        var subentry = subrow && field.subEntry;
        var result = {
                notInText: true,
                width: table.subEntryWidth,
                align: 'right'
            };
        var iconClass = table.helper.getIconClass();
        if (subentry) {
            var isSubEntryShown = typeof field.isSubEntryShow === 'function' ? field.isSubEntryShow.call(table, data, rowIndex, fieldIndex) : true;
            if (isSubEntryShown !== false) {
                result.html = lib.format(tplSubEntry, {
                    className: getClass(table, 'subentry') + ' ' + iconClass,
                    id: getSubentryId(table, rowIndex),
                    title: table.subEntryOpenTip,
                    index: rowIndex
                });
            }
            result.colClass = getClass(table, 'subentryfield');
        }
        return result;
    }
    function getSubrowHtml(table, index, extraArgs) {
        var dataLen = table.datasource ? table.datasource.length : 0;
        return extraArgs.subrow ? '<div id="' + getSubrowId(table, index) + '" class="' + getClass(table, 'subrow') + ' ' + (dataLen === index + 1 ? getClass(table, 'subrow-last') : '') + '"' + ' style="display:none"></div>' : '';
    }
    function getSubrow(table, index) {
        return lib.g(getSubrowId(table, index));
    }
    function getSubrowContainer(table, index) {
        var subrowWrapper = getSubrow(table, index);
        var subrowPanelId = getId(table, 'subrow-panel-' + index);
        var subrowPanel = table.bodyPanel.getChild(subrowPanelId);
        if (!subrowPanel) {
            subrowWrapper.innerHTML = lib.format(tplSubPanel, {
                id: subrowPanelId,
                index: index
            });
            table.initChildren(subrowWrapper);
            subrowPanel = table.viewContext.get(subrowPanelId);
            table.bodyPanel.addChild(subrowPanel, subrowPanelId);
        }
        return subrowPanel;
    }
    esui.registerExtension(TableSubrow);
    return TableSubrow;
});

define('esui/Form', [
    'require',
    'underscore',
    './lib',
    './main',
    './Panel',
    'eoo',
    'jquery'
], function (require) {
    var u = require('underscore');
    var lib = require('./lib');
    var esui = require('./main');
    var Panel = require('./Panel');
    var eoo = require('eoo');
    var $ = require('jquery');
    function InputCollection(inputs) {
        this.length = inputs.length;
        for (var i = 0; i < inputs.length; i++) {
            this[i] = inputs[i];
        }
    }
    InputCollection.prototype.splice = Array.prototype.splice;
    function getData(inputs, fetchValue) {
        var store = {};
        for (var i = 0; i < inputs.length; i++) {
            var control = inputs[i];
            if (control.getCategory() === 'check' && !control.isChecked()) {
                continue;
            }
            if (control.isDisabled()) {
                continue;
            }
            var name = control.get('name');
            var value = fetchValue(control);
            if (store.hasOwnProperty(name)) {
                store[name] = [].concat(store[name], value);
            } else {
                store[name] = value;
            }
        }
        return store;
    }
    InputCollection.prototype.getData = function () {
        return getData(this, function (control) {
            return control.getRawValue();
        });
    };
    InputCollection.prototype.getDataAsString = function () {
        var store = getData(this, function (control) {
                var value = control.getValue();
                return encodeURIComponent(value);
            });
        var valueString = '';
        u.each(store, function (value, key) {
            valueString += encodeURIComponent(key) + '=' + value;
        });
        return valueString;
    };
    InputCollection.prototype.getValueAsString = function (name) {
        var data = this.getData();
        var values = data[name];
        var valueString = values ? typeof values === 'string' ? values : values.join(',') : '';
        return valueString;
    };
    InputCollection.prototype.checkAll = function () {
        for (var i = 0; i < this.length; i++) {
            var control = this[i];
            if (control.getCategory() === 'check') {
                control.setChecked(true);
            }
        }
    };
    InputCollection.prototype.uncheckAll = function () {
        for (var i = 0; i < this.length; i++) {
            var control = this[i];
            if (control.getCategory() === 'check') {
                control.setChecked(false);
            }
        }
    };
    InputCollection.prototype.checkInverse = function () {
        for (var i = 0; i < this.length; i++) {
            var control = this[i];
            if (control.getCategory() === 'check') {
                control.setChecked(!control.isChecked());
            }
        }
    };
    InputCollection.prototype.checkByValue = function (values) {
        var map = lib.toDictionary(values);
        for (var i = 0; i < this.length; i++) {
            var control = this[i];
            if (control.getCategory() === 'check') {
                var shouldBeChecked = map.hasOwnProperty(control.getValue());
                control.setChecked(shouldBeChecked);
            }
        }
    };
    var Form = eoo.create(Panel, {
            type: 'Form',
            validateAndSubmit: function () {
                var beforeValidateEvent = this.fire('beforevalidate');
                if (beforeValidateEvent.isDefaultPrevented()) {
                    return;
                }
                try {
                    var isValid = this.get('autoValidate') ? this.validate() : true;
                    var afterValidateEvent = this.fire('aftervalidate', { isValid: isValid });
                    if (afterValidateEvent.isDefaultPrevented()) {
                        return;
                    }
                    var data = { triggerSource: this };
                    if (isValid) {
                        this.fire('submit', data);
                    } else {
                        this.fire('invalid', data);
                    }
                } catch (ex) {
                    this.fire('submitfail', { error: ex });
                }
            },
            initEvents: function () {
                if (this.main.nodeName.toLowerCase() === 'form') {
                    this.helper.addDOMEvent(this.main, 'submit', function (e) {
                        this.validateAndSubmit();
                        e.preventDefault();
                        return false;
                    });
                }
            },
            createMain: function (options) {
                var form = document.createElement('form');
                form.method = 'POST';
                form.action = options.action || '';
                return form;
            },
            initOptions: function (options) {
                var properties = u.extend({}, Form.defaultProperties, options);
                if (this.main.nodeName.toLowerCase() === 'form') {
                    properties.action = this.main.getAttribute('action');
                    properties.method = this.main.getAttribute('method');
                } else {
                    properties.method = this.method || 'POST';
                }
                if (options.autoValidate === 'false') {
                    properties.autoValidate = false;
                } else {
                    properties.autoValidate = !!properties.autoValidate;
                }
                Panel.prototype.initOptions.call(this, properties);
            },
            getInputControls: function (name, type) {
                var result = [];
                var data = esui.getConfig('instanceAttr');
                var form = this;
                $(form.main).find('[' + data + ']').each(function (idx, element) {
                    var control = esui.getControlByDOM(element);
                    if (control && isInputControl(control) && control.viewContext === form.viewContext && control.get('name') && (!name || control.get('name') === name) && (!type || control.get('type') === type)) {
                        result.push(control);
                    }
                });
                return new InputCollection(result);
            },
            getData: function () {
                var inputs = this.getInputControls();
                return inputs.getData();
            },
            getDataAsString: function () {
                var inputs = this.getInputControls();
                return inputs.getDataAsString();
            },
            validate: function () {
                var inputs = this.getInputControls();
                var result = true;
                for (var i = 0; i < inputs.length; i++) {
                    var control = inputs[i];
                    if (control.isDisabled()) {
                        continue;
                    }
                    result &= control.validate();
                }
                return !!result;
            },
            repaint: function (changes, changesIndex) {
                Panel.prototype.repaint.apply(this, arguments);
                var shouldAttachSubmit = false;
                if (!changesIndex && this.submitButton) {
                    shouldAttachSubmit = true;
                }
                var me = this;
                var submitHandler = function (event) {
                    me.validateAndSubmit.call(me, event);
                    return false;
                };
                if (changesIndex && changesIndex.hasOwnProperty('submitButton')) {
                    var record = changesIndex.submitButton;
                    if (record.oldValue) {
                        for (var i = 0; i < record.oldValue.length; i++) {
                            var oldButton = this.viewContext.get(record.oldValue[i]);
                            if (oldButton) {
                                oldButton.un('click', submitHandler);
                            }
                        }
                        shouldAttachSubmit = !!this.submitButton;
                    }
                }
                if (shouldAttachSubmit) {
                    for (var j = 0; j < this.submitButton.length; j++) {
                        var button = this.viewContext.get(this.submitButton[j]);
                        if (button) {
                            button.on('click', submitHandler);
                        }
                    }
                }
            },
            setProperties: function (properties) {
                properties = u.clone(properties);
                if (properties.hasOwnProperty('submitButton')) {
                    properties.submitButton = lib.splitTokenList(properties.submitButton);
                }
                this.$super([properties]);
            }
        });
    Form.defaultProperties = { autoValidate: false };
    function isInputControl(control) {
        var category = control.getCategory();
        return category === 'input' || category === 'check';
    }
    esui.register(Form);
    return Form;
});

define('esui/Frame', [
    'require',
    './Control',
    'eoo',
    './painters',
    './main',
    'underscore'
], function (require) {
    var Control = require('./Control');
    var eoo = require('eoo');
    var painters = require('./painters');
    var esui = require('./main');
    var u = require('underscore');
    var Frame = eoo.create(Control, {
            type: 'Frame',
            createMain: function () {
                return document.createElement('iframe');
            },
            initOptions: function (options) {
                var properties = {};
                u.extend(properties, options);
                if (!properties.src) {
                    properties.src = this.main.src;
                }
                this.setProperties(properties);
            },
            initEvents: function () {
                var controlHelper = this.helper;
                controlHelper.delegateDOMEvent(this.main, 'load');
                controlHelper.addDOMEvent(this.main, 'message', function (e) {
                    var event = {
                            origin: e.origin,
                            data: e.data
                        };
                    this.fire('message', event);
                });
            },
            repaint: painters.createRepaint(Control.prototype.repaint, {
                name: 'src',
                paint: function (frame, src) {
                    if (frame.main.src === src) {
                        return;
                    }
                    frame.main.src = src;
                }
            }, painters.style('height'), painters.style('width')),
            callContentMethod: function (methodName) {
                var args = [].slice.call(arguments, 1);
                var contentWindow = this.main.contentWindow;
                if (!contentWindow) {
                    throw new Error('No content window on this iframe');
                }
                if (typeof contentWindow[methodName] !== 'function') {
                    throw new Error('No "' + methodName + '" method on window');
                }
                return contentWindow[methodName].apply(contentWindow, args);
            },
            postMessage: function (message, targetOrigin) {
                var contentWindow = this.main.contentWindow;
                if (!contentWindow) {
                    throw new Error('No content window on this iframe');
                }
                if (typeof contentWindow.postMessage !== 'function') {
                    throw new Error('Current browser does not support postMessage');
                }
                contentWindow.postMessage(message, targetOrigin);
            }
        });
    esui.register(Frame);
    return Frame;
});

define('esui/Link', [
    'require',
    'underscore',
    './Control',
    './painters',
    'eoo',
    './main',
    'jquery'
], function (require) {
    var u = require('underscore');
    var Control = require('./Control');
    var painters = require('./painters');
    var eoo = require('eoo');
    var esui = require('./main');
    var $ = require('jquery');
    var Link = eoo.create(Control, {
            type: 'Link',
            getCategory: function () {
                return 'container';
            },
            createMain: function () {
                return document.createElement('a');
            },
            initOptions: function (options) {
                var properties = {};
                u.extend(properties, options);
                if (properties.href == null) {
                    properties.href = this.main.href;
                }
                if (properties.target == null) {
                    properties.target = this.main.target;
                }
                if (properties.content == null) {
                    properties.content = this.main.innerHTML;
                }
                u.extend(this, properties);
            },
            initEvents: function () {
                this.helper.delegateDOMEvent(this.main, 'click');
            },
            render: function () {
                var $main = $(this.main);
                if ($main.is('a')) {
                    this.$super(arguments);
                } else {
                    $main.html('Invalid Tag: Only a element is allowed.');
                }
            },
            repaint: painters.createRepaint(Control.prototype.repaint, painters.attribute('href'), painters.attribute('target'), {
                name: 'content',
                paint: function (link, content) {
                    link.helper.disposeChildren();
                    link.main.innerHTML = content;
                    link.helper.initChildren();
                }
            })
        });
    esui.register(Link);
    return Link;
});

define('esui/Pager', [
    'require',
    'underscore',
    'jquery',
    './lib',
    './main',
    './Control',
    './painters',
    'eoo',
    './Select'
], function (require) {
    var u = require('underscore');
    var $ = require('jquery');
    var lib = require('./lib');
    var esui = require('./main');
    var Control = require('./Control');
    var painters = require('./painters');
    var eoo = require('eoo');
    require('./Select');
    var Pager = eoo.create(Control, {
            type: 'Pager',
            initOptions: function (options) {
                var properties = {
                        pageType: 'anchor',
                        count: 0,
                        page: 1,
                        backCount: 3,
                        forwardCount: 3,
                        urlTemplate: '',
                        layout: 'alignLeft'
                    };
                u.extend(properties, Pager.defaultProperties, options);
                this.setProperties(properties);
            },
            initStructure: function () {
                this.main.innerHTML = getMainHTML(this);
                this.helper.initChildren();
                var select = this.getChild('select');
                if (!this.pageSizes || !this.pageSizes.length) {
                    select.hide();
                } else {
                    var properties = {
                            datasource: getPageSizes(this.pageSizes),
                            value: this.pageSize + ''
                        };
                    select.setProperties(properties);
                    changePageSize.call(this);
                }
            },
            initEvents: function () {
                var select = this.getChild('select');
                select.on('change', u.bind(changePageSize, this));
                this.helper.addDOMEvent('main', 'click', pagerClick);
            },
            setProperties: function (properties) {
                properties = u.clone(properties);
                if (properties.hasOwnProperty('pageIndex') && !properties.hasOwnProperty('page')) {
                    properties.page = +properties.pageIndex + 1;
                }
                var digitalProperties = [
                        'count',
                        'page',
                        'backCount',
                        'forwardCount',
                        'pageSize'
                    ];
                u.each(digitalProperties, function (name) {
                    var value = properties[name];
                    if (u.isString(value)) {
                        properties[name] = +value;
                    }
                });
                var changes = Control.prototype.setProperties.apply(this, arguments);
                if (changes.hasOwnProperty('page')) {
                    this.fire('changepage');
                    this.fire('pagechange');
                }
            },
            repaint: painters.createRepaint(Control.prototype.repaint, {
                name: 'pageSizes',
                paint: function (pager, value) {
                    var select = pager.getChild('select');
                    if (!value || !value.length) {
                        select.hide();
                    } else {
                        var properties = {
                                datasource: getPageSizes(value),
                                value: pager.pageSize + ''
                            };
                        select.setProperties(properties);
                        select.show();
                    }
                }
            }, {
                name: 'layout',
                paint: repaintLayout
            }, {
                name: [
                    'pageType',
                    'count',
                    'pageSize',
                    'page',
                    'backCount',
                    'forwardCount',
                    'firstText',
                    'lastText',
                    'backText',
                    'pagePattern',
                    'forwardText',
                    'urlTemplate'
                ],
                paint: repaintPager
            }),
            getPageIndex: function () {
                return this.get('page') - 1;
            }
        });
    Pager.defaultProperties = {
        pagerLabelText: '\u6BCF\u9875\u663E\u793A',
        firstText: '\u9996\u9875',
        lastText: '\u672B\u9875',
        backText: '\u4E0A\u4E00\u9875',
        forwardText: '\u4E0B\u4E00\u9875',
        pageSizes: [
            15,
            30,
            50,
            100
        ],
        pageSize: 15
    };
    function getMainHTML(pager) {
        var template = [
                '<div id="${pagerWrapperId}" class="${pagerWrapperClass}">',
                '<div id="${selectWrapperId}" ',
                'class="${selectWrapperClass}">',
                '<span id="${labelId}" class="${labelClass}">',
                '${labelText}</span>',
                '<div data-ui="type:Select;childName:select;variants:compact;',
                'id:${selectPagerId};" class="${selectClass}"></div>',
                '</div>',
                '<ul id="${mainId}" class="${mainClass}"></ul>',
                '</div>'
            ];
        var controlHelper = pager.helper;
        return lib.format(template.join(''), {
            pagerWrapperId: controlHelper.getId('pager-wrapper'),
            pagerWrapperClass: controlHelper.getPartClassName(pager.layout),
            selectWrapperId: controlHelper.getId('select-wrapper'),
            selectWrapperClass: controlHelper.getPartClassName('select-wrapper'),
            labelId: controlHelper.getId('label'),
            labelClass: controlHelper.getPartClassName('label'),
            labelText: pager.pagerLabelText,
            selectPagerId: controlHelper.getId('selectPager'),
            selectClass: controlHelper.getPartClassName('select'),
            mainId: controlHelper.getId('main'),
            mainClass: controlHelper.getPartClassName('main')
        });
    }
    function getPagerMainHTML(pager) {
        var plainTpl = '<li class="${className}" id="${id}"' + ' data-page="${page}">${text}</li>';
        var anchorTpl = '<li class="${className}" id="${id}">' + '<a href="${link}">${text}</a></li>';
        var omitTpl = '<li class="${className}">\u2026</li>';
        var html = [];
        function getUrlByTemplate(num) {
            return lib.format(pager.urlTemplate, {
                page: num,
                pageSize: pager.pageSize
            });
        }
        function getTplObj(className, num, id, text) {
            var cls = [];
            u.each(className.split(' '), function (name) {
                cls.push(pager.helper.getPartClassName(name));
            });
            var obj = { className: cls.join(' ') };
            if (arguments.length > 1) {
                obj.link = getUrlByTemplate(num);
                obj.id = pager.helper.getId(id);
                obj.page = num;
                obj.text = text;
            }
            return obj;
        }
        function getSegmentHTML(obj, tpl) {
            if (!tpl) {
                var templates = {
                        anchor: anchorTpl,
                        plain: plainTpl
                    };
                tpl = templates[pager.pageType] || templates.anchor;
            }
            return lib.format(tpl, obj);
        }
        function addSegmentToHTML(obj, tpl) {
            if (typeof obj === 'number') {
                obj = getTplObj('item', obj, 'page-' + obj, obj);
            }
            var segment = getSegmentHTML(obj, tpl);
            html.push(segment);
        }
        var pagePattern = pager.pagePattern;
        var page = pager.page;
        var backCount = pager.backCount;
        var forwardCount = pager.forwardCount;
        var totalPage = Math.ceil(pager.count / pager.pageSize);
        if (page > 1) {
            if (pagePattern === 'fullPattern') {
                var objFirst = getTplObj('item-extend item-first', 0, 'page-first', pager.firstText);
                addSegmentToHTML(objFirst);
            }
            addSegmentToHTML(getTplObj('item-extend', page - 1, 'page-back', pager.backText));
        }
        if (page > backCount + 1) {
            addSegmentToHTML(1);
            if (page > backCount + 2) {
                addSegmentToHTML(getTplObj('item-omit'), omitTpl);
            }
        }
        var len = page > backCount ? backCount : page - 1;
        for (var i = page - len; i < page; i++) {
            addSegmentToHTML(i);
        }
        addSegmentToHTML(getTplObj('item-current', page, 'page-' + page, page), plainTpl);
        var len2 = totalPage - page > forwardCount ? forwardCount : totalPage - page;
        for (var j = page + 1; j < page + len2 + 1; j++) {
            addSegmentToHTML(j);
        }
        if (page < totalPage - forwardCount) {
            if (page < totalPage - forwardCount - 1) {
                addSegmentToHTML(getTplObj('item-omit'), omitTpl);
            }
            addSegmentToHTML(totalPage);
        }
        if (page < totalPage) {
            addSegmentToHTML(getTplObj('item-extend', page + 1, 'page-forward', pager.forwardText));
            if (pagePattern === 'fullPattern') {
                addSegmentToHTML(getTplObj('item-extend item-last', Math.ceil(pager.count / pager.pageSize), 'page-last', pager.lastText));
            }
        }
        return html.join('');
    }
    function repaintPager(pager) {
        var pageSize = pager.pageSize;
        pageSize = pageSize > 0 ? pageSize : 1;
        pager.pageSize = pageSize;
        pager.getChild('select').set('value', pageSize + '');
        var totalPage = Math.ceil(pager.count / pageSize);
        var page = pager.page;
        page = page > totalPage ? totalPage : page;
        page = page > 0 ? page : 1;
        pager.page = page;
        var pagerMain = pager.helper.getPart('main');
        pagerMain.innerHTML = getPagerMainHTML(pager);
    }
    function repaintLayout(pager, style) {
        function getClasses() {
            var classes = [];
            for (var i = 0, len = arguments.length; i < len; i++) {
                classes.push(pager.helper.getPartClassName(arguments[i]));
            }
            return classes.join(' ');
        }
        var $pagerWrapper = $(pager.helper.getPart('pager-wrapper'));
        $pagerWrapper.removeClass(getClasses('alignLeft', 'alignLeftReversed', 'alignRight', 'alignRightReversed', 'distributed', 'distributedReversed'));
        $pagerWrapper.addClass(pager.helper.getPartClassName(style));
    }
    function pagerClick(e) {
        var target = e.target;
        var controlHelper = this.helper;
        var lastId = controlHelper.getId('page-last');
        var backId = controlHelper.getId('page-back');
        var forwardId = controlHelper.getId('page-forward');
        var firstId = controlHelper.getId('page-first');
        var page = this.page;
        if (controlHelper.isPart(target, 'item') || controlHelper.isPart(target, 'item-extend')) {
            if (target.id === backId) {
                page--;
            } else if (target.id === lastId) {
                page = Math.ceil(this.count / this.pageSize);
            } else if (target.id === forwardId) {
                page++;
            } else if (target.id === firstId) {
                page = 1;
            } else {
                page = +lib.getAttribute(target, 'data-page');
            }
            this.set('page', page);
        }
    }
    function getPageSizes(pageSizes) {
        var datasource = u.map(pageSizes, function (size) {
                return {
                    text: size + '',
                    value: size + ''
                };
            });
        return datasource;
    }
    function changePageSize(e) {
        var pageSize = parseInt(this.getChild('select').getValue(), 10);
        this.pageSize = pageSize;
        repaintPager(this);
        this.fire('changepagesize');
        this.fire('pagesizechange');
    }
    esui.register(Pager);
    return Pager;
});

define('esui/RangeCalendar', [
    'require',
    './Button',
    './MonthView',
    './CheckBox',
    './Label',
    'jquery',
    './lib',
    './InputControl',
    './Layer',
    './main',
    'moment',
    'underscore',
    'eoo',
    './painters'
], function (require) {
    require('./Button');
    require('./MonthView');
    require('./CheckBox');
    require('./Label');
    var $ = require('jquery');
    var lib = require('./lib');
    var InputControl = require('./InputControl');
    var Layer = require('./Layer');
    var esui = require('./main');
    var m = require('moment');
    var u = require('underscore');
    var eoo = require('eoo');
    var painters = require('./painters');
    var RangeCalendarLayer = eoo.create(Layer, {
            create: function () {
                var ele = this.$super(arguments);
                $(this.control.main).after(ele);
                return ele;
            },
            render: function (element) {
                var calendar = this.control;
                element.innerHTML = getLayerHtml(calendar);
                calendar.helper.initChildren(element);
                paintLayer(calendar, calendar.view, 'render');
            },
            toggle: function () {
                var element = this.getElement();
                if (!element || !$(element).is(':visible')) {
                    var calendar = this.control;
                    paintLayer(calendar, calendar.rawValue, 'repaint');
                    this.show();
                } else {
                    this.hide();
                }
            }
        });
    function paintLayer(calendar, value, state) {
        if (state === 'render') {
            var controlHelper = calendar.helper;
            var shortcutDom = controlHelper.getPart('shortcut');
            var selector = '.' + controlHelper.getPartClassName('shortcut-item');
            controlHelper.addDOMEvent(shortcutDom, 'click', selector, shortcutClick);
            var endlessCheck = calendar.getChild('endlessCheck');
            if (endlessCheck) {
                endlessCheck.on('change', u.partial(makeCalendarEndless, calendar));
                if (calendar.isEndless) {
                    endlessCheck.setChecked(true);
                    controlHelper.addPartClasses('shortcut-disabled', controlHelper.getPart(calendar));
                }
            }
            var okBtn = calendar.getChild('okBtn');
            okBtn.on('click', u.partial(commitValue, calendar));
            var cancelBtn = calendar.getChild('cancelBtn');
            cancelBtn.on('click', u.bind(calendar.layer.hide, calendar.layer));
            var closeBtn = calendar.getChild('closeBtn');
            closeBtn.on('click', u.bind(calendar.layer.hide, calendar.layer));
            calendar.layer.on('hide', function (e) {
                function hideSelectLayer(monthView) {
                    monthView.getChild('yearSel').layer.hide();
                    monthView.getChild('monthSel').layer.hide();
                }
                var tar = e.target.control;
                hideSelectLayer(tar.getChild('beginCal'));
                hideSelectLayer(tar.getChild('endCal'));
            });
        } else {
            calendar.view.begin = value.begin;
            calendar.view.end = value.end;
            calendar.value = calendar.convertToParam(value);
            var isEndless;
            if (!value.end) {
                isEndless = true;
            } else {
                isEndless = false;
            }
            calendar.setProperties({ isEndless: isEndless });
        }
        paintCal(calendar, 'begin', calendar.view.begin, state === 'render');
        paintCal(calendar, 'end', calendar.view.end, state === 'render');
        var selectedIndex = getSelectedIndex(calendar, calendar.view);
        paintMiniCal(calendar, selectedIndex);
    }
    function getLayerHtml(calendar) {
        var cHelper = calendar.helper;
        var tpl = '' + '<div class="${shortCutClass}" id="${shortcutId}">' + '${shortCut}</div>' + '<div class="${bodyClass}">' + '${beginCalendar}${endCalendar}' + '</div>' + '<div class="${footClass}">' + '<div class="${okBtnClass}"' + ' data-ui="type:Button;childName:okBtn;variants:primary">${okButtonText}</div>' + '<div class="${cancelBtnClass}"' + ' data-ui="type:Button;childName:cancelBtn;variants:link">${cancelLinkText}</div>' + '</div>' + '<div class="${closeIconContainer}" data-ui="type:Button;childName:' + 'closeBtn;variants:link"><span class="${closeIcon}"></span></div>';
        return lib.format(tpl, {
            bodyClass: cHelper.getPartClassName('body'),
            shortcutId: cHelper.getId('shortcut'),
            shortCutClass: cHelper.getPartClassName('shortcut'),
            shortCut: getMiniCalendarHtml(calendar),
            beginCalendar: getCalendarHtml(calendar, 'begin'),
            endCalendar: getCalendarHtml(calendar, 'end'),
            footClass: cHelper.getPartClassName('foot'),
            okBtnClass: cHelper.getPartClassName('okBtn'),
            cancelBtnClass: cHelper.getPartClassName('cancelBtn'),
            closeIconContainer: cHelper.getPartClassName('close-icon-container'),
            closeIcon: cHelper.getIconClass('close'),
            okButtonText: calendar.okButtonText,
            cancelLinkText: calendar.cancelLinkText
        });
    }
    var RangeCalendar = eoo.create(InputControl, {
            constructor: function (options) {
                this.now = new Date();
                this.$super([options]);
                this.layer = new RangeCalendarLayer(this);
            },
            type: 'RangeCalendar',
            convertToParam: function (rawValue) {
                var beginTime = rawValue.begin;
                var endTime = rawValue.end;
                var beginTail = ' 00:00:00';
                var endTail = ' 23:59:59';
                var timeResult = [];
                timeResult.push(m(beginTime).format('YYYY-MM-DD') + beginTail);
                if (endTime) {
                    timeResult.push(m(endTime).format('YYYY-MM-DD') + endTail);
                }
                return timeResult.join(',');
            },
            convertToRaw: function (value) {
                var strDates = value.split(',');
                if (strDates.length === 1) {
                    strDates.push('2046-11-04');
                } else if (strDates[0] === '') {
                    strDates[0] = '1983-09-03';
                } else if (strDates[1] === '') {
                    strDates[1] = '2046-11-04';
                }
                return {
                    begin: m(strDates[0], 'YYYY-MM-DD').toDate(),
                    end: m(strDates[1], 'YYYY-MM-DD').toDate()
                };
            },
            initOptions: function (options) {
                var now = this.now;
                var defaultRaw = {
                        begin: now,
                        end: now
                    };
                var properties = {
                        endlessCheck: false,
                        rawValue: defaultRaw,
                        view: u.clone(defaultRaw),
                        value: this.convertToParam(defaultRaw)
                    };
                if ($(this.main).is('input')) {
                    this.helper.extractOptionsFromInput(this.main, properties);
                }
                u.extend(properties, RangeCalendar.defaultProperties);
                if (options.value) {
                    properties.rawValue = this.convertToRaw(options.value);
                    properties.view = {
                        begin: properties.rawValue.begin,
                        end: properties.rawValue.end
                    };
                    properties.miniMode = null;
                } else if (options.rawValue) {
                    properties.miniMode = null;
                } else if (!options.rawValue && options.miniMode != null) {
                    var shortcutItem = properties.shortCutItems[properties.miniMode];
                    if (shortcutItem) {
                        properties.rawValue = shortcutItem.getValue.call(this, this.now);
                        properties.miniMode = parseInt(properties.miniMode, 10);
                    } else {
                        properties.miniMode = null;
                    }
                }
                u.extend(properties, options);
                if (options.range && typeof options.range === 'string') {
                    properties.range = this.convertToRaw(properties.range);
                } else {
                    if (!properties.rawValue.end) {
                        properties.endlessCheck = true;
                        properties.isEndless = true;
                    }
                }
                if (properties.isEndless) {
                    properties.endlessCheck = true;
                    properties.rawValue.end = null;
                    properties.view.end = null;
                    properties.view.value = this.convertToParam({
                        begin: now,
                        end: null
                    });
                }
                this.setProperties(properties);
            },
            initStructure: function () {
                if (lib.isInput(this.main)) {
                    this.helper.replaceMain();
                }
                var tpl = [
                        '<div class="${className}" id="${id}"></div>',
                        '<div class="${arrow}"><span class="${iconCalendar}"></span></div>'
                    ];
                this.layer.autoCloseExcludeElements = [this.main];
                this.main.innerHTML = lib.format(tpl.join('\n'), {
                    className: this.helper.getPartClassName('text'),
                    id: this.helper.getId('text'),
                    arrow: this.helper.getPartClassName('arrow'),
                    iconCalendar: this.helper.getIconClass('calendar')
                });
            },
            initEvents: function () {
                this.helper.addDOMEvent(this.main, 'click', u.bind(this.layer.toggle, this.layer));
            },
            repaint: painters.createRepaint(InputControl.prototype.repaint, {
                name: [
                    'rawValue',
                    'range'
                ],
                paint: function (calendar, rawValue, range) {
                    if (range) {
                        if (typeof range === 'string') {
                            range = calendar.convertToRaw(range);
                        }
                        if (!range.begin) {
                            range.begin = new Date(1983, 8, 3);
                        } else if (!range.end) {
                            range.end = new Date(2046, 10, 4);
                        }
                        calendar.range = range;
                    }
                    if (rawValue) {
                        updateMain(calendar, rawValue);
                    }
                    if (calendar.layer) {
                        paintLayer(calendar, rawValue);
                    }
                }
            }, {
                name: [
                    'disabled',
                    'hidden',
                    'readOnly'
                ],
                paint: function (calendar, disabled, hidden, readOnly) {
                    if (disabled || hidden || readOnly) {
                        calendar.layer.hide();
                    }
                }
            }, {
                name: 'isEndless',
                paint: function (calendar, isEndless) {
                    if (!calendar.endlessCheck) {
                        calendar.isEndless = false;
                    } else {
                        var endlessCheck = calendar.getChild('endlessCheck');
                        if (endlessCheck) {
                            endlessCheck.setChecked(isEndless);
                        }
                    }
                }
            }),
            setRawValue: function (date) {
                this.setProperties({ rawValue: date });
            },
            getRawValue: function () {
                return this.rawValue;
            },
            stringifyValue: function (rawValue) {
                return this.convertToParam(rawValue) || '';
            },
            parseValue: function (value) {
                return this.convertToRaw(value);
            },
            dispose: function () {
                if (this.helper.isInStage('DISPOSED')) {
                    return;
                }
                if (this.layer) {
                    this.layer.dispose();
                    this.layer = null;
                }
                this.$super(arguments);
            }
        });
    function startOfDay(day) {
        return m(day).startOf('day').toDate();
    }
    function endOfDay(day) {
        return m(day).endOf('day').toDate();
    }
    function isOutOfRange(calendar, shortItem) {
        var range = calendar.range;
        var itemValue = shortItem.getValue.call(calendar, calendar.now);
        if (startOfDay(range.begin) > startOfDay(range.begin) || endOfDay(itemValue.end) < endOfDay(itemValue.end)) {
            return true;
        }
        return false;
    }
    function getMiniCalendarHtml(calendar) {
        var shownShortCut = calendar.shownShortCut.split(',');
        var shownShortCutHash = {};
        for (var k = 0; k < shownShortCut.length; k++) {
            shownShortCutHash[shownShortCut[k]] = true;
        }
        var tplItem = '' + '<span data-index="${shortIndex}" class="' + calendar.helper.getPartClassName('shortcut-item') + ' ${shortClass}"' + ' id="${shortId}">${shortName}</span>';
        var shortItems = calendar.shortCutItems;
        var len = shortItems.length;
        var html = [];
        for (var i = 0; i < len; i++) {
            var shortItem = shortItems[i];
            if (shownShortCutHash[shortItem.name]) {
                var shortName = shortItem.name;
                var shortClasses = [];
                if (i === 0) {
                    shortClasses = shortClasses.concat(calendar.helper.getPartClasses('shortcut-item-first'));
                }
                var disabled = isOutOfRange(calendar, shortItem);
                if (disabled) {
                    shortClasses = shortClasses.concat(calendar.helper.getPartClasses('shortcut-item-disabled'));
                }
                var shortId = calendar.helper.getId('shortcut-item' + i);
                html.push(lib.format(tplItem, {
                    shortIndex: i,
                    shortClass: shortClasses.join(' '),
                    shortId: shortId,
                    shortName: shortName
                }));
            }
        }
        return html.join('');
    }
    function getCalendarHtml(calendar, type) {
        var endlessCheckDOM = '';
        if (calendar.endlessCheck && type === 'end') {
            endlessCheckDOM = '' + '<input type="checkbox" title="${noEndLabel}" ' + 'data-ui-type="CheckBox" data-ui-variants="custom"' + 'data-ui-child-name="endlessCheck" />';
        }
        var tpl = '' + '<div class="${frameClass}">' + '<div class="${labelClass}">' + '<h3>${labelTitle}</h3>' + endlessCheckDOM + '</div>' + '<div class="${calClass}">' + '<div data-ui="type:MonthView;' + 'childName:${calName}"></div>' + '</div>' + '</div>';
        return lib.format(tpl, {
            frameClass: calendar.helper.getPartClassName(type),
            labelClass: calendar.helper.getPartClassName('label'),
            labelTitle: type === 'begin' ? calendar.startCalendarLabel : calendar.endCalendarLabel,
            titleId: calendar.helper.getId(type + 'Label'),
            calClass: calendar.helper.getPartClassName(type + '-cal'),
            calName: type + 'Cal',
            noEndLabel: calendar.noEndLabel
        });
    }
    function makeCalendarEndless(calendar) {
        var endCalendar = calendar.getChild('endCal');
        var shortCutItems = calendar.helper.getPart('shortcut');
        if (this.isChecked()) {
            calendar.isEndless = true;
            endCalendar.disable();
            calendar.view.end = null;
            calendar.helper.addPartClasses('shortcut-disabled', shortCutItems);
        } else {
            calendar.isEndless = false;
            endCalendar.enable();
            updateView.apply(calendar, [
                endCalendar,
                'end'
            ]);
            calendar.helper.removePartClasses('shortcut-disabled', shortCutItems);
        }
    }
    function isSameDate(date1, date2) {
        if (!date1 && date2 || date1 && !date2) {
            return false;
        } else if (!date1 && !date2) {
            return true;
        }
        return m(date1).isSame(date2, 'day');
    }
    function getSelectedIndex(calendar, value) {
        var shortcutItems = calendar.shortCutItems;
        var len = shortcutItems.length;
        for (var i = 0; i < len; i++) {
            var item = shortcutItems[i];
            var itemValue = item.getValue.call(calendar, calendar.now);
            if (isSameDate(value.begin, itemValue.begin) && isSameDate(value.end, itemValue.end)) {
                return i;
            }
        }
        return -1;
    }
    function selectIndex(calendar, index) {
        var me = calendar;
        var shortcutItems = calendar.shortCutItems;
        if (index < 0 || index >= shortcutItems.length) {
            return;
        }
        var value = shortcutItems[index].getValue.call(me, me.now);
        var begin = value.begin;
        var end = value.end;
        calendar.view = {
            begin: begin,
            end: end
        };
        paintCal(calendar, 'begin', begin);
        paintCal(calendar, 'end', end);
        paintMiniCal(me, index);
    }
    function paintMiniCal(calendar, index) {
        var shortcutItems = calendar.shortCutItems;
        var miniMode = calendar.miniMode;
        if (miniMode !== null && miniMode !== index) {
            calendar.helper.removePartClasses('shortcut-item-selected', calendar.helper.getPart('shortcut-item' + miniMode));
        }
        calendar.miniMode = index;
        if (index >= 0) {
            calendar.helper.addPartClasses('shortcut-item-selected', calendar.helper.getPart('shortcut-item' + index));
            calendar.curMiniName = shortcutItems[index].name;
        } else {
            calendar.curMiniName = null;
        }
    }
    function paintCal(calendar, type, value, bindEvent) {
        var monthView = calendar.getChild(type + 'Cal');
        if (!monthView) {
            return;
        }
        if (bindEvent === true) {
            monthView.on('change', u.bind(updateView, calendar, monthView, type));
            monthView.on('changemonth', u.bind(updateHighlightRange, null, calendar));
        }
        monthView.setProperties({
            rawValue: value,
            range: calendar.range
        });
    }
    function shortcutClick(e) {
        if (this.isEndless) {
            return;
        }
        var $tar = $(e.currentTarget);
        var disableClass = this.helper.getPartClassName('shortcut-item-disabled');
        if (!$tar.hasClass(disableClass)) {
            selectIndex(this, $tar.attr('data-index'));
        }
    }
    function updateView(monthView, type) {
        var date = monthView.getRawValue();
        if (!date) {
            return;
        }
        this.view[type] = date;
        var selectedIndex = getSelectedIndex(this, this.view);
        paintMiniCal(this, selectedIndex);
        updateHighlightRange(this);
    }
    function commitValue(calendar) {
        var me = calendar;
        var view = calendar.view;
        var begin = view.begin;
        var end = view.end;
        if (calendar.isEndless) {
            end = null;
        }
        var dvalue = end - begin;
        if (!end) {
            dvalue = begin;
        }
        var value;
        if (dvalue > 0) {
            value = {
                begin: begin,
                end: end
            };
        } else if (end !== null) {
            value = {
                begin: end,
                end: begin
            };
        }
        var event = me.fire('beforechange', { value: value });
        if (event.isDefaultPrevented()) {
            return;
        }
        me.rawValue = value;
        me.value = me.convertToParam(value);
        updateMain(me, value);
        me.layer.hide();
        me.fire('change', value);
    }
    function updateMain(calendar, range) {
        var text = calendar.helper.getPart('text');
        text.innerHTML = getValueText(calendar, range);
    }
    function getValueText(calendar, rawValue) {
        var dateText = getDateValueText(calendar, rawValue);
        if (calendar.isEndless && dateText) {
            return dateText;
        }
        var shortcut = '';
        if (!calendar.curMiniName && calendar.miniMode !== null && calendar.miniMode >= 0 && calendar.miniMode < calendar.shortCutItems.length) {
            calendar.curMiniName = calendar.shortCutItems[calendar.miniMode].name;
        }
        if (calendar.curMiniName) {
            shortcut = calendar.curMiniName + '&nbsp;&nbsp;';
        }
        if (dateText) {
            return shortcut + dateText;
        }
        return '';
    }
    function getDateValueText(calendar, rawValue) {
        rawValue = rawValue || calendar.getRawValue();
        var begin = rawValue.begin;
        var end = rawValue.end;
        var pattern = calendar.dateFormat;
        var fromLabel = calendar.fromLabelText;
        var result = '';
        if (begin && end) {
            result = m(begin).format(pattern) + ' ' + calendar.toLabelText + ' ' + m(end).format(pattern);
        } else if (!end) {
            if (calendar.fromLabelPosition === 'before') {
                result = fromLabel + ' ' + m(begin).format(pattern);
            } else {
                result = m(begin).format(pattern) + ' ' + fromLabel;
            }
        }
        return result;
    }
    RangeCalendar.defaultProperties = {
        range: {
            begin: new Date(1983, 8, 3),
            end: new Date(2046, 10, 4)
        },
        shownShortCut: '\u6628\u5929,\u6700\u8FD17\u5929,\u4E0A\u5468,\u672C\u6708,\u4E0A\u4E2A\u6708,\u4E0A\u4E2A\u5B63\u5EA6',
        dateFormat: 'YYYY-MM-DD',
        fromLabelText: '\u8D77',
        fromLabelPosition: 'after',
        toLabelText: '\u81F3',
        startCalendarLabel: '\u5F00\u59CB\u65E5\u671F',
        endCalendarLabel: '\u7ED3\u675F\u65E5\u671F',
        okButtonText: '\u786E\u5B9A',
        cancelLinkText: '\u53D6\u6D88',
        noEndLabel: '\u4E0D\u9650\u7ED3\u675F',
        shortCutItems: [
            {
                name: '\u6628\u5929',
                value: 0,
                getValue: function () {
                    var yesterday = new Date(this.now.getTime());
                    yesterday.setDate(yesterday.getDate() - 1);
                    return {
                        begin: yesterday,
                        end: yesterday
                    };
                }
            },
            {
                name: '\u6700\u8FD17\u5929',
                value: 1,
                getValue: function () {
                    var mDate = m(this.now);
                    return {
                        begin: mDate.clone().subtract('day', 7).toDate(),
                        end: mDate.clone().subtract('day', 1).toDate()
                    };
                }
            },
            {
                name: '\u4E0A\u5468',
                value: 2,
                getValue: function () {
                    var now = this.now;
                    var begin = new Date(now.getTime());
                    var end = new Date(now.getTime());
                    var startOfWeek = 1;
                    if (begin.getDay() < startOfWeek % 7) {
                        begin.setDate(begin.getDate() - 14 + startOfWeek - begin.getDay());
                    } else {
                        begin.setDate(begin.getDate() - 7 - begin.getDay() + startOfWeek % 7);
                    }
                    begin.setHours(0, 0, 0, 0);
                    end.setFullYear(begin.getFullYear(), begin.getMonth(), begin.getDate() + 6);
                    end.setHours(0, 0, 0, 0);
                    return {
                        begin: begin,
                        end: end
                    };
                }
            },
            {
                name: '\u672C\u6708',
                value: 3,
                getValue: function () {
                    return {
                        begin: m(this.now).startOf('month').toDate(),
                        end: m(this.now).toDate()
                    };
                }
            },
            {
                name: '\u4E0A\u4E2A\u6708',
                value: 4,
                getValue: function () {
                    var begin = m(this.now).subtract('month', 1).startOf('month').toDate();
                    var end = m(this.now).startOf('month').subtract('day', 1).toDate();
                    return {
                        begin: begin,
                        end: end
                    };
                }
            },
            {
                name: '\u4E0A\u4E2A\u5B63\u5EA6',
                value: 5,
                getValue: function () {
                    var now = this.now;
                    var begin = m(now).subtract('month', now.getMonth() % 3 + 3).startOf('month').toDate();
                    var end = m(now).subtract('month', now.getMonth() % 3).startOf('month').subtract('day', 1).toDate();
                    return {
                        begin: begin,
                        end: end
                    };
                }
            }
        ]
    };
    function updateHighlightRange(calendar) {
        var beginMonth = calendar.getChild('beginCal');
        var endMonth = calendar.getChild('endCal');
        var rangeBegin = calendar.view.begin;
        var rangeEnd = calendar.view.end;
        function updateSingleMonth(monthView, monthViewType) {
            var begin = new Date(monthView.year, monthView.month, 1);
            begin = m(begin);
            var end = begin.clone().endOf('month');
            var cursor = begin;
            while (cursor <= end) {
                var highlight = true;
                if (monthViewType === 'begin' && (cursor <= m(rangeBegin) || cursor > m(rangeEnd))) {
                    highlight = false;
                } else if (monthViewType === 'end' && (cursor < m(rangeBegin) || cursor >= m(rangeEnd))) {
                    highlight = false;
                }
                changeHighlightState(monthView, cursor.toDate(), highlight);
                cursor.add('day', 1);
            }
        }
        function changeHighlightState(monthView, date, highlight) {
            var dateItem = monthView.getDateItemHTML(date);
            if (highlight) {
                monthView.helper.addPartClasses('month-item-highlight', dateItem);
            } else {
                monthView.helper.removePartClasses('month-item-highlight', dateItem);
            }
        }
        updateSingleMonth(beginMonth, 'begin');
        updateSingleMonth(endMonth, 'end');
    }
    esui.register(RangeCalendar);
    return RangeCalendar;
});

define('esui/Region', [
    'require',
    './Select',
    'jquery',
    './lib',
    './InputControl',
    './main',
    'underscore',
    'eoo',
    './painters'
], function (require) {
    require('./Select');
    var $ = require('jquery');
    var lib = require('./lib');
    var InputControl = require('./InputControl');
    var esui = require('./main');
    var u = require('underscore');
    var eoo = require('eoo');
    var painters = require('./painters');
    var Region = eoo.create(InputControl, {
            type: 'Region',
            initOptions: function (options) {
                var properties = {
                        regionData: u.clone(Region.REGION_LIST),
                        mode: 'multi',
                        pureSelect: false,
                        rawValue: []
                    };
                if ($(this.main).is('input')) {
                    this.helper.extractOptionsFromInput(this.main, properties);
                }
                u.extend(properties, options);
                if (options.value) {
                    properties.rawValue = properties.value.split(',');
                }
                if (options.pureSelect === 'false') {
                    properties.pureSelect = false;
                }
                if (properties.mode === 'multi') {
                    initMultiData(this, properties);
                    this.cityCache = {};
                } else {
                    properties.rawValue = '';
                    initSingleData(this, properties);
                }
                this.setProperties(properties);
            },
            initStructure: function () {
                if (lib.isInput(this.main)) {
                    this.helper.replaceMain();
                }
                if (this.mode === 'multi') {
                    createMultiRegion(this);
                } else {
                    createSingleRegion(this);
                    $(this.main).addClass(this.helper.getPartClassName('single'));
                }
            },
            initEvents: function () {
                var controlHelper = this.helper;
                if (this.mode === 'multi') {
                    controlHelper.addDOMEvent(this.main, 'click', 'input,label', mainClick);
                    controlHelper.addDOMEvent(this.main, 'mouseover', u.partial(mainMouseHandler, 'show'));
                    controlHelper.addDOMEvent(this.main, 'mouseout', u.partial(mainMouseHandler, 'hide'));
                } else {
                    var regionSel = this.getChild('regionSel');
                    regionSel.on('change', u.bind(changeSingleRegion, null, this, regionSel));
                }
            },
            repaint: painters.createRepaint(InputControl.prototype.repaint, {
                name: 'rawValue',
                paint: function (region, value) {
                    if (region.mode === 'multi') {
                        selectMulti(region, value);
                    } else {
                        var regionSel = region.getChild('regionSel');
                        regionSel.setProperties({ value: value });
                    }
                }
            }, {
                name: [
                    'disabled',
                    'readOnly'
                ],
                paint: function (region, disabled, readOnly) {
                    var editable = true;
                    if (disabled || readOnly) {
                        editable = false;
                    }
                    changeToDisabled(region, !editable);
                    if (!disabled && readOnly) {
                        var input = lib.g(region.helper.getId('param-value'));
                        input.disabled = false;
                    }
                }
            }),
            setRawValue: function (value) {
                this.setProperties({ rawValue: value });
            },
            getRawValue: function () {
                if (this.mode === 'single') {
                    return this.getChild('regionSel').getValue();
                }
                if (this.pureSelect) {
                    var node = {
                            id: '-100',
                            children: this.regionData
                        };
                    var ids = getPureSelected(this, node);
                    return ids;
                }
                return this.rawValue;
            },
            stringifyValue: function (rawValue) {
                if (this.mode === 'multi') {
                    return rawValue.join(',');
                }
                return rawValue;
            },
            parseValue: function (value) {
                return value.split(',');
            },
            checkRegion: function (id) {
                var checkbox = getOptionDOM(this, id);
                if (checkbox) {
                    checkbox.checked = true;
                    optionClick(this, checkbox);
                } else {
                    var item = this.regionDataIndex[id];
                    if (item) {
                        item.isSelected = true;
                        updateMulti(this);
                        updateParamValue(this);
                    }
                }
            }
        });
    function createMultiRegion(region) {
        var data = region.regionData;
        var len = data.length;
        var html = [];
        for (var i = 0; i < len; i++) {
            html.push(getLevelHtml(region, data[i], 1));
        }
        var tpl = '<input type="hidden" id="${inputId}" name="${name}" />';
        html.push(lib.format(tpl, {
            inputId: region.helper.getId('param-value'),
            name: region.name
        }));
        region.main.innerHTML = html.join('');
    }
    function walk(node, handler, context) {
        handler.call(context, node);
        u.each(node.children, function (child) {
            walk(child, handler, context);
        });
    }
    function selectMulti(region, values) {
        var regionDataIndex = region.regionDataIndex;
        var fullValues = [];
        u.each(values, function (value) {
            var node = regionDataIndex[value];
            if (node) {
                walk(node, function (node) {
                    fullValues.push(node.id);
                });
            }
        });
        var map = {};
        u.each(fullValues, function (value) {
            map[value] = 1;
        });
        u.each(region.regionDataIndex, function (item, key) {
            var checked = map.hasOwnProperty(key);
            var checkbox = getOptionDOM(region, key);
            if (checkbox) {
                checkbox.checked = checked;
            } else {
                item.isSelected = checked;
            }
        });
        updateMulti(region);
        updateParamValue(region);
    }
    function getOptionDOM(region, id) {
        return lib.g(region.helper.getId('item-' + id));
    }
    function updateMulti(region, data, dontResetValue, level) {
        level = level || 0;
        data = data || { children: region.regionData };
        var indexData = region.regionDataIndex[data.id];
        if (!dontResetValue) {
            region.rawValue = [];
        }
        var isItemChecked;
        var selChildLength = 0;
        var checkbox = data.id && getOptionDOM(region, data.id);
        var children = data.children;
        var len = children instanceof Array && children.length;
        if (len) {
            var isChecked = true;
            for (var i = 0; i < len; i++) {
                isItemChecked = updateMulti(region, children[i], 1, level + 1);
                if (isItemChecked) {
                    selChildLength++;
                }
                isChecked = isChecked && isItemChecked;
            }
            if (checkbox) {
                checkbox.checked = isChecked;
                isChecked && region.rawValue.push(data.id);
                indexData.isSelected = isChecked;
            }
            if (level === 3) {
                if (!isChecked) {
                    updateSelectedTip(region, selChildLength, len, data.id);
                } else {
                    updateSelectedTip(region, 1, 1, data.id);
                }
            }
            return isChecked;
        }
        if (checkbox) {
            if (checkbox.checked) {
                region.rawValue.push(data.id);
            }
            indexData.isSelected = checkbox.checked;
            return checkbox.checked;
        } else if (indexData.isSelected) {
            region.rawValue.push(data.id);
        }
        return indexData.isSelected;
    }
    function getHiddenClassName() {
        return esui.getConfig('stateClassPrefix') + '-hidden';
    }
    function updateSelectedTip(region, selCityIdsLength, cLength, id) {
        var $infoTag = $(lib.g(region.helper.getId('info-' + id)));
        if (selCityIdsLength !== 0 && selCityIdsLength !== cLength) {
            $infoTag.removeClass(getHiddenClassName());
            $infoTag.html(selCityIdsLength + '/' + cLength + '');
        } else {
            $infoTag.addClass(getHiddenClassName());
            $infoTag.html('');
        }
    }
    var tplInputItem = [
            '<div class="${itemClasses}" id="${itemWrapperId}">',
            '<div class="${checkboxCustomClass}">',
            '<input type="checkbox" value="${itemValue}" id="${itemId}"',
            ' data-optionId="${itemValue}" data-level="${level}" />',
            '<label for="${itemId}" title="${text}">${text}</label>',
            '</div>',
            '</div>'
        ].join('');
    var tplBoxWrapper = [
            '<div class="${boxClass}">',
            tplInputItem,
            '<div class="${contentClass}">${content}</div>',
            '</div>'
        ].join('');
    var tplPopLayer = [
            '<div class="${popLayerClass}">',
            '<div class="${hiddenClass} ${layerBoxClass}" id="${id}">',
            '${innerHTML}</div>',
            '<b class="${hiddenClass}" id="${infoId}"></b>',
            '</div>'
        ].join('');
    var tplProvinceWrapper = '<div class="${classes}">${content}</div>';
    var tempIdx = 0;
    function getLevelHtml(region, item, level) {
        item.level = level;
        var subItemHtml = [];
        var children = item.children;
        if (children != null) {
            item.isSelected = false;
            if (item.level === 3) {
                if (item.children && item.children.length > 0) {
                    region.cityCache[item.id] = formatItemChildren(region, item);
                }
            } else {
                var len = children instanceof Array && children.length;
                for (var i = 0; i < len; i++) {
                    subItemHtml.push(getLevelHtml(region, item.children[i], level + 1));
                }
            }
        }
        var controlHelper = region.helper;
        var customCheckbox = controlHelper.getPrefixClass('checkbox-custom');
        switch (level) {
        case 1:
            return lib.format(tplBoxWrapper, {
                boxClass: controlHelper.getPartClasses('country-box').join(' '),
                itemClasses: controlHelper.getPartClasses('country-check').join(' '),
                itemWrapperId: '',
                itemValue: item.id,
                itemId: controlHelper.getId('item-' + item.id),
                level: item.level,
                text: item.text,
                contentClass: '',
                content: subItemHtml.join(''),
                checkboxCustomClass: customCheckbox
            });
        case 2:
            return lib.format(tplBoxWrapper, {
                boxClass: controlHelper.getPartClasses('region-box' + tempIdx++ % 2).join(' '),
                itemClasses: controlHelper.getPartClasses('region-check').join(' '),
                itemWrapperId: '',
                itemValue: item.id,
                itemId: controlHelper.getId('item-' + item.id),
                level: item.level,
                text: item.text,
                contentClass: controlHelper.getPartClasses('province-box').join(' '),
                content: subItemHtml.join(''),
                checkboxCustomClass: customCheckbox
            });
        case 3:
            var layer = lib.format(tplPopLayer, {
                    popLayerClass: controlHelper.getPartClasses('locator').join(' '),
                    layerBoxClass: controlHelper.getPartClasses('city-box').join(' '),
                    hiddenClass: getHiddenClassName(),
                    id: controlHelper.getId('sub-' + item.id),
                    infoId: controlHelper.getId('info-' + item.id),
                    innerHTML: subItemHtml.join('')
                });
            var text = lib.format(tplInputItem, {
                    itemClasses: controlHelper.getPartClasses('text').join(' '),
                    itemWrapperId: controlHelper.getId('wrapper-' + item.id),
                    itemValue: item.id,
                    itemId: controlHelper.getId('item-' + item.id),
                    level: item.level,
                    text: item.text,
                    checkboxCustomClass: customCheckbox
                });
            return lib.format(tplProvinceWrapper, {
                classes: controlHelper.getPartClasses('province-item').join(' '),
                content: text + layer
            });
        case 4:
            return lib.format(tplInputItem, {
                itemClasses: controlHelper.getPartClasses('city').join(' '),
                itemWrapperId: '',
                itemValue: item.id,
                itemId: controlHelper.getId('item-' + item.id),
                level: item.level,
                text: item.text,
                checkboxCustomClass: customCheckbox
            });
        }
    }
    function formatItemChildren(region, item) {
        if (item.level === 3 && item.children != null) {
            var itemHtml = [];
            for (var i = 0; i < item.children.length; i++) {
                item.children[i].parent = item;
                item.children[i].level = item.level + 1;
                itemHtml.push(getLevelHtml(region, item.children[i], item.level + 1));
            }
            if (itemHtml.length % 2 === 1) {
                itemHtml.push('');
            }
            var html = ['<table border="0" cellspacing="0" cellpadding="0">'].join('');
            var tpl = [
                    '<tr>',
                    '<td>${firstItem}',
                    '</td>',
                    '<td>${secondItem}',
                    '</td>',
                    '</tr>'
                ].join('');
            for (var j = 0; j < itemHtml.length; j += 2) {
                html += lib.format(tpl, {
                    firstItem: itemHtml[j],
                    secondItem: itemHtml[j + 1]
                });
            }
            return html + '</table>';
        }
        return '';
    }
    function initMultiData(region, properties) {
        var source = properties.regionData;
        properties.regionDataIndex = {};
        walker(source, { children: source });
        function walker(data, parent) {
            var len = data instanceof Array && data.length;
            var i;
            var item;
            if (!len) {
                return;
            }
            for (i = 0; i < len; i++) {
                item = u.clone(data[i]);
                item.parent = parent;
                properties.regionDataIndex[item.id] = item;
                walker(item.children, item);
            }
        }
    }
    function mainClick(e) {
        if (this.disabled || this.readOnly) {
            return;
        }
        var tar = e.currentTarget;
        var $tar = $(tar);
        var hit = false;
        if ($tar.is('input')) {
            hit = true;
        } else if ($tar.is('label')) {
            var checkId = $tar.attr('for');
            tar = lib.g(checkId);
            hit = true;
        }
        if (hit) {
            optionClick(this, tar);
            this.fire('change');
            return;
        }
    }
    function optionClick(region, dom, dontRefreshView) {
        var id = $(dom).attr('data-optionId');
        var isChecked = dom.checked;
        var data = region.regionDataIndex[id];
        data.isSelected = isChecked;
        var children = data.children;
        var len = children instanceof Array && children.length;
        if (len) {
            u.each(children, function (child) {
                var checkbox = getOptionDOM(region, child.id);
                if (checkbox) {
                    checkbox.checked = isChecked;
                    optionClick(region, checkbox, 1);
                } else {
                    region.regionDataIndex[child.id].isSelected = isChecked;
                }
            });
        } else if (len === 0) {
            if ($(dom).attr('level') === 3) {
                var selCityIdsLength = 0;
                var cityTotal = region.regionDataIndex[id].parent.children;
                u.each(cityTotal, function (city) {
                    if (getOptionDOM(city.id).checked === true) {
                        selCityIdsLength++;
                    }
                });
                updateSelectedTip(region, selCityIdsLength, cityTotal.length, region.regionDataIndex[id].parent.id);
            }
        }
        if (!dontRefreshView) {
            updateMulti(region);
            updateParamValue(region);
        }
    }
    function mainMouseHandler(type, e) {
        if (this.disabled || this.readOnly) {
            return;
        }
        var tar = e.target;
        var controlHelper = this.helper;
        var textClass = controlHelper.getPartClassName('text');
        var layerClass = controlHelper.getPartClassName('city-box');
        var handler = showSubCity;
        if (type === 'hide') {
            handler = hideSubCity;
        }
        var itemId;
        while (tar && tar !== document.body) {
            var optionChildLayer;
            if ($(tar).hasClass(textClass)) {
                itemId = $(tar.firstChild.firstChild).attr('value');
                optionChildLayer = tar.nextSibling.firstChild;
            } else if ($(tar).hasClass(layerClass)) {
                optionChildLayer = tar;
            }
            if (optionChildLayer) {
                handler(this, optionChildLayer, itemId);
                return;
            }
            tar = tar.parentNode;
        }
    }
    function showSubCity(region, dom, itemId) {
        if (itemId) {
            var subCityHTML = region.cityCache[itemId];
            if (!subCityHTML) {
                return;
            }
            dom.innerHTML = subCityHTML;
            selectMulti(region, region.rawValue);
        }
        $(dom).removeClass(getHiddenClassName());
        var wrapper = dom.parentNode.previousSibling;
        region.helper.addPartClasses('text-over', wrapper);
    }
    function hideSubCity(region, dom, itemId) {
        $(dom).addClass(getHiddenClassName());
        var wrapper = dom.parentNode.previousSibling;
        region.helper.removePartClasses('text-over', wrapper);
    }
    function initSingleData(region, properties) {
        var result = [];
        walker({ children: properties.regionData });
        function walker(data) {
            var children = data.children;
            var hasChild = !!children;
            if (data.id) {
                result.push({
                    text: data.text,
                    value: data.id,
                    disabled: hasChild
                });
            }
            if (hasChild) {
                for (var i = 0, len = children.length; i < len; i++) {
                    walker(children[i]);
                }
            }
        }
        properties.singleRegionData = result;
    }
    function createSingleRegion(region) {
        var tpl = '' + '<div data-ui="type:Select;childName:regionSel;' + 'id:regionSel;"></div>' + '<input type="hidden" id="${inputId}" name="${name}" />';
        region.main.innerHTML = lib.format(tpl, {
            inputId: region.helper.getId('param-value'),
            name: region.name
        });
        region.initChildren(region.main);
        var regionSel = region.getChild('regionSel');
        regionSel.setProperties({ datasource: region.singleRegionData });
        regionSel.on('change', u.bind(changeSingleRegion, null, region, regionSel));
    }
    function changeSingleRegion(region, regionSel) {
        var regionId = parseInt(regionSel.getValue(), 10);
        region.rawValue = regionId;
        updateParamValue(region);
    }
    function changeToDisabled(region, disabled) {
        if (region.mode === 'multi') {
            var elements = region.main.getElementsByTagName('input');
            for (var i = 0, length = elements.length; i < length; i++) {
                var item = elements[i];
                item.disabled = disabled;
            }
        } else {
            var regionSel = region.getChild('regionSel');
            regionSel.setProperties({ disabled: disabled });
        }
    }
    function updateParamValue(region) {
        var input = lib.g(region.helper.getId('param-value'));
        var value = region.rawValue;
        if (lib.isArray(value)) {
            input.value = value.join(',');
        } else {
            input.value = value;
        }
    }
    function getPureSelected(region, node) {
        var dataIndex = region.regionDataIndex;
        var ids = [];
        if (dataIndex[node.id] && dataIndex[node.id].isSelected) {
            ids.push(node.id);
        } else {
            u.each(node.children, function (child) {
                var indexChild = dataIndex[child.id];
                ids.push.apply(ids, getPureSelected(region, indexChild));
            });
        }
        return ids;
    }
    Region.REGION_LIST = [
        {
            id: '90',
            text: '\u4E2D\u56FD',
            children: [
                {
                    id: '80',
                    text: '\u534E\u5317\u5730\u533A',
                    children: [
                        {
                            id: '1',
                            text: '\u5317\u4EAC',
                            children: [
                                {
                                    id: '742',
                                    text: '\u660C\u5E73\u533A'
                                },
                                {
                                    id: '743',
                                    text: '\u671D\u9633\u533A'
                                },
                                {
                                    id: '744',
                                    text: '\u5D07\u6587\u533A'
                                },
                                {
                                    id: '745',
                                    text: '\u5927\u5174\u533A'
                                },
                                {
                                    id: '746',
                                    text: '\u4E1C\u57CE\u533A'
                                },
                                {
                                    id: '747',
                                    text: '\u623F\u5C71\u533A'
                                },
                                {
                                    id: '748',
                                    text: '\u4E30\u53F0\u533A'
                                },
                                {
                                    id: '749',
                                    text: '\u6D77\u6DC0\u533A'
                                },
                                {
                                    id: '750',
                                    text: '\u6000\u67D4\u533A'
                                },
                                {
                                    id: '751',
                                    text: '\u95E8\u5934\u6C9F\u533A'
                                },
                                {
                                    id: '752',
                                    text: '\u5BC6\u4E91\u53BF'
                                },
                                {
                                    id: '753',
                                    text: '\u5E73\u8C37\u533A'
                                },
                                {
                                    id: '754',
                                    text: '\u77F3\u666F\u5C71\u533A'
                                },
                                {
                                    id: '755',
                                    text: '\u987A\u4E49\u533A'
                                },
                                {
                                    id: '756',
                                    text: '\u901A\u5DDE\u533A'
                                },
                                {
                                    id: '757',
                                    text: '\u897F\u57CE\u533A'
                                },
                                {
                                    id: '758',
                                    text: '\u5BA3\u6B66\u533A'
                                },
                                {
                                    id: '759',
                                    text: '\u5EF6\u5E86\u53BF'
                                }
                            ]
                        },
                        {
                            id: '3',
                            text: '\u5929\u6D25',
                            children: [
                                {
                                    id: '760',
                                    text: '\u5B9D\u577B\u533A'
                                },
                                {
                                    id: '761',
                                    text: '\u5317\u8FB0\u533A'
                                },
                                {
                                    id: '763',
                                    text: '\u4E1C\u4E3D\u533A'
                                },
                                {
                                    id: '765',
                                    text: '\u6CB3\u5317\u533A'
                                },
                                {
                                    id: '766',
                                    text: '\u6CB3\u4E1C\u533A'
                                },
                                {
                                    id: '767',
                                    text: '\u548C\u5E73\u533A'
                                },
                                {
                                    id: '768',
                                    text: '\u6CB3\u897F\u533A'
                                },
                                {
                                    id: '769',
                                    text: '\u7EA2\u6865\u533A'
                                },
                                {
                                    id: '770',
                                    text: '\u84DF\u53BF'
                                },
                                {
                                    id: '771',
                                    text: '\u6D25\u5357\u533A'
                                },
                                {
                                    id: '772',
                                    text: '\u9759\u6D77\u53BF'
                                },
                                {
                                    id: '773',
                                    text: '\u5357\u5F00\u533A'
                                },
                                {
                                    id: '774',
                                    text: '\u5B81\u6CB3\u53BF'
                                },
                                {
                                    id: '776',
                                    text: '\u6B66\u6E05\u533A'
                                },
                                {
                                    id: '777',
                                    text: '\u897F\u9752\u533A'
                                },
                                {
                                    id: '900',
                                    text: '\u6EE8\u6D77\u65B0\u533A'
                                }
                            ]
                        },
                        {
                            id: '15',
                            text: '\u6CB3\u5317',
                            children: [
                                {
                                    id: '226',
                                    text: '\u4FDD\u5B9A\u5E02'
                                },
                                {
                                    id: '228',
                                    text: '\u6CA7\u5DDE\u5E02'
                                },
                                {
                                    id: '229',
                                    text: '\u627F\u5FB7\u5E02'
                                },
                                {
                                    id: '230',
                                    text: '\u90AF\u90F8\u5E02'
                                },
                                {
                                    id: '231',
                                    text: '\u8861\u6C34\u5E02'
                                },
                                {
                                    id: '234',
                                    text: '\u5ECA\u574A\u5E02'
                                },
                                {
                                    id: '236',
                                    text: '\u79E6\u7687\u5C9B\u5E02'
                                },
                                {
                                    id: '239',
                                    text: '\u77F3\u5BB6\u5E84\u5E02'
                                },
                                {
                                    id: '240',
                                    text: '\u5510\u5C71\u5E02'
                                },
                                {
                                    id: '241',
                                    text: '\u90A2\u53F0\u5E02'
                                },
                                {
                                    id: '242',
                                    text: '\u5F20\u5BB6\u53E3\u5E02'
                                }
                            ]
                        },
                        {
                            id: '24',
                            text: '\u5185\u8499\u53E4',
                            children: [
                                {
                                    id: '428',
                                    text: '\u963F\u62C9\u5584\u76DF'
                                },
                                {
                                    id: '429',
                                    text: '\u5DF4\u5F66\u6DD6\u5C14\u5E02'
                                },
                                {
                                    id: '430',
                                    text: '\u5305\u5934\u5E02'
                                },
                                {
                                    id: '431',
                                    text: '\u8D64\u5CF0\u5E02'
                                },
                                {
                                    id: '432',
                                    text: '\u9102\u5C14\u591A\u65AF\u5E02'
                                },
                                {
                                    id: '434',
                                    text: '\u547C\u548C\u6D69\u7279\u5E02'
                                },
                                {
                                    id: '435',
                                    text: '\u547C\u4F26\u8D1D\u5C14\u5E02'
                                },
                                {
                                    id: '437',
                                    text: '\u901A\u8FBD\u5E02'
                                },
                                {
                                    id: '438',
                                    text: '\u4E4C\u6D77\u5E02'
                                },
                                {
                                    id: '439',
                                    text: '\u4E4C\u5170\u5BDF\u5E03\u5E02'
                                },
                                {
                                    id: '442',
                                    text: '\u9521\u6797\u90ED\u52D2\u76DF'
                                },
                                {
                                    id: '444',
                                    text: '\u5174\u5B89\u76DF'
                                }
                            ]
                        },
                        {
                            id: '28',
                            text: '\u5C71\u897F',
                            children: [
                                {
                                    id: '486',
                                    text: '\u5927\u540C\u5E02'
                                },
                                {
                                    id: '491',
                                    text: '\u664B\u57CE\u5E02'
                                },
                                {
                                    id: '492',
                                    text: '\u664B\u4E2D\u5E02'
                                },
                                {
                                    id: '493',
                                    text: '\u4E34\u6C7E\u5E02'
                                },
                                {
                                    id: '494',
                                    text: '\u5415\u6881\u5E02'
                                },
                                {
                                    id: '495',
                                    text: '\u6714\u5DDE\u5E02'
                                },
                                {
                                    id: '496',
                                    text: '\u592A\u539F\u5E02'
                                },
                                {
                                    id: '497',
                                    text: '\u5FFB\u5DDE\u5E02'
                                },
                                {
                                    id: '498',
                                    text: '\u9633\u6CC9\u5E02'
                                },
                                {
                                    id: '501',
                                    text: '\u8FD0\u57CE\u5E02'
                                },
                                {
                                    id: '502',
                                    text: '\u957F\u6CBB\u5E02'
                                }
                            ]
                        }
                    ]
                },
                {
                    id: '81',
                    text: '\u4E1C\u5317\u5730\u533A',
                    children: [
                        {
                            id: '17',
                            text: '\u9ED1\u9F99\u6C5F',
                            children: [
                                {
                                    id: '272',
                                    text: '\u5927\u5E86\u5E02'
                                },
                                {
                                    id: '273',
                                    text: '\u5927\u5174\u5B89\u5CAD\u5730\u533A'
                                },
                                {
                                    id: '276',
                                    text: '\u54C8\u5C14\u6EE8\u5E02'
                                },
                                {
                                    id: '278',
                                    text: '\u9E64\u5C97\u5E02'
                                },
                                {
                                    id: '279',
                                    text: '\u9ED1\u6CB3\u5E02'
                                },
                                {
                                    id: '282',
                                    text: '\u9E21\u897F\u5E02'
                                },
                                {
                                    id: '284',
                                    text: '\u4F73\u6728\u65AF\u5E02'
                                },
                                {
                                    id: '287',
                                    text: '\u7261\u4E39\u6C5F\u5E02'
                                },
                                {
                                    id: '289',
                                    text: '\u4E03\u53F0\u6CB3\u5E02'
                                },
                                {
                                    id: '290',
                                    text: '\u9F50\u9F50\u54C8\u5C14\u5E02'
                                },
                                {
                                    id: '291',
                                    text: '\u53CC\u9E2D\u5C71\u5E02'
                                },
                                {
                                    id: '293',
                                    text: '\u7EE5\u5316\u5E02'
                                },
                                {
                                    id: '298',
                                    text: '\u4F0A\u6625\u5E02'
                                }
                            ]
                        },
                        {
                            id: '20',
                            text: '\u5409\u6797',
                            children: [
                                {
                                    id: '345',
                                    text: '\u767D\u57CE\u5E02'
                                },
                                {
                                    id: '346',
                                    text: '\u767D\u5C71\u5E02'
                                },
                                {
                                    id: '351',
                                    text: '\u5409\u6797\u5E02'
                                },
                                {
                                    id: '352',
                                    text: '\u8FBD\u6E90\u5E02'
                                },
                                {
                                    id: '355',
                                    text: '\u56DB\u5E73\u5E02'
                                },
                                {
                                    id: '356',
                                    text: '\u677E\u539F\u5E02'
                                },
                                {
                                    id: '358',
                                    text: '\u901A\u5316\u5E02'
                                },
                                {
                                    id: '359',
                                    text: '\u5EF6\u8FB9\u671D\u9C9C\u65CF\u81EA\u6CBB\u5DDE'
                                },
                                {
                                    id: '361',
                                    text: '\u957F\u6625\u5E02'
                                }
                            ]
                        },
                        {
                            id: '23',
                            text: '\u8FBD\u5B81',
                            children: [
                                {
                                    id: '413',
                                    text: '\u978D\u5C71\u5E02'
                                },
                                {
                                    id: '414',
                                    text: '\u672C\u6EAA\u5E02'
                                },
                                {
                                    id: '415',
                                    text: '\u671D\u9633\u5E02'
                                },
                                {
                                    id: '416',
                                    text: '\u5927\u8FDE\u5E02'
                                },
                                {
                                    id: '417',
                                    text: '\u4E39\u4E1C\u5E02'
                                },
                                {
                                    id: '418',
                                    text: '\u629A\u987A\u5E02'
                                },
                                {
                                    id: '419',
                                    text: '\u961C\u65B0\u5E02'
                                },
                                {
                                    id: '421',
                                    text: '\u846B\u82A6\u5C9B\u5E02'
                                },
                                {
                                    id: '422',
                                    text: '\u9526\u5DDE\u5E02'
                                },
                                {
                                    id: '423',
                                    text: '\u8FBD\u9633\u5E02'
                                },
                                {
                                    id: '424',
                                    text: '\u76D8\u9526\u5E02'
                                },
                                {
                                    id: '425',
                                    text: '\u6C88\u9633\u5E02'
                                },
                                {
                                    id: '426',
                                    text: '\u94C1\u5CAD\u5E02'
                                },
                                {
                                    id: '427',
                                    text: '\u8425\u53E3\u5E02'
                                }
                            ]
                        }
                    ]
                },
                {
                    id: '82',
                    text: '\u534E\u4E1C\u5730\u533A',
                    children: [
                        {
                            id: '2',
                            text: '\u4E0A\u6D77',
                            children: [
                                {
                                    id: '818',
                                    text: '\u5B9D\u5C71\u533A'
                                },
                                {
                                    id: '819',
                                    text: '\u5D07\u660E\u53BF'
                                },
                                {
                                    id: '820',
                                    text: '\u5949\u8D24\u533A'
                                },
                                {
                                    id: '821',
                                    text: '\u8679\u53E3\u533A'
                                },
                                {
                                    id: '822',
                                    text: '\u9EC4\u6D66\u533A'
                                },
                                {
                                    id: '823',
                                    text: '\u5609\u5B9A\u533A'
                                },
                                {
                                    id: '824',
                                    text: '\u91D1\u5C71\u533A'
                                },
                                {
                                    id: '825',
                                    text: '\u9759\u5B89\u533A'
                                },
                                {
                                    id: '826',
                                    text: '\u5362\u6E7E\u533A'
                                },
                                {
                                    id: '827',
                                    text: '\u95F5\u884C\u533A'
                                },
                                {
                                    id: '830',
                                    text: '\u6D66\u4E1C\u65B0\u533A'
                                },
                                {
                                    id: '831',
                                    text: '\u666E\u9640\u533A'
                                },
                                {
                                    id: '832',
                                    text: '\u9752\u6D66\u533A'
                                },
                                {
                                    id: '833',
                                    text: '\u677E\u6C5F\u533A'
                                },
                                {
                                    id: '834',
                                    text: '\u5F90\u6C47\u533A'
                                },
                                {
                                    id: '835',
                                    text: '\u6768\u6D66\u533A'
                                },
                                {
                                    id: '836',
                                    text: '\u95F8\u5317\u533A'
                                },
                                {
                                    id: '837',
                                    text: '\u957F\u5B81\u533A'
                                }
                            ]
                        },
                        {
                            id: '8',
                            text: '\u5B89\u5FBD',
                            children: [
                                {
                                    id: '101',
                                    text: '\u5B89\u5E86\u5E02'
                                },
                                {
                                    id: '102',
                                    text: '\u868C\u57E0\u5E02'
                                },
                                {
                                    id: '103',
                                    text: '\u4EB3\u5DDE\u5E02'
                                },
                                {
                                    id: '104',
                                    text: '\u5DE2\u6E56\u5E02'
                                },
                                {
                                    id: '105',
                                    text: '\u6C60\u5DDE\u5E02'
                                },
                                {
                                    id: '106',
                                    text: '\u6EC1\u5DDE\u5E02'
                                },
                                {
                                    id: '107',
                                    text: '\u961C\u9633\u5E02'
                                },
                                {
                                    id: '110',
                                    text: '\u5408\u80A5\u5E02'
                                },
                                {
                                    id: '111',
                                    text: '\u6DEE\u5317\u5E02'
                                },
                                {
                                    id: '112',
                                    text: '\u6DEE\u5357\u5E02'
                                },
                                {
                                    id: '113',
                                    text: '\u9EC4\u5C71\u5E02'
                                },
                                {
                                    id: '115',
                                    text: '\u516D\u5B89\u5E02'
                                },
                                {
                                    id: '116',
                                    text: '\u9A6C\u978D\u5C71\u5E02'
                                },
                                {
                                    id: '118',
                                    text: '\u94DC\u9675\u5E02'
                                },
                                {
                                    id: '119',
                                    text: '\u829C\u6E56\u5E02'
                                },
                                {
                                    id: '120',
                                    text: '\u5BBF\u5DDE\u5E02'
                                },
                                {
                                    id: '121',
                                    text: '\u5BA3\u57CE\u5E02'
                                }
                            ]
                        },
                        {
                            id: '9',
                            text: '\u798F\u5EFA',
                            children: [
                                {
                                    id: '124',
                                    text: '\u798F\u5DDE\u5E02'
                                },
                                {
                                    id: '126',
                                    text: '\u9F99\u5CA9\u5E02'
                                },
                                {
                                    id: '127',
                                    text: '\u5357\u5E73\u5E02'
                                },
                                {
                                    id: '128',
                                    text: '\u5B81\u5FB7\u5E02'
                                },
                                {
                                    id: '129',
                                    text: '\u8386\u7530\u5E02'
                                },
                                {
                                    id: '130',
                                    text: '\u6CC9\u5DDE\u5E02'
                                },
                                {
                                    id: '131',
                                    text: '\u4E09\u660E\u5E02'
                                },
                                {
                                    id: '132',
                                    text: '\u53A6\u95E8\u5E02'
                                },
                                {
                                    id: '138',
                                    text: '\u6F33\u5DDE\u5E02'
                                }
                            ]
                        },
                        {
                            id: '21',
                            text: '\u6C5F\u82CF',
                            children: [
                                {
                                    id: '363',
                                    text: '\u5E38\u5DDE\u5E02'
                                },
                                {
                                    id: '367',
                                    text: '\u6DEE\u5B89\u5E02'
                                },
                                {
                                    id: '375',
                                    text: '\u8FDE\u4E91\u6E2F\u5E02'
                                },
                                {
                                    id: '376',
                                    text: '\u5357\u4EAC\u5E02'
                                },
                                {
                                    id: '377',
                                    text: '\u5357\u901A\u5E02'
                                },
                                {
                                    id: '381',
                                    text: '\u82CF\u5DDE\u5E02'
                                },
                                {
                                    id: '383',
                                    text: '\u6CF0\u5DDE\u5E02'
                                },
                                {
                                    id: '386',
                                    text: '\u65E0\u9521\u5E02'
                                },
                                {
                                    id: '391',
                                    text: '\u5BBF\u8FC1\u5E02'
                                },
                                {
                                    id: '392',
                                    text: '\u5F90\u5DDE\u5E02'
                                },
                                {
                                    id: '393',
                                    text: '\u76D0\u57CE\u5E02'
                                },
                                {
                                    id: '395',
                                    text: '\u626C\u5DDE\u5E02'
                                },
                                {
                                    id: '399',
                                    text: '\u9547\u6C5F\u5E02'
                                }
                            ]
                        },
                        {
                            id: '22',
                            text: '\u6C5F\u897F',
                            children: [
                                {
                                    id: '401',
                                    text: '\u629A\u5DDE\u5E02'
                                },
                                {
                                    id: '402',
                                    text: '\u8D63\u5DDE\u5E02'
                                },
                                {
                                    id: '403',
                                    text: '\u5409\u5B89\u5E02'
                                },
                                {
                                    id: '404',
                                    text: '\u666F\u5FB7\u9547\u5E02'
                                },
                                {
                                    id: '406',
                                    text: '\u4E5D\u6C5F\u5E02'
                                },
                                {
                                    id: '407',
                                    text: '\u5357\u660C\u5E02'
                                },
                                {
                                    id: '408',
                                    text: '\u840D\u4E61\u5E02'
                                },
                                {
                                    id: '409',
                                    text: '\u4E0A\u9976\u5E02'
                                },
                                {
                                    id: '410',
                                    text: '\u65B0\u4F59\u5E02'
                                },
                                {
                                    id: '411',
                                    text: '\u5B9C\u6625\u5E02'
                                },
                                {
                                    id: '412',
                                    text: '\u9E70\u6F6D\u5E02'
                                }
                            ]
                        },
                        {
                            id: '27',
                            text: '\u5C71\u4E1C',
                            children: [
                                {
                                    id: '461',
                                    text: '\u6EE8\u5DDE\u5E02'
                                },
                                {
                                    id: '462',
                                    text: '\u5FB7\u5DDE\u5E02'
                                },
                                {
                                    id: '463',
                                    text: '\u4E1C\u8425\u5E02'
                                },
                                {
                                    id: '466',
                                    text: '\u83CF\u6CFD\u5E02'
                                },
                                {
                                    id: '467',
                                    text: '\u6D4E\u5357\u5E02'
                                },
                                {
                                    id: '468',
                                    text: '\u6D4E\u5B81\u5E02'
                                },
                                {
                                    id: '470',
                                    text: '\u83B1\u829C\u5E02'
                                },
                                {
                                    id: '472',
                                    text: '\u804A\u57CE\u5E02'
                                },
                                {
                                    id: '473',
                                    text: '\u4E34\u6C82\u5E02'
                                },
                                {
                                    id: '474',
                                    text: '\u9752\u5C9B\u5E02'
                                },
                                {
                                    id: '476',
                                    text: '\u65E5\u7167\u5E02'
                                },
                                {
                                    id: '477',
                                    text: '\u6CF0\u5B89\u5E02'
                                },
                                {
                                    id: '479',
                                    text: '\u5A01\u6D77\u5E02'
                                },
                                {
                                    id: '480',
                                    text: '\u6F4D\u574A\u5E02'
                                },
                                {
                                    id: '481',
                                    text: '\u70DF\u53F0\u5E02'
                                },
                                {
                                    id: '482',
                                    text: '\u67A3\u5E84\u5E02'
                                },
                                {
                                    id: '485',
                                    text: '\u6DC4\u535A\u5E02'
                                }
                            ]
                        },
                        {
                            id: '34',
                            text: '\u6D59\u6C5F',
                            children: [
                                {
                                    id: '604',
                                    text: '\u676D\u5DDE\u5E02'
                                },
                                {
                                    id: '605',
                                    text: '\u6E56\u5DDE\u5E02'
                                },
                                {
                                    id: '606',
                                    text: '\u5609\u5174\u5E02'
                                },
                                {
                                    id: '608',
                                    text: '\u91D1\u534E\u5E02'
                                },
                                {
                                    id: '611',
                                    text: '\u4E3D\u6C34\u5E02'
                                },
                                {
                                    id: '615',
                                    text: '\u5B81\u6CE2\u5E02'
                                },
                                {
                                    id: '617',
                                    text: '\u8862\u5DDE\u5E02'
                                },
                                {
                                    id: '619',
                                    text: '\u7ECD\u5174\u5E02'
                                },
                                {
                                    id: '621',
                                    text: '\u53F0\u5DDE\u5E02'
                                },
                                {
                                    id: '624',
                                    text: '\u6E29\u5DDE\u5E02'
                                },
                                {
                                    id: '630',
                                    text: '\u821F\u5C71\u5E02'
                                }
                            ]
                        }
                    ]
                },
                {
                    id: '83',
                    text: '\u534E\u4E2D\u5730\u533A',
                    children: [
                        {
                            id: '16',
                            text: '\u6CB3\u5357',
                            children: [
                                {
                                    id: '243',
                                    text: '\u5B89\u9633\u5E02'
                                },
                                {
                                    id: '246',
                                    text: '\u9E64\u58C1\u5E02'
                                },
                                {
                                    id: '249',
                                    text: '\u7126\u4F5C\u5E02'
                                },
                                {
                                    id: '250',
                                    text: '\u5F00\u5C01\u5E02'
                                },
                                {
                                    id: '252',
                                    text: '\u6F2F\u6CB3\u5E02'
                                },
                                {
                                    id: '253',
                                    text: '\u6D1B\u9633\u5E02'
                                },
                                {
                                    id: '254',
                                    text: '\u5357\u9633\u5E02'
                                },
                                {
                                    id: '255',
                                    text: '\u5E73\u9876\u5C71\u5E02'
                                },
                                {
                                    id: '256',
                                    text: '\u6FEE\u9633\u5E02'
                                },
                                {
                                    id: '257',
                                    text: '\u4E09\u95E8\u5CE1\u5E02'
                                },
                                {
                                    id: '258',
                                    text: '\u5546\u4E18\u5E02'
                                },
                                {
                                    id: '261',
                                    text: '\u65B0\u4E61\u5E02'
                                },
                                {
                                    id: '262',
                                    text: '\u4FE1\u9633\u5E02'
                                },
                                {
                                    id: '263',
                                    text: '\u8BB8\u660C\u5E02'
                                },
                                {
                                    id: '266',
                                    text: '\u90D1\u5DDE\u5E02'
                                },
                                {
                                    id: '267',
                                    text: '\u5468\u53E3\u5E02'
                                },
                                {
                                    id: '268',
                                    text: '\u9A7B\u9A6C\u5E97\u5E02'
                                },
                                {
                                    id: '901',
                                    text: '\u6D4E\u6E90\u5E02'
                                }
                            ]
                        },
                        {
                            id: '18',
                            text: '\u6E56\u5317',
                            children: [
                                {
                                    id: '304',
                                    text: '\u9102\u5DDE\u5E02'
                                },
                                {
                                    id: '305',
                                    text: '\u6069\u65BD\u5E02'
                                },
                                {
                                    id: '307',
                                    text: '\u9EC4\u5188\u5E02'
                                },
                                {
                                    id: '308',
                                    text: '\u9EC4\u77F3\u5E02'
                                },
                                {
                                    id: '309',
                                    text: '\u8346\u95E8\u5E02'
                                },
                                {
                                    id: '310',
                                    text: '\u8346\u5DDE\u5E02'
                                },
                                {
                                    id: '311',
                                    text: '\u6F5C\u6C5F\u5E02'
                                },
                                {
                                    id: '312',
                                    text: '\u795E\u519C\u67B6\u6797\u533A'
                                },
                                {
                                    id: '313',
                                    text: '\u5341\u5830\u5E02'
                                },
                                {
                                    id: '314',
                                    text: '\u968F\u5DDE\u5E02'
                                },
                                {
                                    id: '315',
                                    text: '\u5929\u95E8\u5E02'
                                },
                                {
                                    id: '317',
                                    text: '\u6B66\u6C49'
                                },
                                {
                                    id: '319',
                                    text: '\u4ED9\u6843\u5E02'
                                },
                                {
                                    id: '320',
                                    text: '\u54B8\u5B81\u5E02'
                                },
                                {
                                    id: '321',
                                    text: '\u8944\u6A0A\u5E02'
                                },
                                {
                                    id: '323',
                                    text: '\u5B5D\u611F\u5E02'
                                },
                                {
                                    id: '324',
                                    text: '\u5B9C\u660C\u5E02'
                                }
                            ]
                        },
                        {
                            id: '19',
                            text: '\u6E56\u5357',
                            children: [
                                {
                                    id: '328',
                                    text: '\u5E38\u5FB7\u5E02'
                                },
                                {
                                    id: '329',
                                    text: '\u90F4\u5DDE\u5E02'
                                },
                                {
                                    id: '330',
                                    text: '\u8861\u9633\u5E02'
                                },
                                {
                                    id: '331',
                                    text: '\u6000\u5316\u5E02'
                                },
                                {
                                    id: '334',
                                    text: '\u5A04\u5E95\u5E02'
                                },
                                {
                                    id: '335',
                                    text: '\u90B5\u9633\u5E02'
                                },
                                {
                                    id: '337',
                                    text: '\u6E58\u6F6D\u5E02'
                                },
                                {
                                    id: '338',
                                    text: '\u6E58\u897F\u571F\u5BB6\u65CF\u82D7\u65CF\u81EA\u6CBB\u5DDE'
                                },
                                {
                                    id: '339',
                                    text: '\u76CA\u9633\u5E02'
                                },
                                {
                                    id: '340',
                                    text: '\u6C38\u5DDE\u5E02'
                                },
                                {
                                    id: '341',
                                    text: '\u5CB3\u9633\u5E02'
                                },
                                {
                                    id: '342',
                                    text: '\u5F20\u5BB6\u754C\u5E02'
                                },
                                {
                                    id: '343',
                                    text: '\u957F\u6C99\u5E02'
                                },
                                {
                                    id: '344',
                                    text: '\u682A\u6D32\u5E02'
                                }
                            ]
                        }
                    ]
                },
                {
                    id: '84',
                    text: '\u534E\u5357\u5730\u533A',
                    children: [
                        {
                            id: '11',
                            text: '\u5E7F\u4E1C',
                            children: [
                                {
                                    id: '157',
                                    text: '\u6F6E\u5DDE\u5E02'
                                },
                                {
                                    id: '158',
                                    text: '\u4E1C\u839E\u5E02'
                                },
                                {
                                    id: '160',
                                    text: '\u4F5B\u5C71\u5E02'
                                },
                                {
                                    id: '162',
                                    text: '\u5E7F\u5DDE\u5E02'
                                },
                                {
                                    id: '163',
                                    text: '\u6CB3\u6E90\u5E02'
                                },
                                {
                                    id: '164',
                                    text: '\u60E0\u5DDE\u5E02'
                                },
                                {
                                    id: '166',
                                    text: '\u6C5F\u95E8\u5E02'
                                },
                                {
                                    id: '167',
                                    text: '\u63ED\u9633\u5E02'
                                },
                                {
                                    id: '169',
                                    text: '\u8302\u540D\u5E02'
                                },
                                {
                                    id: '170',
                                    text: '\u6885\u5DDE\u5E02'
                                },
                                {
                                    id: '172',
                                    text: '\u6E05\u8FDC\u5E02'
                                },
                                {
                                    id: '173',
                                    text: '\u6C55\u5934\u5E02'
                                },
                                {
                                    id: '174',
                                    text: '\u6C55\u5C3E\u5E02'
                                },
                                {
                                    id: '175',
                                    text: '\u97F6\u5173\u5E02'
                                },
                                {
                                    id: '176',
                                    text: '\u6DF1\u5733\u5E02'
                                },
                                {
                                    id: '180',
                                    text: '\u9633\u6C5F\u5E02'
                                },
                                {
                                    id: '182',
                                    text: '\u4E91\u6D6E\u5E02'
                                },
                                {
                                    id: '184',
                                    text: '\u6E5B\u6C5F\u5E02'
                                },
                                {
                                    id: '185',
                                    text: '\u8087\u5E86\u5E02'
                                },
                                {
                                    id: '186',
                                    text: '\u4E2D\u5C71\u5E02'
                                },
                                {
                                    id: '187',
                                    text: '\u73E0\u6D77\u5E02'
                                }
                            ]
                        },
                        {
                            id: '12',
                            text: '\u5E7F\u897F',
                            children: [
                                {
                                    id: '188',
                                    text: '\u767E\u8272\u5E02'
                                },
                                {
                                    id: '189',
                                    text: '\u5317\u6D77\u5E02'
                                },
                                {
                                    id: '191',
                                    text: '\u9632\u57CE\u6E2F\u5E02'
                                },
                                {
                                    id: '193',
                                    text: '\u8D35\u6E2F\u5E02'
                                },
                                {
                                    id: '194',
                                    text: '\u6842\u6797\u5E02'
                                },
                                {
                                    id: '195',
                                    text: '\u6CB3\u6C60\u5E02'
                                },
                                {
                                    id: '196',
                                    text: '\u8D3A\u5DDE\u5E02'
                                },
                                {
                                    id: '197',
                                    text: '\u6765\u5BBE\u5E02'
                                },
                                {
                                    id: '198',
                                    text: '\u67F3\u5DDE\u5E02'
                                },
                                {
                                    id: '199',
                                    text: '\u5357\u5B81\u5E02'
                                },
                                {
                                    id: '200',
                                    text: '\u94A6\u5DDE\u5E02'
                                },
                                {
                                    id: '201',
                                    text: '\u68A7\u5DDE\u5E02'
                                },
                                {
                                    id: '203',
                                    text: '\u7389\u6797\u5E02'
                                }
                            ]
                        },
                        {
                            id: '14',
                            text: '\u6D77\u5357',
                            children: [
                                {
                                    id: '218',
                                    text: '\u510B\u5DDE\u5E02'
                                },
                                {
                                    id: '219',
                                    text: '\u4E1C\u65B9\u5E02'
                                },
                                {
                                    id: '220',
                                    text: '\u6D77\u53E3\u5E02'
                                },
                                {
                                    id: '221',
                                    text: '\u743C\u6D77\u5E02'
                                },
                                {
                                    id: '223',
                                    text: '\u4E09\u4E9A\u5E02'
                                },
                                {
                                    id: '225',
                                    text: '\u6587\u660C\u5E02'
                                },
                                {
                                    id: '867',
                                    text: '\u4E94\u6307\u5C71'
                                },
                                {
                                    id: '868',
                                    text: '\u4E07\u5B81'
                                }
                            ]
                        }
                    ]
                },
                {
                    id: '85',
                    text: '\u897F\u5357\u5730\u533A',
                    children: [
                        {
                            id: '4',
                            text: '\u91CD\u5E86',
                            children: [
                                {
                                    id: '778',
                                    text: '\u5DF4\u5357\u533A'
                                },
                                {
                                    id: '779',
                                    text: '\u5317\u789A\u533A'
                                },
                                {
                                    id: '780',
                                    text: '\u74A7\u5C71\u53BF'
                                },
                                {
                                    id: '781',
                                    text: '\u57CE\u53E3\u53BF'
                                },
                                {
                                    id: '782',
                                    text: '\u5927\u6E21\u53E3\u533A'
                                },
                                {
                                    id: '783',
                                    text: '\u5927\u8DB3\u53BF'
                                },
                                {
                                    id: '784',
                                    text: '\u57AB\u6C5F\u53BF'
                                },
                                {
                                    id: '785',
                                    text: '\u4E30\u90FD\u53BF'
                                },
                                {
                                    id: '786',
                                    text: '\u5949\u8282\u53BF'
                                },
                                {
                                    id: '787',
                                    text: '\u6DAA\u9675\u533A'
                                },
                                {
                                    id: '788',
                                    text: '\u5408\u5DDD\u533A'
                                },
                                {
                                    id: '789',
                                    text: '\u6C5F\u5317\u533A'
                                },
                                {
                                    id: '790',
                                    text: '\u6C5F\u6D25\u533A'
                                },
                                {
                                    id: '791',
                                    text: '\u4E5D\u9F99\u5761\u533A'
                                },
                                {
                                    id: '792',
                                    text: '\u5F00\u53BF'
                                },
                                {
                                    id: '793',
                                    text: '\u6881\u5E73\u53BF'
                                },
                                {
                                    id: '794',
                                    text: '\u5357\u5CB8\u533A'
                                },
                                {
                                    id: '795',
                                    text: '\u5357\u5DDD\u533A'
                                },
                                {
                                    id: '796',
                                    text: '\u5F6D\u6C34\u53BF'
                                },
                                {
                                    id: '797',
                                    text: '\u7DA6\u6C5F\u53BF'
                                },
                                {
                                    id: '798',
                                    text: '\u9ED4\u6C5F\u533A'
                                },
                                {
                                    id: '799',
                                    text: '\u8363\u660C\u53BF'
                                },
                                {
                                    id: '800',
                                    text: '\u6C99\u576A\u575D\u533A'
                                },
                                {
                                    id: '801',
                                    text: '\u77F3\u67F1\u53BF'
                                },
                                {
                                    id: '802',
                                    text: '\u53CC\u6865\u533A'
                                },
                                {
                                    id: '803',
                                    text: '\u94DC\u6881\u53BF'
                                },
                                {
                                    id: '804',
                                    text: '\u6F7C\u5357\u53BF'
                                },
                                {
                                    id: '805',
                                    text: '\u4E07\u76DB\u533A'
                                },
                                {
                                    id: '806',
                                    text: '\u4E07\u5DDE\u533A'
                                },
                                {
                                    id: '807',
                                    text: '\u5DEB\u5C71\u53BF'
                                },
                                {
                                    id: '808',
                                    text: '\u5DEB\u6EAA\u53BF'
                                },
                                {
                                    id: '809',
                                    text: '\u6B66\u9686\u53BF'
                                },
                                {
                                    id: '810',
                                    text: '\u79C0\u5C71\u53BF'
                                },
                                {
                                    id: '811',
                                    text: '\u6C38\u5DDD\u533A'
                                },
                                {
                                    id: '812',
                                    text: '\u9149\u9633\u53BF'
                                },
                                {
                                    id: '813',
                                    text: '\u6E1D\u5317\u533A'
                                },
                                {
                                    id: '814',
                                    text: '\u6E1D\u4E2D\u533A'
                                },
                                {
                                    id: '815',
                                    text: '\u4E91\u9633\u53BF'
                                },
                                {
                                    id: '816',
                                    text: '\u957F\u5BFF\u533A'
                                },
                                {
                                    id: '817',
                                    text: '\u5FE0\u53BF'
                                }
                            ]
                        },
                        {
                            id: '13',
                            text: '\u8D35\u5DDE',
                            children: [
                                {
                                    id: '204',
                                    text: '\u5B89\u987A\u5E02'
                                },
                                {
                                    id: '205',
                                    text: '\u6BD5\u8282\u5E02'
                                },
                                {
                                    id: '208',
                                    text: '\u8D35\u9633\u5E02'
                                },
                                {
                                    id: '210',
                                    text: '\u516D\u76D8\u6C34\u5E02'
                                },
                                {
                                    id: '211',
                                    text: '\u9ED4\u4E1C\u5357\u82D7\u65CF\u4F97\u65CF\u81EA\u6CBB\u5DDE'
                                },
                                {
                                    id: '212',
                                    text: '\u9ED4\u5357\u5E03\u4F9D\u65CF\u82D7\u65CF\u81EA\u6CBB\u5DDE'
                                },
                                {
                                    id: '213',
                                    text: '\u9ED4\u897F\u5357\u5E03\u4F9D\u65CF\u82D7\u65CF\u81EA\u6CBB\u5DDE'
                                },
                                {
                                    id: '215',
                                    text: '\u94DC\u4EC1\u5E02'
                                },
                                {
                                    id: '217',
                                    text: '\u9075\u4E49\u5E02'
                                }
                            ]
                        },
                        {
                            id: '30',
                            text: '\u56DB\u5DDD',
                            children: [
                                {
                                    id: '516',
                                    text: '\u963F\u575D\u85CF\u65CF\u7F8C\u65CF\u81EA\u6CBB\u5DDE'
                                },
                                {
                                    id: '517',
                                    text: '\u5DF4\u4E2D\u5E02'
                                },
                                {
                                    id: '518',
                                    text: '\u6210\u90FD\u5E02'
                                },
                                {
                                    id: '519',
                                    text: '\u8FBE\u5DDE\u5E02'
                                },
                                {
                                    id: '520',
                                    text: '\u5FB7\u9633\u5E02'
                                },
                                {
                                    id: '523',
                                    text: '\u7518\u5B5C\u85CF\u65CF\u81EA\u6CBB\u5DDE'
                                },
                                {
                                    id: '524',
                                    text: '\u5E7F\u5B89\u5E02'
                                },
                                {
                                    id: '526',
                                    text: '\u5E7F\u5143\u5E02'
                                },
                                {
                                    id: '528',
                                    text: '\u4E50\u5C71\u5E02'
                                },
                                {
                                    id: '529',
                                    text: '\u51C9\u5C71\u5F5D\u65CF\u81EA\u6CBB\u5DDE'
                                },
                                {
                                    id: '530',
                                    text: '\u6CF8\u5DDE\u5E02'
                                },
                                {
                                    id: '531',
                                    text: '\u7709\u5C71\u5E02'
                                },
                                {
                                    id: '532',
                                    text: '\u7EF5\u9633\u5E02'
                                },
                                {
                                    id: '534',
                                    text: '\u5357\u5145\u5E02'
                                },
                                {
                                    id: '535',
                                    text: '\u5185\u6C5F\u5E02'
                                },
                                {
                                    id: '536',
                                    text: '\u6500\u679D\u82B1\u5E02'
                                },
                                {
                                    id: '538',
                                    text: '\u9042\u5B81\u5E02'
                                },
                                {
                                    id: '540',
                                    text: '\u96C5\u5B89\u5E02'
                                },
                                {
                                    id: '541',
                                    text: '\u5B9C\u5BBE\u5E02'
                                },
                                {
                                    id: '542',
                                    text: '\u8D44\u9633\u5E02'
                                },
                                {
                                    id: '543',
                                    text: '\u81EA\u8D21\u5E02'
                                }
                            ]
                        },
                        {
                            id: '31',
                            text: '\u897F\u85CF',
                            children: [
                                {
                                    id: '546',
                                    text: '\u62C9\u8428\u5E02'
                                },
                                {
                                    id: '547',
                                    text: '\u6797\u829D\u5730\u533A'
                                },
                                {
                                    id: '548',
                                    text: '\u90A3\u66F2\u5730\u533A'
                                },
                                {
                                    id: '549',
                                    text: '\u65E5\u5580\u5219\u5730\u533A'
                                }
                            ]
                        },
                        {
                            id: '33',
                            text: '\u4E91\u5357',
                            children: [
                                {
                                    id: '578',
                                    text: '\u4FDD\u5C71\u5E02'
                                },
                                {
                                    id: '579',
                                    text: '\u695A\u96C4\u5E02'
                                },
                                {
                                    id: '580',
                                    text: '\u5927\u7406\u5E02'
                                },
                                {
                                    id: '581',
                                    text: '\u5FB7\u5B8F\u50A3\u65CF\u666F\u9887\u65CF\u81EA\u6CBB\u5DDE'
                                },
                                {
                                    id: '585',
                                    text: '\u7EA2\u6CB3\u54C8\u5C3C\u65CF\u5F5D\u65CF\u81EA\u6CBB\u5DDE'
                                },
                                {
                                    id: '587',
                                    text: '\u6606\u660E\u5E02'
                                },
                                {
                                    id: '589',
                                    text: '\u4E3D\u6C5F\u5E02'
                                },
                                {
                                    id: '590',
                                    text: '\u4E34\u6CA7\u5E02'
                                },
                                {
                                    id: '593',
                                    text: '\u666E\u6D31\u5E02'
                                },
                                {
                                    id: '594',
                                    text: '\u66F2\u9756\u5E02'
                                },
                                {
                                    id: '595',
                                    text: '\u6587\u5C71\u5E02'
                                },
                                {
                                    id: '597',
                                    text: '\u7389\u6EAA\u5E02'
                                },
                                {
                                    id: '598',
                                    text: '\u662D\u901A\u5E02'
                                }
                            ]
                        }
                    ]
                },
                {
                    id: '86',
                    text: '\u897F\u5317\u5730\u533A',
                    children: [
                        {
                            id: '10',
                            text: '\u7518\u8083',
                            children: [
                                {
                                    id: '139',
                                    text: '\u767D\u94F6\u5E02'
                                },
                                {
                                    id: '140',
                                    text: '\u5B9A\u897F\u5E02'
                                },
                                {
                                    id: '144',
                                    text: '\u5609\u5CEA\u5173\u5E02'
                                },
                                {
                                    id: '145',
                                    text: '\u91D1\u660C\u5E02'
                                },
                                {
                                    id: '146',
                                    text: '\u9152\u6CC9\u5E02'
                                },
                                {
                                    id: '147',
                                    text: '\u5170\u5DDE\u5E02'
                                },
                                {
                                    id: '148',
                                    text: '\u4E34\u590F\u56DE\u65CF\u81EA\u6CBB\u5DDE'
                                },
                                {
                                    id: '150',
                                    text: '\u9647\u5357\u5E02'
                                },
                                {
                                    id: '151',
                                    text: '\u5E73\u51C9\u5E02'
                                },
                                {
                                    id: '152',
                                    text: '\u5E86\u9633\u5E02'
                                },
                                {
                                    id: '153',
                                    text: '\u5929\u6C34\u5E02'
                                },
                                {
                                    id: '154',
                                    text: '\u6B66\u5A01\u5E02'
                                },
                                {
                                    id: '156',
                                    text: '\u5F20\u6396\u5E02'
                                }
                            ]
                        },
                        {
                            id: '25',
                            text: '\u5B81\u590F',
                            children: [
                                {
                                    id: '446',
                                    text: '\u56FA\u539F\u5E02'
                                },
                                {
                                    id: '447',
                                    text: '\u77F3\u5634\u5C71\u5E02'
                                },
                                {
                                    id: '448',
                                    text: '\u5434\u5FE0\u5E02'
                                },
                                {
                                    id: '449',
                                    text: '\u94F6\u5DDD\u5E02'
                                },
                                {
                                    id: '450',
                                    text: '\u4E2D\u536B\u5E02'
                                }
                            ]
                        },
                        {
                            id: '26',
                            text: '\u9752\u6D77',
                            children: [
                                {
                                    id: '454',
                                    text: '\u6D77\u4E1C\u5730\u533A'
                                },
                                {
                                    id: '456',
                                    text: '\u6D77\u897F\u8499\u53E4\u65CF\u85CF\u65CF\u81EA\u6CBB\u5DDE'
                                },
                                {
                                    id: '458',
                                    text: '\u897F\u5B81\u5E02'
                                },
                                {
                                    id: '459',
                                    text: '\u7389\u6811\u85CF\u65CF\u81EA\u6CBB\u5DDE'
                                }
                            ]
                        },
                        {
                            id: '29',
                            text: '\u9655\u897F',
                            children: [
                                {
                                    id: '503',
                                    text: '\u5B89\u5EB7\u5E02'
                                },
                                {
                                    id: '504',
                                    text: '\u5B9D\u9E21\u5E02'
                                },
                                {
                                    id: '506',
                                    text: '\u6C49\u4E2D\u5E02'
                                },
                                {
                                    id: '508',
                                    text: '\u5546\u6D1B\u5E02'
                                },
                                {
                                    id: '509',
                                    text: '\u94DC\u5DDD\u5E02'
                                },
                                {
                                    id: '510',
                                    text: '\u6E2D\u5357\u5E02'
                                },
                                {
                                    id: '511',
                                    text: '\u897F\u5B89\u5E02'
                                },
                                {
                                    id: '512',
                                    text: '\u54B8\u9633\u5E02'
                                },
                                {
                                    id: '513',
                                    text: '\u5EF6\u5B89\u5E02'
                                },
                                {
                                    id: '515',
                                    text: '\u6986\u6797\u5E02'
                                }
                            ]
                        },
                        {
                            id: '32',
                            text: '\u65B0\u7586',
                            children: [
                                {
                                    id: '551',
                                    text: '\u963F\u514B\u82CF\u5730\u533A'
                                },
                                {
                                    id: '554',
                                    text: '\u963F\u52D2\u6CF0\u5E02'
                                },
                                {
                                    id: '556',
                                    text: '\u5DF4\u97F3\u90ED\u695E\u8499\u53E4\u81EA\u6CBB\u5DDE'
                                },
                                {
                                    id: '557',
                                    text: '\u535A\u5C14\u5854\u62C9\u8499\u53E4\u81EA\u6CBB\u5DDE'
                                },
                                {
                                    id: '560',
                                    text: '\u660C\u5409\u56DE\u65CF\u81EA\u6CBB\u5DDE'
                                },
                                {
                                    id: '563',
                                    text: '\u54C8\u5BC6\u5E02'
                                },
                                {
                                    id: '564',
                                    text: '\u548C\u7530\u5E02'
                                },
                                {
                                    id: '565',
                                    text: '\u5580\u4EC0\u5E02'
                                },
                                {
                                    id: '566',
                                    text: '\u514B\u62C9\u739B\u4F9D\u5E02'
                                },
                                {
                                    id: '570',
                                    text: '\u77F3\u6CB3\u5B50\u5E02'
                                },
                                {
                                    id: '571',
                                    text: '\u5854\u57CE\u5E02'
                                },
                                {
                                    id: '572',
                                    text: '\u5410\u9C81\u756A\u5E02'
                                },
                                {
                                    id: '573',
                                    text: '\u4E4C\u9C81\u6728\u9F50\u5E02'
                                },
                                {
                                    id: '576',
                                    text: '\u4F0A\u7281\u5E02'
                                },
                                {
                                    id: '869',
                                    text: '\u514B\u5B5C\u52D2\u82CF\u67EF\u5C14\u514B\u5B5C'
                                },
                                {
                                    id: '870',
                                    text: '\u4E94\u5BB6\u6E20'
                                }
                            ]
                        }
                    ]
                },
                {
                    id: '87',
                    text: '\u6E2F\u6FB3\u53F0',
                    children: [
                        {
                            id: '5',
                            text: '\u6FB3\u95E8'
                        },
                        {
                            id: '6',
                            text: '\u9999\u6E2F'
                        },
                        {
                            id: '7',
                            text: '\u53F0\u6E7E'
                        }
                    ]
                }
            ]
        },
        {
            id: '999',
            text: '\u56FD\u5916'
        },
        {
            id: '0',
            text: '\u5176\u4ED6'
        }
    ];
    esui.register(Region);
    return Region;
});

define('esui/RichCalendar', [
    'require',
    './Button',
    './MonthView',
    './TextBox',
    './lib',
    './InputControl',
    './Layer',
    './main',
    'moment',
    'underscore',
    'eoo',
    'jquery',
    './painters'
], function (require) {
    require('./Button');
    require('./MonthView');
    require('./TextBox');
    var lib = require('./lib');
    var InputControl = require('./InputControl');
    var Layer = require('./Layer');
    var esui = require('./main');
    var moment = require('moment');
    var u = require('underscore');
    var eoo = require('eoo');
    var $ = require('jquery');
    var painters = require('./painters');
    var RichCalendarLayer = eoo.create(Layer, {
            create: function () {
                var ele = this.$super(arguments);
                $(this.control.main).after(ele);
                return ele;
            },
            render: function (element) {
                var calendar = this.control;
                element.innerHTML = getLayerHtml(calendar);
                calendar.helper.initChildren(element);
                paintCals(calendar, true);
            },
            toggle: function () {
                var element = this.getElement();
                if (!element || !$(element).is(':visible')) {
                    paintCals(this.control, true);
                    this.show();
                } else {
                    this.hide();
                }
            }
        });
    function getLayerHtml(calendar) {
        var displayNum = calendar.displayNum;
        var controlHelper = calendar.helper;
        var monthViewContainerTpl = '' + '<div id="${id}" class="${className}">${monthView}</div>';
        var monthViews = [];
        for (var i = 0; i < displayNum; i++) {
            monthViews.push(lib.format(monthViewContainerTpl, {
                id: controlHelper.getId('month-' + i),
                className: controlHelper.getPartClassName('month-container'),
                monthView: getCalendarHtml(calendar, i)
            }));
        }
        return lib.format('<div id="${id}" class="${className}">${monthViews}</div>', {
            id: controlHelper.getId('months'),
            className: controlHelper.getPartClassName('months'),
            monthViews: monthViews.join('')
        });
    }
    function getCalendarHtml(calendar, index) {
        var tpl = '' + '<div' + ' data-ui-type="MonthView"' + ' data-ui-child-name="${calName}"' + ' data-ui-mode="multi">' + '</div>';
        return lib.format(tpl, { calName: 'monthView' + index });
    }
    var RichCalendar = eoo.create(InputControl, {
            constructor: function (options) {
                this.$super([options]);
                this.layer = new RichCalendarLayer(this);
            },
            type: 'RichCalendar',
            initOptions: function (options) {
                var now = new Date();
                var properties = {
                        now: now,
                        rawValue: [],
                        displayNum: 2,
                        startYear: now.getFullYear(),
                        startMonth: now.getMonth() + 1
                    };
                if ($(this.main).is('input')) {
                    this.helper.extractOptionsFromInput(this.main, properties);
                }
                u.extend(properties, RichCalendar.defaultProperties, options);
                if (options.range && typeof options.range === 'string') {
                    properties.range = convertToRaw(properties.range);
                }
                this.setProperties(properties);
            },
            setProperties: function (properties) {
                if (properties.rawValue == null || properties.rawValue.length === 0) {
                    if (properties.value) {
                        properties.rawValue = this.parseValue(properties.value);
                    }
                }
                if (properties.rawValue && properties.rawValue.length) {
                    var startDate = properties.rawValue[0];
                    properties.startYear = startDate.getFullYear();
                    properties.startMonth = startDate.getMonth() + 1;
                }
                var changes = this.$super([properties]);
                return changes;
            },
            initStructure: function () {
                var controlHelper = this.helper;
                if ($(this.main).is('input')) {
                    controlHelper.replaceMain();
                }
                var tpl = [
                        '<div data-ui-type="Panel" class="${generalPanelClass}"',
                        ' data-ui-child-name="generalPanel">',
                        '<label>${beforeTotalDaysLabelText}<span id="${totalNumId}" ',
                        'class="${totalNumClass}"></span>${afterTotalDaysLabelText},</label>',
                        '<button data-ui-type="Button" data-ui-variants="link"',
                        ' data-ui-child-name="deleteBtn">${clearButtonText}</button>',
                        '</div>',
                        '<div class="${className}" id="${id}">',
                        '<textarea data-ui-type="TextBox"',
                        ' data-ui-mode="textarea"',
                        ' data-ui-width="${textBoxWidth}"',
                        ' data-ui-height="${textBoxHeight}"',
                        ' data-ui-child-name="textInput"></textarea>',
                        '<button data-ui-type="Button" data-ui-variants="link"',
                        ' data-ui-child-name="modifyBtn" type="button">',
                        '<span class="${calendarIconClass}"></span></button>',
                        '</div>',
                        '<input type="hidden" id="${inputId}" name="${name}"',
                        ' value="" />'
                    ];
                this.main.innerHTML = lib.format(tpl.join('\n'), {
                    className: controlHelper.getPartClassName('text'),
                    id: controlHelper.getId('text'),
                    textBoxWidth: this.textBoxWidth || 200,
                    textBoxHeight: this.textBoxHeight || 100,
                    name: this.name,
                    inputId: controlHelper.getId('param-value'),
                    generalPanelClass: controlHelper.getPartClassName('general-info'),
                    totalNumId: controlHelper.getId('total-num'),
                    totalNumClass: controlHelper.getPartClassName('total-num'),
                    calendarIconClass: controlHelper.getIconClass('calendar'),
                    beforeTotalDaysLabelText: this.beforeTotalDaysLabelText,
                    afterTotalDaysLabelText: this.afterTotalDaysLabelText,
                    clearButtonText: this.clearButtonText
                });
                this.initChildren(this.main);
                this.layer.autoCloseExcludeElements = [this.getChild('modifyBtn').main];
            },
            initEvents: function () {
                var modifyBtn = this.getChild('modifyBtn');
                modifyBtn.on('click', u.bind(this.layer.toggle, this.layer));
                var deleteAllBtn = this.getChild('generalPanel').getChild('deleteBtn');
                deleteAllBtn.on('click', u.partial(deleteAll, this));
                var textInput = this.getChild('textInput');
                textInput.on('blur', u.partial(updateRawValueByTyping, this));
            },
            repaint: painters.createRepaint(InputControl.prototype.repaint, {
                name: [
                    'rawValue',
                    'range'
                ],
                paint: function (calendar, rawValue, range) {
                    if (range) {
                        if (typeof range === 'string') {
                            range = convertToRaw(range);
                        }
                        if (!range.begin) {
                            range.begin = new Date(1983, 8, 3);
                        } else if (!range.end) {
                            range.end = new Date(2046, 10, 4);
                        }
                        calendar.range = range;
                    }
                    if (rawValue) {
                        updateMain(calendar, rawValue);
                    }
                    if (calendar.helper.getPart('months')) {
                        paintCals(calendar);
                    }
                }
            }, {
                name: [
                    'disabled',
                    'hidden',
                    'readOnly'
                ],
                paint: function (calendar, disabled, hidden, readOnly) {
                    if (disabled || hidden || readOnly) {
                        calendar.layer.hide();
                    }
                    var panel = calendar.getChild('generalPanel');
                    if (disabled) {
                        panel.helper.disableChildren();
                        calendar.helper.disableChildren();
                    } else {
                        panel.helper.enableChildren();
                        calendar.helper.enableChildren();
                    }
                }
            }),
            setRawValue: function (date) {
                this.setProperties({ rawValue: date });
            },
            getRawValue: function () {
                return this.rawValue;
            },
            stringifyValue: function (rawValue) {
                var dateStrs = [];
                var oneDay = 86400000;
                var dateFormat = this.paramFormat;
                for (var i = 0; i < rawValue.length; i++) {
                    if (i === 0) {
                        dateStrs.push(moment(rawValue[i]).format(dateFormat));
                    } else {
                        if (rawValue[i] - rawValue[i - 1] > oneDay) {
                            dateStrs.push(moment(rawValue[i - 1]).format(dateFormat));
                            dateStrs.push(moment(rawValue[i]).format(dateFormat));
                        }
                    }
                    if (i === rawValue.length - 1) {
                        dateStrs.push(moment(rawValue[i]).format(dateFormat));
                    }
                }
                return dateStrs.join(',');
            },
            getRanges: function () {
                var rawValue = this.rawValue;
                var dateStrs = this.stringifyValue(rawValue).split(',');
                var range = [];
                for (var i = 0; i < dateStrs.length - 1; i += 2) {
                    var begin = parseToDate(dateStrs[i]);
                    var end = parseToDate(dateStrs[i + 1]);
                    range.push({
                        begin: begin,
                        end: end
                    });
                }
                return range;
            },
            setRanges: function (rangeValue) {
                var dates = {};
                for (var i = 0; i < rangeValue.length; i++) {
                    var begin = rangeValue[i].begin;
                    var end = rangeValue[i].end;
                    var temp;
                    if (!begin || !end) {
                        continue;
                    }
                    if (begin - end === 0) {
                        dates[begin] = begin;
                    } else {
                        temp = begin;
                        while (temp <= end) {
                            dates[temp] = temp;
                            temp = new Date(temp.getFullYear(), temp.getMonth(), temp.getDate() + 1);
                        }
                    }
                }
                var rawDates = [];
                for (var key in dates) {
                    if (dates.hasOwnProperty(key)) {
                        rawDates.push(dates[key]);
                    }
                }
                rawDates.sort(function (a, b) {
                    return a - b;
                });
                this.set('rawValue', rawDates);
            },
            parseValue: function (value) {
                var dateStrs = value.split(',');
                var dates = {};
                for (var i = 0; i < dateStrs.length - 1; i += 2) {
                    var begin = parseToDate(dateStrs[i]);
                    var end = parseToDate(dateStrs[i + 1]);
                    var temp;
                    if (!begin || !end) {
                        continue;
                    }
                    if (begin - end === 0) {
                        dates[begin] = begin;
                    } else {
                        temp = begin;
                        while (temp <= end) {
                            dates[temp] = temp;
                            temp = new Date(temp.getFullYear(), temp.getMonth(), temp.getDate() + 1);
                        }
                    }
                }
                var rawDates = [];
                for (var key in dates) {
                    if (dates.hasOwnProperty(key)) {
                        rawDates.push(dates[key]);
                    }
                }
                rawDates.sort(function (a, b) {
                    return a - b;
                });
                return rawDates;
            },
            dispose: function () {
                if (this.helper.isInStage('DISPOSED')) {
                    return;
                }
                if (this.layer) {
                    this.layer.dispose();
                    this.layer = null;
                }
                this.$super(arguments);
            },
            toggleCanlendarLayer: function () {
                this.layer.toggle();
            }
        });
    RichCalendar.defaultProperties = {
        range: {
            begin: new Date(1983, 8, 3),
            end: new Date(2046, 10, 4)
        },
        paramFormat: 'YYYY-MM-DD',
        beforeTotalDaysLabelText: '\u5171',
        afterTotalDaysLabelText: '\u5929',
        clearButtonText: '\u5168\u90E8\u5220\u9664',
        displayToLabelText: '\u81F3'
    };
    function syncValueOfMonthViews(calendar, index) {
        var rawValue = this.getRawValue();
        var displayNum = calendar.displayNum;
        for (var i = 0; i < displayNum; i++) {
            if (i !== index) {
                var monthView = calendar.getChild('monthView' + i);
                monthView.setRawValueWithoutFireChange(rawValue);
            }
        }
        calendar.rawValue = rawValue;
        updateMain(calendar, rawValue);
    }
    function updateMonthOrYear(calendar, index) {
        var displayNum = calendar.displayNum;
        var syncDate = new Date(this.year, this.month, 1);
        for (var i = 0; i < displayNum; i++) {
            if (i !== index) {
                var monthView = calendar.getChild('monthView' + i);
                monthView.un('changemonth');
                monthView.un('changeyear');
                var scope = index - i;
                var newDate;
                if (scope > 0) {
                    newDate = moment(syncDate).subtract('month', scope);
                } else {
                    newDate = moment(syncDate).add('month', -scope);
                }
                monthView.setProperties({
                    month: newDate.month() + 1,
                    year: newDate.year()
                });
                monthView.on('changeyear', u.partial(updateMonthOrYear, calendar, i));
                monthView.on('changemonth', u.partial(updateMonthOrYear, calendar, i));
            }
        }
    }
    function paintCals(calendar, bindEvent) {
        var displayNum = calendar.displayNum;
        var startMonth = calendar.startMonth;
        var startYear = calendar.startYear;
        for (var i = 0; i < displayNum; i++) {
            var rangeBegin = calendar.range.begin;
            var rangeEnd = calendar.range.end;
            var rangeBeginYear = rangeBegin.getFullYear();
            var rangeBeginMonth = rangeBegin.getMonth();
            var rangeEndYear = rangeEnd.getFullYear();
            var rangeEndMonth = rangeEnd.getMonth();
            var trueRange;
            var realEnd;
            var realBegin;
            if (i === 0) {
                realEnd = new Date(rangeEndYear, rangeEndMonth - displayNum + 2, 0);
                trueRange = {
                    begin: calendar.range.begin,
                    end: realEnd
                };
            } else if (i === displayNum - 1) {
                realBegin = new Date(rangeBeginYear, rangeBeginMonth + displayNum - 1, 1);
                trueRange = {
                    begin: realBegin,
                    end: calendar.range.end
                };
            } else {
                realBegin = new Date(rangeBeginYear, rangeBeginMonth + i, 1);
                realEnd = new Date(rangeEndYear, rangeEndMonth - displayNum - i + 2, 0);
                trueRange = {
                    begin: realBegin,
                    end: realEnd
                };
            }
            var options = {
                    year: startYear,
                    month: startMonth + i,
                    rawValue: calendar.rawValue,
                    range: calendar.range,
                    viewRange: trueRange
                };
            paintCal(calendar, options, i, bindEvent);
        }
    }
    function paintCal(calendar, options, index, bindEvent) {
        var monthView = calendar.getChild('monthView' + index);
        monthView.setProperties(options);
        if (bindEvent === true) {
            monthView.on('change', u.partial(syncValueOfMonthViews, calendar, index));
            monthView.on('changeyear', u.partial(updateMonthOrYear, calendar, index));
            monthView.on('changemonth', u.partial(updateMonthOrYear, calendar, index));
        }
    }
    function updateMain(calendar, value) {
        var inputId = calendar.helper.getId('param-value');
        lib.g(inputId).value = calendar.stringifyValue(value);
        var textInput = calendar.getChild('textInput');
        var textValue = getValueText(calendar, value);
        textInput.setProperties({ rawValue: textValue });
        updateTotalInfo(calendar, value);
        calendar.fire('change');
    }
    function updateTotalInfo(calendar, rawValue) {
        var totalNum = lib.g(calendar.helper.getId('total-num'));
        totalNum.innerHTML = rawValue.length;
    }
    function deleteAll(calendar) {
        calendar.set('rawValue', []);
    }
    function convertToRaw(value) {
        var strDates = value.split(',');
        if (strDates.length === 1) {
            strDates.push('2046-11-04');
        } else if (strDates[0] === '') {
            strDates[0] = '1983-09-03';
        } else if (strDates[1] === '') {
            strDates[1] = '2046-11-04';
        }
        return {
            begin: parseToDate(strDates[0]),
            end: parseToDate(strDates[1])
        };
    }
    function parseToDate(dateStr) {
        function parse(source) {
            var dates = source.split('-');
            if (dates) {
                return new Date(parseInt(dates[0], 10), parseInt(dates[1], 10) - 1, parseInt(dates[2], 10));
            }
            return null;
        }
        if (!dateStr) {
            return null;
        }
        dateStr = dateStr + '';
        var dateAndHour = dateStr.split(' ');
        var date = parse(dateAndHour[0]);
        if (dateAndHour[1]) {
            var clock = dateAndHour[1].split(':');
            date.setHours(clock[0]);
            date.setMinutes(clock[1]);
            date.setSeconds(clock[2]);
        }
        return date;
    }
    function getValueText(calendar, rawValue) {
        var dateStrs = [];
        var tempDate = [];
        var tempIndex = 0;
        var oneDay = 86400000;
        var dateFormat = calendar.paramFormat;
        var displayToLabelText = calendar.displayToLabelText;
        for (var i = 0; i < rawValue.length; i++) {
            if (i === 0) {
                dateStrs.push(moment(rawValue[i]).format(dateFormat));
                tempDate.push(rawValue[i]);
                tempIndex++;
            } else {
                if (rawValue[i] - rawValue[i - 1] > oneDay) {
                    if (rawValue[i - 1] - tempDate[tempIndex - 1] !== 0) {
                        dateStrs.push(displayToLabelText);
                        dateStrs.push(moment(rawValue[i - 1]).format(dateFormat));
                        tempDate.push(rawValue[i - 1]);
                        tempIndex++;
                    }
                    dateStrs.push('\n');
                    dateStrs.push(moment(rawValue[i]).format(dateFormat));
                    tempDate.push(rawValue[i]);
                    tempIndex++;
                } else if (i === rawValue.length - 1) {
                    dateStrs.push(displayToLabelText);
                    dateStrs.push(moment(rawValue[i]).format(dateFormat));
                } else {
                    continue;
                }
            }
        }
        return dateStrs.join('');
    }
    function updateRawValueByTyping(calendar) {
        var textInputValue = this.getValue();
        var items = textInputValue.replace(/\n{2,}/g, '\n').split('\n');
        var result = [];
        var container = {};
        for (var i = 0, len = items.length; i < len; i++) {
            var item = lib.trim(items[i]);
            if (item.length === 0 || container[item]) {
                continue;
            }
            container[item] = 1;
            var beginEnd = item.split('\u81F3');
            var begin = beginEnd[0];
            var end = begin;
            if (beginEnd.length > 1) {
                end = beginEnd[1];
            }
            if (isDate(begin) && isDate(end)) {
                result.push(begin);
                result.push(end);
            }
        }
        var value = result.join(',');
        calendar.rawValue = calendar.parseValue(value);
        this.setProperties({ rawValue: getValueText(calendar, calendar.rawValue) });
        calendar.fire('change');
    }
    function isDate(date) {
        var reg = /^(\d{4})(-)(\d{2})\2(\d{2})$/;
        var r = date.match(reg);
        if (r == null) {
            return false;
        }
        var d = new Date(r[1], r[3] - 1, r[4]);
        var newStr = '' + d.getFullYear() + r[2] + (d.getMonth() + 1) + r[2] + d.getDate();
        date = r[1] + r[2] + (r[3] - 1 + 1) + r[2] + (r[4] - 1 + 1);
        return newStr === date;
    }
    esui.register(RichCalendar);
    return RichCalendar;
});

define('esui/Schedule', [
    'require',
    'eoo',
    './lib',
    './main',
    './InputControl',
    './Layer',
    'jquery',
    'underscore',
    './painters',
    'esui/behavior/Selectable'
], function (require) {
    var eoo = require('eoo');
    var lib = require('./lib');
    var esui = require('./main');
    var InputControl = require('./InputControl');
    var Layer = require('./Layer');
    var $ = require('jquery');
    var u = require('underscore');
    var painters = require('./painters');
    require('esui/behavior/Selectable');
    var Schedule = eoo.create(InputControl, {
            type: 'Schedule',
            createMain: function (options) {
                if (!options.tagName) {
                    return this.$super(arguments);
                }
                return document.createElement(options.tagName);
            },
            initOptions: function (options) {
                var properties = {};
                u.extend(properties, Schedule.defaultProperties, options);
                this.setProperties(properties);
                if (this.rawValue == null) {
                    this.setRawValue(initValue());
                }
                this.followTip = {};
            },
            initStructure: function () {
                var me = this;
                checkSlotSize(me);
                this.main.tabIndex = 0;
                var tpl = '' + '<input type="hidden" name="${name}" id="${inputId}"/>' + '<div class="${bodyClass}" id="${bodyId}"></div>' + '<div class="${headClass}">' + '<div class="${helpClass}">' + '<div class="${helpSelectedClass}"></div>' + '<div class="${helpTextClass}">' + '${helpSelected}' + '</div>' + '<div class="${helpUnselectedClass}"></div>' + '<div class="${helpTextClass}">${help}</div>' + '</div>' + '<div class="${shortcutClass}" id="${shortcutId}">' + '${shortcutHtml}' + '</div>' + '</div>';
                this.main.innerHTML = lib.format(tpl, {
                    name: this.name,
                    inputId: getId(me, 'value-input'),
                    headClass: getClass(me, 'head'),
                    bodyClass: getClass(me, 'body'),
                    helpClass: getClass(me, 'help'),
                    helpSelectedClass: getClass(me, 'help-selected'),
                    helpUnselectedClass: getClass(me, 'help-unselected'),
                    helpTextClass: getClass(me, 'help-text'),
                    shortcutClass: getClass(me, 'shortcut'),
                    shortcutId: getId(me, 'shortcut'),
                    bodyId: getId(me, 'body'),
                    helpSelected: me.helpSelectedText,
                    help: me.helpText,
                    shortcutHtml: getShortcutHtml(me)
                });
                initBody(me);
            },
            initEvents: function () {
                var me = this;
                var timebody = lib.g(getId(this, 'time-body'));
                $(timebody).selectable({
                    filter: '.' + getClass(this, 'time'),
                    start: function (e) {
                        me.dragStartPos = {
                            x: e.pageX,
                            y: e.pageY
                        };
                        me.dragRange = [];
                        var timebodyTop = lib.getOffset(timebody).top;
                        var timebodyLeft = lib.getOffset(timebody).left;
                        me.dragRange.push(timebodyTop);
                        me.dragRange.push(timebodyLeft + timebody.offsetWidth);
                        me.dragRange.push(timebodyTop + timebody.offsetHeight);
                        me.dragRange.push(timebodyLeft);
                        repaintFollowEle.call(me, e);
                    },
                    selecting: function (e) {
                        repaintFollowEle.call(me, e);
                    },
                    unselecting: function (e) {
                        repaintFollowEle.call(me, e);
                    },
                    stop: function (e) {
                        var followEle = lib.g(getId(me, 'follow-item'));
                        followEle.style.display = 'none';
                        var cellPos = getTragTimeCellPos(me, {
                                x: e.pageX,
                                y: e.pageY
                            });
                        setTimeout(function () {
                            setSelectedAreaValue(me, cellPos);
                        }, 10);
                    }
                });
                this.helper.addDOMEvent(timebody, 'mouseover', timeOverHandler);
                this.helper.addDOMEvent(timebody, 'mouseout', timeOutHandler);
                this.helper.addDOMEvent(lib.g(getId(this, 'day-head')), 'click', dayClickHandler);
                var shortcut = this.helper.getPart('shortcut');
                this.helper.addDOMEvent(shortcut, 'click', shortcutClickHandler);
                this.helper.addDOMEvent(shortcut, 'mouseover', u.partial(shortcutOverOutHandler, true));
                this.helper.addDOMEvent(shortcut, 'mouseout', u.partial(shortcutOverOutHandler, false));
                this.helper.addDOMEvent(shortcut, 'mousemove', shortcutMoveHandler);
            },
            setProperties: function (properties) {
                var changes = InputControl.prototype.setProperties.call(this, properties);
                var rawValueObj = changes.rawValue;
                if (rawValueObj && this.stringifyValue(rawValueObj.oldValue) !== this.stringifyValue(rawValueObj.newValue)) {
                    this.fire('change', { rawValue: this.rawValue });
                }
            },
            repaint: painters.createRepaint(InputControl.prototype.repaint, {
                name: 'rawValue',
                paint: function (schedule, rawValue) {
                    var value = schedule.stringifyValue(rawValue);
                    lib.g(getId(schedule, 'value-input')).value = value == null ? '' : value;
                    repaintView(schedule, rawValue);
                }
            }, {
                name: [
                    'disabled',
                    'readOnly'
                ],
                paint: function (schedule, disabled, readOnly) {
                    setDayCheckboxState(schedule, 'disabled', disabled || readOnly);
                    var timebody = lib.g(getId(schedule, 'time-body'));
                    $(timebody).selectable({ disabled: disabled || readOnly });
                }
            }),
            parseValue: function (value) {
                var arr = [];
                var step = 24;
                for (var i = 0, len = value.length; i < len; i = i + step) {
                    var inner = value.substring(i, i + step).split('');
                    var innerOut = [];
                    for (var j = 0; j < inner.length; j++) {
                        innerOut.push(inner[j] - 0);
                    }
                    arr.push(innerOut);
                }
                return arr;
            },
            stringifyValue: function (rawValue) {
                var arr = [];
                if (!rawValue) {
                    return null;
                }
                for (var i = 0, len = rawValue.length; i < len; i++) {
                    arr.push(rawValue[i].join(''));
                }
                return arr.join('');
            },
            setRawValue: function (rawValue) {
                this.setProperties({ rawValue: rawValue });
            },
            getRawValue: function () {
                return this.rawValue;
            },
            select: function (coord) {
                dealValueByCoord(this, 1, [].slice.call(arguments));
            },
            unselect: function (coord) {
                dealValueByCoord(this, 0, [].slice.call(arguments));
            },
            dispose: function () {
                var helper = this.helper;
                helper.beforeDispose();
                var followTip = this.followTip;
                for (var key in followTip) {
                    if (followTip[key]) {
                        document.body.removeChild(followTip[key]);
                    }
                }
                helper.dispose();
                helper.afterDispose();
            }
        });
    Schedule.defaultProperties = {
        helpSelectedText: '\u6295\u653E\u65F6\u95F4\u6BB5',
        helpText: '\u6682\u505C\u65F6\u95F4\u6BB5',
        dayTexts: [
            '\u5468\u4E00',
            '\u5468\u4E8C',
            '\u5468\u4E09',
            '\u5468\u56DB',
            '\u5468\u4E94',
            '\u5468\u516D',
            '\u5468\u65E5'
        ],
        shortcut: shortcut()
    };
    function shortcut() {
        function selectByDayStates(dayStates) {
            var value = [];
            for (var i = 0; i < 7 && i < dayStates.length; i++) {
                value[i] = [];
                for (var j = 0; j < 24; j++) {
                    value[i][j] = dayStates[i];
                }
            }
            return value;
        }
        return [
            {
                text: '\u5168\u5468\u6295\u653E',
                tip: '\u5468\u4E00\u5230\u5468\u65E5\u5168\u5929\u6295\u653E',
                getValue: function () {
                    return selectByDayStates([
                        1,
                        1,
                        1,
                        1,
                        1,
                        1,
                        1
                    ]);
                }
            },
            {
                text: '\u5468\u4E00\u5230\u5468\u4E94\u6295\u653E',
                tip: '\u5468\u4E00\u5230\u5468\u4E94\u5168\u5929\u6295\u653E',
                getValue: function () {
                    return selectByDayStates([
                        1,
                        1,
                        1,
                        1,
                        1,
                        0,
                        0
                    ]);
                }
            },
            {
                text: '\u5468\u672B\u6295\u653E',
                tip: '\u5468\u516D\u3001\u5468\u65E5\u5168\u5929\u6295\u653E',
                getValue: function () {
                    return selectByDayStates([
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        1
                    ]);
                }
            }
        ];
    }
    function initValue() {
        var value = [];
        for (var i = 0; i < 7; i++) {
            var lineValue = [];
            value.push(lineValue);
            for (var j = 0; j < 24; j++) {
                lineValue.push(0);
            }
        }
        return value;
    }
    function getClass(schedule, part) {
        return schedule.helper.getPartClasses(part).join(' ');
    }
    function getId(schedule, part) {
        return schedule.helper.getId(part);
    }
    function getShortcutHtml(schedule) {
        var me = schedule;
        var html = [];
        var tpl = '' + '<span class="${clazz}" data-item="${index}"' + ' >${text}</span>';
        var textClass = getClass(me, 'shortcut-text-item');
        html.push('<span class="' + textClass + '">\u5FEB\u901F\u8BBE\u5B9A\uFF1A</span>');
        var shortcuts = me.shortcut;
        var clazz = getClass(me, 'shortcut-item');
        for (var i = 0, len = shortcuts.length; i < len; i++) {
            var shortcut = shortcuts[i];
            html.push(lib.format(tpl, {
                clazz: clazz,
                text: shortcut.text,
                index: i
            }));
        }
        return html.join('');
    }
    function initBody(schedule) {
        lib.g(getId(schedule, 'body')).innerHTML = '' + getBodyTimeHtml(schedule) + getBodyDayHtml(schedule) + getBodyItemHtml(schedule);
    }
    function getBodyTimeHtml(schedule) {
        var me = schedule;
        var html = [];
        var timelineClass = getClass(me, 'time-line');
        var timelineClassInner = timelineClass + '-inner';
        var bodyHeadId = getId(me, 'body-head');
        html.push('<div class="', timelineClass, '" id="', bodyHeadId + '">');
        html.push('<div class="' + timelineClassInner + '">');
        var timeHClass = getClass(me, 'time-head');
        for (var i = 0; i <= 24; i = i + 2) {
            html.push('<div class="', timeHClass, '" data-time="', i, '" ', 'id="', getId(me, 'time-head' + i), '">', i, '</div>');
        }
        html.push('</div>');
        html.push('</div>');
        return html.join('');
    }
    function getBodyDayHtml(schedule) {
        var me = schedule;
        var html = [];
        var dayHClass = getClass(me, 'day-head');
        var dayHId = getId(me, 'day-head');
        html.push('<div id="', dayHId, '" class="', dayHClass, '">');
        var dayClass = getClass(me, 'day');
        var dayTpl = '' + '<div class="${dayClass}">' + '<input type="checkbox" id="${dayId}" value="${value}">' + '<label for="${dayId}">${dayWord}</label>' + '</div>';
        var dayTexts = me.dayTexts;
        for (var i = 0; i < 7; i++) {
            html.push(lib.format(dayTpl, {
                dayWord: dayTexts[i],
                dayId: getId(me, 'line-state' + i),
                value: i,
                dayClass: dayClass
            }));
        }
        html.push('</div>');
        return html.join('');
    }
    function getBodyItemHtml(schedule) {
        var me = schedule;
        var html = [];
        var timeTpl = '' + '<div class="${timeClass}"' + ' id="${itemId}"' + ' data-day="${dayIndex}"' + ' data-time-item="1"' + ' data-time="${timeIndex}">' + '</div>';
        var timeBClass = getClass(me, 'time-body');
        var timeBId = getId(me, 'time-body');
        html.push('<div id="', timeBId, '" class="', timeBClass, '">');
        var lineClass = getClass(me, 'line');
        for (var i = 0; i < 7; i++) {
            var lineId = getId(me, 'line' + i);
            html.push('<div class="', lineClass, '" id="', lineId, '">');
            for (var j = 0; j < 24; j++) {
                var itemId = getId(me, 'time_' + i + '_' + j);
                html.push(lib.format(timeTpl, {
                    itemId: itemId,
                    timeClass: getClass(me, 'time'),
                    dayIndex: i,
                    timeIndex: j
                }));
            }
            html.push('</div>');
        }
        html.push('</div>');
        return html.join('');
    }
    function repaintView(schedule, value) {
        var me = schedule;
        var selectedClass = me.helper.getPartClassName('time-selected');
        var hoverClass = me.helper.getPartClassName('time-hover');
        for (var i = 0; i < 7; i++) {
            var statusArr = [];
            var lineEl = lib.g(getId(me, 'line' + i));
            removeSelectedLineCoverTip(schedule, lineEl);
            for (var j = 0; j < 24; j++) {
                var $item = $(lib.g(getId(me, 'time_' + i + '_' + j)));
                var val = value[i][j];
                if (val) {
                    $item.addClass(selectedClass);
                } else {
                    $item.removeClass(selectedClass);
                }
                $item.removeClass(hoverClass);
                statusArr.push(val);
            }
            createSelectedLineCoverTip(me, statusArr, lineEl, i);
        }
    }
    function createSelectedLineCoverTip(schedule, arr, parent, index) {
        var me = schedule;
        var slotSize = me.slotSize;
        var i = index;
        var checkInput = lib.g(getId(me, 'line-state' + i));
        checkInput.checked = false;
        var patt = /1{1,}/g;
        var statusStr = arr.join('');
        var result;
        var coverClass = getClass(me, 'continue-covertimes');
        var coverTpl = '' + '<div class="${coverClass}">' + '<strong>${text}</strong>' + '</div>';
        while ((result = patt.exec(statusStr)) != null) {
            var length = result[0].length;
            var start = result.index;
            var end = start + length;
            var coverDiv = document.createElement('aside');
            var cssStyle = ';width:' + length * slotSize + 'px;top:0;left:' + start * slotSize + 'px;';
            checkInput.checked = length === 24;
            coverDiv.setAttribute('data-start-time', start);
            coverDiv.setAttribute('data-end-time', end);
            coverDiv.setAttribute('data-day', i);
            coverDiv.className = coverClass;
            coverDiv.style.cssText += cssStyle;
            if (length > 2) {
                coverDiv.innerHTML = lib.format(coverTpl, {
                    start: start,
                    end: end,
                    text: length === 24 ? '\u5168\u5929\u6295\u653E' : start + ':00-' + end + ':00',
                    coverClass: getClass(me, 'covertimes-tip')
                });
            }
            parent.appendChild(coverDiv);
            me.helper.addDOMEvent(coverDiv, 'mouseover', u.partial(coverTipOverHandler, coverDiv, me));
        }
    }
    function coverTipOverHandler(element, schedule) {
        clearTimeout(schedule.coverOvierTimer);
        schedule.coverOvierTimer = setTimeout(function () {
            element.style.display = 'none';
        }, 100);
    }
    function removeSelectedLineCoverTip(schedule, parent) {
        var removeDiv = parent.getElementsByTagName('aside');
        var len = removeDiv.length;
        while (len) {
            var item = removeDiv[0];
            if (item.getAttribute('data-day') != null) {
                schedule.helper.removeDOMEvent(item);
                parent.removeChild(item);
            }
            len--;
        }
    }
    function showPromptTip(schedule, tipId, mousepos, tipText) {
        var me = schedule;
        tipId = tipId || getId(me, 'tip');
        var tipElement = lib.g(tipId);
        if (tipElement) {
            tipElement.style.top = mousepos.y + 'px';
            tipElement.style.left = mousepos.x + 'px';
            tipElement.innerHTML = tipText;
        } else {
            var cssStyle = 'font-size:' + lib.getComputedStyle(me.main, 'fontSize') + ';position:absolute;top:' + mousepos.y + 'px;left:' + mousepos.x + 'px;display:none;' + 'z-index:' + Layer.getZIndex(me.main) + ';';
            var tipClass = getClass(me, 'shortcut-item-tip');
            tipElement = document.createElement('div');
            tipElement.style.cssText = cssStyle;
            tipElement.id = tipId;
            tipElement.className = tipClass;
            tipElement.innerHTML = tipText;
            document.body.appendChild(tipElement);
            me.followTip[tipId] = tipElement;
        }
        me.tipElementTime = setTimeout(function () {
            tipElement.style.display = 'block';
        }, 100);
        return tipElement;
    }
    function hidePromptTip(schedule, tipId) {
        clearTimeout(schedule.tipElementTime);
        var tip = lib.g(tipId);
        tip && (tip.style.display = 'none');
    }
    function dayClickHandler(e) {
        var target = e.target;
        if (target.nodeName.toLowerCase() !== 'input') {
            return;
        }
        var me = this;
        var dom = target;
        var dayIndex = parseInt(dom.value, 10);
        var dayState = dom.checked;
        var rawValueCopy = rawValueClone(me.rawValue);
        var timeValue = rawValueCopy[dayIndex];
        for (var i = 0, len = timeValue.length; i < len; i++) {
            timeValue[i] = dayState ? 1 : 0;
        }
        me.setRawValue(rawValueCopy);
    }
    function shortcutClickHandler(e) {
        var target = e.target;
        if (!target || !lib.hasAttribute(target, 'data-item')) {
            return;
        }
        var index = target.getAttribute('data-item');
        var func = this.shortcut[index].getValue;
        typeof func === 'function' && func.call(this);
        var rawValue;
        if (typeof func === 'function') {
            rawValue = func.call(this);
        } else {
            rawValue = func;
        }
        this.setRawValue(rawValue);
    }
    function shortcutMoveHandler(e) {
        var target = e.target;
        if (!target || !target.getAttribute('data-item')) {
            return;
        }
        var element = target;
        var me = this;
        var mousepos = {};
        mousepos.y = e.pageY + 20;
        mousepos.x = e.pageX + 10;
        var dom = element;
        var index = dom.getAttribute('data-item');
        var tipId = getId(me, 'shortcut-item') + index;
        setTimeout(function () {
            var tipElement = lib.g(tipId);
            if (tipElement) {
                tipElement.style.top = mousepos.y + 'px';
                tipElement.style.left = mousepos.x + 'px';
            }
        }, 0);
    }
    function shortcutOverOutHandler(isOver, e) {
        var target = e.target;
        if (!target || !target.getAttribute('data-item')) {
            return;
        }
        var element = target;
        var mousepos = {};
        mousepos.y = e.pageY + 20;
        mousepos.x = e.pageX + 10;
        var me = this;
        var $dom = $(element);
        var index = $dom.attr('data-item');
        var tipId = getId(me, 'shortcut-item') + index;
        var clazz = me.helper.getPartClassName('shortcut-item-hover');
        if (isOver) {
            $dom.addClass(clazz);
            var tipText = me.shortcut[index].tip;
            showPromptTip(me, tipId, mousepos, tipText);
        } else {
            $dom.removeClass(clazz);
            hidePromptTip(me, tipId);
        }
    }
    var timeTipTpl = '' + '<div id="${timeId}" class="${timeClass}">${time}</div>' + '<div id="${textId}" class="${textClass}">${text}</div>';
    function timeOverHandler(e) {
        var target = e.target;
        if (!target || !target.getAttribute('data-time-item')) {
            return;
        }
        var $element = $(target);
        $element.addClass(this.helper.getPartClassName('time-hover'));
        var mousepos = {};
        mousepos.y = e.pageY + 20;
        mousepos.x = e.pageX + 10;
        var me = this;
        var time = parseInt($element.attr('data-time'), 10);
        var day = parseInt($element.attr('data-day'), 10);
        var tipText = lib.format(timeTipTpl, {
                time: '<strong>' + time + ':00</strong>&nbsp;\u2014&nbsp;<strong>' + (time + 1) + ':00</strong>',
                text: '\u70B9\u51FB/\u62D6\u52A8\u9F20\u6807\u9009\u62E9',
                timeId: getId(me, 'timeitem-tip-head'),
                textId: getId(me, 'timeitem-tip-body'),
                timeClass: getClass(me, 'timeitem-tip-head'),
                textClass: getClass(me, 'timeitem-tip-body')
            });
        var tipId = getId(me, 'timeitem-tip');
        showPromptTip(me, tipId, mousepos, tipText);
        repaintCovers.call(this, day, time);
    }
    function repaintCovers(day, time, all) {
        var me = this;
        clearTimeout(me.repaintCoverTimer);
        me.repaintCoverTimer = setTimeout(function () {
            var timebody = lib.g(getId(me, 'time-body'));
            var timeCovers = timebody.getElementsByTagName('aside');
            for (var i = 0, len = timeCovers.length; i < len; i++) {
                var item = timeCovers[i];
                var startCT = parseInt(item.getAttribute('data-start-time'), 10);
                var endCT = parseInt(item.getAttribute('data-end-time'), 10);
                var coverDay = parseInt(item.getAttribute('data-day'), 10);
                if (!all && time >= startCT && time < endCT && day === coverDay) {
                    item.style.display = 'none';
                } else {
                    item.style.display = 'block';
                }
            }
        }, 100);
    }
    function timeOutHandler(e) {
        var target = e.target;
        var me = this;
        var related = e.relatedTarget;
        var current = e.currentTarget;
        if (!(related === false || current === related || related && (related.prefix === 'xul' || lib.dom.contains(current, related)))) {
            repaintCovers.call(me, 0, 0, true);
        }
        if (!target || !target.getAttribute('data-time-item')) {
            return;
        }
        $(target).removeClass(me.helper.getPartClassName('time-hover'));
        hidePromptTip(me, getId(me, 'timeitem-tip'));
    }
    function setSelectedAreaValue(schedule, cellPos) {
        var me = schedule;
        var startcell = cellPos.startcell;
        var endcell = cellPos.endcell;
        var minXCell = Math.min(startcell.x, endcell.x);
        var minYCell = Math.min(startcell.y, endcell.y);
        var maxXCell = Math.max(startcell.x, endcell.x);
        var maxYCell = Math.max(startcell.y, endcell.y);
        var rawValueCopy = rawValueClone(me.rawValue);
        for (var i = minYCell; i <= maxYCell; i++) {
            for (var j = minXCell; j <= maxXCell; j++) {
                if (rawValueCopy[i][j]) {
                    rawValueCopy[i][j] = 0;
                } else {
                    rawValueCopy[i][j] = 1;
                }
            }
        }
        me.setRawValue(rawValueCopy);
    }
    function getTragTimeCellPos(schedule, mousepos) {
        var me = schedule;
        var timeBodyPos = me.dragRange;
        var dragStartPos = me.dragStartPos;
        var rangePos = {};
        var slotSize = me.slotSize;
        if (mousepos.x <= timeBodyPos[1] && mousepos.x >= timeBodyPos[3]) {
            rangePos.x = mousepos.x;
        } else {
            rangePos.x = mousepos.x - dragStartPos.x < 0 ? timeBodyPos[3] : timeBodyPos[1];
        }
        if (mousepos.y <= timeBodyPos[2] && mousepos.y >= timeBodyPos[0]) {
            rangePos.y = mousepos.y;
        } else {
            rangePos.y = mousepos.y - dragStartPos.y < 0 ? timeBodyPos[0] : timeBodyPos[2];
        }
        var cellrange = {
                startcell: {},
                endcell: {}
            };
        cellrange.startcell.x = Math.floor((dragStartPos.x - me.dragRange[3]) / slotSize);
        cellrange.startcell.y = Math.floor((dragStartPos.y - me.dragRange[0]) / slotSize);
        cellrange.endcell.x = Math.floor((rangePos.x - me.dragRange[3]) / slotSize);
        cellrange.endcell.y = Math.floor((rangePos.y - me.dragRange[0]) / slotSize);
        if (cellrange.endcell.x >= 23) {
            cellrange.endcell.x = 23;
        }
        if (cellrange.endcell.y >= 6) {
            cellrange.endcell.y = 6;
        }
        return cellrange;
    }
    function repaintFollowEle(e) {
        var me = this;
        var slotSize = me.slotSize;
        var cellPos = getTragTimeCellPos(this, {
                x: e.pageX,
                y: e.pageY
            });
        var followEleId = getId(me, 'follow-item');
        var followEle = lib.g(followEleId);
        if (!followEle) {
            followEle = document.createElement('div');
            followEle.className = getClass(me, 'follow-item');
            followEle.id = followEleId;
            lib.g(getId(me, 'time-body')).appendChild(followEle);
        }
        var startcell = cellPos.startcell;
        var endcell = cellPos.endcell;
        var startcellX = startcell.x;
        var startcellY = startcell.y;
        var endcellX = endcell.x;
        var endcellY = endcell.y;
        var divTop;
        var divLeft;
        var divHeight;
        var divWidth;
        if (endcellY >= startcellY) {
            divTop = startcellY * slotSize;
            divHeight = (endcellY - startcellY + 1) * slotSize - 2;
        } else {
            divTop = endcellY * slotSize;
            divHeight = (startcellY - endcellY + 1) * slotSize - 2;
        }
        if (endcellX >= startcellX) {
            divLeft = startcellX * slotSize;
            divWidth = (endcellX - startcellX + 1) * slotSize - 2;
        } else {
            divLeft = endcellX * slotSize;
            divWidth = (startcellX - endcellX + 1) * slotSize - 2;
        }
        var cssStyles = '' + ';display:block;' + ';width:' + divWidth + 'px' + ';height:' + divHeight + 'px' + ';top:' + divTop + 'px' + ';left:' + divLeft + 'px';
        followEle.style.cssText += cssStyles;
    }
    function rawValueClone(rawValue) {
        var val = [];
        for (var i = 0, len = rawValue.length; i < len; i++) {
            val.push([].slice.call(rawValue[i], 0));
        }
        return val;
    }
    function setDayCheckboxState(schedule, state, value) {
        var dayHead = lib.g(getId(schedule, 'day-head'));
        var inputs = dayHead.getElementsByTagName('input');
        for (var i = 0, len = inputs.length; i < len; i++) {
            inputs[i][state] = value;
        }
    }
    function dealValueByCoord(schedule, isSelect, coord) {
        var rawValueCopy = rawValueClone(schedule.rawValue);
        for (var i = 0, len = coord.length; i < len; i++) {
            var item = coord[i];
            if (rawValueCopy[item[0]] != null && rawValueCopy[item[0]][item[1]] != null) {
                rawValueCopy[item[0]][item[1]] = isSelect ? 1 : 0;
            }
        }
        schedule.setRawValue(rawValueCopy);
    }
    function checkSlotSize(schedule) {
        var html = '<div class="${testSlotClass}"></div>';
        var ele = schedule.main;
        ele.innerHTML = lib.format(html, { testSlotClass: schedule.helper.getPartClasses('slot-tester').join(' ') });
        schedule.slotSize = parseFloat(lib.getComputedStyle(ele.firstChild, 'width'));
    }
    esui.register(Schedule);
    return Schedule;
});

define('esui/Sidebar', [
    'require',
    'eoo',
    './lib',
    './Control',
    './main',
    './Panel',
    'jquery',
    'underscore',
    './painters',
    './Button'
], function (require) {
    var eoo = require('eoo');
    var lib = require('./lib');
    var Control = require('./Control');
    var esui = require('./main');
    var Panel = require('./Panel');
    var $ = require('jquery');
    var u = require('underscore');
    var Sidebar = eoo.create(Control, {
            type: 'Sidebar',
            createMain: function (options) {
                if (!options.tagName) {
                    return this.$super([options]);
                }
                return document.createElement(options.tagName);
            },
            initOptions: function (options) {
                var properties = {
                        headHeight: 37,
                        marginTop: 10,
                        marginLeft: 10,
                        marginBottom: 10,
                        autoDelay: 300,
                        mode: 'fixed'
                    };
                u.extend(properties, options);
                var main = this.main;
                var parent = main.parentNode;
                var parentPos = lib.getOffset(parent);
                var pos = lib.getOffset(main);
                if (this.initialOffsetTop == null) {
                    this.initialOffsetTop = pos.top - parentPos.top;
                    properties.top = pos.top;
                    properties.left = pos.left;
                } else {
                    properties.top = parentPos.top + this.initialOffsetTop;
                }
                u.extend(this, properties);
            },
            initStructure: function () {
                initContent(this);
                renderMat(this);
                renderMiniBar(this);
                initCtrlBtn(this);
                if (!lib.ie || lib.ie >= 7) {
                    this.topReset = u.partial(resetTop, this);
                    lib.on(window, 'scroll', this.topReset);
                }
                initPosition(this);
                if (this.isAutoHide()) {
                    hide(this);
                }
            },
            initEvents: function () {
                this.helper.addDOMEvent(this.main, 'mouseover', u.bind(mainOverHandler, null, this));
                this.helper.addDOMEvent(this.main, 'mouseout', u.bind(mainOutHandler, null, this));
            },
            repaint: require('./painters').createRepaint(Control.prototype.repaint, {
                name: 'mode',
                paint: function (sidebar, mode) {
                    changeMode(sidebar, mode);
                    if (sidebar.isAutoHide()) {
                        hide(sidebar);
                    } else {
                        show(sidebar);
                    }
                    if (sidebar.helper.isInStage('RENDERED')) {
                        sidebar.fire('modechange', { mode: mode });
                    }
                }
            }),
            setMode: function (mode) {
                this.setProperties({ mode: mode });
            },
            getMode: function () {
                return this.mode;
            },
            getPanel: function () {
                return this.getChild('content');
            },
            setContent: function (content) {
                var panel = this.getPanel();
                if (panel) {
                    panel.setProperties({ content: content });
                }
            },
            isAutoHide: function () {
                return this.mode === 'autohide';
            },
            dispose: function () {
                var helper = this.helper;
                if (helper.isInStage('DISPOSED')) {
                    return;
                }
                helper.beforeDispose();
                if (this.topReset) {
                    lib.un(window, 'scroll', this.topReset);
                    this.topReseter = null;
                }
                var mat = getMat(this);
                var miniBar = getMiniBar(this);
                document.body.removeChild(miniBar);
                document.body.removeChild(mat);
                this.headEl = null;
                this.bodyEl = null;
                helper.dispose();
                helper.afterDispose();
            }
        });
    function getMat(sidebar) {
        return lib.g(sidebar.helper.getId('mat'));
    }
    function getMiniBar(sidebar) {
        return lib.g(sidebar.helper.getId('minibar'));
    }
    function initContent(sidebar) {
        var $head = $(sidebar.main).children(':first');
        if ($head.size() > 0) {
            $head.addClass(sidebar.helper.getPartClassName('head'));
            sidebar.headEl = $head.get(0);
            var $body = $head.next();
            var body = $body.get(0);
            if (body) {
                sidebar.bodyEl = body;
                $body.addClass(sidebar.helper.getPartClassName('body'));
                var panel = new Panel({
                        main: body,
                        renderOptions: sidebar.renderOptions
                    });
                sidebar.addChild(panel, 'content');
                panel.render();
            }
        }
    }
    function renderMat(sidebar) {
        var me = sidebar;
        var mat = document.createElement('div');
        var classes = me.helper.getPartClasses('mat');
        mat.id = me.helper.getId('mat');
        mat.className = classes.join(' ');
        document.body.appendChild(mat);
    }
    function renderMiniBar(sidebar) {
        var me = sidebar;
        var helper = me.helper;
        var div = document.createElement('div');
        var html = [];
        var textClasses = helper.getPartClasses('minibar-text');
        me.headEl && html.push('' + '<div class="' + textClasses.join(' ') + '">' + me.headEl.innerHTML + '</div>');
        var arrowClasses = helper.getPartClasses('minibar-arrow');
        html.push('' + '<div class="' + arrowClasses.join(' ') + '">' + '</div>');
        div.innerHTML = html.join('');
        div.id = helper.getId('minibar');
        div.className = helper.getPartClasses('minibar').join(' ');
        helper.addDOMEvent(div, 'mouseover', u.bind(miniOverHandler, null, me, div));
        helper.addDOMEvent(div, 'mouseout', u.bind(miniOutHandler, null, me, div));
        document.body.appendChild(div);
    }
    function initCtrlBtn(sidebar) {
        var me = sidebar;
        var main = me.main;
        require('./Button');
        var btnAutoHide = esui.create('Button', {
                id: me.helper.getId('autohide'),
                skin: 'autohide'
            });
        var btnFixed = esui.create('Button', {
                id: me.helper.getId('fixed'),
                skin: 'fixed'
            });
        btnAutoHide.appendTo(main);
        btnFixed.appendTo(main);
        me.addChild(btnAutoHide, 'btnAutoHide');
        me.addChild(btnFixed, 'btnFixed');
        btnAutoHide.onclick = u.partial(autoHideClickHandler, me);
        btnFixed.onclick = u.partial(fixedClickHandler, me);
    }
    function resetTop(sidebar) {
        var me = sidebar;
        var scrollTop = lib.page.getScrollTop();
        var marginTop = me.marginTop || 0;
        var curTop = Math.max(me.top + marginTop - scrollTop, marginTop);
        var main = me.main;
        var mat = getMat(me);
        var mini = getMiniBar(me);
        main.style.top = curTop + 'px';
        mini.style.top = curTop + 'px';
        mat.style.top = curTop - marginTop + 'px';
    }
    function initPosition(sidebar) {
        var me = sidebar;
        var main = me.main;
        main.style.cssText += ';' + 'left: ' + (me.marginLeft ? me.marginLeft + 'px' : 0) + ';' + 'bottom:' + (me.marginBottom ? me.marginBottom + 'px' : 0) + ';';
        var body = me.bodyEl;
        body.style.top = me.headHeight ? me.headHeight + 'px' : 0;
        var minibar = getMiniBar(me);
        minibar.style.bottom = me.marginBottom ? me.marginBottom + 'px' : 0;
        resetTop(me);
    }
    function hideMat(sidebar) {
        getMat(sidebar).style.display = 'none';
    }
    function show(sidebar) {
        getMat(sidebar).style.display = 'block';
        sidebar.main.style.display = 'block';
        getMiniBar(sidebar).style.display = 'none';
        if (!sidebar.isAutoHide()) {
            hideMat(sidebar);
        }
    }
    function hide(sidebar) {
        hideMat(sidebar);
        sidebar.main.style.display = 'none';
        getMiniBar(sidebar).style.display = 'block';
    }
    function miniOverHandler(sidebar, element) {
        var me = sidebar;
        var $ele = $(element);
        var hoverClass = me.helper.getPartClassName('minibar-hover');
        if (!$ele.hasClass(hoverClass)) {
            $ele.addClass(hoverClass);
            me.minibarDisplayTick = setTimeout(function () {
                show(me);
            }, me.autoDelay);
        }
    }
    function miniOutHandler(sidebar, element) {
        var me = sidebar;
        var hoverClass = me.helper.getPartClassName('minibar-hover');
        $(element).removeClass(hoverClass);
        clearTimeout(me.minibarDisplayTick);
    }
    function fixedClickHandler(sidebar) {
        sidebar.setMode('fixed');
    }
    function autoHideClickHandler(sidebar) {
        sidebar.setMode('autohide');
    }
    function changeMode(sidebar, mode) {
        var me = sidebar;
        mode = mode.toLowerCase();
        if (mode === 'fixed') {
            me.getChild('btnAutoHide').show();
            me.getChild('btnFixed').hide();
        } else {
            me.getChild('btnAutoHide').hide();
            me.getChild('btnFixed').show();
        }
        me.mode = mode;
    }
    function mainOverHandler(sidebar) {
        clearTimeout(sidebar.minibarDisplayTick);
    }
    function mainOutHandler(sidebar, event) {
        var me = sidebar;
        if (sidebar.isAutoHide()) {
            event = event || window.event;
            var tar = event.relatedTarget || event.toElement;
            if (!lib.dom.contains(sidebar.main, tar)) {
                me.minibarDisplayTick = setTimeout(function () {
                    hide(me);
                }, me.autoDelay);
            }
        }
    }
    esui.register(Sidebar);
    return Sidebar;
});

define('esui/Tab', [
    'require',
    'eoo',
    'underscore',
    './lib',
    './Control',
    './main',
    'jquery',
    './painters'
], function (require) {
    var eoo = require('eoo');
    var u = require('underscore');
    var lib = require('./lib');
    var Control = require('./Control');
    var esui = require('./main');
    var $ = require('jquery');
    var painters = require('./painters');
    var Tab = eoo.create(Control, {
            type: 'Tab',
            initOptions: function (options) {
                var properties = {
                        tabs: [],
                        activeIndex: 0,
                        allowClose: false,
                        orientation: 'horizontal',
                        contentTemplate: '<span>${title}</span>'
                    };
                u.extend(properties, options);
                var children = $(this.main).children().toArray();
                if (children.length) {
                    var tabs = [];
                    for (var i = 0; i < children.length; i++) {
                        var element = children[i];
                        if (element.getAttribute('data-role') === 'navigator') {
                            this.navigatorElement = element;
                            properties.tabs = extractTabsFromNavigatorElement(element);
                            break;
                        } else {
                            var config = {
                                    title: element.getAttribute('title'),
                                    panel: element.id
                                };
                            tabs.push(config);
                        }
                    }
                    if (!properties.tabs.length) {
                        properties.tabs = tabs;
                    }
                }
                this.setProperties(properties);
            },
            initStructure: function () {
                var navigator = this.navigatorElement;
                this.navigatorElement = null;
                if (!navigator) {
                    navigator = document.createElement('ul');
                    this.main.insertBefore(navigator, this.main.firstChild || null);
                }
                navigator.id = this.helper.getId('navigator');
                this.helper.addPartClasses('navigator', navigator);
            },
            initEvents: function () {
                this.helper.addDOMEvent('navigator', 'click', 'li', clickTab);
            },
            getContentHTML: function (config, allowClose) {
                var html = lib.format(this.contentTemplate, { title: u.escape(config.title) });
                if (allowClose) {
                    html += '<span class="' + this.helper.getPartClassName('close') + '">\u5173\u95ED</span>';
                }
                return html;
            },
            setProperties: function (properties) {
                if (properties.tabs) {
                    if (properties.activeIndex == null) {
                        var currentActiveTab = this.tabs[this.activeIndex];
                        var activeIndex = -1;
                        for (var i = 0; i < properties.tabs.length; i++) {
                            if (properties.tabs[i] === currentActiveTab) {
                                activeIndex = i;
                                break;
                            }
                        }
                        if (activeIndex === -1) {
                            this.activeIndex = -1;
                            properties.activeIndex = 0;
                        } else {
                            this.activeIndex = activeIndex;
                        }
                    }
                    if (properties.allowClose != null) {
                        this.allowClose = properties.allowClose;
                        delete properties.allowClose;
                    }
                }
                this.$super(arguments);
            },
            repaint: painters.createRepaint(Control.prototype.repaint, {
                name: [
                    'tabs',
                    'allowClose'
                ],
                paint: fillNavigator
            }, {
                name: 'activeIndex',
                paint: activateTab
            }, {
                name: 'orientation',
                paint: function (tab, orientation) {
                    tab.removeState('vertical');
                    tab.removeState('horizontal');
                    tab.addState(orientation);
                }
            }),
            activate: function (config) {
                for (var i = 0; i < this.tabs.length; i++) {
                    if (this.tabs[i] === config) {
                        this.set('activeIndex', i);
                    }
                }
            },
            add: function (config) {
                this.insert(config, this.tabs.length);
            },
            insert: function (config, index) {
                index = Math.min(index, this.tabs.length);
                index = Math.max(index, 0);
                this.tabs.splice(index, 0, config);
                var tabElement = createTabElement(this, config, false, this.allowClose);
                var navigator = this.helper.getPart('navigator');
                var children = $(navigator).children().toArray();
                navigator.insertBefore(tabElement, children[index] || null);
                if (this.tabs.length === 1) {
                    this.activeIndex = 0;
                    activateTab(this, 0);
                } else {
                    if (index <= this.activeIndex) {
                        this.activeIndex++;
                    }
                    if (config.panel) {
                        var panel = lib.g(config.panel);
                        if (panel) {
                            panel.style.display = 'none';
                        }
                    }
                }
                this.fire('add', {
                    tab: config,
                    index: index
                });
            },
            remove: function (config) {
                var index = 0;
                while ((index = u.indexOf(this.tabs, config, index)) >= 0) {
                    this.removeAt(index);
                }
            },
            removeAt: function (index) {
                var removed = this.tabs.splice(index, 1)[0];
                var navigator = this.helper.getPart('navigator');
                if (removed) {
                    var children = $(navigator).children().toArray();
                    var tabElement = children[index];
                    tabElement.parentNode.removeChild(tabElement);
                    if (index < this.activeIndex) {
                        this.activeIndex--;
                    } else if (index === this.activeIndex) {
                        this.activeIndex = Math.min(this.activeIndex, this.tabs.length - 1);
                        activateTab(this, this.activeIndex);
                    }
                    if (removed.panel) {
                        var panel = lib.g(removed.panel);
                        if (panel) {
                            panel.style.display = 'none';
                        }
                    }
                    this.fire('remove', {
                        tab: removed,
                        index: index
                    });
                }
            },
            getActiveTab: function () {
                return this.get('tabs')[this.get('activeIndex')];
            }
        });
    function extractTabsFromNavigatorElement(element) {
        var tabs = [];
        var children = $(element).children().toArray();
        for (var i = 0; i < children.length; i++) {
            var tab = children[i];
            var config = {
                    title: $(tab).text(),
                    panel: $(tab).attr('data-for')
                };
            if (tab.className) {
                config.classes = tab.className.split(/\s+/);
            }
            tabs.push(config);
        }
        return tabs;
    }
    function clickTab(e) {
        var target = e.target;
        var tabElement = e.currentTarget;
        var $children = $(tabElement).parent().children();
        var idx = $children.index(tabElement);
        if (this.helper.isPart(target, 'close')) {
            this.removeAt(idx);
        } else {
            this.set('activeIndex', idx);
        }
    }
    function createTabElement(tab, config, isActive, allowClose) {
        var element = document.createElement('li');
        tab.helper.addPartClasses('item', element);
        if (config.classes) {
            $(element).addClass(config.classes.join(' '));
        }
        if (isActive) {
            tab.helper.addPartClasses('item-active', element);
        }
        element.innerHTML = tab.getContentHTML(config, allowClose);
        return element;
    }
    function fillNavigator(tab) {
        var navigator = tab.helper.getPart('navigator');
        var parentNode = navigator.parentNode;
        var placeholder = navigator.nextSibling;
        navigator.innerHTML = '';
        navigator.parentNode.removeChild(navigator);
        for (var i = 0; i < tab.tabs.length; i++) {
            var config = tab.tabs[i];
            var isActive = tab.activeIndex === i;
            var tabElement = createTabElement(tab, config, isActive, tab.allowClose);
            navigator.appendChild(tabElement);
        }
        parentNode.insertBefore(navigator, placeholder);
    }
    function activateTab(tab, index) {
        for (var i = 0; i < tab.tabs.length; i++) {
            var config = tab.tabs[i];
            if (config.panel) {
                var panel = lib.g(config.panel);
                if (panel) {
                    panel.style.display = i === index ? '' : 'none';
                }
            }
            var navigator = tab.helper.getPart('navigator');
            var children = $(navigator).children().toArray();
            var tabElement = children[i];
            var methodName = i === index ? 'addPartClasses' : 'removePartClasses';
            tab.helper[methodName]('item-active', tabElement);
        }
        var event = {
                activeIndex: index,
                tab: tab.tabs[index]
            };
        tab.fire('activate', event);
    }
    esui.register(Tab);
    return Tab;
});

define('esui/TextLine', [
    'require',
    'eoo',
    './main',
    'underscore',
    './lib',
    './InputControl',
    'jquery',
    './painters',
    './TextBox'
], function (require) {
    var eoo = require('eoo');
    var esui = require('./main');
    var u = require('underscore');
    var lib = require('./lib');
    var InputControl = require('./InputControl');
    var $ = require('jquery');
    var painters = require('./painters');
    require('./TextBox');
    var TextLine = eoo.create(InputControl, {
            type: 'TextLine',
            initOptions: function (options) {
                var properties = {
                        width: 300,
                        height: 200
                    };
                if (lib.isInput(this.main)) {
                    this.helper.extractOptionsFromInput(this.main, properties);
                }
                properties.value = properties.value || '';
                properties.placeholder = this.main.getAttribute('placeholder') || '';
                u.extend(properties, options);
                if (!properties.hasOwnProperty('title') && this.main.title) {
                    properties.title = this.main.title;
                }
                this.setProperties(properties);
            },
            initStructure: function () {
                if (lib.isInput(this.main)) {
                    this.helper.replaceMain();
                }
                this.main.innerHTML = getMainHTML(this);
                this.helper.initChildren();
            },
            initEvents: function () {
                var textbox = this.getTextBox();
                textbox.on('input', u.bind(onInput, this));
                var textArea = this.getTextArea();
                this.helper.addDOMEvent(textArea, 'scroll', this.resetScroll);
                this.helper.addDOMEvent(textArea, 'focus', inputFocus);
            },
            repaint: painters.createRepaint(InputControl.prototype.repaint, {
                name: 'height',
                paint: function (textLine, height) {
                    height = height || 300;
                    textLine.main.style.height = height + 'px';
                }
            }, {
                name: 'width',
                paint: function (textLine, width) {
                    width = width || 300;
                    textLine.main.style.width = width + 'px';
                }
            }, {
                name: 'rawValue',
                paint: function (textLine, value) {
                    if (value) {
                        if (u.isArray(value)) {
                            textLine.value = u.unescape(value.join('\n'));
                        } else if (typeof value === 'string') {
                            textLine.value = u.unescape(value);
                        }
                        var textbox = textLine.getTextBox();
                        textbox.setRawValue(textLine.value);
                        refreshLineNum.call(textLine);
                    }
                }
            }, {
                name: [
                    'disabled',
                    'readOnly'
                ],
                paint: function (textLine, disabled, readOnly) {
                    var textbox = textLine.getTextBox();
                    textbox.setProperties({
                        disabled: !!disabled,
                        readOnly: !!readOnly
                    });
                }
            }),
            resetScroll: function () {
                var textArea = this.getTextArea();
                var lineNumber = this.helper.getPart('num-line');
                lineNumber.scrollTop = textArea.scrollTop;
            },
            stringifyValue: function (rawValue) {
                return rawValue.join('\n');
            },
            parseValue: function (value) {
                return lib.trim(value.replace(/\n{2,}/g, '\n')).split('\n');
            },
            getRawValue: function () {
                return u.unique(this.getValueRepeatableItems());
            },
            getValueRepeatableItems: function () {
                var textbox = this.getTextBox();
                var text = textbox.getValue();
                var items = text.split('\n');
                return u.chain(items).map(lib.trim).compact().value();
            },
            getRowsNumber: function () {
                var items = this.getValue().split('\n');
                return items.length;
            },
            addLines: function (lines) {
                var content = lines.join('\n');
                var value = this.getValue();
                if (value.length > 0) {
                    content = value + '\n' + content;
                }
                this.setRawValue(content);
            },
            getTextBox: function () {
                return this.getChild('input');
            },
            getTextArea: function () {
                var textbox = this.getTextBox();
                return lib.g(textbox.inputId);
            }
        });
    function getMainHTML(textLine) {
        var textareaHTML = [
                '<div style="width:100%;height:100%;" data-ui-child-name="input"',
                ' data-ui-type="TextBox" data-ui-mode="textarea"',
                ' data-ui-width="100%"',
                ' data-ui-placeholder="${placeholder}">',
                '</div>'
            ].join('');
        textareaHTML = lib.format(textareaHTML, { placeholder: textLine.placeholder });
        var html = [
                textLine.helper.getPartBeginTag('num-line', 'div'),
                '1',
                textLine.helper.getPartEndTag('num-line', 'div'),
                textLine.helper.getPartBeginTag('text-container', 'div'),
                textareaHTML,
                textLine.helper.getPartEndTag('text-container', 'div')
            ];
        return html.join('');
    }
    function onInput(e) {
        refreshLineNum.call(this);
        this.fire('input');
    }
    function refreshLineNum() {
        var textbox = this.getTextBox();
        var num = textbox.getValue().split('\n').length;
        if (num !== this.number) {
            this.number = num;
            var numLine = this.helper.getPart('num-line');
            numLine.innerHTML = u.range(1, num + 1).join('<br />');
        }
        this.resetScroll();
        this.fire('change');
    }
    function inputFocus() {
        var me = this;
        var $mainElement = $(me.main);
        var helper = me.helper;
        var focusClass = helper.getPrimaryClassName('focus');
        var textArea = this.getTextArea();
        var blurEvent = function () {
            $mainElement.removeClass(focusClass);
            me.removeState('focus');
            helper.removeDOMEvent(textArea, 'blur', blurEvent);
        };
        $mainElement.addClass(focusClass);
        me.addState('focus');
        helper.addDOMEvent(textArea, 'blur', blurEvent);
    }
    esui.register(TextLine);
    return TextLine;
});

define('esui/TipLayer', [
    'require',
    './Button',
    './Label',
    './Panel',
    'jquery',
    './behavior/position',
    'eoo',
    './main',
    'underscore',
    './lib',
    './Control',
    './painters',
    './Layer'
], function (require) {
    require('./Button');
    require('./Label');
    require('./Panel');
    var $ = require('jquery');
    require('./behavior/position');
    var eoo = require('eoo');
    var esui = require('./main');
    var u = require('underscore');
    var lib = require('./lib');
    var Control = require('./Control');
    var painters = require('./painters');
    var Layer = require('./Layer');
    var TipLayer = eoo.create(Control, {
            type: 'TipLayer',
            initOptions: function (options) {
                parseMain(options);
                var properties = {
                        roles: {},
                        showMode: 'manual'
                    };
                u.extend(properties, TipLayer.defaultProperties, options);
                this.setProperties(properties);
            },
            initStructure: function () {
                $(this.main).appendTo(this.appendToElement);
                this.addState('hidden');
                if (this.title || this.roles.title) {
                    createHead(this, this.roles.title);
                }
                createBF(this, 'body', this.roles.content);
                if (this.foot || this.roles.foot) {
                    createBF(this, 'foot', this.roles.foot);
                }
            },
            repaint: painters.createRepaint(Control.prototype.repaint, painters.style('width'), {
                name: 'title',
                paint: function (tipLayer, value) {
                    var head = tipLayer.getHead();
                    if (value == null) {
                        if (head) {
                            tipLayer.removeChild(head);
                        }
                    } else {
                        if (!head) {
                            head = createHead(tipLayer);
                        }
                        head.setText(value);
                    }
                }
            }, {
                name: 'content',
                paint: function (tipLayer, value) {
                    var bfTpl = '' + '<div class="${class}" id="${id}">' + '${content}' + '</div>';
                    var body = tipLayer.getBody();
                    var bodyId = tipLayer.helper.getId('body');
                    var bodyClass = tipLayer.helper.getPartClasses('body');
                    var data = {
                            'class': bodyClass.join(' '),
                            'id': bodyId,
                            'content': value
                        };
                    body.setContent(lib.format(bfTpl, data));
                }
            }, {
                name: 'foot',
                paint: function (tipLayer, value) {
                    var bfTpl = '' + '<div class="${class}" id="${id}">' + '${content}' + '</div>';
                    var footId = tipLayer.helper.getId('foot');
                    var footClass = tipLayer.helper.getPartClasses('foot');
                    var foot = tipLayer.getFoot();
                    if (value == null) {
                        if (foot) {
                            tipLayer.removeChild(foot);
                        }
                    } else {
                        var data = {
                                'class': footClass.join(' '),
                                'id': footId,
                                'content': value
                            };
                        if (!foot) {
                            foot = createBF(tipLayer, 'foot');
                        }
                        foot.setContent(lib.format(bfTpl, data));
                    }
                }
            }, {
                name: [
                    'targetDOM',
                    'targetControl',
                    'showMode',
                    'positionOpt',
                    'targetPositionOpt',
                    'delayTime',
                    'showDuration'
                ],
                paint: function (tipLayer, targetDOM, targetControl, showMode, positionOpt, targetPositionOpt) {
                    var delayTime = arguments[6];
                    var showDuration = arguments[7];
                    var options = {
                            targetDOM: targetDOM,
                            targetControl: targetControl,
                            showMode: showMode,
                            delayTime: delayTime != null ? delayTime : tipLayer.delayTime,
                            showDuration: showDuration != null ? showDuration : tipLayer.showDuration
                        };
                    if (positionOpt) {
                        positionOpt = positionOpt.split('|');
                        options.positionOpt = {
                            top: positionOpt[0] || 'top',
                            right: positionOpt[1] || 'left'
                        };
                    }
                    if (showMode !== 'manual') {
                        tipLayer.attachTo(options);
                    }
                }
            }),
            attachTo: function (options) {
                var handler = this.getInitHandler(options);
                if (!handler) {
                    return;
                }
                options.handler = handler;
                switch (options.showMode) {
                case 'auto':
                    this.initAutoMode(options);
                    break;
                case 'over':
                    this.initOverMode(options);
                    break;
                case 'click':
                    this.initClickMode(options);
                    break;
                case 'manual':
                    break;
                }
            },
            getInitHandler: function (options) {
                var me = this;
                var positionOpt = options.positionOpt || {
                        top: 'top',
                        right: 'left'
                    };
                var targetPositionOpt = options.targetPositionOpt || {
                        top: 'top',
                        right: 'right'
                    };
                var targetElement;
                if (options.targetDOM) {
                    targetElement = lib.g(options.targetDOM);
                } else if (options.targetControl) {
                    targetElement = getElementByControl(this, options.targetControl);
                }
                if (!targetElement) {
                    return null;
                }
                var handler = {
                        targetElement: targetElement,
                        layer: {
                            show: function () {
                                if (options.showMode === 'over') {
                                    me.helper.removeDOMEvent(me.main, 'mouseover');
                                    me.helper.removeDOMEvent(me.main, 'mouseout');
                                    me.helper.addDOMEvent(me.main, 'mouseover', u.bind(me.show, me, targetElement, {
                                        targetPositionOpt: targetPositionOpt,
                                        positionOpt: positionOpt
                                    }));
                                    me.helper.addDOMEvent(me.main, 'mouseout', function () {
                                        handler.layer.hide();
                                    });
                                }
                                delayShow(me, options.delayTime, targetElement, {
                                    targetPositionOpt: targetPositionOpt,
                                    positionOpt: positionOpt
                                });
                            },
                            hide: u.partial(delayHide, me, options.delayTime),
                            bind: function (showEvent, callback) {
                                showEvent = showEvent || 'mouseup';
                                me.helper.addDOMEvent(targetElement, showEvent, function (e) {
                                    handler.layer.show();
                                    if (typeof callback === 'function') {
                                        callback();
                                    }
                                    e.stopPropagation();
                                });
                            },
                            preventPopMethod: function (e) {
                                e.stopPropagation();
                            },
                            clickOutsideHideHandler: function (e) {
                                handler.layer.hide();
                            },
                            enableOutsideClickHide: function () {
                                enableOutsideClickHide.call(me, handler);
                            },
                            disableOutsideClickHide: function () {
                                disableOutsideClickHide.call(me, handler);
                            }
                        }
                    };
                return handler;
            },
            initAutoMode: function (options) {
                var handler = options.handler;
                handler.layer.show();
                if (!options.showDuration) {
                    handler.layer.enableOutsideClickHide();
                } else {
                    handler.layer.hide(options.showDuration);
                }
                handler.layer.bind('mouseup');
            },
            initClickMode: function (options) {
                var handler = options.handler;
                handler.layer.bind('mouseup');
                handler.layer.enableOutsideClickHide();
            },
            initOverMode: function (options) {
                var handler = options.handler;
                handler.layer.bind('mouseover');
                this.helper.addDOMEvent(handler.targetElement, 'mouseout', function () {
                    handler.layer.hide();
                });
            },
            getHead: function () {
                return this.getChild('title');
            },
            getBody: function () {
                return this.getChild('body');
            },
            getFoot: function () {
                return this.getChild('foot');
            },
            show: function (targetElement, options) {
                var helper = this.helper;
                if (helper.isInStage('INITED')) {
                    this.render();
                } else if (helper.isInStage('DISPOSED')) {
                    return;
                }
                clearTimeout(this.hideTimeout);
                helper.addDOMEvent(window, 'resize', u.partial(resizeHandler, this, targetElement, options));
                this.main.style.zIndex = Layer.getZIndex(targetElement);
                this.removeState('hidden');
                $(this.main).position({
                    of: $(targetElement),
                    at: options.targetPositionOpt.right + ' ' + options.targetPositionOpt.top,
                    my: options.positionOpt.right + ' ' + options.positionOpt.top
                });
                if (this.isShow) {
                    return;
                }
                this.isShow = true;
                this.fire('show');
            },
            hide: function () {
                if (!this.isShow) {
                    return;
                }
                this.isShow = false;
                this.addState('hidden');
                this.fire('hide');
            },
            setTitle: function (html) {
                this.setProperties({ title: html });
            },
            setContent: function (content) {
                this.setProperties({ content: content });
            },
            setFoot: function (foot) {
                this.setProperties({ foot: foot });
            },
            dispose: function () {
                if (this.helper.isInStage('DISPOSED')) {
                    return;
                }
                this.hide();
                this.roles = null;
                $(this.main).remove();
                this.$super(arguments);
            }
        });
    TipLayer.defaultProperties = {
        delayTime: 0,
        showDuration: 150,
        appendToElement: 'body'
    };
    function parseMain(options) {
        var main = options.main;
        if (!main) {
            return;
        }
        var $els = $(main).children('[data-role]');
        var roles = {};
        $els.each(function (idx, element) {
            var roleName = $(element).attr('data-role');
            roles[roleName] = element;
        });
        options.roles = roles;
    }
    function createHead(tipLayer, mainDOM) {
        if (mainDOM) {
            tipLayer.title = mainDOM.innerHTML;
        } else {
            mainDOM = document.createElement('h3');
            if (tipLayer.main.firstChild) {
                lib.insertBefore(mainDOM, tipLayer.main.firstChild);
            } else {
                tipLayer.main.appendChild(mainDOM);
            }
        }
        var headClass = tipLayer.helper.getPartClassName('title');
        $(mainDOM).addClass(headClass);
        var properties = {
                main: mainDOM,
                childName: 'title',
                title: ''
            };
        var label = esui.create('Label', properties);
        label.render();
        tipLayer.addChild(label);
        return label;
    }
    function createBF(tipLayer, type, mainDOM) {
        if (mainDOM) {
            tipLayer.content = mainDOM.innerHTML;
        } else {
            mainDOM = document.createElement('div');
            if (type === 'body') {
                var head = tipLayer.getChild('title');
                if (head) {
                    lib.insertAfter(mainDOM, head.main);
                } else if (tipLayer.main.firstChild) {
                    lib.insertBefore(mainDOM, head, tipLayer.main.firstChild);
                } else {
                    tipLayer.main.appendChild(mainDOM);
                }
            } else {
                tipLayer.main.appendChild(mainDOM);
            }
        }
        $(mainDOM).addClass(tipLayer.helper.getPartClassName(type + '-panel'));
        var properties = {
                main: mainDOM,
                renderOptions: tipLayer.renderOptions
            };
        var panel = esui.create('Panel', properties);
        panel.render();
        tipLayer.addChild(panel, type);
        return panel;
    }
    function resizeHandler(tipLayer, targetElement, options) {
        if (!tipLayer.isShow) {
            return;
        }
        $(this.main).position({
            of: $(targetElement),
            at: options.targetPositionOpt.right + ' ' + options.targetPositionOpt.top,
            my: options.positionOpt.right + ' ' + options.positionOpt.top
        });
    }
    function delayShow(tipLayer, delayTime, targetElement, options) {
        if (delayTime) {
            clearTimeout(tipLayer.showTimeout);
            clearTimeout(tipLayer.hideTimeout);
            tipLayer.showTimeout = setTimeout(u.bind(tipLayer.show, tipLayer, targetElement, options), delayTime);
        } else {
            tipLayer.show(targetElement, options);
        }
    }
    function delayHide(tipLayer, delayTime) {
        clearTimeout(tipLayer.showTimeout);
        clearTimeout(tipLayer.hideTimeout);
        tipLayer.hideTimeout = setTimeout(u.bind(tipLayer.hide, tipLayer), delayTime);
    }
    function getElementByControl(tipLayer, control) {
        if (typeof control === 'string') {
            control = tipLayer.viewContext.get(control);
        }
        return control.main;
    }
    function enableOutsideClickHide(handler) {
        this.helper.addDOMEvent(document.documentElement, 'mouseup', handler.layer.clickOutsideHideHandler);
        this.helper.addDOMEvent(this.main, 'mouseup', handler.layer.preventPopMethod);
    }
    function disableOutsideClickHide(handler) {
        this.helper.removeDOMEvent(document.documentElement, 'mouseup', handler.layer.clickOutsideHideHandler);
        this.helper.removeDOMEvent(this.main, 'mouseup', handler.layer.clickOutsideHideHandler);
    }
    TipLayer.onceNotice = function (args) {
        var tipLayerPrefix = 'tipLayer-once-notice';
        var okPrefix = 'tipLayer-notice-ok';
        function btnClickHandler(tipLayer) {
            var handler = tipLayer.onok;
            var isFunc = typeof handler === 'function';
            if (isFunc) {
                handler(tipLayer);
            }
            tipLayer.fire('ok');
            tipLayer.dispose();
        }
        var content = u.escape(args.content) || '';
        var properties = {
                type: 'onceNotice',
                skin: 'onceNotice'
            };
        u.extend(properties, args);
        var main = document.createElement('div');
        document.body.appendChild(main);
        var tipLayerId = lib.getGUID(tipLayerPrefix);
        properties.id = tipLayerId;
        properties.main = main;
        properties.type = null;
        var tipLayer = esui.create('TipLayer', properties);
        tipLayer.setContent(content);
        var okText = args.okText || '\u77E5\u9053\u4E86';
        tipLayer.setFoot(lib.format('<div data-ui="type:Button;childName:okBtn;id:${id}" class="${classes}">' + '${oktext}' + '</div>', {
            id: tipLayerId + '-' + okPrefix,
            classes: tipLayer.helper.getPartClasses('once-notice'),
            okText: okText
        }));
        tipLayer.render();
        var okBtn = tipLayer.getFoot().getChild('okBtn');
        okBtn.on('click', u.partial(btnClickHandler, tipLayer, 'ok'));
        var targetDOM = lib.g(args.targetDOM) || tipLayer.viewContext.get(args.targetControl);
        tipLayer.show(targetDOM, {
            top: 'top',
            right: 'left'
        });
        return tipLayer;
    };
    esui.register(TipLayer);
    return TipLayer;
});

define('esui/Tip', [
    'require',
    'eoo',
    './main',
    'underscore',
    './Control',
    './lib',
    './TipLayer',
    './painters'
], function (require) {
    var eoo = require('eoo');
    var esui = require('./main');
    var u = require('underscore');
    var Control = require('./Control');
    var lib = require('./lib');
    require('./TipLayer');
    var Tip = eoo.create(Control, {
            type: 'Tip',
            initOptions: function (options) {
                var properties = {
                        title: '',
                        content: '',
                        arrow: true,
                        showMode: 'over',
                        delayTime: 500,
                        icon: 'question-circle'
                    };
                u.extend(properties, options);
                if (options.arrow === 'false') {
                    properties.arrow = false;
                }
                extractDOMProperties(this, properties);
                this.setProperties(properties);
            },
            initStructure: function () {
                var main = document.createElement('div');
                document.body.appendChild(main);
                if (this.inheritFont || esui.getConfig('inheritFont')) {
                    main.style.fontSize = lib.getComputedStyle(this.main, 'fontSize');
                }
                var tipLayer = esui.create('TipLayer', {
                        main: main,
                        childName: 'layer',
                        content: this.content,
                        title: this.title,
                        arrow: this.arrow,
                        width: this.layerWidth || 200,
                        viewContext: this.viewContext,
                        variants: 'from-tip'
                    });
                this.addChild(tipLayer);
                tipLayer.render();
                var attachOptions = {
                        showMode: this.mode || this.showMode,
                        delayTime: this.delayTime,
                        targetControl: this.id,
                        positionOpt: {
                            top: 'top',
                            right: 'left'
                        }
                    };
                tipLayer.attachTo(attachOptions);
            },
            repaint: require('./painters').createRepaint(Control.prototype.repaint, {
                name: 'title',
                paint: function (tip, value) {
                    var layer = tip.getChild('layer');
                    if (layer) {
                        layer.setTitle(value);
                    }
                }
            }, {
                name: 'content',
                paint: function (tip, value) {
                    var layer = tip.getChild('layer');
                    if (layer) {
                        layer.setContent(value);
                    }
                }
            })
        });
    function extractDOMProperties(tip, options) {
        var html = '';
        var main = tip.main;
        options.title = options.title || main.getAttribute('title');
        main.removeAttribute('title');
        options.content = options.content || main.innerHTML;
        if (options.icon) {
            html = '<span class="' + tip.helper.getIconClass(options.icon) + '"></span>';
        }
        main.innerHTML = html;
    }
    esui.register(Tip);
    return Tip;
});

define('esui/Toast', [
    'require',
    'eoo',
    './main',
    './lib',
    './Control',
    'underscore',
    './painters',
    'jquery'
], function (require) {
    var eoo = require('eoo');
    var esui = require('./main');
    var lib = require('./lib');
    var Control = require('./Control');
    var u = require('underscore');
    var painters = require('./painters');
    var $ = require('jquery');
    var Toast = eoo.create(Control, {
            type: 'Toast',
            initOptions: function (options) {
                var properties = {
                        duration: 3000,
                        messageType: 'normal',
                        disposeOnHide: true,
                        autoShow: false
                    };
                u.extend(properties, options);
                if (properties.content == null) {
                    properties.content = this.main.innerHTML;
                }
                this.setProperties(properties);
            },
            initStructure: function () {
                this.main.innerHTML = this.helper.getPartHTML('content', 'p');
                this.addState('hidden');
            },
            repaint: painters.createRepaint(Control.prototype.repaint, {
                name: 'content',
                paint: function (toast, content) {
                    var container = toast.main.firstChild;
                    container.innerHTML = content;
                    if (toast.autoShow && toast.helper.isInStage('INITED')) {
                        toast.show();
                    }
                }
            }, {
                name: 'messageType',
                paint: function (toast, messageType) {
                    toast.helper.addPartClasses(toast.messageType);
                }
            }),
            show: function () {
                if (this.helper.isInStage('DISPOSED')) {
                    return;
                }
                if (!this.main.parentElement && !this.main.parentNode) {
                    this.appendTo(getContainer.call(this));
                }
                if (!this.isHidden()) {
                    return;
                }
                this.$super(arguments);
                this.fire('show');
                clearTimeout(this.timer);
                if (!isNaN(this.duration) && this.duration !== Infinity) {
                    this.timer = setTimeout(u.bind(this.hide, this), this.duration);
                }
            },
            hide: function () {
                if (this.isHidden()) {
                    return;
                }
                this.$super(arguments);
                clearTimeout(this.timer);
                this.fire('hide');
                if (this.disposeOnHide) {
                    this.dispose();
                }
            },
            dispose: function () {
                clearTimeout(this.timer);
                if (this.helper.isInStage('DISPOSED')) {
                    return;
                }
                this.$super(arguments);
                $(this.main).remove();
            }
        });
    function getContainer() {
        var prefix = require('./main').getConfig('uiClassPrefix');
        var containerId = prefix + '-toast-collection-area';
        var element = document.getElementById(containerId);
        if (!element) {
            element = document.createElement('div');
            element.id = containerId;
            this.helper.addPartClasses('collection-area', element);
            document.body.appendChild(element);
        }
        return element;
    }
    function createHandler(messageType) {
        return function (content, options) {
            if (messageType === 'show') {
                messageType = 'normal';
            }
            options = u.extend({ content: content }, options);
            options.messageType = options.messageType || messageType;
            var toast = new Toast(options);
            Control.prototype.hide.apply(toast);
            toast.appendTo(getContainer.call(toast));
            return toast;
        };
    }
    u.each([
        'show',
        'info',
        'alert',
        'error',
        'success'
    ], function (key) {
        Toast[key] = createHandler(key);
    });
    esui.register(Toast);
    return Toast;
});

define('esui/validator/MaxByteLengthRule', [
    'require',
    './Rule',
    './ValidityState',
    'eoo',
    '../main'
], function (require) {
    var Rule = require('./Rule');
    var ValidityState = require('./ValidityState');
    var eoo = require('eoo');
    var esui = require('../main');
    var MaxByteLengthRule = eoo.create(Rule, {
            type: 'maxByteLength',
            errorMessage: '${title}\u4E0D\u80FD\u8D85\u8FC7${maxByteLength}\u4E2A\u5B57\u7B26',
            check: function (value, control) {
                var byteLength = value.replace(/[^\x00-\xff]/g, 'xx').length;
                return new ValidityState(byteLength <= this.getLimitCondition(control), this.getErrorMessage(control));
            }
        });
    esui.registerRule(MaxByteLengthRule, 100);
    return MaxByteLengthRule;
});

define('esui/validator/MinByteLengthRule', [
    'require',
    './Rule',
    './ValidityState',
    'eoo',
    '../main'
], function (require) {
    var Rule = require('./Rule');
    var ValidityState = require('./ValidityState');
    var eoo = require('eoo');
    var esui = require('../main');
    var MinByteLengthRule = eoo.create(Rule, {
            type: 'minByteLength',
            errorMessage: '${title}\u4E0D\u80FD\u5C0F\u4E8E${minByteLength}\u4E2A\u5B57\u7B26',
            check: function (value, control) {
                var byteLength = value.replace(/[^\x00-\xff]/g, 'xx').length;
                return new ValidityState(byteLength >= this.getLimitCondition(control), this.getErrorMessage(control));
            }
        });
    esui.registerRule(MinByteLengthRule, 100);
    return MinByteLengthRule;
});

define('esui/validator/MinLengthRule', [
    'require',
    './Rule',
    './ValidityState',
    'eoo',
    '../main'
], function (require) {
    var Rule = require('./Rule');
    var ValidityState = require('./ValidityState');
    var eoo = require('eoo');
    var esui = require('../main');
    var MinLengthRule = eoo.create(Rule, {
            type: 'minLength',
            errorMessage: '${title}\u4E0D\u80FD\u5C0F\u4E8E${minLength}\u4E2A\u5B57\u7B26',
            check: function (value, control) {
                return new ValidityState(value.length >= this.getLimitCondition(control), this.getErrorMessage(control));
            }
        });
    esui.registerRule(MinLengthRule, 100);
    return MinLengthRule;
});

define('esui/Wizard', [
    'require',
    'eoo',
    'underscore',
    './lib',
    './Control',
    './main',
    './painters',
    'jquery'
], function (require) {
    var eoo = require('eoo');
    var u = require('underscore');
    var lib = require('./lib');
    var Control = require('./Control');
    var esui = require('./main');
    var painters = require('./painters');
    var $ = require('jquery');
    var strAddPartClasses = 'addPartClasses';
    var strRemovePartClasses = 'removePartClasses';
    var Wizard = eoo.create(Control, {
            type: 'Wizard',
            createMain: function () {
                return document.createElement('ol');
            },
            initOptions: function (options) {
                var properties = {
                        steps: [],
                        activeIndex: 0,
                        nodeTemplate: '<span>${text}</span>',
                        numberNodeTemplate: '<span class="${numberNodeClass}">${number}</span>' + '<span class="${textNodeClass}">${text}</span>'
                    };
                var $children = $(this.main).children();
                if (!options.steps) {
                    $children.each(function (idx, node) {
                        var $node = $(node);
                        var config = { text: $node.text() };
                        var panel = $node.attr('data-for');
                        if (panel) {
                            config.panel = panel;
                        }
                        var number = $node.attr('data-node-number');
                        if (number) {
                            config.number = number;
                        }
                        properties.steps.push(config);
                    });
                }
                u.extend(properties, options);
                this.setProperties(properties);
            },
            getNodeHTML: function (node) {
                if (node.number) {
                    var controlHelper = this.helper;
                    return lib.format(this.numberNodeTemplate, {
                        numberNodeClass: controlHelper.getPartClassName('node-number'),
                        textNodeClass: controlHelper.getPartClassName('node-text'),
                        text: u.escape(node.text),
                        number: u.escape(node.number)
                    });
                }
                return lib.format(this.nodeTemplate, { text: u.escape(node.text) });
            },
            repaint: painters.createRepaint(Control.prototype.repaint, {
                name: [
                    'steps',
                    'finishText'
                ],
                paint: function (wizard) {
                    wizard.main.innerHTML = getHTML(wizard);
                }
            }, {
                name: 'activeIndex',
                paint: function (wizard, value) {
                    var controlHelper = wizard.helper;
                    if (!controlHelper.isInStage('RENDERED')) {
                        return;
                    }
                    var nodes = wizard.main.getElementsByTagName('li');
                    var method;
                    var node;
                    var isActive;
                    var isDone;
                    var isCurPrev;
                    for (var i = nodes.length - 1; i >= 0; i--) {
                        isActive = i === wizard.activeIndex;
                        togglePanel(wizard, wizard.steps[i], isActive);
                        node = nodes[i];
                        method = isActive ? strAddPartClasses : strRemovePartClasses;
                        controlHelper[method]('node-active', node);
                        if (i === wizard.steps.length - 1) {
                            controlHelper[method]('node-last-active', node);
                        }
                        isDone = i <= wizard.activeIndex - 1;
                        method = isDone ? strAddPartClasses : strRemovePartClasses;
                        controlHelper[method]('node-done', node);
                        isCurPrev = i === wizard.activeIndex - 1;
                        method = isCurPrev ? strAddPartClasses : strRemovePartClasses;
                        controlHelper[method]('node-active-prev', node);
                    }
                }
            }),
            setProperties: function (properties) {
                if (properties.hasOwnProperty('steps')) {
                    if (properties.hasOwnProperty('activeIndex')) {
                        this.activeIndex = properties.activeIndex;
                        delete properties.activeIndex;
                    } else {
                        this.activeIndex = 0;
                    }
                    if (properties.hasOwnProperty('finishText')) {
                        this.finishText = properties.finishText;
                        delete properties.finishText;
                    }
                }
                var changes = this.$super([properties]);
                if (changes.hasOwnProperty('steps') || changes.hasOwnProperty('activeIndex')) {
                    this.fire('enter');
                }
            },
            getActiveStep: function () {
                return this.get('steps')[this.get('activeIndex')];
            },
            stepNext: function () {
                var maxStep = this.finishText ? this.steps.length : this.steps.length - 1;
                if (this.activeIndex < maxStep) {
                    this.set('activeIndex', this.activeIndex + 1);
                }
            },
            stepPrevious: function () {
                if (this.activeIndex > 0) {
                    this.set('activeIndex', this.activeIndex - 1);
                }
            }
        });
    function togglePanel(wizard, config, isActive) {
        var panel = config && config.panel && lib.g(config.panel);
        if (!panel) {
            var control = wizard.viewContext.get(config.panel);
            if (control) {
                isActive ? control.show() : control.hide();
                panel = control.main;
            } else {
                return;
            }
        }
        var method = isActive ? strRemovePartClasses : strAddPartClasses;
        wizard.helper[method]('panel-hidden', panel);
    }
    function getHTML(wizard) {
        var controlHelper = wizard.helper;
        var tpl = '<li class="${classes}">${content}</li>';
        var html = '';
        for (var i = 0; i < wizard.steps.length; i++) {
            var node = wizard.steps[i];
            var classes = controlHelper.getPartClasses('node');
            if (i === 0) {
                classes.push.apply(classes, controlHelper.getPartClasses('node-first'));
            }
            if (i === wizard.steps.length - 1 && !wizard.finishText) {
                classes.push.apply(classes, controlHelper.getPartClasses('node-last'));
            }
            if (i === wizard.activeIndex - 1) {
                classes.push.apply(classes, controlHelper.getPartClasses('node-active-prev'));
            }
            if (i <= wizard.activeIndex - 1) {
                classes.push.apply(classes, controlHelper.getPartClasses('node-done'));
            }
            var isActive = i === wizard.activeIndex;
            togglePanel(wizard, node, isActive);
            if (isActive) {
                classes.push.apply(classes, controlHelper.getPartClasses('node-active'));
                if (i === wizard.steps.length - 1) {
                    classes.push.apply(classes, controlHelper.getPartClasses('node-last-active'));
                }
            }
            html += lib.format(tpl, {
                classes: classes.join(' '),
                content: wizard.getNodeHTML(node)
            });
        }
        if (wizard.finishText) {
            var classes2 = [].concat(controlHelper.getPartClasses('node'), controlHelper.getPartClasses('node-last'), controlHelper.getPartClasses('node-finish'), wizard.activeIndex === wizard.steps.length ? controlHelper.getPartClasses('node-active') : []);
            html += lib.format(tpl, {
                classes: classes2.join(' '),
                content: '<span>' + wizard.finishText + '</span>'
            });
        }
        return html;
    }
    esui.register(Wizard);
    return Wizard;
});

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/ar-ma', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('ar-ma', {
        months: '\u064A\u0646\u0627\u064A\u0631_\u0641\u0628\u0631\u0627\u064A\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064A\u0644_\u0645\u0627\u064A_\u064A\u0648\u0646\u064A\u0648_\u064A\u0648\u0644\u064A\u0648\u0632_\u063A\u0634\u062A_\u0634\u062A\u0646\u0628\u0631_\u0623\u0643\u062A\u0648\u0628\u0631_\u0646\u0648\u0646\u0628\u0631_\u062F\u062C\u0646\u0628\u0631'.split('_'),
        monthsShort: '\u064A\u0646\u0627\u064A\u0631_\u0641\u0628\u0631\u0627\u064A\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064A\u0644_\u0645\u0627\u064A_\u064A\u0648\u0646\u064A\u0648_\u064A\u0648\u0644\u064A\u0648\u0632_\u063A\u0634\u062A_\u0634\u062A\u0646\u0628\u0631_\u0623\u0643\u062A\u0648\u0628\u0631_\u0646\u0648\u0646\u0628\u0631_\u062F\u062C\u0646\u0628\u0631'.split('_'),
        weekdays: '\u0627\u0644\u0623\u062D\u062F_\u0627\u0644\u0625\u062A\u0646\u064A\u0646_\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062E\u0645\u064A\u0633_\u0627\u0644\u062C\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062A'.split('_'),
        weekdaysShort: '\u0627\u062D\u062F_\u0627\u062A\u0646\u064A\u0646_\u062B\u0644\u0627\u062B\u0627\u0621_\u0627\u0631\u0628\u0639\u0627\u0621_\u062E\u0645\u064A\u0633_\u062C\u0645\u0639\u0629_\u0633\u0628\u062A'.split('_'),
        weekdaysMin: '\u062D_\u0646_\u062B_\u0631_\u062E_\u062C_\u0633'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd D MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[\u0627\u0644\u064A\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
            nextDay: '[\u063A\u062F\u0627 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
            nextWeek: 'dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
            lastDay: '[\u0623\u0645\u0633 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
            lastWeek: 'dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '\u0641\u064A %s',
            past: '\u0645\u0646\u0630 %s',
            s: '\u062B\u0648\u0627\u0646',
            m: '\u062F\u0642\u064A\u0642\u0629',
            mm: '%d \u062F\u0642\u0627\u0626\u0642',
            h: '\u0633\u0627\u0639\u0629',
            hh: '%d \u0633\u0627\u0639\u0627\u062A',
            d: '\u064A\u0648\u0645',
            dd: '%d \u0623\u064A\u0627\u0645',
            M: '\u0634\u0647\u0631',
            MM: '%d \u0623\u0634\u0647\u0631',
            y: '\u0633\u0646\u0629',
            yy: '%d \u0633\u0646\u0648\u0627\u062A'
        },
        week: {
            dow: 6,
            doy: 12
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/ar-sa', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    var symbolMap = {
            '1': '\u0661',
            '2': '\u0662',
            '3': '\u0663',
            '4': '\u0664',
            '5': '\u0665',
            '6': '\u0666',
            '7': '\u0667',
            '8': '\u0668',
            '9': '\u0669',
            '0': '\u0660'
        }, numberMap = {
            '\u0661': '1',
            '\u0662': '2',
            '\u0663': '3',
            '\u0664': '4',
            '\u0665': '5',
            '\u0666': '6',
            '\u0667': '7',
            '\u0668': '8',
            '\u0669': '9',
            '\u0660': '0'
        };
    return moment.lang('ar-sa', {
        months: '\u064A\u0646\u0627\u064A\u0631_\u0641\u0628\u0631\u0627\u064A\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064A\u0644_\u0645\u0627\u064A\u0648_\u064A\u0648\u0646\u064A\u0648_\u064A\u0648\u0644\u064A\u0648_\u0623\u063A\u0633\u0637\u0633_\u0633\u0628\u062A\u0645\u0628\u0631_\u0623\u0643\u062A\u0648\u0628\u0631_\u0646\u0648\u0641\u0645\u0628\u0631_\u062F\u064A\u0633\u0645\u0628\u0631'.split('_'),
        monthsShort: '\u064A\u0646\u0627\u064A\u0631_\u0641\u0628\u0631\u0627\u064A\u0631_\u0645\u0627\u0631\u0633_\u0623\u0628\u0631\u064A\u0644_\u0645\u0627\u064A\u0648_\u064A\u0648\u0646\u064A\u0648_\u064A\u0648\u0644\u064A\u0648_\u0623\u063A\u0633\u0637\u0633_\u0633\u0628\u062A\u0645\u0628\u0631_\u0623\u0643\u062A\u0648\u0628\u0631_\u0646\u0648\u0641\u0645\u0628\u0631_\u062F\u064A\u0633\u0645\u0628\u0631'.split('_'),
        weekdays: '\u0627\u0644\u0623\u062D\u062F_\u0627\u0644\u0625\u062B\u0646\u064A\u0646_\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062E\u0645\u064A\u0633_\u0627\u0644\u062C\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062A'.split('_'),
        weekdaysShort: '\u0623\u062D\u062F_\u0625\u062B\u0646\u064A\u0646_\u062B\u0644\u0627\u062B\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062E\u0645\u064A\u0633_\u062C\u0645\u0639\u0629_\u0633\u0628\u062A'.split('_'),
        weekdaysMin: '\u062D_\u0646_\u062B_\u0631_\u062E_\u062C_\u0633'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd D MMMM YYYY LT'
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return '\u0635';
            } else {
                return '\u0645';
            }
        },
        calendar: {
            sameDay: '[\u0627\u0644\u064A\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
            nextDay: '[\u063A\u062F\u0627 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
            nextWeek: 'dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
            lastDay: '[\u0623\u0645\u0633 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
            lastWeek: 'dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '\u0641\u064A %s',
            past: '\u0645\u0646\u0630 %s',
            s: '\u062B\u0648\u0627\u0646',
            m: '\u062F\u0642\u064A\u0642\u0629',
            mm: '%d \u062F\u0642\u0627\u0626\u0642',
            h: '\u0633\u0627\u0639\u0629',
            hh: '%d \u0633\u0627\u0639\u0627\u062A',
            d: '\u064A\u0648\u0645',
            dd: '%d \u0623\u064A\u0627\u0645',
            M: '\u0634\u0647\u0631',
            MM: '%d \u0623\u0634\u0647\u0631',
            y: '\u0633\u0646\u0629',
            yy: '%d \u0633\u0646\u0648\u0627\u062A'
        },
        preparse: function (string) {
            return string.replace(/[۰-۹]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '\u060C');
        },
        week: {
            dow: 6,
            doy: 12
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/ar', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    var symbolMap = {
            '1': '\u0661',
            '2': '\u0662',
            '3': '\u0663',
            '4': '\u0664',
            '5': '\u0665',
            '6': '\u0666',
            '7': '\u0667',
            '8': '\u0668',
            '9': '\u0669',
            '0': '\u0660'
        }, numberMap = {
            '\u0661': '1',
            '\u0662': '2',
            '\u0663': '3',
            '\u0664': '4',
            '\u0665': '5',
            '\u0666': '6',
            '\u0667': '7',
            '\u0668': '8',
            '\u0669': '9',
            '\u0660': '0'
        };
    return moment.lang('ar', {
        months: '\u064A\u0646\u0627\u064A\u0631/ \u0643\u0627\u0646\u0648\u0646 \u0627\u0644\u062B\u0627\u0646\u064A_\u0641\u0628\u0631\u0627\u064A\u0631/ \u0634\u0628\u0627\u0637_\u0645\u0627\u0631\u0633/ \u0622\u0630\u0627\u0631_\u0623\u0628\u0631\u064A\u0644/ \u0646\u064A\u0633\u0627\u0646_\u0645\u0627\u064A\u0648/ \u0623\u064A\u0627\u0631_\u064A\u0648\u0646\u064A\u0648/ \u062D\u0632\u064A\u0631\u0627\u0646_\u064A\u0648\u0644\u064A\u0648/ \u062A\u0645\u0648\u0632_\u0623\u063A\u0633\u0637\u0633/ \u0622\u0628_\u0633\u0628\u062A\u0645\u0628\u0631/ \u0623\u064A\u0644\u0648\u0644_\u0623\u0643\u062A\u0648\u0628\u0631/ \u062A\u0634\u0631\u064A\u0646 \u0627\u0644\u0623\u0648\u0644_\u0646\u0648\u0641\u0645\u0628\u0631/ \u062A\u0634\u0631\u064A\u0646 \u0627\u0644\u062B\u0627\u0646\u064A_\u062F\u064A\u0633\u0645\u0628\u0631/ \u0643\u0627\u0646\u0648\u0646 \u0627\u0644\u0623\u0648\u0644'.split('_'),
        monthsShort: '\u064A\u0646\u0627\u064A\u0631/ \u0643\u0627\u0646\u0648\u0646 \u0627\u0644\u062B\u0627\u0646\u064A_\u0641\u0628\u0631\u0627\u064A\u0631/ \u0634\u0628\u0627\u0637_\u0645\u0627\u0631\u0633/ \u0622\u0630\u0627\u0631_\u0623\u0628\u0631\u064A\u0644/ \u0646\u064A\u0633\u0627\u0646_\u0645\u0627\u064A\u0648/ \u0623\u064A\u0627\u0631_\u064A\u0648\u0646\u064A\u0648/ \u062D\u0632\u064A\u0631\u0627\u0646_\u064A\u0648\u0644\u064A\u0648/ \u062A\u0645\u0648\u0632_\u0623\u063A\u0633\u0637\u0633/ \u0622\u0628_\u0633\u0628\u062A\u0645\u0628\u0631/ \u0623\u064A\u0644\u0648\u0644_\u0623\u0643\u062A\u0648\u0628\u0631/ \u062A\u0634\u0631\u064A\u0646 \u0627\u0644\u0623\u0648\u0644_\u0646\u0648\u0641\u0645\u0628\u0631/ \u062A\u0634\u0631\u064A\u0646 \u0627\u0644\u062B\u0627\u0646\u064A_\u062F\u064A\u0633\u0645\u0628\u0631/ \u0643\u0627\u0646\u0648\u0646 \u0627\u0644\u0623\u0648\u0644'.split('_'),
        weekdays: '\u0627\u0644\u0623\u062D\u062F_\u0627\u0644\u0625\u062B\u0646\u064A\u0646_\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621_\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621_\u0627\u0644\u062E\u0645\u064A\u0633_\u0627\u0644\u062C\u0645\u0639\u0629_\u0627\u0644\u0633\u0628\u062A'.split('_'),
        weekdaysShort: '\u0623\u062D\u062F_\u0625\u062B\u0646\u064A\u0646_\u062B\u0644\u0627\u062B\u0627\u0621_\u0623\u0631\u0628\u0639\u0627\u0621_\u062E\u0645\u064A\u0633_\u062C\u0645\u0639\u0629_\u0633\u0628\u062A'.split('_'),
        weekdaysMin: '\u062D_\u0646_\u062B_\u0631_\u062E_\u062C_\u0633'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd D MMMM YYYY LT'
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return '\u0635';
            } else {
                return '\u0645';
            }
        },
        calendar: {
            sameDay: '[\u0627\u0644\u064A\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
            nextDay: '[\u063A\u062F\u0627 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
            nextWeek: 'dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
            lastDay: '[\u0623\u0645\u0633 \u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
            lastWeek: 'dddd [\u0639\u0644\u0649 \u0627\u0644\u0633\u0627\u0639\u0629] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '\u0641\u064A %s',
            past: '\u0645\u0646\u0630 %s',
            s: '\u062B\u0648\u0627\u0646',
            m: '\u062F\u0642\u064A\u0642\u0629',
            mm: '%d \u062F\u0642\u0627\u0626\u0642',
            h: '\u0633\u0627\u0639\u0629',
            hh: '%d \u0633\u0627\u0639\u0627\u062A',
            d: '\u064A\u0648\u0645',
            dd: '%d \u0623\u064A\u0627\u0645',
            M: '\u0634\u0647\u0631',
            MM: '%d \u0623\u0634\u0647\u0631',
            y: '\u0633\u0646\u0629',
            yy: '%d \u0633\u0646\u0648\u0627\u062A'
        },
        preparse: function (string) {
            return string.replace(/[۰-۹]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '\u060C');
        },
        week: {
            dow: 6,
            doy: 12
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/az', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    var suffixes = {
            1: '-inci',
            5: '-inci',
            8: '-inci',
            70: '-inci',
            80: '-inci',
            2: '-nci',
            7: '-nci',
            20: '-nci',
            50: '-nci',
            3: '-\xFCnc\xFC',
            4: '-\xFCnc\xFC',
            100: '-\xFCnc\xFC',
            6: '-nc\u0131',
            9: '-uncu',
            10: '-uncu',
            30: '-uncu',
            60: '-\u0131nc\u0131',
            90: '-\u0131nc\u0131'
        };
    return moment.lang('az', {
        months: 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
        monthsShort: 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
        weekdays: 'Bazar_Bazar ert\u0259si_\xC7\u0259r\u015F\u0259nb\u0259 ax\u015Fam\u0131_\xC7\u0259r\u015F\u0259nb\u0259_C\xFCm\u0259 ax\u015Fam\u0131_C\xFCm\u0259_\u015E\u0259nb\u0259'.split('_'),
        weekdaysShort: 'Baz_BzE_\xC7Ax_\xC7\u0259r_CAx_C\xFCm_\u015E\u0259n'.split('_'),
        weekdaysMin: 'Bz_BE_\xC7A_\xC7\u0259_CA_C\xFC_\u015E\u0259'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[bug\xFCn saat] LT',
            nextDay: '[sabah saat] LT',
            nextWeek: '[g\u0259l\u0259n h\u0259ft\u0259] dddd [saat] LT',
            lastDay: '[d\xFCn\u0259n] LT',
            lastWeek: '[ke\xE7\u0259n h\u0259ft\u0259] dddd [saat] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s sonra',
            past: '%s \u0259vv\u0259l',
            s: 'birne\xE7\u0259 saniyy\u0259',
            m: 'bir d\u0259qiq\u0259',
            mm: '%d d\u0259qiq\u0259',
            h: 'bir saat',
            hh: '%d saat',
            d: 'bir g\xFCn',
            dd: '%d g\xFCn',
            M: 'bir ay',
            MM: '%d ay',
            y: 'bir il',
            yy: '%d il'
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'gec\u0259';
            } else if (hour < 12) {
                return 's\u0259h\u0259r';
            } else if (hour < 17) {
                return 'g\xFCnd\xFCz';
            } else {
                return 'ax\u015Fam';
            }
        },
        ordinal: function (number) {
            if (number === 0) {
                return number + '-\u0131nc\u0131';
            }
            var a = number % 10, b = number % 100 - a, c = number >= 100 ? 100 : null;
            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/bg', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('bg', {
        months: '\u044F\u043D\u0443\u0430\u0440\u0438_\u0444\u0435\u0432\u0440\u0443\u0430\u0440\u0438_\u043C\u0430\u0440\u0442_\u0430\u043F\u0440\u0438\u043B_\u043C\u0430\u0439_\u044E\u043D\u0438_\u044E\u043B\u0438_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043F\u0442\u0435\u043C\u0432\u0440\u0438_\u043E\u043A\u0442\u043E\u043C\u0432\u0440\u0438_\u043D\u043E\u0435\u043C\u0432\u0440\u0438_\u0434\u0435\u043A\u0435\u043C\u0432\u0440\u0438'.split('_'),
        monthsShort: '\u044F\u043D\u0440_\u0444\u0435\u0432_\u043C\u0430\u0440_\u0430\u043F\u0440_\u043C\u0430\u0439_\u044E\u043D\u0438_\u044E\u043B\u0438_\u0430\u0432\u0433_\u0441\u0435\u043F_\u043E\u043A\u0442_\u043D\u043E\u0435_\u0434\u0435\u043A'.split('_'),
        weekdays: '\u043D\u0435\u0434\u0435\u043B\u044F_\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u043D\u0438\u043A_\u0432\u0442\u043E\u0440\u043D\u0438\u043A_\u0441\u0440\u044F\u0434\u0430_\u0447\u0435\u0442\u0432\u044A\u0440\u0442\u044A\u043A_\u043F\u0435\u0442\u044A\u043A_\u0441\u044A\u0431\u043E\u0442\u0430'.split('_'),
        weekdaysShort: '\u043D\u0435\u0434_\u043F\u043E\u043D_\u0432\u0442\u043E_\u0441\u0440\u044F_\u0447\u0435\u0442_\u043F\u0435\u0442_\u0441\u044A\u0431'.split('_'),
        weekdaysMin: '\u043D\u0434_\u043F\u043D_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043F\u0442_\u0441\u0431'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            L: 'D.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[\u0414\u043D\u0435\u0441 \u0432] LT',
            nextDay: '[\u0423\u0442\u0440\u0435 \u0432] LT',
            nextWeek: 'dddd [\u0432] LT',
            lastDay: '[\u0412\u0447\u0435\u0440\u0430 \u0432] LT',
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 6:
                    return '[\u0412 \u0438\u0437\u043C\u0438\u043D\u0430\u043B\u0430\u0442\u0430] dddd [\u0432] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[\u0412 \u0438\u0437\u043C\u0438\u043D\u0430\u043B\u0438\u044F] dddd [\u0432] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: '\u0441\u043B\u0435\u0434 %s',
            past: '\u043F\u0440\u0435\u0434\u0438 %s',
            s: '\u043D\u044F\u043A\u043E\u043B\u043A\u043E \u0441\u0435\u043A\u0443\u043D\u0434\u0438',
            m: '\u043C\u0438\u043D\u0443\u0442\u0430',
            mm: '%d \u043C\u0438\u043D\u0443\u0442\u0438',
            h: '\u0447\u0430\u0441',
            hh: '%d \u0447\u0430\u0441\u0430',
            d: '\u0434\u0435\u043D',
            dd: '%d \u0434\u043D\u0438',
            M: '\u043C\u0435\u0441\u0435\u0446',
            MM: '%d \u043C\u0435\u0441\u0435\u0446\u0430',
            y: '\u0433\u043E\u0434\u0438\u043D\u0430',
            yy: '%d \u0433\u043E\u0434\u0438\u043D\u0438'
        },
        ordinal: function (number) {
            var lastDigit = number % 10, last2Digits = number % 100;
            if (number === 0) {
                return number + '-\u0435\u0432';
            } else if (last2Digits === 0) {
                return number + '-\u0435\u043D';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-\u0442\u0438';
            } else if (lastDigit === 1) {
                return number + '-\u0432\u0438';
            } else if (lastDigit === 2) {
                return number + '-\u0440\u0438';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-\u043C\u0438';
            } else {
                return number + '-\u0442\u0438';
            }
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/bn', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    var symbolMap = {
            '1': '\u09E7',
            '2': '\u09E8',
            '3': '\u09E9',
            '4': '\u09EA',
            '5': '\u09EB',
            '6': '\u09EC',
            '7': '\u09ED',
            '8': '\u09EE',
            '9': '\u09EF',
            '0': '\u09E6'
        }, numberMap = {
            '\u09E7': '1',
            '\u09E8': '2',
            '\u09E9': '3',
            '\u09EA': '4',
            '\u09EB': '5',
            '\u09EC': '6',
            '\u09ED': '7',
            '\u09EE': '8',
            '\u09EF': '9',
            '\u09E6': '0'
        };
    return moment.lang('bn', {
        months: '\u099C\u09BE\u09A8\u09C1\u09DF\u09BE\u09B0\u09C0_\u09AB\u09C7\u09AC\u09C1\u09DF\u09BE\u09B0\u09C0_\u09AE\u09BE\u09B0\u09CD\u099A_\u098F\u09AA\u09CD\u09B0\u09BF\u09B2_\u09AE\u09C7_\u099C\u09C1\u09A8_\u099C\u09C1\u09B2\u09BE\u0987_\u0985\u0997\u09BE\u09B8\u09CD\u099F_\u09B8\u09C7\u09AA\u09CD\u099F\u09C7\u09AE\u09CD\u09AC\u09B0_\u0985\u0995\u09CD\u099F\u09CB\u09AC\u09B0_\u09A8\u09AD\u09C7\u09AE\u09CD\u09AC\u09B0_\u09A1\u09BF\u09B8\u09C7\u09AE\u09CD\u09AC\u09B0'.split('_'),
        monthsShort: '\u099C\u09BE\u09A8\u09C1_\u09AB\u09C7\u09AC_\u09AE\u09BE\u09B0\u09CD\u099A_\u098F\u09AA\u09B0_\u09AE\u09C7_\u099C\u09C1\u09A8_\u099C\u09C1\u09B2_\u0985\u0997_\u09B8\u09C7\u09AA\u09CD\u099F_\u0985\u0995\u09CD\u099F\u09CB_\u09A8\u09AD_\u09A1\u09BF\u09B8\u09C7\u09AE\u09CD'.split('_'),
        weekdays: '\u09B0\u09AC\u09BF\u09AC\u09BE\u09B0_\u09B8\u09CB\u09AE\u09AC\u09BE\u09B0_\u09AE\u0999\u09CD\u0997\u09B2\u09AC\u09BE\u09B0_\u09AC\u09C1\u09A7\u09AC\u09BE\u09B0_\u09AC\u09C3\u09B9\u09B8\u09CD\u09AA\u09A4\u09CD\u09A4\u09BF\u09AC\u09BE\u09B0_\u09B6\u09C1\u0995\u09CD\u09B0\u09C1\u09AC\u09BE\u09B0_\u09B6\u09A8\u09BF\u09AC\u09BE\u09B0'.split('_'),
        weekdaysShort: '\u09B0\u09AC\u09BF_\u09B8\u09CB\u09AE_\u09AE\u0999\u09CD\u0997\u09B2_\u09AC\u09C1\u09A7_\u09AC\u09C3\u09B9\u09B8\u09CD\u09AA\u09A4\u09CD\u09A4\u09BF_\u09B6\u09C1\u0995\u09CD\u09B0\u09C1_\u09B6\u09A8\u09BF'.split('_'),
        weekdaysMin: '\u09B0\u09AC_\u09B8\u09AE_\u09AE\u0999\u09CD\u0997_\u09AC\u09C1_\u09AC\u09CD\u09B0\u09BF\u09B9_\u09B6\u09C1_\u09B6\u09A8\u09BF'.split('_'),
        longDateFormat: {
            LT: 'A h:mm \u09B8\u09AE\u09DF',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, LT',
            LLLL: 'dddd, D MMMM YYYY, LT'
        },
        calendar: {
            sameDay: '[\u0986\u099C] LT',
            nextDay: '[\u0986\u0997\u09BE\u09AE\u09C0\u0995\u09BE\u09B2] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[\u0997\u09A4\u0995\u09BE\u09B2] LT',
            lastWeek: '[\u0997\u09A4] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s \u09AA\u09B0\u09C7',
            past: '%s \u0986\u0997\u09C7',
            s: '\u0995\u098F\u0995 \u09B8\u09C7\u0995\u09C7\u09A8\u09CD\u09A1',
            m: '\u098F\u0995 \u09AE\u09BF\u09A8\u09BF\u099F',
            mm: '%d \u09AE\u09BF\u09A8\u09BF\u099F',
            h: '\u098F\u0995 \u0998\u09A8\u09CD\u099F\u09BE',
            hh: '%d \u0998\u09A8\u09CD\u099F\u09BE',
            d: '\u098F\u0995 \u09A6\u09BF\u09A8',
            dd: '%d \u09A6\u09BF\u09A8',
            M: '\u098F\u0995 \u09AE\u09BE\u09B8',
            MM: '%d \u09AE\u09BE\u09B8',
            y: '\u098F\u0995 \u09AC\u099B\u09B0',
            yy: '%d \u09AC\u099B\u09B0'
        },
        preparse: function (string) {
            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return '\u09B0\u09BE\u09A4';
            } else if (hour < 10) {
                return '\u09B6\u0995\u09BE\u09B2';
            } else if (hour < 17) {
                return '\u09A6\u09C1\u09AA\u09C1\u09B0';
            } else if (hour < 20) {
                return '\u09AC\u09BF\u0995\u09C7\u09B2';
            } else {
                return '\u09B0\u09BE\u09A4';
            }
        },
        week: {
            dow: 0,
            doy: 6
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/br', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    function relativeTimeWithMutation(number, withoutSuffix, key) {
        var format = {
                'mm': 'munutenn',
                'MM': 'miz',
                'dd': 'devezh'
            };
        return number + ' ' + mutation(format[key], number);
    }
    function specialMutationForYears(number) {
        switch (lastNumber(number)) {
        case 1:
        case 3:
        case 4:
        case 5:
        case 9:
            return number + ' bloaz';
        default:
            return number + ' vloaz';
        }
    }
    function lastNumber(number) {
        if (number > 9) {
            return lastNumber(number % 10);
        }
        return number;
    }
    function mutation(text, number) {
        if (number === 2) {
            return softMutation(text);
        }
        return text;
    }
    function softMutation(text) {
        var mutationTable = {
                'm': 'v',
                'b': 'v',
                'd': 'z'
            };
        if (mutationTable[text.charAt(0)] === undefined) {
            return text;
        }
        return mutationTable[text.charAt(0)] + text.substring(1);
    }
    return moment.lang('br', {
        months: 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
        monthsShort: 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
        weekdays: 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
        weekdaysShort: 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
        longDateFormat: {
            LT: 'h[e]mm A',
            L: 'DD/MM/YYYY',
            LL: 'D [a viz] MMMM YYYY',
            LLL: 'D [a viz] MMMM YYYY LT',
            LLLL: 'dddd, D [a viz] MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[Hiziv da] LT',
            nextDay: '[Warc\'hoazh da] LT',
            nextWeek: 'dddd [da] LT',
            lastDay: '[Dec\'h da] LT',
            lastWeek: 'dddd [paset da] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'a-benn %s',
            past: '%s \'zo',
            s: 'un nebeud segondenno\xF9',
            m: 'ur vunutenn',
            mm: relativeTimeWithMutation,
            h: 'un eur',
            hh: '%d eur',
            d: 'un devezh',
            dd: relativeTimeWithMutation,
            M: 'ur miz',
            MM: relativeTimeWithMutation,
            y: 'ur bloaz',
            yy: specialMutationForYears
        },
        ordinal: function (number) {
            var output = number === 1 ? 'a\xF1' : 'vet';
            return number + output;
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/bs', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
        case 'm':
            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
        case 'mm':
            if (number === 1) {
                result += 'minuta';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'minute';
            } else {
                result += 'minuta';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'jedan sat' : 'jednog sata';
        case 'hh':
            if (number === 1) {
                result += 'sat';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'sata';
            } else {
                result += 'sati';
            }
            return result;
        case 'dd':
            if (number === 1) {
                result += 'dan';
            } else {
                result += 'dana';
            }
            return result;
        case 'MM':
            if (number === 1) {
                result += 'mjesec';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'mjeseca';
            } else {
                result += 'mjeseci';
            }
            return result;
        case 'yy':
            if (number === 1) {
                result += 'godina';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'godine';
            } else {
                result += 'godina';
            }
            return result;
        }
    }
    return moment.lang('bs', {
        months: 'januar_februar_mart_april_maj_juni_juli_avgust_septembar_oktobar_novembar_decembar'.split('_'),
        monthsShort: 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_\u010Detvrtak_petak_subota'.split('_'),
        weekdaysShort: 'ned._pon._uto._sri._\u010Det._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_\u010De_pe_su'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY LT',
            LLLL: 'dddd, D. MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
                }
            },
            lastDay: '[ju\u010Der u] LT',
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                case 3:
                    return '[pro\u0161lu] dddd [u] LT';
                case 6:
                    return '[pro\u0161le] [subote] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[pro\u0161li] dddd [u] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'par sekundi',
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: 'dan',
            dd: translate,
            M: 'mjesec',
            MM: translate,
            y: 'godinu',
            yy: translate
        },
        ordinal: '%d.',
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/ca', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('ca', {
        months: 'gener_febrer_mar\xE7_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
        monthsShort: 'gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.'.split('_'),
        weekdays: 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
        weekdaysShort: 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
        weekdaysMin: 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd D MMMM YYYY LT'
        },
        calendar: {
            sameDay: function () {
                return '[avui a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            nextDay: function () {
                return '[dem\xE0 a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            lastDay: function () {
                return '[ahir a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            lastWeek: function () {
                return '[el] dddd [passat a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'en %s',
            past: 'fa %s',
            s: 'uns segons',
            m: 'un minut',
            mm: '%d minuts',
            h: 'una hora',
            hh: '%d hores',
            d: 'un dia',
            dd: '%d dies',
            M: 'un mes',
            MM: '%d mesos',
            y: 'un any',
            yy: '%d anys'
        },
        ordinal: '%d\xBA',
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/cs', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    var months = 'leden_\xFAnor_b\u0159ezen_duben_kv\u011Bten_\u010Derven_\u010Dervenec_srpen_z\xE1\u0159\xED_\u0159\xEDjen_listopad_prosinec'.split('_'), monthsShort = 'led_\xFAno_b\u0159e_dub_kv\u011B_\u010Dvn_\u010Dvc_srp_z\xE1\u0159_\u0159\xEDj_lis_pro'.split('_');
    function plural(n) {
        return n > 1 && n < 5 && ~~(n / 10) !== 1;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
        case 's':
            return withoutSuffix || isFuture ? 'p\xE1r sekund' : 'p\xE1r sekundami';
        case 'm':
            return withoutSuffix ? 'minuta' : isFuture ? 'minutu' : 'minutou';
        case 'mm':
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'minuty' : 'minut');
            } else {
                return result + 'minutami';
            }
            break;
        case 'h':
            return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
        case 'hh':
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'hodiny' : 'hodin');
            } else {
                return result + 'hodinami';
            }
            break;
        case 'd':
            return withoutSuffix || isFuture ? 'den' : 'dnem';
        case 'dd':
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'dny' : 'dn\xED');
            } else {
                return result + 'dny';
            }
            break;
        case 'M':
            return withoutSuffix || isFuture ? 'm\u011Bs\xEDc' : 'm\u011Bs\xEDcem';
        case 'MM':
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'm\u011Bs\xEDce' : 'm\u011Bs\xEDc\u016F');
            } else {
                return result + 'm\u011Bs\xEDci';
            }
            break;
        case 'y':
            return withoutSuffix || isFuture ? 'rok' : 'rokem';
        case 'yy':
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'roky' : 'let');
            } else {
                return result + 'lety';
            }
            break;
        }
    }
    return moment.lang('cs', {
        months: months,
        monthsShort: monthsShort,
        monthsParse: function (months, monthsShort) {
            var i, _monthsParse = [];
            for (i = 0; i < 12; i++) {
                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
            }
            return _monthsParse;
        }(months, monthsShort),
        weekdays: 'ned\u011Ble_pond\u011Bl\xED_\xFAter\xFD_st\u0159eda_\u010Dtvrtek_p\xE1tek_sobota'.split('_'),
        weekdaysShort: 'ne_po_\xFAt_st_\u010Dt_p\xE1_so'.split('_'),
        weekdaysMin: 'ne_po_\xFAt_st_\u010Dt_p\xE1_so'.split('_'),
        longDateFormat: {
            LT: 'H.mm',
            L: 'DD.\xA0MM.\xA0YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY LT',
            LLLL: 'dddd D. MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[dnes v] LT',
            nextDay: '[z\xEDtra v] LT',
            nextWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[v ned\u011Bli v] LT';
                case 1:
                case 2:
                    return '[v] dddd [v] LT';
                case 3:
                    return '[ve st\u0159edu v] LT';
                case 4:
                    return '[ve \u010Dtvrtek v] LT';
                case 5:
                    return '[v p\xE1tek v] LT';
                case 6:
                    return '[v sobotu v] LT';
                }
            },
            lastDay: '[v\u010Dera v] LT',
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[minulou ned\u011Bli v] LT';
                case 1:
                case 2:
                    return '[minul\xE9] dddd [v] LT';
                case 3:
                    return '[minulou st\u0159edu v] LT';
                case 4:
                case 5:
                    return '[minul\xFD] dddd [v] LT';
                case 6:
                    return '[minulou sobotu v] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'p\u0159ed %s',
            s: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate
        },
        ordinal: '%d.',
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/cv', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('cv', {
        months: '\u043A\u0103\u0440\u043B\u0430\u0447_\u043D\u0430\u0440\u0103\u0441_\u043F\u0443\u0448_\u0430\u043A\u0430_\u043C\u0430\u0439_\xE7\u0115\u0440\u0442\u043C\u0435_\u0443\u0442\u0103_\xE7\u0443\u0440\u043B\u0430_\u0430\u0432\u0103\u043D_\u044E\u043F\u0430_\u0447\u04F3\u043A_\u0440\u0430\u0448\u0442\u0430\u0432'.split('_'),
        monthsShort: '\u043A\u0103\u0440_\u043D\u0430\u0440_\u043F\u0443\u0448_\u0430\u043A\u0430_\u043C\u0430\u0439_\xE7\u0115\u0440_\u0443\u0442\u0103_\xE7\u0443\u0440_\u0430\u0432_\u044E\u043F\u0430_\u0447\u04F3\u043A_\u0440\u0430\u0448'.split('_'),
        weekdays: '\u0432\u044B\u0440\u0441\u0430\u0440\u043D\u0438\u043A\u0443\u043D_\u0442\u0443\u043D\u0442\u0438\u043A\u0443\u043D_\u044B\u0442\u043B\u0430\u0440\u0438\u043A\u0443\u043D_\u044E\u043D\u043A\u0443\u043D_\u043A\u0115\xE7\u043D\u0435\u0440\u043D\u0438\u043A\u0443\u043D_\u044D\u0440\u043D\u0435\u043A\u0443\u043D_\u0448\u0103\u043C\u0430\u0442\u043A\u0443\u043D'.split('_'),
        weekdaysShort: '\u0432\u044B\u0440_\u0442\u0443\u043D_\u044B\u0442\u043B_\u044E\u043D_\u043A\u0115\xE7_\u044D\u0440\u043D_\u0448\u0103\u043C'.split('_'),
        weekdaysMin: '\u0432\u0440_\u0442\u043D_\u044B\u0442_\u044E\u043D_\u043A\xE7_\u044D\u0440_\u0448\u043C'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD-MM-YYYY',
            LL: 'YYYY [\xE7\u0443\u043B\u0445\u0438] MMMM [\u0443\u0439\u0103\u0445\u0115\u043D] D[-\u043C\u0115\u0448\u0115]',
            LLL: 'YYYY [\xE7\u0443\u043B\u0445\u0438] MMMM [\u0443\u0439\u0103\u0445\u0115\u043D] D[-\u043C\u0115\u0448\u0115], LT',
            LLLL: 'dddd, YYYY [\xE7\u0443\u043B\u0445\u0438] MMMM [\u0443\u0439\u0103\u0445\u0115\u043D] D[-\u043C\u0115\u0448\u0115], LT'
        },
        calendar: {
            sameDay: '[\u041F\u0430\u044F\u043D] LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]',
            nextDay: '[\u042B\u0440\u0430\u043D] LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]',
            lastDay: '[\u0114\u043D\u0435\u0440] LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]',
            nextWeek: '[\xC7\u0438\u0442\u0435\u0441] dddd LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]',
            lastWeek: '[\u0418\u0440\u0442\u043D\u0115] dddd LT [\u0441\u0435\u0445\u0435\u0442\u0440\u0435]',
            sameElse: 'L'
        },
        relativeTime: {
            future: function (output) {
                var affix = /сехет$/i.exec(output) ? '\u0440\u0435\u043D' : /çул$/i.exec(output) ? '\u0442\u0430\u043D' : '\u0440\u0430\u043D';
                return output + affix;
            },
            past: '%s \u043A\u0430\u044F\u043B\u043B\u0430',
            s: '\u043F\u0115\u0440-\u0438\u043A \xE7\u0435\u043A\u043A\u0443\u043D\u0442',
            m: '\u043F\u0115\u0440 \u043C\u0438\u043D\u0443\u0442',
            mm: '%d \u043C\u0438\u043D\u0443\u0442',
            h: '\u043F\u0115\u0440 \u0441\u0435\u0445\u0435\u0442',
            hh: '%d \u0441\u0435\u0445\u0435\u0442',
            d: '\u043F\u0115\u0440 \u043A\u0443\u043D',
            dd: '%d \u043A\u0443\u043D',
            M: '\u043F\u0115\u0440 \u0443\u0439\u0103\u0445',
            MM: '%d \u0443\u0439\u0103\u0445',
            y: '\u043F\u0115\u0440 \xE7\u0443\u043B',
            yy: '%d \xE7\u0443\u043B'
        },
        ordinal: '%d-\u043C\u0115\u0448',
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/cy', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('cy', {
        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
        weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[Heddiw am] LT',
            nextDay: '[Yfory am] LT',
            nextWeek: 'dddd [am] LT',
            lastDay: '[Ddoe am] LT',
            lastWeek: 'dddd [diwethaf am] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'mewn %s',
            past: '%s yn \xF4l',
            s: 'ychydig eiliadau',
            m: 'munud',
            mm: '%d munud',
            h: 'awr',
            hh: '%d awr',
            d: 'diwrnod',
            dd: '%d diwrnod',
            M: 'mis',
            MM: '%d mis',
            y: 'blwyddyn',
            yy: '%d flynedd'
        },
        ordinal: function (number) {
            var b = number, output = '', lookup = [
                    '',
                    'af',
                    'il',
                    'ydd',
                    'ydd',
                    'ed',
                    'ed',
                    'ed',
                    'fed',
                    'fed',
                    'fed',
                    'eg',
                    'fed',
                    'eg',
                    'eg',
                    'fed',
                    'eg',
                    'eg',
                    'fed',
                    'eg',
                    'fed'
                ];
            if (b > 20) {
                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                    output = 'fed';
                } else {
                    output = 'ain';
                }
            } else if (b > 0) {
                output = lookup[b];
            }
            return number + output;
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/da', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('da', {
        months: 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 's\xF8ndag_mandag_tirsdag_onsdag_torsdag_fredag_l\xF8rdag'.split('_'),
        weekdaysShort: 's\xF8n_man_tir_ons_tor_fre_l\xF8r'.split('_'),
        weekdaysMin: 's\xF8_ma_ti_on_to_fr_l\xF8'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY LT',
            LLLL: 'dddd [d.] D. MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[I dag kl.] LT',
            nextDay: '[I morgen kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[I g\xE5r kl.] LT',
            lastWeek: '[sidste] dddd [kl] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'om %s',
            past: '%s siden',
            s: 'f\xE5 sekunder',
            m: 'et minut',
            mm: '%d minutter',
            h: 'en time',
            hh: '%d timer',
            d: 'en dag',
            dd: '%d dage',
            M: 'en m\xE5ned',
            MM: '%d m\xE5neder',
            y: 'et \xE5r',
            yy: '%d \xE5r'
        },
        ordinal: '%d.',
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/de-at', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
                'm': [
                    'eine Minute',
                    'einer Minute'
                ],
                'h': [
                    'eine Stunde',
                    'einer Stunde'
                ],
                'd': [
                    'ein Tag',
                    'einem Tag'
                ],
                'dd': [
                    number + ' Tage',
                    number + ' Tagen'
                ],
                'M': [
                    'ein Monat',
                    'einem Monat'
                ],
                'MM': [
                    number + ' Monate',
                    number + ' Monaten'
                ],
                'y': [
                    'ein Jahr',
                    'einem Jahr'
                ],
                'yy': [
                    number + ' Jahre',
                    number + ' Jahren'
                ]
            };
        return withoutSuffix ? format[key][0] : format[key][1];
    }
    return moment.lang('de-at', {
        months: 'J\xE4nner_Februar_M\xE4rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort: 'J\xE4n._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
        weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm [Uhr]',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY LT',
            LLLL: 'dddd, D. MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[Heute um] LT',
            sameElse: 'L',
            nextDay: '[Morgen um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[Gestern um] LT',
            lastWeek: '[letzten] dddd [um] LT'
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime
        },
        ordinal: '%d.',
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/de', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
                'm': [
                    'eine Minute',
                    'einer Minute'
                ],
                'h': [
                    'eine Stunde',
                    'einer Stunde'
                ],
                'd': [
                    'ein Tag',
                    'einem Tag'
                ],
                'dd': [
                    number + ' Tage',
                    number + ' Tagen'
                ],
                'M': [
                    'ein Monat',
                    'einem Monat'
                ],
                'MM': [
                    number + ' Monate',
                    number + ' Monaten'
                ],
                'y': [
                    'ein Jahr',
                    'einem Jahr'
                ],
                'yy': [
                    number + ' Jahre',
                    number + ' Jahren'
                ]
            };
        return withoutSuffix ? format[key][0] : format[key][1];
    }
    return moment.lang('de', {
        months: 'Januar_Februar_M\xE4rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort: 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
        weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm [Uhr]',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY LT',
            LLLL: 'dddd, D. MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[Heute um] LT',
            sameElse: 'L',
            nextDay: '[Morgen um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[Gestern um] LT',
            lastWeek: '[letzten] dddd [um] LT'
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime
        },
        ordinal: '%d.',
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/el', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('el', {
        monthsNominativeEl: '\u0399\u03B1\u03BD\u03BF\u03C5\u03AC\u03C1\u03B9\u03BF\u03C2_\u03A6\u03B5\u03B2\u03C1\u03BF\u03C5\u03AC\u03C1\u03B9\u03BF\u03C2_\u039C\u03AC\u03C1\u03C4\u03B9\u03BF\u03C2_\u0391\u03C0\u03C1\u03AF\u03BB\u03B9\u03BF\u03C2_\u039C\u03AC\u03B9\u03BF\u03C2_\u0399\u03BF\u03CD\u03BD\u03B9\u03BF\u03C2_\u0399\u03BF\u03CD\u03BB\u03B9\u03BF\u03C2_\u0391\u03CD\u03B3\u03BF\u03C5\u03C3\u03C4\u03BF\u03C2_\u03A3\u03B5\u03C0\u03C4\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2_\u039F\u03BA\u03C4\u03CE\u03B2\u03C1\u03B9\u03BF\u03C2_\u039D\u03BF\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2_\u0394\u03B5\u03BA\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2'.split('_'),
        monthsGenitiveEl: '\u0399\u03B1\u03BD\u03BF\u03C5\u03B1\u03C1\u03AF\u03BF\u03C5_\u03A6\u03B5\u03B2\u03C1\u03BF\u03C5\u03B1\u03C1\u03AF\u03BF\u03C5_\u039C\u03B1\u03C1\u03C4\u03AF\u03BF\u03C5_\u0391\u03C0\u03C1\u03B9\u03BB\u03AF\u03BF\u03C5_\u039C\u03B1\u0390\u03BF\u03C5_\u0399\u03BF\u03C5\u03BD\u03AF\u03BF\u03C5_\u0399\u03BF\u03C5\u03BB\u03AF\u03BF\u03C5_\u0391\u03C5\u03B3\u03BF\u03CD\u03C3\u03C4\u03BF\u03C5_\u03A3\u03B5\u03C0\u03C4\u03B5\u03BC\u03B2\u03C1\u03AF\u03BF\u03C5_\u039F\u03BA\u03C4\u03C9\u03B2\u03C1\u03AF\u03BF\u03C5_\u039D\u03BF\u03B5\u03BC\u03B2\u03C1\u03AF\u03BF\u03C5_\u0394\u03B5\u03BA\u03B5\u03BC\u03B2\u03C1\u03AF\u03BF\u03C5'.split('_'),
        months: function (momentToFormat, format) {
            if (/D/.test(format.substring(0, format.indexOf('MMMM')))) {
                return this._monthsGenitiveEl[momentToFormat.month()];
            } else {
                return this._monthsNominativeEl[momentToFormat.month()];
            }
        },
        monthsShort: '\u0399\u03B1\u03BD_\u03A6\u03B5\u03B2_\u039C\u03B1\u03C1_\u0391\u03C0\u03C1_\u039C\u03B1\u03CA_\u0399\u03BF\u03C5\u03BD_\u0399\u03BF\u03C5\u03BB_\u0391\u03C5\u03B3_\u03A3\u03B5\u03C0_\u039F\u03BA\u03C4_\u039D\u03BF\u03B5_\u0394\u03B5\u03BA'.split('_'),
        weekdays: '\u039A\u03C5\u03C1\u03B9\u03B1\u03BA\u03AE_\u0394\u03B5\u03C5\u03C4\u03AD\u03C1\u03B1_\u03A4\u03C1\u03AF\u03C4\u03B7_\u03A4\u03B5\u03C4\u03AC\u03C1\u03C4\u03B7_\u03A0\u03AD\u03BC\u03C0\u03C4\u03B7_\u03A0\u03B1\u03C1\u03B1\u03C3\u03BA\u03B5\u03C5\u03AE_\u03A3\u03AC\u03B2\u03B2\u03B1\u03C4\u03BF'.split('_'),
        weekdaysShort: '\u039A\u03C5\u03C1_\u0394\u03B5\u03C5_\u03A4\u03C1\u03B9_\u03A4\u03B5\u03C4_\u03A0\u03B5\u03BC_\u03A0\u03B1\u03C1_\u03A3\u03B1\u03B2'.split('_'),
        weekdaysMin: '\u039A\u03C5_\u0394\u03B5_\u03A4\u03C1_\u03A4\u03B5_\u03A0\u03B5_\u03A0\u03B1_\u03A3\u03B1'.split('_'),
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? '\u03BC\u03BC' : '\u039C\u039C';
            } else {
                return isLower ? '\u03C0\u03BC' : '\u03A0\u039C';
            }
        },
        longDateFormat: {
            LT: 'h:mm A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendarEl: {
            sameDay: '[\u03A3\u03AE\u03BC\u03B5\u03C1\u03B1 {}] LT',
            nextDay: '[\u0391\u03CD\u03C1\u03B9\u03BF {}] LT',
            nextWeek: 'dddd [{}] LT',
            lastDay: '[\u03A7\u03B8\u03B5\u03C2 {}] LT',
            lastWeek: function () {
                switch (this.day()) {
                case 6:
                    return '[\u03C4\u03BF \u03C0\u03C1\u03BF\u03B7\u03B3\u03BF\u03CD\u03BC\u03B5\u03BD\u03BF] dddd [{}] LT';
                default:
                    return '[\u03C4\u03B7\u03BD \u03C0\u03C1\u03BF\u03B7\u03B3\u03BF\u03CD\u03BC\u03B5\u03BD\u03B7] dddd [{}] LT';
                }
            },
            sameElse: 'L'
        },
        calendar: function (key, mom) {
            var output = this._calendarEl[key], hours = mom && mom.hours();
            if (typeof output === 'function') {
                output = output.apply(mom);
            }
            return output.replace('{}', hours % 12 === 1 ? '\u03C3\u03C4\u03B7' : '\u03C3\u03C4\u03B9\u03C2');
        },
        relativeTime: {
            future: '\u03C3\u03B5 %s',
            past: '%s \u03C0\u03C1\u03B9\u03BD',
            s: '\u03B4\u03B5\u03C5\u03C4\u03B5\u03C1\u03CC\u03BB\u03B5\u03C0\u03C4\u03B1',
            m: '\u03AD\u03BD\u03B1 \u03BB\u03B5\u03C0\u03C4\u03CC',
            mm: '%d \u03BB\u03B5\u03C0\u03C4\u03AC',
            h: '\u03BC\u03AF\u03B1 \u03CE\u03C1\u03B1',
            hh: '%d \u03CE\u03C1\u03B5\u03C2',
            d: '\u03BC\u03AF\u03B1 \u03BC\u03AD\u03C1\u03B1',
            dd: '%d \u03BC\u03AD\u03C1\u03B5\u03C2',
            M: '\u03AD\u03BD\u03B1\u03C2 \u03BC\u03AE\u03BD\u03B1\u03C2',
            MM: '%d \u03BC\u03AE\u03BD\u03B5\u03C2',
            y: '\u03AD\u03BD\u03B1\u03C2 \u03C7\u03C1\u03CC\u03BD\u03BF\u03C2',
            yy: '%d \u03C7\u03C1\u03CC\u03BD\u03B9\u03B1'
        },
        ordinal: function (number) {
            return number + '\u03B7';
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/en-au', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('en-au', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
        },
        ordinal: function (number) {
            var b = number % 10, output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/en-ca', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('en-ca', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM, YYYY',
            LLL: 'D MMMM, YYYY LT',
            LLLL: 'dddd, D MMMM, YYYY LT'
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
        },
        ordinal: function (number) {
            var b = number % 10, output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/en-gb', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('en-gb', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years'
        },
        ordinal: function (number) {
            var b = number % 10, output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/eo', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('eo', {
        months: 'januaro_februaro_marto_aprilo_majo_junio_julio_a\u016Dgusto_septembro_oktobro_novembro_decembro'.split('_'),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_a\u016Dg_sep_okt_nov_dec'.split('_'),
        weekdays: 'Diman\u0109o_Lundo_Mardo_Merkredo_\u0134a\u016Ddo_Vendredo_Sabato'.split('_'),
        weekdaysShort: 'Dim_Lun_Mard_Merk_\u0134a\u016D_Ven_Sab'.split('_'),
        weekdaysMin: 'Di_Lu_Ma_Me_\u0134a_Ve_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'YYYY-MM-DD',
            LL: 'D[-an de] MMMM, YYYY',
            LLL: 'D[-an de] MMMM, YYYY LT',
            LLLL: 'dddd, [la] D[-an de] MMMM, YYYY LT'
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'p.t.m.' : 'P.T.M.';
            } else {
                return isLower ? 'a.t.m.' : 'A.T.M.';
            }
        },
        calendar: {
            sameDay: '[Hodia\u016D je] LT',
            nextDay: '[Morga\u016D je] LT',
            nextWeek: 'dddd [je] LT',
            lastDay: '[Hiera\u016D je] LT',
            lastWeek: '[pasinta] dddd [je] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'je %s',
            past: 'anta\u016D %s',
            s: 'sekundoj',
            m: 'minuto',
            mm: '%d minutoj',
            h: 'horo',
            hh: '%d horoj',
            d: 'tago',
            dd: '%d tagoj',
            M: 'monato',
            MM: '%d monatoj',
            y: 'jaro',
            yy: '%d jaroj'
        },
        ordinal: '%da',
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/es', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'), monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');
    return moment.lang('es', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
        monthsShort: function (m, format) {
            if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        weekdays: 'domingo_lunes_martes_mi\xE9rcoles_jueves_viernes_s\xE1bado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mi\xE9._jue._vie._s\xE1b.'.split('_'),
        weekdaysMin: 'Do_Lu_Ma_Mi_Ju_Vi_S\xE1'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [del] YYYY',
            LLL: 'D [de] MMMM [del] YYYY LT',
            LLLL: 'dddd, D [de] MMMM [del] YYYY LT'
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[ma\xF1ana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return '[el] dddd [pasado a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un d\xEDa',
            dd: '%d d\xEDas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un a\xF1o',
            yy: '%d a\xF1os'
        },
        ordinal: '%d\xBA',
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/et', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
                's': [
                    'm\xF5ne sekundi',
                    'm\xF5ni sekund',
                    'paar sekundit'
                ],
                'm': [
                    '\xFChe minuti',
                    '\xFCks minut'
                ],
                'mm': [
                    number + ' minuti',
                    number + ' minutit'
                ],
                'h': [
                    '\xFChe tunni',
                    'tund aega',
                    '\xFCks tund'
                ],
                'hh': [
                    number + ' tunni',
                    number + ' tundi'
                ],
                'd': [
                    '\xFChe p\xE4eva',
                    '\xFCks p\xE4ev'
                ],
                'M': [
                    'kuu aja',
                    'kuu aega',
                    '\xFCks kuu'
                ],
                'MM': [
                    number + ' kuu',
                    number + ' kuud'
                ],
                'y': [
                    '\xFChe aasta',
                    'aasta',
                    '\xFCks aasta'
                ],
                'yy': [
                    number + ' aasta',
                    number + ' aastat'
                ]
            };
        if (withoutSuffix) {
            return format[key][2] ? format[key][2] : format[key][1];
        }
        return isFuture ? format[key][0] : format[key][1];
    }
    return moment.lang('et', {
        months: 'jaanuar_veebruar_m\xE4rts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
        monthsShort: 'jaan_veebr_m\xE4rts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
        weekdays: 'p\xFChap\xE4ev_esmasp\xE4ev_teisip\xE4ev_kolmap\xE4ev_neljap\xE4ev_reede_laup\xE4ev'.split('_'),
        weekdaysShort: 'P_E_T_K_N_R_L'.split('_'),
        weekdaysMin: 'P_E_T_K_N_R_L'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY LT',
            LLLL: 'dddd, D. MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[T\xE4na,] LT',
            nextDay: '[Homme,] LT',
            nextWeek: '[J\xE4rgmine] dddd LT',
            lastDay: '[Eile,] LT',
            lastWeek: '[Eelmine] dddd LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s p\xE4rast',
            past: '%s tagasi',
            s: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: '%d p\xE4eva',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime
        },
        ordinal: '%d.',
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/eu', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('eu', {
        months: 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
        monthsShort: 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
        weekdays: 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
        weekdaysShort: 'ig._al._ar._az._og._ol._lr.'.split('_'),
        weekdaysMin: 'ig_al_ar_az_og_ol_lr'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'YYYY-MM-DD',
            LL: 'YYYY[ko] MMMM[ren] D[a]',
            LLL: 'YYYY[ko] MMMM[ren] D[a] LT',
            LLLL: 'dddd, YYYY[ko] MMMM[ren] D[a] LT',
            l: 'YYYY-M-D',
            ll: 'YYYY[ko] MMM D[a]',
            lll: 'YYYY[ko] MMM D[a] LT',
            llll: 'ddd, YYYY[ko] MMM D[a] LT'
        },
        calendar: {
            sameDay: '[gaur] LT[etan]',
            nextDay: '[bihar] LT[etan]',
            nextWeek: 'dddd LT[etan]',
            lastDay: '[atzo] LT[etan]',
            lastWeek: '[aurreko] dddd LT[etan]',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s barru',
            past: 'duela %s',
            s: 'segundo batzuk',
            m: 'minutu bat',
            mm: '%d minutu',
            h: 'ordu bat',
            hh: '%d ordu',
            d: 'egun bat',
            dd: '%d egun',
            M: 'hilabete bat',
            MM: '%d hilabete',
            y: 'urte bat',
            yy: '%d urte'
        },
        ordinal: '%d.',
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/fa', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    var symbolMap = {
            '1': '\u06F1',
            '2': '\u06F2',
            '3': '\u06F3',
            '4': '\u06F4',
            '5': '\u06F5',
            '6': '\u06F6',
            '7': '\u06F7',
            '8': '\u06F8',
            '9': '\u06F9',
            '0': '\u06F0'
        }, numberMap = {
            '\u06F1': '1',
            '\u06F2': '2',
            '\u06F3': '3',
            '\u06F4': '4',
            '\u06F5': '5',
            '\u06F6': '6',
            '\u06F7': '7',
            '\u06F8': '8',
            '\u06F9': '9',
            '\u06F0': '0'
        };
    return moment.lang('fa', {
        months: '\u0698\u0627\u0646\u0648\u06CC\u0647_\u0641\u0648\u0631\u06CC\u0647_\u0645\u0627\u0631\u0633_\u0622\u0648\u0631\u06CC\u0644_\u0645\u0647_\u0698\u0648\u0626\u0646_\u0698\u0648\u0626\u06CC\u0647_\u0627\u0648\u062A_\u0633\u067E\u062A\u0627\u0645\u0628\u0631_\u0627\u06A9\u062A\u0628\u0631_\u0646\u0648\u0627\u0645\u0628\u0631_\u062F\u0633\u0627\u0645\u0628\u0631'.split('_'),
        monthsShort: '\u0698\u0627\u0646\u0648\u06CC\u0647_\u0641\u0648\u0631\u06CC\u0647_\u0645\u0627\u0631\u0633_\u0622\u0648\u0631\u06CC\u0644_\u0645\u0647_\u0698\u0648\u0626\u0646_\u0698\u0648\u0626\u06CC\u0647_\u0627\u0648\u062A_\u0633\u067E\u062A\u0627\u0645\u0628\u0631_\u0627\u06A9\u062A\u0628\u0631_\u0646\u0648\u0627\u0645\u0628\u0631_\u062F\u0633\u0627\u0645\u0628\u0631'.split('_'),
        weekdays: '\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u062C\u0645\u0639\u0647_\u0634\u0646\u0628\u0647'.split('_'),
        weekdaysShort: '\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u062C\u0645\u0639\u0647_\u0634\u0646\u0628\u0647'.split('_'),
        weekdaysMin: '\u06CC_\u062F_\u0633_\u0686_\u067E_\u062C_\u0634'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd, D MMMM YYYY LT'
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return '\u0642\u0628\u0644 \u0627\u0632 \u0638\u0647\u0631';
            } else {
                return '\u0628\u0639\u062F \u0627\u0632 \u0638\u0647\u0631';
            }
        },
        calendar: {
            sameDay: '[\u0627\u0645\u0631\u0648\u0632 \u0633\u0627\u0639\u062A] LT',
            nextDay: '[\u0641\u0631\u062F\u0627 \u0633\u0627\u0639\u062A] LT',
            nextWeek: 'dddd [\u0633\u0627\u0639\u062A] LT',
            lastDay: '[\u062F\u06CC\u0631\u0648\u0632 \u0633\u0627\u0639\u062A] LT',
            lastWeek: 'dddd [\u067E\u06CC\u0634] [\u0633\u0627\u0639\u062A] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '\u062F\u0631 %s',
            past: '%s \u067E\u06CC\u0634',
            s: '\u0686\u0646\u062F\u06CC\u0646 \u062B\u0627\u0646\u06CC\u0647',
            m: '\u06CC\u06A9 \u062F\u0642\u06CC\u0642\u0647',
            mm: '%d \u062F\u0642\u06CC\u0642\u0647',
            h: '\u06CC\u06A9 \u0633\u0627\u0639\u062A',
            hh: '%d \u0633\u0627\u0639\u062A',
            d: '\u06CC\u06A9 \u0631\u0648\u0632',
            dd: '%d \u0631\u0648\u0632',
            M: '\u06CC\u06A9 \u0645\u0627\u0647',
            MM: '%d \u0645\u0627\u0647',
            y: '\u06CC\u06A9 \u0633\u0627\u0644',
            yy: '%d \u0633\u0627\u0644'
        },
        preparse: function (string) {
            return string.replace(/[۰-۹]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '\u060C');
        },
        ordinal: '%d\u0645',
        week: {
            dow: 6,
            doy: 12
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/fi', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    var numbersPast = 'nolla yksi kaksi kolme nelj\xE4 viisi kuusi seitsem\xE4n kahdeksan yhdeks\xE4n'.split(' '), numbersFuture = [
            'nolla',
            'yhden',
            'kahden',
            'kolmen',
            'nelj\xE4n',
            'viiden',
            'kuuden',
            numbersPast[7],
            numbersPast[8],
            numbersPast[9]
        ];
    function translate(number, withoutSuffix, key, isFuture) {
        var result = '';
        switch (key) {
        case 's':
            return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
        case 'm':
            return isFuture ? 'minuutin' : 'minuutti';
        case 'mm':
            result = isFuture ? 'minuutin' : 'minuuttia';
            break;
        case 'h':
            return isFuture ? 'tunnin' : 'tunti';
        case 'hh':
            result = isFuture ? 'tunnin' : 'tuntia';
            break;
        case 'd':
            return isFuture ? 'p\xE4iv\xE4n' : 'p\xE4iv\xE4';
        case 'dd':
            result = isFuture ? 'p\xE4iv\xE4n' : 'p\xE4iv\xE4\xE4';
            break;
        case 'M':
            return isFuture ? 'kuukauden' : 'kuukausi';
        case 'MM':
            result = isFuture ? 'kuukauden' : 'kuukautta';
            break;
        case 'y':
            return isFuture ? 'vuoden' : 'vuosi';
        case 'yy':
            result = isFuture ? 'vuoden' : 'vuotta';
            break;
        }
        result = verbalNumber(number, isFuture) + ' ' + result;
        return result;
    }
    function verbalNumber(number, isFuture) {
        return number < 10 ? isFuture ? numbersFuture[number] : numbersPast[number] : number;
    }
    return moment.lang('fi', {
        months: 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kes\xE4kuu_hein\xE4kuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
        monthsShort: 'tammi_helmi_maalis_huhti_touko_kes\xE4_hein\xE4_elo_syys_loka_marras_joulu'.split('_'),
        weekdays: 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
        weekdaysShort: 'su_ma_ti_ke_to_pe_la'.split('_'),
        weekdaysMin: 'su_ma_ti_ke_to_pe_la'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            L: 'DD.MM.YYYY',
            LL: 'Do MMMM[ta] YYYY',
            LLL: 'Do MMMM[ta] YYYY, [klo] LT',
            LLLL: 'dddd, Do MMMM[ta] YYYY, [klo] LT',
            l: 'D.M.YYYY',
            ll: 'Do MMM YYYY',
            lll: 'Do MMM YYYY, [klo] LT',
            llll: 'ddd, Do MMM YYYY, [klo] LT'
        },
        calendar: {
            sameDay: '[t\xE4n\xE4\xE4n] [klo] LT',
            nextDay: '[huomenna] [klo] LT',
            nextWeek: 'dddd [klo] LT',
            lastDay: '[eilen] [klo] LT',
            lastWeek: '[viime] dddd[na] [klo] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s p\xE4\xE4st\xE4',
            past: '%s sitten',
            s: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate
        },
        ordinal: '%d.',
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/fo', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('fo', {
        months: 'januar_februar_mars_apr\xEDl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays: 'sunnudagur_m\xE1nadagur_t\xFDsdagur_mikudagur_h\xF3sdagur_fr\xEDggjadagur_leygardagur'.split('_'),
        weekdaysShort: 'sun_m\xE1n_t\xFDs_mik_h\xF3s_fr\xED_ley'.split('_'),
        weekdaysMin: 'su_m\xE1_t\xFD_mi_h\xF3_fr_le'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd D. MMMM, YYYY LT'
        },
        calendar: {
            sameDay: '[\xCD dag kl.] LT',
            nextDay: '[\xCD morgin kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[\xCD gj\xE1r kl.] LT',
            lastWeek: '[s\xED\xF0stu] dddd [kl] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'um %s',
            past: '%s s\xED\xF0ani',
            s: 'f\xE1 sekund',
            m: 'ein minutt',
            mm: '%d minuttir',
            h: 'ein t\xEDmi',
            hh: '%d t\xEDmar',
            d: 'ein dagur',
            dd: '%d dagar',
            M: 'ein m\xE1na\xF0i',
            MM: '%d m\xE1na\xF0ir',
            y: 'eitt \xE1r',
            yy: '%d \xE1r'
        },
        ordinal: '%d.',
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/fr-ca', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('fr-ca', {
        months: 'janvier_f\xE9vrier_mars_avril_mai_juin_juillet_ao\xFBt_septembre_octobre_novembre_d\xE9cembre'.split('_'),
        monthsShort: 'janv._f\xE9vr._mars_avr._mai_juin_juil._ao\xFBt_sept._oct._nov._d\xE9c.'.split('_'),
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd D MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[Aujourd\'hui \xE0] LT',
            nextDay: '[Demain \xE0] LT',
            nextWeek: 'dddd [\xE0] LT',
            lastDay: '[Hier \xE0] LT',
            lastWeek: 'dddd [dernier \xE0] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans'
        },
        ordinal: function (number) {
            return number + (number === 1 ? 'er' : '');
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/fr', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('fr', {
        months: 'janvier_f\xE9vrier_mars_avril_mai_juin_juillet_ao\xFBt_septembre_octobre_novembre_d\xE9cembre'.split('_'),
        monthsShort: 'janv._f\xE9vr._mars_avr._mai_juin_juil._ao\xFBt_sept._oct._nov._d\xE9c.'.split('_'),
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd D MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[Aujourd\'hui \xE0] LT',
            nextDay: '[Demain \xE0] LT',
            nextWeek: 'dddd [\xE0] LT',
            lastDay: '[Hier \xE0] LT',
            lastWeek: 'dddd [dernier \xE0] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans'
        },
        ordinal: function (number) {
            return number + (number === 1 ? 'er' : '');
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/gl', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('gl', {
        months: 'Xaneiro_Febreiro_Marzo_Abril_Maio_Xu\xF1o_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro'.split('_'),
        monthsShort: 'Xan._Feb._Mar._Abr._Mai._Xu\xF1._Xul._Ago._Set._Out._Nov._Dec.'.split('_'),
        weekdays: 'Domingo_Luns_Martes_M\xE9rcores_Xoves_Venres_S\xE1bado'.split('_'),
        weekdaysShort: 'Dom._Lun._Mar._M\xE9r._Xov._Ven._S\xE1b.'.split('_'),
        weekdaysMin: 'Do_Lu_Ma_M\xE9_Xo_Ve_S\xE1'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd D MMMM YYYY LT'
        },
        calendar: {
            sameDay: function () {
                return '[hoxe ' + (this.hours() !== 1 ? '\xE1s' : '\xE1') + '] LT';
            },
            nextDay: function () {
                return '[ma\xF1\xE1 ' + (this.hours() !== 1 ? '\xE1s' : '\xE1') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [' + (this.hours() !== 1 ? '\xE1s' : 'a') + '] LT';
            },
            lastDay: function () {
                return '[onte ' + (this.hours() !== 1 ? '\xE1' : 'a') + '] LT';
            },
            lastWeek: function () {
                return '[o] dddd [pasado ' + (this.hours() !== 1 ? '\xE1s' : 'a') + '] LT';
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: function (str) {
                if (str === 'uns segundos') {
                    return 'nuns segundos';
                }
                return 'en ' + str;
            },
            past: 'hai %s',
            s: 'uns segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'unha hora',
            hh: '%d horas',
            d: 'un d\xEDa',
            dd: '%d d\xEDas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un ano',
            yy: '%d anos'
        },
        ordinal: '%d\xBA',
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/he', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('he', {
        months: '\u05D9\u05E0\u05D5\u05D0\u05E8_\u05E4\u05D1\u05E8\u05D5\u05D0\u05E8_\u05DE\u05E8\u05E5_\u05D0\u05E4\u05E8\u05D9\u05DC_\u05DE\u05D0\u05D9_\u05D9\u05D5\u05E0\u05D9_\u05D9\u05D5\u05DC\u05D9_\u05D0\u05D5\u05D2\u05D5\u05E1\u05D8_\u05E1\u05E4\u05D8\u05DE\u05D1\u05E8_\u05D0\u05D5\u05E7\u05D8\u05D5\u05D1\u05E8_\u05E0\u05D5\u05D1\u05DE\u05D1\u05E8_\u05D3\u05E6\u05DE\u05D1\u05E8'.split('_'),
        monthsShort: '\u05D9\u05E0\u05D5\u05F3_\u05E4\u05D1\u05E8\u05F3_\u05DE\u05E8\u05E5_\u05D0\u05E4\u05E8\u05F3_\u05DE\u05D0\u05D9_\u05D9\u05D5\u05E0\u05D9_\u05D9\u05D5\u05DC\u05D9_\u05D0\u05D5\u05D2\u05F3_\u05E1\u05E4\u05D8\u05F3_\u05D0\u05D5\u05E7\u05F3_\u05E0\u05D5\u05D1\u05F3_\u05D3\u05E6\u05DE\u05F3'.split('_'),
        weekdays: '\u05E8\u05D0\u05E9\u05D5\u05DF_\u05E9\u05E0\u05D9_\u05E9\u05DC\u05D9\u05E9\u05D9_\u05E8\u05D1\u05D9\u05E2\u05D9_\u05D7\u05DE\u05D9\u05E9\u05D9_\u05E9\u05D9\u05E9\u05D9_\u05E9\u05D1\u05EA'.split('_'),
        weekdaysShort: '\u05D0\u05F3_\u05D1\u05F3_\u05D2\u05F3_\u05D3\u05F3_\u05D4\u05F3_\u05D5\u05F3_\u05E9\u05F3'.split('_'),
        weekdaysMin: '\u05D0_\u05D1_\u05D2_\u05D3_\u05D4_\u05D5_\u05E9'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D [\u05D1]MMMM YYYY',
            LLL: 'D [\u05D1]MMMM YYYY LT',
            LLLL: 'dddd, D [\u05D1]MMMM YYYY LT',
            l: 'D/M/YYYY',
            ll: 'D MMM YYYY',
            lll: 'D MMM YYYY LT',
            llll: 'ddd, D MMM YYYY LT'
        },
        calendar: {
            sameDay: '[\u05D4\u05D9\u05D5\u05DD \u05D1\u05BE]LT',
            nextDay: '[\u05DE\u05D7\u05E8 \u05D1\u05BE]LT',
            nextWeek: 'dddd [\u05D1\u05E9\u05E2\u05D4] LT',
            lastDay: '[\u05D0\u05EA\u05DE\u05D5\u05DC \u05D1\u05BE]LT',
            lastWeek: '[\u05D1\u05D9\u05D5\u05DD] dddd [\u05D4\u05D0\u05D7\u05E8\u05D5\u05DF \u05D1\u05E9\u05E2\u05D4] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '\u05D1\u05E2\u05D5\u05D3 %s',
            past: '\u05DC\u05E4\u05E0\u05D9 %s',
            s: '\u05DE\u05E1\u05E4\u05E8 \u05E9\u05E0\u05D9\u05D5\u05EA',
            m: '\u05D3\u05E7\u05D4',
            mm: '%d \u05D3\u05E7\u05D5\u05EA',
            h: '\u05E9\u05E2\u05D4',
            hh: function (number) {
                if (number === 2) {
                    return '\u05E9\u05E2\u05EA\u05D9\u05D9\u05DD';
                }
                return number + ' \u05E9\u05E2\u05D5\u05EA';
            },
            d: '\u05D9\u05D5\u05DD',
            dd: function (number) {
                if (number === 2) {
                    return '\u05D9\u05D5\u05DE\u05D9\u05D9\u05DD';
                }
                return number + ' \u05D9\u05DE\u05D9\u05DD';
            },
            M: '\u05D7\u05D5\u05D3\u05E9',
            MM: function (number) {
                if (number === 2) {
                    return '\u05D7\u05D5\u05D3\u05E9\u05D9\u05D9\u05DD';
                }
                return number + ' \u05D7\u05D5\u05D3\u05E9\u05D9\u05DD';
            },
            y: '\u05E9\u05E0\u05D4',
            yy: function (number) {
                if (number === 2) {
                    return '\u05E9\u05E0\u05EA\u05D9\u05D9\u05DD';
                }
                return number + ' \u05E9\u05E0\u05D9\u05DD';
            }
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/hi', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    var symbolMap = {
            '1': '\u0967',
            '2': '\u0968',
            '3': '\u0969',
            '4': '\u096A',
            '5': '\u096B',
            '6': '\u096C',
            '7': '\u096D',
            '8': '\u096E',
            '9': '\u096F',
            '0': '\u0966'
        }, numberMap = {
            '\u0967': '1',
            '\u0968': '2',
            '\u0969': '3',
            '\u096A': '4',
            '\u096B': '5',
            '\u096C': '6',
            '\u096D': '7',
            '\u096E': '8',
            '\u096F': '9',
            '\u0966': '0'
        };
    return moment.lang('hi', {
        months: '\u091C\u0928\u0935\u0930\u0940_\u092B\u093C\u0930\u0935\u0930\u0940_\u092E\u093E\u0930\u094D\u091A_\u0905\u092A\u094D\u0930\u0948\u0932_\u092E\u0908_\u091C\u0942\u0928_\u091C\u0941\u0932\u093E\u0908_\u0905\u0917\u0938\u094D\u0924_\u0938\u093F\u0924\u092E\u094D\u092C\u0930_\u0905\u0915\u094D\u091F\u0942\u092C\u0930_\u0928\u0935\u092E\u094D\u092C\u0930_\u0926\u093F\u0938\u092E\u094D\u092C\u0930'.split('_'),
        monthsShort: '\u091C\u0928._\u092B\u093C\u0930._\u092E\u093E\u0930\u094D\u091A_\u0905\u092A\u094D\u0930\u0948._\u092E\u0908_\u091C\u0942\u0928_\u091C\u0941\u0932._\u0905\u0917._\u0938\u093F\u0924._\u0905\u0915\u094D\u091F\u0942._\u0928\u0935._\u0926\u093F\u0938.'.split('_'),
        weekdays: '\u0930\u0935\u093F\u0935\u093E\u0930_\u0938\u094B\u092E\u0935\u093E\u0930_\u092E\u0902\u0917\u0932\u0935\u093E\u0930_\u092C\u0941\u0927\u0935\u093E\u0930_\u0917\u0941\u0930\u0942\u0935\u093E\u0930_\u0936\u0941\u0915\u094D\u0930\u0935\u093E\u0930_\u0936\u0928\u093F\u0935\u093E\u0930'.split('_'),
        weekdaysShort: '\u0930\u0935\u093F_\u0938\u094B\u092E_\u092E\u0902\u0917\u0932_\u092C\u0941\u0927_\u0917\u0941\u0930\u0942_\u0936\u0941\u0915\u094D\u0930_\u0936\u0928\u093F'.split('_'),
        weekdaysMin: '\u0930_\u0938\u094B_\u092E\u0902_\u092C\u0941_\u0917\u0941_\u0936\u0941_\u0936'.split('_'),
        longDateFormat: {
            LT: 'A h:mm \u092C\u091C\u0947',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, LT',
            LLLL: 'dddd, D MMMM YYYY, LT'
        },
        calendar: {
            sameDay: '[\u0906\u091C] LT',
            nextDay: '[\u0915\u0932] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[\u0915\u0932] LT',
            lastWeek: '[\u092A\u093F\u091B\u0932\u0947] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s \u092E\u0947\u0902',
            past: '%s \u092A\u0939\u0932\u0947',
            s: '\u0915\u0941\u091B \u0939\u0940 \u0915\u094D\u0937\u0923',
            m: '\u090F\u0915 \u092E\u093F\u0928\u091F',
            mm: '%d \u092E\u093F\u0928\u091F',
            h: '\u090F\u0915 \u0918\u0902\u091F\u093E',
            hh: '%d \u0918\u0902\u091F\u0947',
            d: '\u090F\u0915 \u0926\u093F\u0928',
            dd: '%d \u0926\u093F\u0928',
            M: '\u090F\u0915 \u092E\u0939\u0940\u0928\u0947',
            MM: '%d \u092E\u0939\u0940\u0928\u0947',
            y: '\u090F\u0915 \u0935\u0930\u094D\u0937',
            yy: '%d \u0935\u0930\u094D\u0937'
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return '\u0930\u093E\u0924';
            } else if (hour < 10) {
                return '\u0938\u0941\u092C\u0939';
            } else if (hour < 17) {
                return '\u0926\u094B\u092A\u0939\u0930';
            } else if (hour < 20) {
                return '\u0936\u093E\u092E';
            } else {
                return '\u0930\u093E\u0924';
            }
        },
        week: {
            dow: 0,
            doy: 6
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/hr', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
        case 'm':
            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
        case 'mm':
            if (number === 1) {
                result += 'minuta';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'minute';
            } else {
                result += 'minuta';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'jedan sat' : 'jednog sata';
        case 'hh':
            if (number === 1) {
                result += 'sat';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'sata';
            } else {
                result += 'sati';
            }
            return result;
        case 'dd':
            if (number === 1) {
                result += 'dan';
            } else {
                result += 'dana';
            }
            return result;
        case 'MM':
            if (number === 1) {
                result += 'mjesec';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'mjeseca';
            } else {
                result += 'mjeseci';
            }
            return result;
        case 'yy':
            if (number === 1) {
                result += 'godina';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'godine';
            } else {
                result += 'godina';
            }
            return result;
        }
    }
    return moment.lang('hr', {
        months: 'sje\u010Danj_velja\u010Da_o\u017Eujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_'),
        monthsShort: 'sje._vel._o\u017Eu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_\u010Detvrtak_petak_subota'.split('_'),
        weekdaysShort: 'ned._pon._uto._sri._\u010Det._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_\u010De_pe_su'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY LT',
            LLLL: 'dddd, D. MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
                }
            },
            lastDay: '[ju\u010Der u] LT',
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                case 3:
                    return '[pro\u0161lu] dddd [u] LT';
                case 6:
                    return '[pro\u0161le] [subote] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[pro\u0161li] dddd [u] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'par sekundi',
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: 'dan',
            dd: translate,
            M: 'mjesec',
            MM: translate,
            y: 'godinu',
            yy: translate
        },
        ordinal: '%d.',
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/hu', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    var weekEndings = 'vas\xE1rnap h\xE9tf\u0151n kedden szerd\xE1n cs\xFCt\xF6rt\xF6k\xF6n p\xE9nteken szombaton'.split(' ');
    function translate(number, withoutSuffix, key, isFuture) {
        var num = number, suffix;
        switch (key) {
        case 's':
            return isFuture || withoutSuffix ? 'n\xE9h\xE1ny m\xE1sodperc' : 'n\xE9h\xE1ny m\xE1sodperce';
        case 'm':
            return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
        case 'mm':
            return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
        case 'h':
            return 'egy' + (isFuture || withoutSuffix ? ' \xF3ra' : ' \xF3r\xE1ja');
        case 'hh':
            return num + (isFuture || withoutSuffix ? ' \xF3ra' : ' \xF3r\xE1ja');
        case 'd':
            return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
        case 'dd':
            return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
        case 'M':
            return 'egy' + (isFuture || withoutSuffix ? ' h\xF3nap' : ' h\xF3napja');
        case 'MM':
            return num + (isFuture || withoutSuffix ? ' h\xF3nap' : ' h\xF3napja');
        case 'y':
            return 'egy' + (isFuture || withoutSuffix ? ' \xE9v' : ' \xE9ve');
        case 'yy':
            return num + (isFuture || withoutSuffix ? ' \xE9v' : ' \xE9ve');
        }
        return '';
    }
    function week(isFuture) {
        return (isFuture ? '' : '[m\xFAlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
    }
    return moment.lang('hu', {
        months: 'janu\xE1r_febru\xE1r_m\xE1rcius_\xE1prilis_m\xE1jus_j\xFAnius_j\xFAlius_augusztus_szeptember_okt\xF3ber_november_december'.split('_'),
        monthsShort: 'jan_feb_m\xE1rc_\xE1pr_m\xE1j_j\xFAn_j\xFAl_aug_szept_okt_nov_dec'.split('_'),
        weekdays: 'vas\xE1rnap_h\xE9tf\u0151_kedd_szerda_cs\xFCt\xF6rt\xF6k_p\xE9ntek_szombat'.split('_'),
        weekdaysShort: 'vas_h\xE9t_kedd_sze_cs\xFCt_p\xE9n_szo'.split('_'),
        weekdaysMin: 'v_h_k_sze_cs_p_szo'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            L: 'YYYY.MM.DD.',
            LL: 'YYYY. MMMM D.',
            LLL: 'YYYY. MMMM D., LT',
            LLLL: 'YYYY. MMMM D., dddd LT'
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower === true ? 'de' : 'DE';
            } else {
                return isLower === true ? 'du' : 'DU';
            }
        },
        calendar: {
            sameDay: '[ma] LT[-kor]',
            nextDay: '[holnap] LT[-kor]',
            nextWeek: function () {
                return week.call(this, true);
            },
            lastDay: '[tegnap] LT[-kor]',
            lastWeek: function () {
                return week.call(this, false);
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s m\xFAlva',
            past: '%s',
            s: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate
        },
        ordinal: '%d.',
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/hy-am', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    function monthsCaseReplace(m, format) {
        var months = {
                'nominative': '\u0570\u0578\u0582\u0576\u057E\u0561\u0580_\u0583\u0565\u057F\u0580\u057E\u0561\u0580_\u0574\u0561\u0580\u057F_\u0561\u057A\u0580\u056B\u056C_\u0574\u0561\u0575\u056B\u057D_\u0570\u0578\u0582\u0576\u056B\u057D_\u0570\u0578\u0582\u056C\u056B\u057D_\u0585\u0563\u0578\u057D\u057F\u0578\u057D_\u057D\u0565\u057A\u057F\u0565\u0574\u0562\u0565\u0580_\u0570\u0578\u056F\u057F\u0565\u0574\u0562\u0565\u0580_\u0576\u0578\u0575\u0565\u0574\u0562\u0565\u0580_\u0564\u0565\u056F\u057F\u0565\u0574\u0562\u0565\u0580'.split('_'),
                'accusative': '\u0570\u0578\u0582\u0576\u057E\u0561\u0580\u056B_\u0583\u0565\u057F\u0580\u057E\u0561\u0580\u056B_\u0574\u0561\u0580\u057F\u056B_\u0561\u057A\u0580\u056B\u056C\u056B_\u0574\u0561\u0575\u056B\u057D\u056B_\u0570\u0578\u0582\u0576\u056B\u057D\u056B_\u0570\u0578\u0582\u056C\u056B\u057D\u056B_\u0585\u0563\u0578\u057D\u057F\u0578\u057D\u056B_\u057D\u0565\u057A\u057F\u0565\u0574\u0562\u0565\u0580\u056B_\u0570\u0578\u056F\u057F\u0565\u0574\u0562\u0565\u0580\u056B_\u0576\u0578\u0575\u0565\u0574\u0562\u0565\u0580\u056B_\u0564\u0565\u056F\u057F\u0565\u0574\u0562\u0565\u0580\u056B'.split('_')
            }, nounCase = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(format) ? 'accusative' : 'nominative';
        return months[nounCase][m.month()];
    }
    function monthsShortCaseReplace(m, format) {
        var monthsShort = '\u0570\u0576\u057E_\u0583\u057F\u0580_\u0574\u0580\u057F_\u0561\u057A\u0580_\u0574\u0575\u057D_\u0570\u0576\u057D_\u0570\u056C\u057D_\u0585\u0563\u057D_\u057D\u057A\u057F_\u0570\u056F\u057F_\u0576\u0574\u0562_\u0564\u056F\u057F'.split('_');
        return monthsShort[m.month()];
    }
    function weekdaysCaseReplace(m, format) {
        var weekdays = '\u056F\u056B\u0580\u0561\u056F\u056B_\u0565\u0580\u056F\u0578\u0582\u0577\u0561\u0562\u0569\u056B_\u0565\u0580\u0565\u0584\u0577\u0561\u0562\u0569\u056B_\u0579\u0578\u0580\u0565\u0584\u0577\u0561\u0562\u0569\u056B_\u0570\u056B\u0576\u0563\u0577\u0561\u0562\u0569\u056B_\u0578\u0582\u0580\u0562\u0561\u0569_\u0577\u0561\u0562\u0561\u0569'.split('_');
        return weekdays[m.day()];
    }
    return moment.lang('hy-am', {
        months: monthsCaseReplace,
        monthsShort: monthsShortCaseReplace,
        weekdays: weekdaysCaseReplace,
        weekdaysShort: '\u056F\u0580\u056F_\u0565\u0580\u056F_\u0565\u0580\u0584_\u0579\u0580\u0584_\u0570\u0576\u0563_\u0578\u0582\u0580\u0562_\u0577\u0562\u0569'.split('_'),
        weekdaysMin: '\u056F\u0580\u056F_\u0565\u0580\u056F_\u0565\u0580\u0584_\u0579\u0580\u0584_\u0570\u0576\u0563_\u0578\u0582\u0580\u0562_\u0577\u0562\u0569'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY \u0569.',
            LLL: 'D MMMM YYYY \u0569., LT',
            LLLL: 'dddd, D MMMM YYYY \u0569., LT'
        },
        calendar: {
            sameDay: '[\u0561\u0575\u057D\u0585\u0580] LT',
            nextDay: '[\u057E\u0561\u0572\u0568] LT',
            lastDay: '[\u0565\u0580\u0565\u056F] LT',
            nextWeek: function () {
                return 'dddd [\u0585\u0580\u0568 \u056A\u0561\u0574\u0568] LT';
            },
            lastWeek: function () {
                return '[\u0561\u0576\u0581\u0561\u056E] dddd [\u0585\u0580\u0568 \u056A\u0561\u0574\u0568] LT';
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s \u0570\u0565\u057F\u0578',
            past: '%s \u0561\u057C\u0561\u057B',
            s: '\u0574\u056B \u0584\u0561\u0576\u056B \u057E\u0561\u0575\u0580\u056F\u0575\u0561\u0576',
            m: '\u0580\u0578\u057A\u0565',
            mm: '%d \u0580\u0578\u057A\u0565',
            h: '\u056A\u0561\u0574',
            hh: '%d \u056A\u0561\u0574',
            d: '\u0585\u0580',
            dd: '%d \u0585\u0580',
            M: '\u0561\u0574\u056B\u057D',
            MM: '%d \u0561\u0574\u056B\u057D',
            y: '\u057F\u0561\u0580\u056B',
            yy: '%d \u057F\u0561\u0580\u056B'
        },
        meridiem: function (hour) {
            if (hour < 4) {
                return '\u0563\u056B\u0577\u0565\u0580\u057E\u0561';
            } else if (hour < 12) {
                return '\u0561\u057C\u0561\u057E\u0578\u057F\u057E\u0561';
            } else if (hour < 17) {
                return '\u0581\u0565\u0580\u0565\u056F\u057E\u0561';
            } else {
                return '\u0565\u0580\u0565\u056F\u0578\u0575\u0561\u0576';
            }
        },
        ordinal: function (number, period) {
            switch (period) {
            case 'DDD':
            case 'w':
            case 'W':
            case 'DDDo':
                if (number === 1) {
                    return number + '-\u056B\u0576';
                }
                return number + '-\u0580\u0564';
            default:
                return number;
            }
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/id', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('id', {
        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
        weekdays: 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
        weekdaysShort: 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] LT',
            LLLL: 'dddd, D MMMM YYYY [pukul] LT'
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'siang';
            } else if (hours < 19) {
                return 'sore';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Besok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kemarin pukul] LT',
            lastWeek: 'dddd [lalu pukul] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lalu',
            s: 'beberapa detik',
            m: 'semenit',
            mm: '%d menit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun'
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/is', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    function plural(n) {
        if (n % 100 === 11) {
            return true;
        } else if (n % 10 === 1) {
            return false;
        }
        return true;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
        case 's':
            return withoutSuffix || isFuture ? 'nokkrar sek\xFAndur' : 'nokkrum sek\xFAndum';
        case 'm':
            return withoutSuffix ? 'm\xEDn\xFAta' : 'm\xEDn\xFAtu';
        case 'mm':
            if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'm\xEDn\xFAtur' : 'm\xEDn\xFAtum');
            } else if (withoutSuffix) {
                return result + 'm\xEDn\xFAta';
            }
            return result + 'm\xEDn\xFAtu';
        case 'hh':
            if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
            }
            return result + 'klukkustund';
        case 'd':
            if (withoutSuffix) {
                return 'dagur';
            }
            return isFuture ? 'dag' : 'degi';
        case 'dd':
            if (plural(number)) {
                if (withoutSuffix) {
                    return result + 'dagar';
                }
                return result + (isFuture ? 'daga' : 'd\xF6gum');
            } else if (withoutSuffix) {
                return result + 'dagur';
            }
            return result + (isFuture ? 'dag' : 'degi');
        case 'M':
            if (withoutSuffix) {
                return 'm\xE1nu\xF0ur';
            }
            return isFuture ? 'm\xE1nu\xF0' : 'm\xE1nu\xF0i';
        case 'MM':
            if (plural(number)) {
                if (withoutSuffix) {
                    return result + 'm\xE1nu\xF0ir';
                }
                return result + (isFuture ? 'm\xE1nu\xF0i' : 'm\xE1nu\xF0um');
            } else if (withoutSuffix) {
                return result + 'm\xE1nu\xF0ur';
            }
            return result + (isFuture ? 'm\xE1nu\xF0' : 'm\xE1nu\xF0i');
        case 'y':
            return withoutSuffix || isFuture ? '\xE1r' : '\xE1ri';
        case 'yy':
            if (plural(number)) {
                return result + (withoutSuffix || isFuture ? '\xE1r' : '\xE1rum');
            }
            return result + (withoutSuffix || isFuture ? '\xE1r' : '\xE1ri');
        }
    }
    return moment.lang('is', {
        months: 'jan\xFAar_febr\xFAar_mars_apr\xEDl_ma\xED_j\xFAn\xED_j\xFAl\xED_\xE1g\xFAst_september_okt\xF3ber_n\xF3vember_desember'.split('_'),
        monthsShort: 'jan_feb_mar_apr_ma\xED_j\xFAn_j\xFAl_\xE1g\xFA_sep_okt_n\xF3v_des'.split('_'),
        weekdays: 'sunnudagur_m\xE1nudagur_\xFEri\xF0judagur_mi\xF0vikudagur_fimmtudagur_f\xF6studagur_laugardagur'.split('_'),
        weekdaysShort: 'sun_m\xE1n_\xFEri_mi\xF0_fim_f\xF6s_lau'.split('_'),
        weekdaysMin: 'Su_M\xE1_\xDEr_Mi_Fi_F\xF6_La'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            L: 'DD/MM/YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] LT',
            LLLL: 'dddd, D. MMMM YYYY [kl.] LT'
        },
        calendar: {
            sameDay: '[\xED dag kl.] LT',
            nextDay: '[\xE1 morgun kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[\xED g\xE6r kl.] LT',
            lastWeek: '[s\xED\xF0asta] dddd [kl.] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'eftir %s',
            past: 'fyrir %s s\xED\xF0an',
            s: translate,
            m: translate,
            mm: translate,
            h: 'klukkustund',
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate
        },
        ordinal: '%d.',
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/it', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('it', {
        months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
        monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
        weekdays: 'Domenica_Luned\xEC_Marted\xEC_Mercoled\xEC_Gioved\xEC_Venerd\xEC_Sabato'.split('_'),
        weekdaysShort: 'Dom_Lun_Mar_Mer_Gio_Ven_Sab'.split('_'),
        weekdaysMin: 'D_L_Ma_Me_G_V_S'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[Oggi alle] LT',
            nextDay: '[Domani alle] LT',
            nextWeek: 'dddd [alle] LT',
            lastDay: '[Ieri alle] LT',
            lastWeek: '[lo scorso] dddd [alle] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: function (s) {
                return (/^[0-9].+$/.test(s) ? 'tra' : 'in') + ' ' + s;
            },
            past: '%s fa',
            s: 'alcuni secondi',
            m: 'un minuto',
            mm: '%d minuti',
            h: 'un\'ora',
            hh: '%d ore',
            d: 'un giorno',
            dd: '%d giorni',
            M: 'un mese',
            MM: '%d mesi',
            y: 'un anno',
            yy: '%d anni'
        },
        ordinal: '%d\xBA',
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/ja', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('ja', {
        months: '1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708'.split('_'),
        monthsShort: '1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708'.split('_'),
        weekdays: '\u65E5\u66DC\u65E5_\u6708\u66DC\u65E5_\u706B\u66DC\u65E5_\u6C34\u66DC\u65E5_\u6728\u66DC\u65E5_\u91D1\u66DC\u65E5_\u571F\u66DC\u65E5'.split('_'),
        weekdaysShort: '\u65E5_\u6708_\u706B_\u6C34_\u6728_\u91D1_\u571F'.split('_'),
        weekdaysMin: '\u65E5_\u6708_\u706B_\u6C34_\u6728_\u91D1_\u571F'.split('_'),
        longDateFormat: {
            LT: 'Ah\u6642m\u5206',
            L: 'YYYY/MM/DD',
            LL: 'YYYY\u5E74M\u6708D\u65E5',
            LLL: 'YYYY\u5E74M\u6708D\u65E5LT',
            LLLL: 'YYYY\u5E74M\u6708D\u65E5LT dddd'
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return '\u5348\u524D';
            } else {
                return '\u5348\u5F8C';
            }
        },
        calendar: {
            sameDay: '[\u4ECA\u65E5] LT',
            nextDay: '[\u660E\u65E5] LT',
            nextWeek: '[\u6765\u9031]dddd LT',
            lastDay: '[\u6628\u65E5] LT',
            lastWeek: '[\u524D\u9031]dddd LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s\u5F8C',
            past: '%s\u524D',
            s: '\u6570\u79D2',
            m: '1\u5206',
            mm: '%d\u5206',
            h: '1\u6642\u9593',
            hh: '%d\u6642\u9593',
            d: '1\u65E5',
            dd: '%d\u65E5',
            M: '1\u30F6\u6708',
            MM: '%d\u30F6\u6708',
            y: '1\u5E74',
            yy: '%d\u5E74'
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/ka', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    function monthsCaseReplace(m, format) {
        var months = {
                'nominative': '\u10D8\u10D0\u10DC\u10D5\u10D0\u10E0\u10D8_\u10D7\u10D4\u10D1\u10D4\u10E0\u10D5\u10D0\u10DA\u10D8_\u10DB\u10D0\u10E0\u10E2\u10D8_\u10D0\u10DE\u10E0\u10D8\u10DA\u10D8_\u10DB\u10D0\u10D8\u10E1\u10D8_\u10D8\u10D5\u10DC\u10D8\u10E1\u10D8_\u10D8\u10D5\u10DA\u10D8\u10E1\u10D8_\u10D0\u10D2\u10D5\u10D8\u10E1\u10E2\u10DD_\u10E1\u10D4\u10E5\u10E2\u10D4\u10DB\u10D1\u10D4\u10E0\u10D8_\u10DD\u10E5\u10E2\u10DD\u10DB\u10D1\u10D4\u10E0\u10D8_\u10DC\u10DD\u10D4\u10DB\u10D1\u10D4\u10E0\u10D8_\u10D3\u10D4\u10D9\u10D4\u10DB\u10D1\u10D4\u10E0\u10D8'.split('_'),
                'accusative': '\u10D8\u10D0\u10DC\u10D5\u10D0\u10E0\u10E1_\u10D7\u10D4\u10D1\u10D4\u10E0\u10D5\u10D0\u10DA\u10E1_\u10DB\u10D0\u10E0\u10E2\u10E1_\u10D0\u10DE\u10E0\u10D8\u10DA\u10D8\u10E1_\u10DB\u10D0\u10D8\u10E1\u10E1_\u10D8\u10D5\u10DC\u10D8\u10E1\u10E1_\u10D8\u10D5\u10DA\u10D8\u10E1\u10E1_\u10D0\u10D2\u10D5\u10D8\u10E1\u10E2\u10E1_\u10E1\u10D4\u10E5\u10E2\u10D4\u10DB\u10D1\u10D4\u10E0\u10E1_\u10DD\u10E5\u10E2\u10DD\u10DB\u10D1\u10D4\u10E0\u10E1_\u10DC\u10DD\u10D4\u10DB\u10D1\u10D4\u10E0\u10E1_\u10D3\u10D4\u10D9\u10D4\u10DB\u10D1\u10D4\u10E0\u10E1'.split('_')
            }, nounCase = /D[oD] *MMMM?/.test(format) ? 'accusative' : 'nominative';
        return months[nounCase][m.month()];
    }
    function weekdaysCaseReplace(m, format) {
        var weekdays = {
                'nominative': '\u10D9\u10D5\u10D8\u10E0\u10D0_\u10DD\u10E0\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8_\u10E1\u10D0\u10DB\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8_\u10DD\u10D7\u10EE\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8_\u10EE\u10E3\u10D7\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8_\u10DE\u10D0\u10E0\u10D0\u10E1\u10D9\u10D4\u10D5\u10D8_\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8'.split('_'),
                'accusative': '\u10D9\u10D5\u10D8\u10E0\u10D0\u10E1_\u10DD\u10E0\u10E8\u10D0\u10D1\u10D0\u10D7\u10E1_\u10E1\u10D0\u10DB\u10E8\u10D0\u10D1\u10D0\u10D7\u10E1_\u10DD\u10D7\u10EE\u10E8\u10D0\u10D1\u10D0\u10D7\u10E1_\u10EE\u10E3\u10D7\u10E8\u10D0\u10D1\u10D0\u10D7\u10E1_\u10DE\u10D0\u10E0\u10D0\u10E1\u10D9\u10D4\u10D5\u10E1_\u10E8\u10D0\u10D1\u10D0\u10D7\u10E1'.split('_')
            }, nounCase = /(წინა|შემდეგ)/.test(format) ? 'accusative' : 'nominative';
        return weekdays[nounCase][m.day()];
    }
    return moment.lang('ka', {
        months: monthsCaseReplace,
        monthsShort: '\u10D8\u10D0\u10DC_\u10D7\u10D4\u10D1_\u10DB\u10D0\u10E0_\u10D0\u10DE\u10E0_\u10DB\u10D0\u10D8_\u10D8\u10D5\u10DC_\u10D8\u10D5\u10DA_\u10D0\u10D2\u10D5_\u10E1\u10D4\u10E5_\u10DD\u10E5\u10E2_\u10DC\u10DD\u10D4_\u10D3\u10D4\u10D9'.split('_'),
        weekdays: weekdaysCaseReplace,
        weekdaysShort: '\u10D9\u10D5\u10D8_\u10DD\u10E0\u10E8_\u10E1\u10D0\u10DB_\u10DD\u10D7\u10EE_\u10EE\u10E3\u10D7_\u10DE\u10D0\u10E0_\u10E8\u10D0\u10D1'.split('_'),
        weekdaysMin: '\u10D9\u10D5_\u10DD\u10E0_\u10E1\u10D0_\u10DD\u10D7_\u10EE\u10E3_\u10DE\u10D0_\u10E8\u10D0'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[\u10D3\u10E6\u10D4\u10E1] LT[-\u10D6\u10D4]',
            nextDay: '[\u10EE\u10D5\u10D0\u10DA] LT[-\u10D6\u10D4]',
            lastDay: '[\u10D2\u10E3\u10E8\u10D8\u10DC] LT[-\u10D6\u10D4]',
            nextWeek: '[\u10E8\u10D4\u10DB\u10D3\u10D4\u10D2] dddd LT[-\u10D6\u10D4]',
            lastWeek: '[\u10EC\u10D8\u10DC\u10D0] dddd LT-\u10D6\u10D4',
            sameElse: 'L'
        },
        relativeTime: {
            future: function (s) {
                return /(წამი|წუთი|საათი|წელი)/.test(s) ? s.replace(/ი$/, '\u10E8\u10D8') : s + '\u10E8\u10D8';
            },
            past: function (s) {
                if (/(წამი|წუთი|საათი|დღე|თვე)/.test(s)) {
                    return s.replace(/(ი|ე)$/, '\u10D8\u10E1 \u10EC\u10D8\u10DC');
                }
                if (/წელი/.test(s)) {
                    return s.replace(/წელი$/, '\u10EC\u10DA\u10D8\u10E1 \u10EC\u10D8\u10DC');
                }
            },
            s: '\u10E0\u10D0\u10DB\u10D3\u10D4\u10DC\u10D8\u10DB\u10D4 \u10EC\u10D0\u10DB\u10D8',
            m: '\u10EC\u10E3\u10D7\u10D8',
            mm: '%d \u10EC\u10E3\u10D7\u10D8',
            h: '\u10E1\u10D0\u10D0\u10D7\u10D8',
            hh: '%d \u10E1\u10D0\u10D0\u10D7\u10D8',
            d: '\u10D3\u10E6\u10D4',
            dd: '%d \u10D3\u10E6\u10D4',
            M: '\u10D7\u10D5\u10D4',
            MM: '%d \u10D7\u10D5\u10D4',
            y: '\u10EC\u10D4\u10DA\u10D8',
            yy: '%d \u10EC\u10D4\u10DA\u10D8'
        },
        ordinal: function (number) {
            if (number === 0) {
                return number;
            }
            if (number === 1) {
                return number + '-\u10DA\u10D8';
            }
            if (number < 20 || number <= 100 && number % 20 === 0 || number % 100 === 0) {
                return '\u10DB\u10D4-' + number;
            }
            return number + '-\u10D4';
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/km', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('km', {
        months: '\u1798\u1780\u179A\u17B6_\u1780\u17BB\u1798\u17D2\u1797\u17C8_\u1798\u17B7\u1793\u17B6_\u1798\u17C1\u179F\u17B6_\u17A7\u179F\u1797\u17B6_\u1798\u17B7\u1790\u17BB\u1793\u17B6_\u1780\u1780\u17D2\u1780\u178A\u17B6_\u179F\u17B8\u17A0\u17B6_\u1780\u1789\u17D2\u1789\u17B6_\u178F\u17BB\u179B\u17B6_\u179C\u17B7\u1785\u17D2\u1786\u17B7\u1780\u17B6_\u1792\u17D2\u1793\u17BC'.split('_'),
        monthsShort: '\u1798\u1780\u179A\u17B6_\u1780\u17BB\u1798\u17D2\u1797\u17C8_\u1798\u17B7\u1793\u17B6_\u1798\u17C1\u179F\u17B6_\u17A7\u179F\u1797\u17B6_\u1798\u17B7\u1790\u17BB\u1793\u17B6_\u1780\u1780\u17D2\u1780\u178A\u17B6_\u179F\u17B8\u17A0\u17B6_\u1780\u1789\u17D2\u1789\u17B6_\u178F\u17BB\u179B\u17B6_\u179C\u17B7\u1785\u17D2\u1786\u17B7\u1780\u17B6_\u1792\u17D2\u1793\u17BC'.split('_'),
        weekdays: '\u17A2\u17B6\u1791\u17B7\u178F\u17D2\u1799_\u1785\u17D0\u1793\u17D2\u1791_\u17A2\u1784\u17D2\u1782\u17B6\u179A_\u1796\u17BB\u1792_\u1796\u17D2\u179A\u17A0\u179F\u17D2\u1794\u178F\u17B7\u17CD_\u179F\u17BB\u1780\u17D2\u179A_\u179F\u17C5\u179A\u17CD'.split('_'),
        weekdaysShort: '\u17A2\u17B6\u1791\u17B7\u178F\u17D2\u1799_\u1785\u17D0\u1793\u17D2\u1791_\u17A2\u1784\u17D2\u1782\u17B6\u179A_\u1796\u17BB\u1792_\u1796\u17D2\u179A\u17A0\u179F\u17D2\u1794\u178F\u17B7\u17CD_\u179F\u17BB\u1780\u17D2\u179A_\u179F\u17C5\u179A\u17CD'.split('_'),
        weekdaysMin: '\u17A2\u17B6\u1791\u17B7\u178F\u17D2\u1799_\u1785\u17D0\u1793\u17D2\u1791_\u17A2\u1784\u17D2\u1782\u17B6\u179A_\u1796\u17BB\u1792_\u1796\u17D2\u179A\u17A0\u179F\u17D2\u1794\u178F\u17B7\u17CD_\u179F\u17BB\u1780\u17D2\u179A_\u179F\u17C5\u179A\u17CD'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[\u1790\u17D2\u1784\u17C3\u1793\u17C8 \u1798\u17C9\u17C4\u1784] LT',
            nextDay: '[\u179F\u17D2\u17A2\u17C2\u1780 \u1798\u17C9\u17C4\u1784] LT',
            nextWeek: 'dddd [\u1798\u17C9\u17C4\u1784] LT',
            lastDay: '[\u1798\u17D2\u179F\u17B7\u179B\u1798\u17B7\u1789 \u1798\u17C9\u17C4\u1784] LT',
            lastWeek: 'dddd [\u179F\u1794\u17D2\u178F\u17B6\u17A0\u17CD\u1798\u17BB\u1793] [\u1798\u17C9\u17C4\u1784] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s\u1791\u17C0\u178F',
            past: '%s\u1798\u17BB\u1793',
            s: '\u1794\u17C9\u17BB\u1793\u17D2\u1798\u17B6\u1793\u179C\u17B7\u1793\u17B6\u1791\u17B8',
            m: '\u1798\u17BD\u1799\u1793\u17B6\u1791\u17B8',
            mm: '%d \u1793\u17B6\u1791\u17B8',
            h: '\u1798\u17BD\u1799\u1798\u17C9\u17C4\u1784',
            hh: '%d \u1798\u17C9\u17C4\u1784',
            d: '\u1798\u17BD\u1799\u1790\u17D2\u1784\u17C3',
            dd: '%d \u1790\u17D2\u1784\u17C3',
            M: '\u1798\u17BD\u1799\u1781\u17C2',
            MM: '%d \u1781\u17C2',
            y: '\u1798\u17BD\u1799\u1786\u17D2\u1793\u17B6\u17C6',
            yy: '%d \u1786\u17D2\u1793\u17B6\u17C6'
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/ko', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('ko', {
        months: '1\uC6D4_2\uC6D4_3\uC6D4_4\uC6D4_5\uC6D4_6\uC6D4_7\uC6D4_8\uC6D4_9\uC6D4_10\uC6D4_11\uC6D4_12\uC6D4'.split('_'),
        monthsShort: '1\uC6D4_2\uC6D4_3\uC6D4_4\uC6D4_5\uC6D4_6\uC6D4_7\uC6D4_8\uC6D4_9\uC6D4_10\uC6D4_11\uC6D4_12\uC6D4'.split('_'),
        weekdays: '\uC77C\uC694\uC77C_\uC6D4\uC694\uC77C_\uD654\uC694\uC77C_\uC218\uC694\uC77C_\uBAA9\uC694\uC77C_\uAE08\uC694\uC77C_\uD1A0\uC694\uC77C'.split('_'),
        weekdaysShort: '\uC77C_\uC6D4_\uD654_\uC218_\uBAA9_\uAE08_\uD1A0'.split('_'),
        weekdaysMin: '\uC77C_\uC6D4_\uD654_\uC218_\uBAA9_\uAE08_\uD1A0'.split('_'),
        longDateFormat: {
            LT: 'A h\uC2DC mm\uBD84',
            L: 'YYYY.MM.DD',
            LL: 'YYYY\uB144 MMMM D\uC77C',
            LLL: 'YYYY\uB144 MMMM D\uC77C LT',
            LLLL: 'YYYY\uB144 MMMM D\uC77C dddd LT'
        },
        meridiem: function (hour, minute, isUpper) {
            return hour < 12 ? '\uC624\uC804' : '\uC624\uD6C4';
        },
        calendar: {
            sameDay: '\uC624\uB298 LT',
            nextDay: '\uB0B4\uC77C LT',
            nextWeek: 'dddd LT',
            lastDay: '\uC5B4\uC81C LT',
            lastWeek: '\uC9C0\uB09C\uC8FC dddd LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s \uD6C4',
            past: '%s \uC804',
            s: '\uBA87\uCD08',
            ss: '%d\uCD08',
            m: '\uC77C\uBD84',
            mm: '%d\uBD84',
            h: '\uD55C\uC2DC\uAC04',
            hh: '%d\uC2DC\uAC04',
            d: '\uD558\uB8E8',
            dd: '%d\uC77C',
            M: '\uD55C\uB2EC',
            MM: '%d\uB2EC',
            y: '\uC77C\uB144',
            yy: '%d\uB144'
        },
        ordinal: '%d\uC77C',
        meridiemParse: /(오전|오후)/,
        isPM: function (token) {
            return token === '\uC624\uD6C4';
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/lb', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
                'm': [
                    'eng Minutt',
                    'enger Minutt'
                ],
                'h': [
                    'eng Stonn',
                    'enger Stonn'
                ],
                'd': [
                    'een Dag',
                    'engem Dag'
                ],
                'dd': [
                    number + ' Deeg',
                    number + ' Deeg'
                ],
                'M': [
                    'ee Mount',
                    'engem Mount'
                ],
                'MM': [
                    number + ' M\xE9int',
                    number + ' M\xE9int'
                ],
                'y': [
                    'ee Joer',
                    'engem Joer'
                ],
                'yy': [
                    number + ' Joer',
                    number + ' Joer'
                ]
            };
        return withoutSuffix ? format[key][0] : format[key][1];
    }
    function processFutureTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'a ' + string;
        }
        return 'an ' + string;
    }
    function processPastTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'viru ' + string;
        }
        return 'virun ' + string;
    }
    function processLastWeek(string1) {
        var weekday = this.format('d');
        if (eifelerRegelAppliesToWeekday(weekday)) {
            return '[Leschte] dddd [um] LT';
        }
        return '[Leschten] dddd [um] LT';
    }
    function eifelerRegelAppliesToWeekday(weekday) {
        weekday = parseInt(weekday, 10);
        switch (weekday) {
        case 0:
        case 1:
        case 3:
        case 5:
        case 6:
            return true;
        default:
            return false;
        }
    }
    function eifelerRegelAppliesToNumber(number) {
        number = parseInt(number, 10);
        if (isNaN(number)) {
            return false;
        }
        if (number < 0) {
            return true;
        } else if (number < 10) {
            if (4 <= number && number <= 7) {
                return true;
            }
            return false;
        } else if (number < 100) {
            var lastDigit = number % 10, firstDigit = number / 10;
            if (lastDigit === 0) {
                return eifelerRegelAppliesToNumber(firstDigit);
            }
            return eifelerRegelAppliesToNumber(lastDigit);
        } else if (number < 10000) {
            while (number >= 10) {
                number = number / 10;
            }
            return eifelerRegelAppliesToNumber(number);
        } else {
            number = number / 1000;
            return eifelerRegelAppliesToNumber(number);
        }
    }
    return moment.lang('lb', {
        months: 'Januar_Februar_M\xE4erz_Abr\xEBll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
        weekdays: 'Sonndeg_M\xE9indeg_D\xEBnschdeg_M\xEBttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
        weekdaysShort: 'So._M\xE9._D\xEB._M\xEB._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_M\xE9_D\xEB_M\xEB_Do_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'H:mm [Auer]',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY LT',
            LLLL: 'dddd, D. MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[Haut um] LT',
            sameElse: 'L',
            nextDay: '[Muer um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[G\xEBschter um] LT',
            lastWeek: processLastWeek
        },
        relativeTime: {
            future: processFutureTime,
            past: processPastTime,
            s: 'e puer Sekonnen',
            m: processRelativeTime,
            mm: '%d Minutten',
            h: processRelativeTime,
            hh: '%d Stonnen',
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime
        },
        ordinal: '%d.',
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/lt', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    var units = {
            'm': 'minut\u0117_minut\u0117s_minut\u0119',
            'mm': 'minut\u0117s_minu\u010Di\u0173_minutes',
            'h': 'valanda_valandos_valand\u0105',
            'hh': 'valandos_valand\u0173_valandas',
            'd': 'diena_dienos_dien\u0105',
            'dd': 'dienos_dien\u0173_dienas',
            'M': 'm\u0117nuo_m\u0117nesio_m\u0117nes\u012F',
            'MM': 'm\u0117nesiai_m\u0117nesi\u0173_m\u0117nesius',
            'y': 'metai_met\u0173_metus',
            'yy': 'metai_met\u0173_metus'
        }, weekDays = 'sekmadienis_pirmadienis_antradienis_tre\u010Diadienis_ketvirtadienis_penktadienis_\u0161e\u0161tadienis'.split('_');
    function translateSeconds(number, withoutSuffix, key, isFuture) {
        if (withoutSuffix) {
            return 'kelios sekund\u0117s';
        } else {
            return isFuture ? 'keli\u0173 sekund\u017Ei\u0173' : 'kelias sekundes';
        }
    }
    function translateSingular(number, withoutSuffix, key, isFuture) {
        return withoutSuffix ? forms(key)[0] : isFuture ? forms(key)[1] : forms(key)[2];
    }
    function special(number) {
        return number % 10 === 0 || number > 10 && number < 20;
    }
    function forms(key) {
        return units[key].split('_');
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        if (number === 1) {
            return result + translateSingular(number, withoutSuffix, key[0], isFuture);
        } else if (withoutSuffix) {
            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
        } else {
            if (isFuture) {
                return result + forms(key)[1];
            } else {
                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
            }
        }
    }
    function relativeWeekDay(moment, format) {
        var nominative = format.indexOf('dddd HH:mm') === -1, weekDay = weekDays[moment.day()];
        return nominative ? weekDay : weekDay.substring(0, weekDay.length - 2) + '\u012F';
    }
    return moment.lang('lt', {
        months: 'sausio_vasario_kovo_baland\u017Eio_gegu\u017E\u0117s_bir\u017E\u0117lio_liepos_rugpj\u016B\u010Dio_rugs\u0117jo_spalio_lapkri\u010Dio_gruod\u017Eio'.split('_'),
        monthsShort: 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
        weekdays: relativeWeekDay,
        weekdaysShort: 'Sek_Pir_Ant_Tre_Ket_Pen_\u0160e\u0161'.split('_'),
        weekdaysMin: 'S_P_A_T_K_Pn_\u0160'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'YYYY-MM-DD',
            LL: 'YYYY [m.] MMMM D [d.]',
            LLL: 'YYYY [m.] MMMM D [d.], LT [val.]',
            LLLL: 'YYYY [m.] MMMM D [d.], dddd, LT [val.]',
            l: 'YYYY-MM-DD',
            ll: 'YYYY [m.] MMMM D [d.]',
            lll: 'YYYY [m.] MMMM D [d.], LT [val.]',
            llll: 'YYYY [m.] MMMM D [d.], ddd, LT [val.]'
        },
        calendar: {
            sameDay: '[\u0160iandien] LT',
            nextDay: '[Rytoj] LT',
            nextWeek: 'dddd LT',
            lastDay: '[Vakar] LT',
            lastWeek: '[Pra\u0117jus\u012F] dddd LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'po %s',
            past: 'prie\u0161 %s',
            s: translateSeconds,
            m: translateSingular,
            mm: translate,
            h: translateSingular,
            hh: translate,
            d: translateSingular,
            dd: translate,
            M: translateSingular,
            MM: translate,
            y: translateSingular,
            yy: translate
        },
        ordinal: function (number) {
            return number + '-oji';
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/lv', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    var units = {
            'mm': 'min\u016Bti_min\u016Btes_min\u016Bte_min\u016Btes',
            'hh': 'stundu_stundas_stunda_stundas',
            'dd': 'dienu_dienas_diena_dienas',
            'MM': 'm\u0113nesi_m\u0113ne\u0161us_m\u0113nesis_m\u0113ne\u0161i',
            'yy': 'gadu_gadus_gads_gadi'
        };
    function format(word, number, withoutSuffix) {
        var forms = word.split('_');
        if (withoutSuffix) {
            return number % 10 === 1 && number !== 11 ? forms[2] : forms[3];
        } else {
            return number % 10 === 1 && number !== 11 ? forms[0] : forms[1];
        }
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        return number + ' ' + format(units[key], number, withoutSuffix);
    }
    return moment.lang('lv', {
        months: 'janv\u0101ris_febru\u0101ris_marts_apr\u012Blis_maijs_j\u016Bnijs_j\u016Blijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
        monthsShort: 'jan_feb_mar_apr_mai_j\u016Bn_j\u016Bl_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 'sv\u0113tdiena_pirmdiena_otrdiena_tre\u0161diena_ceturtdiena_piektdiena_sestdiena'.split('_'),
        weekdaysShort: 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysMin: 'Sv_P_O_T_C_Pk_S'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD.MM.YYYY',
            LL: 'YYYY. [gada] D. MMMM',
            LLL: 'YYYY. [gada] D. MMMM, LT',
            LLLL: 'YYYY. [gada] D. MMMM, dddd, LT'
        },
        calendar: {
            sameDay: '[\u0160odien pulksten] LT',
            nextDay: '[R\u012Bt pulksten] LT',
            nextWeek: 'dddd [pulksten] LT',
            lastDay: '[Vakar pulksten] LT',
            lastWeek: '[Pag\u0101ju\u0161\u0101] dddd [pulksten] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s v\u0113l\u0101k',
            past: '%s agr\u0101k',
            s: 'da\u017Eas sekundes',
            m: 'min\u016Bti',
            mm: relativeTimeWithPlural,
            h: 'stundu',
            hh: relativeTimeWithPlural,
            d: 'dienu',
            dd: relativeTimeWithPlural,
            M: 'm\u0113nesi',
            MM: relativeTimeWithPlural,
            y: 'gadu',
            yy: relativeTimeWithPlural
        },
        ordinal: '%d.',
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/mk', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('mk', {
        months: '\u0458\u0430\u043D\u0443\u0430\u0440\u0438_\u0444\u0435\u0432\u0440\u0443\u0430\u0440\u0438_\u043C\u0430\u0440\u0442_\u0430\u043F\u0440\u0438\u043B_\u043C\u0430\u0458_\u0458\u0443\u043D\u0438_\u0458\u0443\u043B\u0438_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043F\u0442\u0435\u043C\u0432\u0440\u0438_\u043E\u043A\u0442\u043E\u043C\u0432\u0440\u0438_\u043D\u043E\u0435\u043C\u0432\u0440\u0438_\u0434\u0435\u043A\u0435\u043C\u0432\u0440\u0438'.split('_'),
        monthsShort: '\u0458\u0430\u043D_\u0444\u0435\u0432_\u043C\u0430\u0440_\u0430\u043F\u0440_\u043C\u0430\u0458_\u0458\u0443\u043D_\u0458\u0443\u043B_\u0430\u0432\u0433_\u0441\u0435\u043F_\u043E\u043A\u0442_\u043D\u043E\u0435_\u0434\u0435\u043A'.split('_'),
        weekdays: '\u043D\u0435\u0434\u0435\u043B\u0430_\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u043D\u0438\u043A_\u0432\u0442\u043E\u0440\u043D\u0438\u043A_\u0441\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0440\u0442\u043E\u043A_\u043F\u0435\u0442\u043E\u043A_\u0441\u0430\u0431\u043E\u0442\u0430'.split('_'),
        weekdaysShort: '\u043D\u0435\u0434_\u043F\u043E\u043D_\u0432\u0442\u043E_\u0441\u0440\u0435_\u0447\u0435\u0442_\u043F\u0435\u0442_\u0441\u0430\u0431'.split('_'),
        weekdaysMin: '\u043De_\u043Fo_\u0432\u0442_\u0441\u0440_\u0447\u0435_\u043F\u0435_\u0441a'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            L: 'D.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[\u0414\u0435\u043D\u0435\u0441 \u0432\u043E] LT',
            nextDay: '[\u0423\u0442\u0440\u0435 \u0432\u043E] LT',
            nextWeek: 'dddd [\u0432\u043E] LT',
            lastDay: '[\u0412\u0447\u0435\u0440\u0430 \u0432\u043E] LT',
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 6:
                    return '[\u0412\u043E \u0438\u0437\u043C\u0438\u043D\u0430\u0442\u0430\u0442\u0430] dddd [\u0432\u043E] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[\u0412\u043E \u0438\u0437\u043C\u0438\u043D\u0430\u0442\u0438\u043E\u0442] dddd [\u0432\u043E] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: '\u043F\u043E\u0441\u043B\u0435 %s',
            past: '\u043F\u0440\u0435\u0434 %s',
            s: '\u043D\u0435\u043A\u043E\u043B\u043A\u0443 \u0441\u0435\u043A\u0443\u043D\u0434\u0438',
            m: '\u043C\u0438\u043D\u0443\u0442\u0430',
            mm: '%d \u043C\u0438\u043D\u0443\u0442\u0438',
            h: '\u0447\u0430\u0441',
            hh: '%d \u0447\u0430\u0441\u0430',
            d: '\u0434\u0435\u043D',
            dd: '%d \u0434\u0435\u043D\u0430',
            M: '\u043C\u0435\u0441\u0435\u0446',
            MM: '%d \u043C\u0435\u0441\u0435\u0446\u0438',
            y: '\u0433\u043E\u0434\u0438\u043D\u0430',
            yy: '%d \u0433\u043E\u0434\u0438\u043D\u0438'
        },
        ordinal: function (number) {
            var lastDigit = number % 10, last2Digits = number % 100;
            if (number === 0) {
                return number + '-\u0435\u0432';
            } else if (last2Digits === 0) {
                return number + '-\u0435\u043D';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-\u0442\u0438';
            } else if (lastDigit === 1) {
                return number + '-\u0432\u0438';
            } else if (lastDigit === 2) {
                return number + '-\u0440\u0438';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-\u043C\u0438';
            } else {
                return number + '-\u0442\u0438';
            }
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/ml', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('ml', {
        months: '\u0D1C\u0D28\u0D41\u0D35\u0D30\u0D3F_\u0D2B\u0D46\u0D2C\u0D4D\u0D30\u0D41\u0D35\u0D30\u0D3F_\u0D2E\u0D3E\u0D7C\u0D1A\u0D4D\u0D1A\u0D4D_\u0D0F\u0D2A\u0D4D\u0D30\u0D3F\u0D7D_\u0D2E\u0D47\u0D2F\u0D4D_\u0D1C\u0D42\u0D7A_\u0D1C\u0D42\u0D32\u0D48_\u0D13\u0D17\u0D38\u0D4D\u0D31\u0D4D\u0D31\u0D4D_\u0D38\u0D46\u0D2A\u0D4D\u0D31\u0D4D\u0D31\u0D02\u0D2C\u0D7C_\u0D12\u0D15\u0D4D\u0D1F\u0D4B\u0D2C\u0D7C_\u0D28\u0D35\u0D02\u0D2C\u0D7C_\u0D21\u0D3F\u0D38\u0D02\u0D2C\u0D7C'.split('_'),
        monthsShort: '\u0D1C\u0D28\u0D41._\u0D2B\u0D46\u0D2C\u0D4D\u0D30\u0D41._\u0D2E\u0D3E\u0D7C._\u0D0F\u0D2A\u0D4D\u0D30\u0D3F._\u0D2E\u0D47\u0D2F\u0D4D_\u0D1C\u0D42\u0D7A_\u0D1C\u0D42\u0D32\u0D48._\u0D13\u0D17._\u0D38\u0D46\u0D2A\u0D4D\u0D31\u0D4D\u0D31._\u0D12\u0D15\u0D4D\u0D1F\u0D4B._\u0D28\u0D35\u0D02._\u0D21\u0D3F\u0D38\u0D02.'.split('_'),
        weekdays: '\u0D1E\u0D3E\u0D2F\u0D31\u0D3E\u0D34\u0D4D\u0D1A_\u0D24\u0D3F\u0D19\u0D4D\u0D15\u0D33\u0D3E\u0D34\u0D4D\u0D1A_\u0D1A\u0D4A\u0D35\u0D4D\u0D35\u0D3E\u0D34\u0D4D\u0D1A_\u0D2C\u0D41\u0D27\u0D28\u0D3E\u0D34\u0D4D\u0D1A_\u0D35\u0D4D\u0D2F\u0D3E\u0D34\u0D3E\u0D34\u0D4D\u0D1A_\u0D35\u0D46\u0D33\u0D4D\u0D33\u0D3F\u0D2F\u0D3E\u0D34\u0D4D\u0D1A_\u0D36\u0D28\u0D3F\u0D2F\u0D3E\u0D34\u0D4D\u0D1A'.split('_'),
        weekdaysShort: '\u0D1E\u0D3E\u0D2F\u0D7C_\u0D24\u0D3F\u0D19\u0D4D\u0D15\u0D7E_\u0D1A\u0D4A\u0D35\u0D4D\u0D35_\u0D2C\u0D41\u0D27\u0D7B_\u0D35\u0D4D\u0D2F\u0D3E\u0D34\u0D02_\u0D35\u0D46\u0D33\u0D4D\u0D33\u0D3F_\u0D36\u0D28\u0D3F'.split('_'),
        weekdaysMin: '\u0D1E\u0D3E_\u0D24\u0D3F_\u0D1A\u0D4A_\u0D2C\u0D41_\u0D35\u0D4D\u0D2F\u0D3E_\u0D35\u0D46_\u0D36'.split('_'),
        longDateFormat: {
            LT: 'A h:mm -\u0D28\u0D41',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, LT',
            LLLL: 'dddd, D MMMM YYYY, LT'
        },
        calendar: {
            sameDay: '[\u0D07\u0D28\u0D4D\u0D28\u0D4D] LT',
            nextDay: '[\u0D28\u0D3E\u0D33\u0D46] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[\u0D07\u0D28\u0D4D\u0D28\u0D32\u0D46] LT',
            lastWeek: '[\u0D15\u0D34\u0D3F\u0D1E\u0D4D\u0D1E] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s \u0D15\u0D34\u0D3F\u0D1E\u0D4D\u0D1E\u0D4D',
            past: '%s \u0D2E\u0D41\u0D7B\u0D2A\u0D4D',
            s: '\u0D05\u0D7D\u0D2A \u0D28\u0D3F\u0D2E\u0D3F\u0D37\u0D19\u0D4D\u0D19\u0D7E',
            m: '\u0D12\u0D30\u0D41 \u0D2E\u0D3F\u0D28\u0D3F\u0D31\u0D4D\u0D31\u0D4D',
            mm: '%d \u0D2E\u0D3F\u0D28\u0D3F\u0D31\u0D4D\u0D31\u0D4D',
            h: '\u0D12\u0D30\u0D41 \u0D2E\u0D23\u0D3F\u0D15\u0D4D\u0D15\u0D42\u0D7C',
            hh: '%d \u0D2E\u0D23\u0D3F\u0D15\u0D4D\u0D15\u0D42\u0D7C',
            d: '\u0D12\u0D30\u0D41 \u0D26\u0D3F\u0D35\u0D38\u0D02',
            dd: '%d \u0D26\u0D3F\u0D35\u0D38\u0D02',
            M: '\u0D12\u0D30\u0D41 \u0D2E\u0D3E\u0D38\u0D02',
            MM: '%d \u0D2E\u0D3E\u0D38\u0D02',
            y: '\u0D12\u0D30\u0D41 \u0D35\u0D7C\u0D37\u0D02',
            yy: '%d \u0D35\u0D7C\u0D37\u0D02'
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return '\u0D30\u0D3E\u0D24\u0D4D\u0D30\u0D3F';
            } else if (hour < 12) {
                return '\u0D30\u0D3E\u0D35\u0D3F\u0D32\u0D46';
            } else if (hour < 17) {
                return '\u0D09\u0D1A\u0D4D\u0D1A \u0D15\u0D34\u0D3F\u0D1E\u0D4D\u0D1E\u0D4D';
            } else if (hour < 20) {
                return '\u0D35\u0D48\u0D15\u0D41\u0D28\u0D4D\u0D28\u0D47\u0D30\u0D02';
            } else {
                return '\u0D30\u0D3E\u0D24\u0D4D\u0D30\u0D3F';
            }
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/mr', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    var symbolMap = {
            '1': '\u0967',
            '2': '\u0968',
            '3': '\u0969',
            '4': '\u096A',
            '5': '\u096B',
            '6': '\u096C',
            '7': '\u096D',
            '8': '\u096E',
            '9': '\u096F',
            '0': '\u0966'
        }, numberMap = {
            '\u0967': '1',
            '\u0968': '2',
            '\u0969': '3',
            '\u096A': '4',
            '\u096B': '5',
            '\u096C': '6',
            '\u096D': '7',
            '\u096E': '8',
            '\u096F': '9',
            '\u0966': '0'
        };
    return moment.lang('mr', {
        months: '\u091C\u093E\u0928\u0947\u0935\u093E\u0930\u0940_\u092B\u0947\u092C\u094D\u0930\u0941\u0935\u093E\u0930\u0940_\u092E\u093E\u0930\u094D\u091A_\u090F\u092A\u094D\u0930\u093F\u0932_\u092E\u0947_\u091C\u0942\u0928_\u091C\u0941\u0932\u0948_\u0911\u0917\u0938\u094D\u091F_\u0938\u092A\u094D\u091F\u0947\u0902\u092C\u0930_\u0911\u0915\u094D\u091F\u094B\u092C\u0930_\u0928\u094B\u0935\u094D\u0939\u0947\u0902\u092C\u0930_\u0921\u093F\u0938\u0947\u0902\u092C\u0930'.split('_'),
        monthsShort: '\u091C\u093E\u0928\u0947._\u092B\u0947\u092C\u094D\u0930\u0941._\u092E\u093E\u0930\u094D\u091A._\u090F\u092A\u094D\u0930\u093F._\u092E\u0947._\u091C\u0942\u0928._\u091C\u0941\u0932\u0948._\u0911\u0917._\u0938\u092A\u094D\u091F\u0947\u0902._\u0911\u0915\u094D\u091F\u094B._\u0928\u094B\u0935\u094D\u0939\u0947\u0902._\u0921\u093F\u0938\u0947\u0902.'.split('_'),
        weekdays: '\u0930\u0935\u093F\u0935\u093E\u0930_\u0938\u094B\u092E\u0935\u093E\u0930_\u092E\u0902\u0917\u0933\u0935\u093E\u0930_\u092C\u0941\u0927\u0935\u093E\u0930_\u0917\u0941\u0930\u0942\u0935\u093E\u0930_\u0936\u0941\u0915\u094D\u0930\u0935\u093E\u0930_\u0936\u0928\u093F\u0935\u093E\u0930'.split('_'),
        weekdaysShort: '\u0930\u0935\u093F_\u0938\u094B\u092E_\u092E\u0902\u0917\u0933_\u092C\u0941\u0927_\u0917\u0941\u0930\u0942_\u0936\u0941\u0915\u094D\u0930_\u0936\u0928\u093F'.split('_'),
        weekdaysMin: '\u0930_\u0938\u094B_\u092E\u0902_\u092C\u0941_\u0917\u0941_\u0936\u0941_\u0936'.split('_'),
        longDateFormat: {
            LT: 'A h:mm \u0935\u093E\u091C\u0924\u093E',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, LT',
            LLLL: 'dddd, D MMMM YYYY, LT'
        },
        calendar: {
            sameDay: '[\u0906\u091C] LT',
            nextDay: '[\u0909\u0926\u094D\u092F\u093E] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[\u0915\u093E\u0932] LT',
            lastWeek: '[\u092E\u093E\u0917\u0940\u0932] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s \u0928\u0902\u0924\u0930',
            past: '%s \u092A\u0942\u0930\u094D\u0935\u0940',
            s: '\u0938\u0947\u0915\u0902\u0926',
            m: '\u090F\u0915 \u092E\u093F\u0928\u093F\u091F',
            mm: '%d \u092E\u093F\u0928\u093F\u091F\u0947',
            h: '\u090F\u0915 \u0924\u093E\u0938',
            hh: '%d \u0924\u093E\u0938',
            d: '\u090F\u0915 \u0926\u093F\u0935\u0938',
            dd: '%d \u0926\u093F\u0935\u0938',
            M: '\u090F\u0915 \u092E\u0939\u093F\u0928\u093E',
            MM: '%d \u092E\u0939\u093F\u0928\u0947',
            y: '\u090F\u0915 \u0935\u0930\u094D\u0937',
            yy: '%d \u0935\u0930\u094D\u0937\u0947'
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return '\u0930\u093E\u0924\u094D\u0930\u0940';
            } else if (hour < 10) {
                return '\u0938\u0915\u093E\u0933\u0940';
            } else if (hour < 17) {
                return '\u0926\u0941\u092A\u093E\u0930\u0940';
            } else if (hour < 20) {
                return '\u0938\u093E\u092F\u0902\u0915\u093E\u0933\u0940';
            } else {
                return '\u0930\u093E\u0924\u094D\u0930\u0940';
            }
        },
        week: {
            dow: 0,
            doy: 6
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/ms-my', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('ms-my', {
        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] LT',
            LLLL: 'dddd, D MMMM YYYY [pukul] LT'
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Esok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kelmarin pukul] LT',
            lastWeek: 'dddd [lepas pukul] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lepas',
            s: 'beberapa saat',
            m: 'seminit',
            mm: '%d minit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun'
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/nb', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('nb', {
        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort: 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
        weekdays: 's\xF8ndag_mandag_tirsdag_onsdag_torsdag_fredag_l\xF8rdag'.split('_'),
        weekdaysShort: 's\xF8._ma._ti._on._to._fr._l\xF8.'.split('_'),
        weekdaysMin: 's\xF8_ma_ti_on_to_fr_l\xF8'.split('_'),
        longDateFormat: {
            LT: 'H.mm',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] LT',
            LLLL: 'dddd D. MMMM YYYY [kl.] LT'
        },
        calendar: {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[i g\xE5r kl.] LT',
            lastWeek: '[forrige] dddd [kl.] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'om %s',
            past: 'for %s siden',
            s: 'noen sekunder',
            m: 'ett minutt',
            mm: '%d minutter',
            h: 'en time',
            hh: '%d timer',
            d: 'en dag',
            dd: '%d dager',
            M: 'en m\xE5ned',
            MM: '%d m\xE5neder',
            y: 'ett \xE5r',
            yy: '%d \xE5r'
        },
        ordinal: '%d.',
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/ne', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    var symbolMap = {
            '1': '\u0967',
            '2': '\u0968',
            '3': '\u0969',
            '4': '\u096A',
            '5': '\u096B',
            '6': '\u096C',
            '7': '\u096D',
            '8': '\u096E',
            '9': '\u096F',
            '0': '\u0966'
        }, numberMap = {
            '\u0967': '1',
            '\u0968': '2',
            '\u0969': '3',
            '\u096A': '4',
            '\u096B': '5',
            '\u096C': '6',
            '\u096D': '7',
            '\u096E': '8',
            '\u096F': '9',
            '\u0966': '0'
        };
    return moment.lang('ne', {
        months: '\u091C\u0928\u0935\u0930\u0940_\u092B\u0947\u092C\u094D\u0930\u0941\u0935\u0930\u0940_\u092E\u093E\u0930\u094D\u091A_\u0905\u092A\u094D\u0930\u093F\u0932_\u092E\u0908_\u091C\u0941\u0928_\u091C\u0941\u0932\u093E\u0908_\u0905\u0917\u0937\u094D\u091F_\u0938\u0947\u092A\u094D\u091F\u0947\u092E\u094D\u092C\u0930_\u0905\u0915\u094D\u091F\u094B\u092C\u0930_\u0928\u094B\u092D\u0947\u092E\u094D\u092C\u0930_\u0921\u093F\u0938\u0947\u092E\u094D\u092C\u0930'.split('_'),
        monthsShort: '\u091C\u0928._\u092B\u0947\u092C\u094D\u0930\u0941._\u092E\u093E\u0930\u094D\u091A_\u0905\u092A\u094D\u0930\u093F._\u092E\u0908_\u091C\u0941\u0928_\u091C\u0941\u0932\u093E\u0908._\u0905\u0917._\u0938\u0947\u092A\u094D\u091F._\u0905\u0915\u094D\u091F\u094B._\u0928\u094B\u092D\u0947._\u0921\u093F\u0938\u0947.'.split('_'),
        weekdays: '\u0906\u0907\u0924\u092C\u093E\u0930_\u0938\u094B\u092E\u092C\u093E\u0930_\u092E\u0919\u094D\u0917\u0932\u092C\u093E\u0930_\u092C\u0941\u0927\u092C\u093E\u0930_\u092C\u093F\u0939\u093F\u092C\u093E\u0930_\u0936\u0941\u0915\u094D\u0930\u092C\u093E\u0930_\u0936\u0928\u093F\u092C\u093E\u0930'.split('_'),
        weekdaysShort: '\u0906\u0907\u0924._\u0938\u094B\u092E._\u092E\u0919\u094D\u0917\u0932._\u092C\u0941\u0927._\u092C\u093F\u0939\u093F._\u0936\u0941\u0915\u094D\u0930._\u0936\u0928\u093F.'.split('_'),
        weekdaysMin: '\u0906\u0907._\u0938\u094B._\u092E\u0919\u094D_\u092C\u0941._\u092C\u093F._\u0936\u0941._\u0936.'.split('_'),
        longDateFormat: {
            LT: 'A\u0915\u094B h:mm \u092C\u091C\u0947',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, LT',
            LLLL: 'dddd, D MMMM YYYY, LT'
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 3) {
                return '\u0930\u093E\u0924\u0940';
            } else if (hour < 10) {
                return '\u092C\u093F\u0939\u093E\u0928';
            } else if (hour < 15) {
                return '\u0926\u093F\u0909\u0901\u0938\u094B';
            } else if (hour < 18) {
                return '\u092C\u0947\u0932\u0941\u0915\u093E';
            } else if (hour < 20) {
                return '\u0938\u093E\u0901\u091D';
            } else {
                return '\u0930\u093E\u0924\u0940';
            }
        },
        calendar: {
            sameDay: '[\u0906\u091C] LT',
            nextDay: '[\u092D\u094B\u0932\u0940] LT',
            nextWeek: '[\u0906\u0909\u0901\u0926\u094B] dddd[,] LT',
            lastDay: '[\u0939\u093F\u091C\u094B] LT',
            lastWeek: '[\u0917\u090F\u0915\u094B] dddd[,] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s\u092E\u093E',
            past: '%s \u0905\u0917\u093E\u0921\u0940',
            s: '\u0915\u0947\u0939\u0940 \u0938\u092E\u092F',
            m: '\u090F\u0915 \u092E\u093F\u0928\u0947\u091F',
            mm: '%d \u092E\u093F\u0928\u0947\u091F',
            h: '\u090F\u0915 \u0918\u0923\u094D\u091F\u093E',
            hh: '%d \u0918\u0923\u094D\u091F\u093E',
            d: '\u090F\u0915 \u0926\u093F\u0928',
            dd: '%d \u0926\u093F\u0928',
            M: '\u090F\u0915 \u092E\u0939\u093F\u0928\u093E',
            MM: '%d \u092E\u0939\u093F\u0928\u093E',
            y: '\u090F\u0915 \u092C\u0930\u094D\u0937',
            yy: '%d \u092C\u0930\u094D\u0937'
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/nl', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'), monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');
    return moment.lang('nl', {
        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
        monthsShort: function (m, format) {
            if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },
        weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin: 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd D MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'over %s',
            past: '%s geleden',
            s: 'een paar seconden',
            m: '\xE9\xE9n minuut',
            mm: '%d minuten',
            h: '\xE9\xE9n uur',
            hh: '%d uur',
            d: '\xE9\xE9n dag',
            dd: '%d dagen',
            M: '\xE9\xE9n maand',
            MM: '%d maanden',
            y: '\xE9\xE9n jaar',
            yy: '%d jaar'
        },
        ordinal: function (number) {
            return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de');
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/nn', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('nn', {
        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays: 'sundag_m\xE5ndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
        weekdaysShort: 'sun_m\xE5n_tys_ons_tor_fre_lau'.split('_'),
        weekdaysMin: 'su_m\xE5_ty_on_to_fr_l\xF8'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd D MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[I dag klokka] LT',
            nextDay: '[I morgon klokka] LT',
            nextWeek: 'dddd [klokka] LT',
            lastDay: '[I g\xE5r klokka] LT',
            lastWeek: '[F\xF8reg\xE5ande] dddd [klokka] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'om %s',
            past: 'for %s sidan',
            s: 'nokre sekund',
            m: 'eit minutt',
            mm: '%d minutt',
            h: 'ein time',
            hh: '%d timar',
            d: 'ein dag',
            dd: '%d dagar',
            M: 'ein m\xE5nad',
            MM: '%d m\xE5nader',
            y: 'eit \xE5r',
            yy: '%d \xE5r'
        },
        ordinal: '%d.',
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/pl', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    var monthsNominative = 'stycze\u0144_luty_marzec_kwiecie\u0144_maj_czerwiec_lipiec_sierpie\u0144_wrzesie\u0144_pa\u017Adziernik_listopad_grudzie\u0144'.split('_'), monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_wrze\u015Bnia_pa\u017Adziernika_listopada_grudnia'.split('_');
    function plural(n) {
        return n % 10 < 5 && n % 10 > 1 && ~~(n / 10) % 10 !== 1;
    }
    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
        case 'm':
            return withoutSuffix ? 'minuta' : 'minut\u0119';
        case 'mm':
            return result + (plural(number) ? 'minuty' : 'minut');
        case 'h':
            return withoutSuffix ? 'godzina' : 'godzin\u0119';
        case 'hh':
            return result + (plural(number) ? 'godziny' : 'godzin');
        case 'MM':
            return result + (plural(number) ? 'miesi\u0105ce' : 'miesi\u0119cy');
        case 'yy':
            return result + (plural(number) ? 'lata' : 'lat');
        }
    }
    return moment.lang('pl', {
        months: function (momentToFormat, format) {
            if (/D MMMM/.test(format)) {
                return monthsSubjective[momentToFormat.month()];
            } else {
                return monthsNominative[momentToFormat.month()];
            }
        },
        monthsShort: 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_pa\u017A_lis_gru'.split('_'),
        weekdays: 'niedziela_poniedzia\u0142ek_wtorek_\u015Broda_czwartek_pi\u0105tek_sobota'.split('_'),
        weekdaysShort: 'nie_pon_wt_\u015Br_czw_pt_sb'.split('_'),
        weekdaysMin: 'N_Pn_Wt_\u015Ar_Cz_Pt_So'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[Dzi\u015B o] LT',
            nextDay: '[Jutro o] LT',
            nextWeek: '[W] dddd [o] LT',
            lastDay: '[Wczoraj o] LT',
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[W zesz\u0142\u0105 niedziel\u0119 o] LT';
                case 3:
                    return '[W zesz\u0142\u0105 \u015Brod\u0119 o] LT';
                case 6:
                    return '[W zesz\u0142\u0105 sobot\u0119 o] LT';
                default:
                    return '[W zesz\u0142y] dddd [o] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: '%s temu',
            s: 'kilka sekund',
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: '1 dzie\u0144',
            dd: '%d dni',
            M: 'miesi\u0105c',
            MM: translate,
            y: 'rok',
            yy: translate
        },
        ordinal: '%d.',
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/pt-br', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('pt-br', {
        months: 'janeiro_fevereiro_mar\xE7o_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),
        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
        weekdays: 'domingo_segunda-feira_ter\xE7a-feira_quarta-feira_quinta-feira_sexta-feira_s\xE1bado'.split('_'),
        weekdaysShort: 'dom_seg_ter_qua_qui_sex_s\xE1b'.split('_'),
        weekdaysMin: 'dom_2\xAA_3\xAA_4\xAA_5\xAA_6\xAA_s\xE1b'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY [\xE0s] LT',
            LLLL: 'dddd, D [de] MMMM [de] YYYY [\xE0s] LT'
        },
        calendar: {
            sameDay: '[Hoje \xE0s] LT',
            nextDay: '[Amanh\xE3 \xE0s] LT',
            nextWeek: 'dddd [\xE0s] LT',
            lastDay: '[Ontem \xE0s] LT',
            lastWeek: function () {
                return this.day() === 0 || this.day() === 6 ? '[\xDAltimo] dddd [\xE0s] LT' : '[\xDAltima] dddd [\xE0s] LT';
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'em %s',
            past: '%s atr\xE1s',
            s: 'segundos',
            m: 'um minuto',
            mm: '%d minutos',
            h: 'uma hora',
            hh: '%d horas',
            d: 'um dia',
            dd: '%d dias',
            M: 'um m\xEAs',
            MM: '%d meses',
            y: 'um ano',
            yy: '%d anos'
        },
        ordinal: '%d\xBA'
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/pt', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('pt', {
        months: 'janeiro_fevereiro_mar\xE7o_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),
        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
        weekdays: 'domingo_segunda-feira_ter\xE7a-feira_quarta-feira_quinta-feira_sexta-feira_s\xE1bado'.split('_'),
        weekdaysShort: 'dom_seg_ter_qua_qui_sex_s\xE1b'.split('_'),
        weekdaysMin: 'dom_2\xAA_3\xAA_4\xAA_5\xAA_6\xAA_s\xE1b'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY LT',
            LLLL: 'dddd, D [de] MMMM [de] YYYY LT'
        },
        calendar: {
            sameDay: '[Hoje \xE0s] LT',
            nextDay: '[Amanh\xE3 \xE0s] LT',
            nextWeek: 'dddd [\xE0s] LT',
            lastDay: '[Ontem \xE0s] LT',
            lastWeek: function () {
                return this.day() === 0 || this.day() === 6 ? '[\xDAltimo] dddd [\xE0s] LT' : '[\xDAltima] dddd [\xE0s] LT';
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'em %s',
            past: 'h\xE1 %s',
            s: 'segundos',
            m: 'um minuto',
            mm: '%d minutos',
            h: 'uma hora',
            hh: '%d horas',
            d: 'um dia',
            dd: '%d dias',
            M: 'um m\xEAs',
            MM: '%d meses',
            y: 'um ano',
            yy: '%d anos'
        },
        ordinal: '%d\xBA',
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/ro', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
                'mm': 'minute',
                'hh': 'ore',
                'dd': 'zile',
                'MM': 'luni',
                'yy': 'ani'
            }, separator = ' ';
        if (number % 100 >= 20 || number >= 100 && number % 100 === 0) {
            separator = ' de ';
        }
        return number + separator + format[key];
    }
    return moment.lang('ro', {
        months: 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
        monthsShort: 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
        weekdays: 'duminic\u0103_luni_mar\u021Bi_miercuri_joi_vineri_s\xE2mb\u0103t\u0103'.split('_'),
        weekdaysShort: 'Dum_Lun_Mar_Mie_Joi_Vin_S\xE2m'.split('_'),
        weekdaysMin: 'Du_Lu_Ma_Mi_Jo_Vi_S\xE2'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[azi la] LT',
            nextDay: '[m\xE2ine la] LT',
            nextWeek: 'dddd [la] LT',
            lastDay: '[ieri la] LT',
            lastWeek: '[fosta] dddd [la] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'peste %s',
            past: '%s \xEEn urm\u0103',
            s: 'c\xE2teva secunde',
            m: 'un minut',
            mm: relativeTimeWithPlural,
            h: 'o or\u0103',
            hh: relativeTimeWithPlural,
            d: 'o zi',
            dd: relativeTimeWithPlural,
            M: 'o lun\u0103',
            MM: relativeTimeWithPlural,
            y: 'un an',
            yy: relativeTimeWithPlural
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/ru', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
                'mm': withoutSuffix ? '\u043C\u0438\u043D\u0443\u0442\u0430_\u043C\u0438\u043D\u0443\u0442\u044B_\u043C\u0438\u043D\u0443\u0442' : '\u043C\u0438\u043D\u0443\u0442\u0443_\u043C\u0438\u043D\u0443\u0442\u044B_\u043C\u0438\u043D\u0443\u0442',
                'hh': '\u0447\u0430\u0441_\u0447\u0430\u0441\u0430_\u0447\u0430\u0441\u043E\u0432',
                'dd': '\u0434\u0435\u043D\u044C_\u0434\u043D\u044F_\u0434\u043D\u0435\u0439',
                'MM': '\u043C\u0435\u0441\u044F\u0446_\u043C\u0435\u0441\u044F\u0446\u0430_\u043C\u0435\u0441\u044F\u0446\u0435\u0432',
                'yy': '\u0433\u043E\u0434_\u0433\u043E\u0434\u0430_\u043B\u0435\u0442'
            };
        if (key === 'm') {
            return withoutSuffix ? '\u043C\u0438\u043D\u0443\u0442\u0430' : '\u043C\u0438\u043D\u0443\u0442\u0443';
        } else {
            return number + ' ' + plural(format[key], +number);
        }
    }
    function monthsCaseReplace(m, format) {
        var months = {
                'nominative': '\u044F\u043D\u0432\u0430\u0440\u044C_\u0444\u0435\u0432\u0440\u0430\u043B\u044C_\u043C\u0430\u0440\u0442_\u0430\u043F\u0440\u0435\u043B\u044C_\u043C\u0430\u0439_\u0438\u044E\u043D\u044C_\u0438\u044E\u043B\u044C_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044C_\u043E\u043A\u0442\u044F\u0431\u0440\u044C_\u043D\u043E\u044F\u0431\u0440\u044C_\u0434\u0435\u043A\u0430\u0431\u0440\u044C'.split('_'),
                'accusative': '\u044F\u043D\u0432\u0430\u0440\u044F_\u0444\u0435\u0432\u0440\u0430\u043B\u044F_\u043C\u0430\u0440\u0442\u0430_\u0430\u043F\u0440\u0435\u043B\u044F_\u043C\u0430\u044F_\u0438\u044E\u043D\u044F_\u0438\u044E\u043B\u044F_\u0430\u0432\u0433\u0443\u0441\u0442\u0430_\u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044F_\u043E\u043A\u0442\u044F\u0431\u0440\u044F_\u043D\u043E\u044F\u0431\u0440\u044F_\u0434\u0435\u043A\u0430\u0431\u0440\u044F'.split('_')
            }, nounCase = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(format) ? 'accusative' : 'nominative';
        return months[nounCase][m.month()];
    }
    function monthsShortCaseReplace(m, format) {
        var monthsShort = {
                'nominative': '\u044F\u043D\u0432_\u0444\u0435\u0432_\u043C\u0430\u0440_\u0430\u043F\u0440_\u043C\u0430\u0439_\u0438\u044E\u043D\u044C_\u0438\u044E\u043B\u044C_\u0430\u0432\u0433_\u0441\u0435\u043D_\u043E\u043A\u0442_\u043D\u043E\u044F_\u0434\u0435\u043A'.split('_'),
                'accusative': '\u044F\u043D\u0432_\u0444\u0435\u0432_\u043C\u0430\u0440_\u0430\u043F\u0440_\u043C\u0430\u044F_\u0438\u044E\u043D\u044F_\u0438\u044E\u043B\u044F_\u0430\u0432\u0433_\u0441\u0435\u043D_\u043E\u043A\u0442_\u043D\u043E\u044F_\u0434\u0435\u043A'.split('_')
            }, nounCase = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/.test(format) ? 'accusative' : 'nominative';
        return monthsShort[nounCase][m.month()];
    }
    function weekdaysCaseReplace(m, format) {
        var weekdays = {
                'nominative': '\u0432\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435_\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A_\u0432\u0442\u043E\u0440\u043D\u0438\u043A_\u0441\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0435\u0440\u0433_\u043F\u044F\u0442\u043D\u0438\u0446\u0430_\u0441\u0443\u0431\u0431\u043E\u0442\u0430'.split('_'),
                'accusative': '\u0432\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435_\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A_\u0432\u0442\u043E\u0440\u043D\u0438\u043A_\u0441\u0440\u0435\u0434\u0443_\u0447\u0435\u0442\u0432\u0435\u0440\u0433_\u043F\u044F\u0442\u043D\u0438\u0446\u0443_\u0441\u0443\u0431\u0431\u043E\u0442\u0443'.split('_')
            }, nounCase = /\[ ?[Вв] ?(?:прошлую|следующую)? ?\] ?dddd/.test(format) ? 'accusative' : 'nominative';
        return weekdays[nounCase][m.day()];
    }
    return moment.lang('ru', {
        months: monthsCaseReplace,
        monthsShort: monthsShortCaseReplace,
        weekdays: weekdaysCaseReplace,
        weekdaysShort: '\u0432\u0441_\u043F\u043D_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043F\u0442_\u0441\u0431'.split('_'),
        weekdaysMin: '\u0432\u0441_\u043F\u043D_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043F\u0442_\u0441\u0431'.split('_'),
        monthsParse: [
            /^янв/i,
            /^фев/i,
            /^мар/i,
            /^апр/i,
            /^ма[й|я]/i,
            /^июн/i,
            /^июл/i,
            /^авг/i,
            /^сен/i,
            /^окт/i,
            /^ноя/i,
            /^дек/i
        ],
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY \u0433.',
            LLL: 'D MMMM YYYY \u0433., LT',
            LLLL: 'dddd, D MMMM YYYY \u0433., LT'
        },
        calendar: {
            sameDay: '[\u0421\u0435\u0433\u043E\u0434\u043D\u044F \u0432] LT',
            nextDay: '[\u0417\u0430\u0432\u0442\u0440\u0430 \u0432] LT',
            lastDay: '[\u0412\u0447\u0435\u0440\u0430 \u0432] LT',
            nextWeek: function () {
                return this.day() === 2 ? '[\u0412\u043E] dddd [\u0432] LT' : '[\u0412] dddd [\u0432] LT';
            },
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[\u0412 \u043F\u0440\u043E\u0448\u043B\u043E\u0435] dddd [\u0432] LT';
                case 1:
                case 2:
                case 4:
                    return '[\u0412 \u043F\u0440\u043E\u0448\u043B\u044B\u0439] dddd [\u0432] LT';
                case 3:
                case 5:
                case 6:
                    return '[\u0412 \u043F\u0440\u043E\u0448\u043B\u0443\u044E] dddd [\u0432] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: '\u0447\u0435\u0440\u0435\u0437 %s',
            past: '%s \u043D\u0430\u0437\u0430\u0434',
            s: '\u043D\u0435\u0441\u043A\u043E\u043B\u044C\u043A\u043E \u0441\u0435\u043A\u0443\u043D\u0434',
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: '\u0447\u0430\u0441',
            hh: relativeTimeWithPlural,
            d: '\u0434\u0435\u043D\u044C',
            dd: relativeTimeWithPlural,
            M: '\u043C\u0435\u0441\u044F\u0446',
            MM: relativeTimeWithPlural,
            y: '\u0433\u043E\u0434',
            yy: relativeTimeWithPlural
        },
        meridiemParse: /ночи|утра|дня|вечера/i,
        isPM: function (input) {
            return /^(дня|вечера)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return '\u043D\u043E\u0447\u0438';
            } else if (hour < 12) {
                return '\u0443\u0442\u0440\u0430';
            } else if (hour < 17) {
                return '\u0434\u043D\u044F';
            } else {
                return '\u0432\u0435\u0447\u0435\u0440\u0430';
            }
        },
        ordinal: function (number, period) {
            switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
                return number + '-\u0439';
            case 'D':
                return number + '-\u0433\u043E';
            case 'w':
            case 'W':
                return number + '-\u044F';
            default:
                return number;
            }
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/sk', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    var months = 'janu\xE1r_febru\xE1r_marec_apr\xEDl_m\xE1j_j\xFAn_j\xFAl_august_september_okt\xF3ber_november_december'.split('_'), monthsShort = 'jan_feb_mar_apr_m\xE1j_j\xFAn_j\xFAl_aug_sep_okt_nov_dec'.split('_');
    function plural(n) {
        return n > 1 && n < 5;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
        case 's':
            return withoutSuffix || isFuture ? 'p\xE1r sek\xFAnd' : 'p\xE1r sekundami';
        case 'm':
            return withoutSuffix ? 'min\xFAta' : isFuture ? 'min\xFAtu' : 'min\xFAtou';
        case 'mm':
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'min\xFAty' : 'min\xFAt');
            } else {
                return result + 'min\xFAtami';
            }
            break;
        case 'h':
            return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
        case 'hh':
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'hodiny' : 'hod\xEDn');
            } else {
                return result + 'hodinami';
            }
            break;
        case 'd':
            return withoutSuffix || isFuture ? 'de\u0148' : 'd\u0148om';
        case 'dd':
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'dni' : 'dn\xED');
            } else {
                return result + 'd\u0148ami';
            }
            break;
        case 'M':
            return withoutSuffix || isFuture ? 'mesiac' : 'mesiacom';
        case 'MM':
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'mesiace' : 'mesiacov');
            } else {
                return result + 'mesiacmi';
            }
            break;
        case 'y':
            return withoutSuffix || isFuture ? 'rok' : 'rokom';
        case 'yy':
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'roky' : 'rokov');
            } else {
                return result + 'rokmi';
            }
            break;
        }
    }
    return moment.lang('sk', {
        months: months,
        monthsShort: monthsShort,
        monthsParse: function (months, monthsShort) {
            var i, _monthsParse = [];
            for (i = 0; i < 12; i++) {
                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
            }
            return _monthsParse;
        }(months, monthsShort),
        weekdays: 'nede\u013Ea_pondelok_utorok_streda_\u0161tvrtok_piatok_sobota'.split('_'),
        weekdaysShort: 'ne_po_ut_st_\u0161t_pi_so'.split('_'),
        weekdaysMin: 'ne_po_ut_st_\u0161t_pi_so'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY LT',
            LLLL: 'dddd D. MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[dnes o] LT',
            nextDay: '[zajtra o] LT',
            nextWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[v nede\u013Eu o] LT';
                case 1:
                case 2:
                    return '[v] dddd [o] LT';
                case 3:
                    return '[v stredu o] LT';
                case 4:
                    return '[vo \u0161tvrtok o] LT';
                case 5:
                    return '[v piatok o] LT';
                case 6:
                    return '[v sobotu o] LT';
                }
            },
            lastDay: '[v\u010Dera o] LT',
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[minul\xFA nede\u013Eu o] LT';
                case 1:
                case 2:
                    return '[minul\xFD] dddd [o] LT';
                case 3:
                    return '[minul\xFA stredu o] LT';
                case 4:
                case 5:
                    return '[minul\xFD] dddd [o] LT';
                case 6:
                    return '[minul\xFA sobotu o] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'pred %s',
            s: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate
        },
        ordinal: '%d.',
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/sl', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
        case 'm':
            return withoutSuffix ? 'ena minuta' : 'eno minuto';
        case 'mm':
            if (number === 1) {
                result += 'minuta';
            } else if (number === 2) {
                result += 'minuti';
            } else if (number === 3 || number === 4) {
                result += 'minute';
            } else {
                result += 'minut';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'ena ura' : 'eno uro';
        case 'hh':
            if (number === 1) {
                result += 'ura';
            } else if (number === 2) {
                result += 'uri';
            } else if (number === 3 || number === 4) {
                result += 'ure';
            } else {
                result += 'ur';
            }
            return result;
        case 'dd':
            if (number === 1) {
                result += 'dan';
            } else {
                result += 'dni';
            }
            return result;
        case 'MM':
            if (number === 1) {
                result += 'mesec';
            } else if (number === 2) {
                result += 'meseca';
            } else if (number === 3 || number === 4) {
                result += 'mesece';
            } else {
                result += 'mesecev';
            }
            return result;
        case 'yy':
            if (number === 1) {
                result += 'leto';
            } else if (number === 2) {
                result += 'leti';
            } else if (number === 3 || number === 4) {
                result += 'leta';
            } else {
                result += 'let';
            }
            return result;
        }
    }
    return moment.lang('sl', {
        months: 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
        monthsShort: 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
        weekdays: 'nedelja_ponedeljek_torek_sreda_\u010Detrtek_petek_sobota'.split('_'),
        weekdaysShort: 'ned._pon._tor._sre._\u010Det._pet._sob.'.split('_'),
        weekdaysMin: 'ne_po_to_sr_\u010De_pe_so'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY LT',
            LLLL: 'dddd, D. MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[danes ob] LT',
            nextDay: '[jutri ob] LT',
            nextWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[v] [nedeljo] [ob] LT';
                case 3:
                    return '[v] [sredo] [ob] LT';
                case 6:
                    return '[v] [soboto] [ob] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[v] dddd [ob] LT';
                }
            },
            lastDay: '[v\u010Deraj ob] LT',
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 6:
                    return '[prej\u0161nja] dddd [ob] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prej\u0161nji] dddd [ob] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: '\u010Dez %s',
            past: '%s nazaj',
            s: 'nekaj sekund',
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: 'en dan',
            dd: translate,
            M: 'en mesec',
            MM: translate,
            y: 'eno leto',
            yy: translate
        },
        ordinal: '%d.',
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/sq', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('sq', {
        months: 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_N\xEBntor_Dhjetor'.split('_'),
        monthsShort: 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_N\xEBn_Dhj'.split('_'),
        weekdays: 'E Diel_E H\xEBn\xEB_E Mart\xEB_E M\xEBrkur\xEB_E Enjte_E Premte_E Shtun\xEB'.split('_'),
        weekdaysShort: 'Die_H\xEBn_Mar_M\xEBr_Enj_Pre_Sht'.split('_'),
        weekdaysMin: 'D_H_Ma_M\xEB_E_P_Sh'.split('_'),
        meridiem: function (hours, minutes, isLower) {
            return hours < 12 ? 'PD' : 'MD';
        },
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[Sot n\xEB] LT',
            nextDay: '[Nes\xEBr n\xEB] LT',
            nextWeek: 'dddd [n\xEB] LT',
            lastDay: '[Dje n\xEB] LT',
            lastWeek: 'dddd [e kaluar n\xEB] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'n\xEB %s',
            past: '%s m\xEB par\xEB',
            s: 'disa sekonda',
            m: 'nj\xEB minut\xEB',
            mm: '%d minuta',
            h: 'nj\xEB or\xEB',
            hh: '%d or\xEB',
            d: 'nj\xEB dit\xEB',
            dd: '%d dit\xEB',
            M: 'nj\xEB muaj',
            MM: '%d muaj',
            y: 'nj\xEB vit',
            yy: '%d vite'
        },
        ordinal: '%d.',
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/sr-cyrl', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    var translator = {
            words: {
                m: [
                    '\u0458\u0435\u0434\u0430\u043D \u043C\u0438\u043D\u0443\u0442',
                    '\u0458\u0435\u0434\u043D\u0435 \u043C\u0438\u043D\u0443\u0442\u0435'
                ],
                mm: [
                    '\u043C\u0438\u043D\u0443\u0442',
                    '\u043C\u0438\u043D\u0443\u0442\u0435',
                    '\u043C\u0438\u043D\u0443\u0442\u0430'
                ],
                h: [
                    '\u0458\u0435\u0434\u0430\u043D \u0441\u0430\u0442',
                    '\u0458\u0435\u0434\u043D\u043E\u0433 \u0441\u0430\u0442\u0430'
                ],
                hh: [
                    '\u0441\u0430\u0442',
                    '\u0441\u0430\u0442\u0430',
                    '\u0441\u0430\u0442\u0438'
                ],
                dd: [
                    '\u0434\u0430\u043D',
                    '\u0434\u0430\u043D\u0430',
                    '\u0434\u0430\u043D\u0430'
                ],
                MM: [
                    '\u043C\u0435\u0441\u0435\u0446',
                    '\u043C\u0435\u0441\u0435\u0446\u0430',
                    '\u043C\u0435\u0441\u0435\u0446\u0438'
                ],
                yy: [
                    '\u0433\u043E\u0434\u0438\u043D\u0430',
                    '\u0433\u043E\u0434\u0438\u043D\u0435',
                    '\u0433\u043E\u0434\u0438\u043D\u0430'
                ]
            },
            correctGrammaticalCase: function (number, wordKey) {
                return number === 1 ? wordKey[0] : number >= 2 && number <= 4 ? wordKey[1] : wordKey[2];
            },
            translate: function (number, withoutSuffix, key) {
                var wordKey = translator.words[key];
                if (key.length === 1) {
                    return withoutSuffix ? wordKey[0] : wordKey[1];
                } else {
                    return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
                }
            }
        };
    return moment.lang('sr-cyrl', {
        months: [
            '\u0458\u0430\u043D\u0443\u0430\u0440',
            '\u0444\u0435\u0431\u0440\u0443\u0430\u0440',
            '\u043C\u0430\u0440\u0442',
            '\u0430\u043F\u0440\u0438\u043B',
            '\u043C\u0430\u0458',
            '\u0458\u0443\u043D',
            '\u0458\u0443\u043B',
            '\u0430\u0432\u0433\u0443\u0441\u0442',
            '\u0441\u0435\u043F\u0442\u0435\u043C\u0431\u0430\u0440',
            '\u043E\u043A\u0442\u043E\u0431\u0430\u0440',
            '\u043D\u043E\u0432\u0435\u043C\u0431\u0430\u0440',
            '\u0434\u0435\u0446\u0435\u043C\u0431\u0430\u0440'
        ],
        monthsShort: [
            '\u0458\u0430\u043D.',
            '\u0444\u0435\u0431.',
            '\u043C\u0430\u0440.',
            '\u0430\u043F\u0440.',
            '\u043C\u0430\u0458',
            '\u0458\u0443\u043D',
            '\u0458\u0443\u043B',
            '\u0430\u0432\u0433.',
            '\u0441\u0435\u043F.',
            '\u043E\u043A\u0442.',
            '\u043D\u043E\u0432.',
            '\u0434\u0435\u0446.'
        ],
        weekdays: [
            '\u043D\u0435\u0434\u0435\u0459\u0430',
            '\u043F\u043E\u043D\u0435\u0434\u0435\u0459\u0430\u043A',
            '\u0443\u0442\u043E\u0440\u0430\u043A',
            '\u0441\u0440\u0435\u0434\u0430',
            '\u0447\u0435\u0442\u0432\u0440\u0442\u0430\u043A',
            '\u043F\u0435\u0442\u0430\u043A',
            '\u0441\u0443\u0431\u043E\u0442\u0430'
        ],
        weekdaysShort: [
            '\u043D\u0435\u0434.',
            '\u043F\u043E\u043D.',
            '\u0443\u0442\u043E.',
            '\u0441\u0440\u0435.',
            '\u0447\u0435\u0442.',
            '\u043F\u0435\u0442.',
            '\u0441\u0443\u0431.'
        ],
        weekdaysMin: [
            '\u043D\u0435',
            '\u043F\u043E',
            '\u0443\u0442',
            '\u0441\u0440',
            '\u0447\u0435',
            '\u043F\u0435',
            '\u0441\u0443'
        ],
        longDateFormat: {
            LT: 'H:mm',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY LT',
            LLLL: 'dddd, D. MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[\u0434\u0430\u043D\u0430\u0441 \u0443] LT',
            nextDay: '[\u0441\u0443\u0442\u0440\u0430 \u0443] LT',
            nextWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[\u0443] [\u043D\u0435\u0434\u0435\u0459\u0443] [\u0443] LT';
                case 3:
                    return '[\u0443] [\u0441\u0440\u0435\u0434\u0443] [\u0443] LT';
                case 6:
                    return '[\u0443] [\u0441\u0443\u0431\u043E\u0442\u0443] [\u0443] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[\u0443] dddd [\u0443] LT';
                }
            },
            lastDay: '[\u0458\u0443\u0447\u0435 \u0443] LT',
            lastWeek: function () {
                var lastWeekDays = [
                        '[\u043F\u0440\u043E\u0448\u043B\u0435] [\u043D\u0435\u0434\u0435\u0459\u0435] [\u0443] LT',
                        '[\u043F\u0440\u043E\u0448\u043B\u043E\u0433] [\u043F\u043E\u043D\u0435\u0434\u0435\u0459\u043A\u0430] [\u0443] LT',
                        '[\u043F\u0440\u043E\u0448\u043B\u043E\u0433] [\u0443\u0442\u043E\u0440\u043A\u0430] [\u0443] LT',
                        '[\u043F\u0440\u043E\u0448\u043B\u0435] [\u0441\u0440\u0435\u0434\u0435] [\u0443] LT',
                        '[\u043F\u0440\u043E\u0448\u043B\u043E\u0433] [\u0447\u0435\u0442\u0432\u0440\u0442\u043A\u0430] [\u0443] LT',
                        '[\u043F\u0440\u043E\u0448\u043B\u043E\u0433] [\u043F\u0435\u0442\u043A\u0430] [\u0443] LT',
                        '[\u043F\u0440\u043E\u0448\u043B\u0435] [\u0441\u0443\u0431\u043E\u0442\u0435] [\u0443] LT'
                    ];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: '\u0437\u0430 %s',
            past: '\u043F\u0440\u0435 %s',
            s: '\u043D\u0435\u043A\u043E\u043B\u0438\u043A\u043E \u0441\u0435\u043A\u0443\u043D\u0434\u0438',
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: '\u0434\u0430\u043D',
            dd: translator.translate,
            M: '\u043C\u0435\u0441\u0435\u0446',
            MM: translator.translate,
            y: '\u0433\u043E\u0434\u0438\u043D\u0443',
            yy: translator.translate
        },
        ordinal: '%d.',
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/sr', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    var translator = {
            words: {
                m: [
                    'jedan minut',
                    'jedne minute'
                ],
                mm: [
                    'minut',
                    'minute',
                    'minuta'
                ],
                h: [
                    'jedan sat',
                    'jednog sata'
                ],
                hh: [
                    'sat',
                    'sata',
                    'sati'
                ],
                dd: [
                    'dan',
                    'dana',
                    'dana'
                ],
                MM: [
                    'mesec',
                    'meseca',
                    'meseci'
                ],
                yy: [
                    'godina',
                    'godine',
                    'godina'
                ]
            },
            correctGrammaticalCase: function (number, wordKey) {
                return number === 1 ? wordKey[0] : number >= 2 && number <= 4 ? wordKey[1] : wordKey[2];
            },
            translate: function (number, withoutSuffix, key) {
                var wordKey = translator.words[key];
                if (key.length === 1) {
                    return withoutSuffix ? wordKey[0] : wordKey[1];
                } else {
                    return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
                }
            }
        };
    return moment.lang('sr', {
        months: [
            'januar',
            'februar',
            'mart',
            'april',
            'maj',
            'jun',
            'jul',
            'avgust',
            'septembar',
            'oktobar',
            'novembar',
            'decembar'
        ],
        monthsShort: [
            'jan.',
            'feb.',
            'mar.',
            'apr.',
            'maj',
            'jun',
            'jul',
            'avg.',
            'sep.',
            'okt.',
            'nov.',
            'dec.'
        ],
        weekdays: [
            'nedelja',
            'ponedeljak',
            'utorak',
            'sreda',
            '\u010Detvrtak',
            'petak',
            'subota'
        ],
        weekdaysShort: [
            'ned.',
            'pon.',
            'uto.',
            'sre.',
            '\u010Det.',
            'pet.',
            'sub.'
        ],
        weekdaysMin: [
            'ne',
            'po',
            'ut',
            'sr',
            '\u010De',
            'pe',
            'su'
        ],
        longDateFormat: {
            LT: 'H:mm',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY LT',
            LLLL: 'dddd, D. MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[u] [nedelju] [u] LT';
                case 3:
                    return '[u] [sredu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
                }
            },
            lastDay: '[ju\u010De u] LT',
            lastWeek: function () {
                var lastWeekDays = [
                        '[pro\u0161le] [nedelje] [u] LT',
                        '[pro\u0161log] [ponedeljka] [u] LT',
                        '[pro\u0161log] [utorka] [u] LT',
                        '[pro\u0161le] [srede] [u] LT',
                        '[pro\u0161log] [\u010Detvrtka] [u] LT',
                        '[pro\u0161log] [petka] [u] LT',
                        '[pro\u0161le] [subote] [u] LT'
                    ];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: 'za %s',
            past: 'pre %s',
            s: 'nekoliko sekundi',
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: 'dan',
            dd: translator.translate,
            M: 'mesec',
            MM: translator.translate,
            y: 'godinu',
            yy: translator.translate
        },
        ordinal: '%d.',
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/sv', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('sv', {
        months: 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 's\xF6ndag_m\xE5ndag_tisdag_onsdag_torsdag_fredag_l\xF6rdag'.split('_'),
        weekdaysShort: 's\xF6n_m\xE5n_tis_ons_tor_fre_l\xF6r'.split('_'),
        weekdaysMin: 's\xF6_m\xE5_ti_on_to_fr_l\xF6'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd D MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[Idag] LT',
            nextDay: '[Imorgon] LT',
            lastDay: '[Ig\xE5r] LT',
            nextWeek: 'dddd LT',
            lastWeek: '[F\xF6rra] dddd[en] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'om %s',
            past: 'f\xF6r %s sedan',
            s: 'n\xE5gra sekunder',
            m: 'en minut',
            mm: '%d minuter',
            h: 'en timme',
            hh: '%d timmar',
            d: 'en dag',
            dd: '%d dagar',
            M: 'en m\xE5nad',
            MM: '%d m\xE5nader',
            y: 'ett \xE5r',
            yy: '%d \xE5r'
        },
        ordinal: function (number) {
            var b = number % 10, output = ~~(number % 100 / 10) === 1 ? 'e' : b === 1 ? 'a' : b === 2 ? 'a' : b === 3 ? 'e' : 'e';
            return number + output;
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/ta', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('ta', {
        months: '\u0B9C\u0BA9\u0BB5\u0BB0\u0BBF_\u0BAA\u0BBF\u0BAA\u0BCD\u0BB0\u0BB5\u0BB0\u0BBF_\u0BAE\u0BBE\u0BB0\u0BCD\u0B9A\u0BCD_\u0B8F\u0BAA\u0BCD\u0BB0\u0BB2\u0BCD_\u0BAE\u0BC7_\u0B9C\u0BC2\u0BA9\u0BCD_\u0B9C\u0BC2\u0BB2\u0BC8_\u0B86\u0B95\u0BB8\u0BCD\u0B9F\u0BCD_\u0B9A\u0BC6\u0BAA\u0BCD\u0B9F\u0BC6\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD_\u0B85\u0B95\u0BCD\u0B9F\u0BC7\u0BBE\u0BAA\u0BB0\u0BCD_\u0BA8\u0BB5\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD_\u0B9F\u0BBF\u0B9A\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD'.split('_'),
        monthsShort: '\u0B9C\u0BA9\u0BB5\u0BB0\u0BBF_\u0BAA\u0BBF\u0BAA\u0BCD\u0BB0\u0BB5\u0BB0\u0BBF_\u0BAE\u0BBE\u0BB0\u0BCD\u0B9A\u0BCD_\u0B8F\u0BAA\u0BCD\u0BB0\u0BB2\u0BCD_\u0BAE\u0BC7_\u0B9C\u0BC2\u0BA9\u0BCD_\u0B9C\u0BC2\u0BB2\u0BC8_\u0B86\u0B95\u0BB8\u0BCD\u0B9F\u0BCD_\u0B9A\u0BC6\u0BAA\u0BCD\u0B9F\u0BC6\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD_\u0B85\u0B95\u0BCD\u0B9F\u0BC7\u0BBE\u0BAA\u0BB0\u0BCD_\u0BA8\u0BB5\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD_\u0B9F\u0BBF\u0B9A\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD'.split('_'),
        weekdays: '\u0B9E\u0BBE\u0BAF\u0BBF\u0BB1\u0BCD\u0BB1\u0BC1\u0B95\u0BCD\u0B95\u0BBF\u0BB4\u0BAE\u0BC8_\u0BA4\u0BBF\u0B99\u0BCD\u0B95\u0B9F\u0BCD\u0B95\u0BBF\u0BB4\u0BAE\u0BC8_\u0B9A\u0BC6\u0BB5\u0BCD\u0BB5\u0BBE\u0BAF\u0BCD\u0B95\u0BBF\u0BB4\u0BAE\u0BC8_\u0BAA\u0BC1\u0BA4\u0BA9\u0BCD\u0B95\u0BBF\u0BB4\u0BAE\u0BC8_\u0BB5\u0BBF\u0BAF\u0BBE\u0BB4\u0B95\u0BCD\u0B95\u0BBF\u0BB4\u0BAE\u0BC8_\u0BB5\u0BC6\u0BB3\u0BCD\u0BB3\u0BBF\u0B95\u0BCD\u0B95\u0BBF\u0BB4\u0BAE\u0BC8_\u0B9A\u0BA9\u0BBF\u0B95\u0BCD\u0B95\u0BBF\u0BB4\u0BAE\u0BC8'.split('_'),
        weekdaysShort: '\u0B9E\u0BBE\u0BAF\u0BBF\u0BB1\u0BC1_\u0BA4\u0BBF\u0B99\u0BCD\u0B95\u0BB3\u0BCD_\u0B9A\u0BC6\u0BB5\u0BCD\u0BB5\u0BBE\u0BAF\u0BCD_\u0BAA\u0BC1\u0BA4\u0BA9\u0BCD_\u0BB5\u0BBF\u0BAF\u0BBE\u0BB4\u0BA9\u0BCD_\u0BB5\u0BC6\u0BB3\u0BCD\u0BB3\u0BBF_\u0B9A\u0BA9\u0BBF'.split('_'),
        weekdaysMin: '\u0B9E\u0BBE_\u0BA4\u0BBF_\u0B9A\u0BC6_\u0BAA\u0BC1_\u0BB5\u0BBF_\u0BB5\u0BC6_\u0B9A'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, LT',
            LLLL: 'dddd, D MMMM YYYY, LT'
        },
        calendar: {
            sameDay: '[\u0B87\u0BA9\u0BCD\u0BB1\u0BC1] LT',
            nextDay: '[\u0BA8\u0BBE\u0BB3\u0BC8] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[\u0BA8\u0BC7\u0BB1\u0BCD\u0BB1\u0BC1] LT',
            lastWeek: '[\u0B95\u0B9F\u0BA8\u0BCD\u0BA4 \u0BB5\u0BBE\u0BB0\u0BAE\u0BCD] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s \u0B87\u0BB2\u0BCD',
            past: '%s \u0BAE\u0BC1\u0BA9\u0BCD',
            s: '\u0B92\u0BB0\u0BC1 \u0B9A\u0BBF\u0BB2 \u0BB5\u0BBF\u0BA8\u0BBE\u0B9F\u0BBF\u0B95\u0BB3\u0BCD',
            m: '\u0B92\u0BB0\u0BC1 \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0BAE\u0BCD',
            mm: '%d \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0B99\u0BCD\u0B95\u0BB3\u0BCD',
            h: '\u0B92\u0BB0\u0BC1 \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BAE\u0BCD',
            hh: '%d \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BAE\u0BCD',
            d: '\u0B92\u0BB0\u0BC1 \u0BA8\u0BBE\u0BB3\u0BCD',
            dd: '%d \u0BA8\u0BBE\u0B9F\u0BCD\u0B95\u0BB3\u0BCD',
            M: '\u0B92\u0BB0\u0BC1 \u0BAE\u0BBE\u0BA4\u0BAE\u0BCD',
            MM: '%d \u0BAE\u0BBE\u0BA4\u0B99\u0BCD\u0B95\u0BB3\u0BCD',
            y: '\u0B92\u0BB0\u0BC1 \u0BB5\u0BB0\u0BC1\u0B9F\u0BAE\u0BCD',
            yy: '%d \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BCD'
        },
        ordinal: function (number) {
            return number + '\u0BB5\u0BA4\u0BC1';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour >= 6 && hour <= 10) {
                return ' \u0B95\u0BBE\u0BB2\u0BC8';
            } else if (hour >= 10 && hour <= 14) {
                return ' \u0BA8\u0BA3\u0BCD\u0BAA\u0B95\u0BB2\u0BCD';
            } else if (hour >= 14 && hour <= 18) {
                return ' \u0B8E\u0BB1\u0BCD\u0BAA\u0BBE\u0B9F\u0BC1';
            } else if (hour >= 18 && hour <= 20) {
                return ' \u0BAE\u0BBE\u0BB2\u0BC8';
            } else if (hour >= 20 && hour <= 24) {
                return ' \u0B87\u0BB0\u0BB5\u0BC1';
            } else if (hour >= 0 && hour <= 6) {
                return ' \u0BB5\u0BC8\u0B95\u0BB1\u0BC8';
            }
        },
        week: {
            dow: 0,
            doy: 6
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/th', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('th', {
        months: '\u0E21\u0E01\u0E23\u0E32\u0E04\u0E21_\u0E01\u0E38\u0E21\u0E20\u0E32\u0E1E\u0E31\u0E19\u0E18\u0E4C_\u0E21\u0E35\u0E19\u0E32\u0E04\u0E21_\u0E40\u0E21\u0E29\u0E32\u0E22\u0E19_\u0E1E\u0E24\u0E29\u0E20\u0E32\u0E04\u0E21_\u0E21\u0E34\u0E16\u0E38\u0E19\u0E32\u0E22\u0E19_\u0E01\u0E23\u0E01\u0E0E\u0E32\u0E04\u0E21_\u0E2A\u0E34\u0E07\u0E2B\u0E32\u0E04\u0E21_\u0E01\u0E31\u0E19\u0E22\u0E32\u0E22\u0E19_\u0E15\u0E38\u0E25\u0E32\u0E04\u0E21_\u0E1E\u0E24\u0E28\u0E08\u0E34\u0E01\u0E32\u0E22\u0E19_\u0E18\u0E31\u0E19\u0E27\u0E32\u0E04\u0E21'.split('_'),
        monthsShort: '\u0E21\u0E01\u0E23\u0E32_\u0E01\u0E38\u0E21\u0E20\u0E32_\u0E21\u0E35\u0E19\u0E32_\u0E40\u0E21\u0E29\u0E32_\u0E1E\u0E24\u0E29\u0E20\u0E32_\u0E21\u0E34\u0E16\u0E38\u0E19\u0E32_\u0E01\u0E23\u0E01\u0E0E\u0E32_\u0E2A\u0E34\u0E07\u0E2B\u0E32_\u0E01\u0E31\u0E19\u0E22\u0E32_\u0E15\u0E38\u0E25\u0E32_\u0E1E\u0E24\u0E28\u0E08\u0E34\u0E01\u0E32_\u0E18\u0E31\u0E19\u0E27\u0E32'.split('_'),
        weekdays: '\u0E2D\u0E32\u0E17\u0E34\u0E15\u0E22\u0E4C_\u0E08\u0E31\u0E19\u0E17\u0E23\u0E4C_\u0E2D\u0E31\u0E07\u0E04\u0E32\u0E23_\u0E1E\u0E38\u0E18_\u0E1E\u0E24\u0E2B\u0E31\u0E2A\u0E1A\u0E14\u0E35_\u0E28\u0E38\u0E01\u0E23\u0E4C_\u0E40\u0E2A\u0E32\u0E23\u0E4C'.split('_'),
        weekdaysShort: '\u0E2D\u0E32\u0E17\u0E34\u0E15\u0E22\u0E4C_\u0E08\u0E31\u0E19\u0E17\u0E23\u0E4C_\u0E2D\u0E31\u0E07\u0E04\u0E32\u0E23_\u0E1E\u0E38\u0E18_\u0E1E\u0E24\u0E2B\u0E31\u0E2A_\u0E28\u0E38\u0E01\u0E23\u0E4C_\u0E40\u0E2A\u0E32\u0E23\u0E4C'.split('_'),
        weekdaysMin: '\u0E2D\u0E32._\u0E08._\u0E2D._\u0E1E._\u0E1E\u0E24._\u0E28._\u0E2A.'.split('_'),
        longDateFormat: {
            LT: 'H \u0E19\u0E32\u0E2C\u0E34\u0E01\u0E32 m \u0E19\u0E32\u0E17\u0E35',
            L: 'YYYY/MM/DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY \u0E40\u0E27\u0E25\u0E32 LT',
            LLLL: '\u0E27\u0E31\u0E19dddd\u0E17\u0E35\u0E48 D MMMM YYYY \u0E40\u0E27\u0E25\u0E32 LT'
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return '\u0E01\u0E48\u0E2D\u0E19\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07';
            } else {
                return '\u0E2B\u0E25\u0E31\u0E07\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07';
            }
        },
        calendar: {
            sameDay: '[\u0E27\u0E31\u0E19\u0E19\u0E35\u0E49 \u0E40\u0E27\u0E25\u0E32] LT',
            nextDay: '[\u0E1E\u0E23\u0E38\u0E48\u0E07\u0E19\u0E35\u0E49 \u0E40\u0E27\u0E25\u0E32] LT',
            nextWeek: 'dddd[\u0E2B\u0E19\u0E49\u0E32 \u0E40\u0E27\u0E25\u0E32] LT',
            lastDay: '[\u0E40\u0E21\u0E37\u0E48\u0E2D\u0E27\u0E32\u0E19\u0E19\u0E35\u0E49 \u0E40\u0E27\u0E25\u0E32] LT',
            lastWeek: '[\u0E27\u0E31\u0E19]dddd[\u0E17\u0E35\u0E48\u0E41\u0E25\u0E49\u0E27 \u0E40\u0E27\u0E25\u0E32] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '\u0E2D\u0E35\u0E01 %s',
            past: '%s\u0E17\u0E35\u0E48\u0E41\u0E25\u0E49\u0E27',
            s: '\u0E44\u0E21\u0E48\u0E01\u0E35\u0E48\u0E27\u0E34\u0E19\u0E32\u0E17\u0E35',
            m: '1 \u0E19\u0E32\u0E17\u0E35',
            mm: '%d \u0E19\u0E32\u0E17\u0E35',
            h: '1 \u0E0A\u0E31\u0E48\u0E27\u0E42\u0E21\u0E07',
            hh: '%d \u0E0A\u0E31\u0E48\u0E27\u0E42\u0E21\u0E07',
            d: '1 \u0E27\u0E31\u0E19',
            dd: '%d \u0E27\u0E31\u0E19',
            M: '1 \u0E40\u0E14\u0E37\u0E2D\u0E19',
            MM: '%d \u0E40\u0E14\u0E37\u0E2D\u0E19',
            y: '1 \u0E1B\u0E35',
            yy: '%d \u0E1B\u0E35'
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/tl-ph', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('tl-ph', {
        months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
        monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
        weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
        weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
        weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'MM/D/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY LT',
            LLLL: 'dddd, MMMM DD, YYYY LT'
        },
        calendar: {
            sameDay: '[Ngayon sa] LT',
            nextDay: '[Bukas sa] LT',
            nextWeek: 'dddd [sa] LT',
            lastDay: '[Kahapon sa] LT',
            lastWeek: 'dddd [huling linggo] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'sa loob ng %s',
            past: '%s ang nakalipas',
            s: 'ilang segundo',
            m: 'isang minuto',
            mm: '%d minuto',
            h: 'isang oras',
            hh: '%d oras',
            d: 'isang araw',
            dd: '%d araw',
            M: 'isang buwan',
            MM: '%d buwan',
            y: 'isang taon',
            yy: '%d taon'
        },
        ordinal: function (number) {
            return number;
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/tr', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    var suffixes = {
            1: '\'inci',
            5: '\'inci',
            8: '\'inci',
            70: '\'inci',
            80: '\'inci',
            2: '\'nci',
            7: '\'nci',
            20: '\'nci',
            50: '\'nci',
            3: '\'\xFCnc\xFC',
            4: '\'\xFCnc\xFC',
            100: '\'\xFCnc\xFC',
            6: '\'nc\u0131',
            9: '\'uncu',
            10: '\'uncu',
            30: '\'uncu',
            60: '\'\u0131nc\u0131',
            90: '\'\u0131nc\u0131'
        };
    return moment.lang('tr', {
        months: 'Ocak_\u015Eubat_Mart_Nisan_May\u0131s_Haziran_Temmuz_A\u011Fustos_Eyl\xFCl_Ekim_Kas\u0131m_Aral\u0131k'.split('_'),
        monthsShort: 'Oca_\u015Eub_Mar_Nis_May_Haz_Tem_A\u011Fu_Eyl_Eki_Kas_Ara'.split('_'),
        weekdays: 'Pazar_Pazartesi_Sal\u0131_\xC7ar\u015Famba_Per\u015Fembe_Cuma_Cumartesi'.split('_'),
        weekdaysShort: 'Paz_Pts_Sal_\xC7ar_Per_Cum_Cts'.split('_'),
        weekdaysMin: 'Pz_Pt_Sa_\xC7a_Pe_Cu_Ct'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd, D MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[bug\xFCn saat] LT',
            nextDay: '[yar\u0131n saat] LT',
            nextWeek: '[haftaya] dddd [saat] LT',
            lastDay: '[d\xFCn] LT',
            lastWeek: '[ge\xE7en hafta] dddd [saat] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s sonra',
            past: '%s \xF6nce',
            s: 'birka\xE7 saniye',
            m: 'bir dakika',
            mm: '%d dakika',
            h: 'bir saat',
            hh: '%d saat',
            d: 'bir g\xFCn',
            dd: '%d g\xFCn',
            M: 'bir ay',
            MM: '%d ay',
            y: 'bir y\u0131l',
            yy: '%d y\u0131l'
        },
        ordinal: function (number) {
            if (number === 0) {
                return number + '\'\u0131nc\u0131';
            }
            var a = number % 10, b = number % 100 - a, c = number >= 100 ? 100 : null;
            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

define('moment/lang/tzm-la', [
    'require',
    'exports',
    'module',
    '../moment'
], function (require, exports, module) {
    require('../moment').lang('tzm-la', {
        months: 'innayr_br\u02E4ayr\u02E4_mar\u02E4s\u02E4_ibrir_mayyw_ywnyw_ywlywz_\u0263w\u0161t_\u0161wtanbir_kt\u02E4wbr\u02E4_nwwanbir_dwjnbir'.split('_'),
        monthsShort: 'innayr_br\u02E4ayr\u02E4_mar\u02E4s\u02E4_ibrir_mayyw_ywnyw_ywlywz_\u0263w\u0161t_\u0161wtanbir_kt\u02E4wbr\u02E4_nwwanbir_dwjnbir'.split('_'),
        weekdays: 'asamas_aynas_asinas_akras_akwas_asimwas_asi\u1E0Dyas'.split('_'),
        weekdaysShort: 'asamas_aynas_asinas_akras_akwas_asimwas_asi\u1E0Dyas'.split('_'),
        weekdaysMin: 'asamas_aynas_asinas_akras_akwas_asimwas_asi\u1E0Dyas'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd D MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[asdkh g] LT',
            nextDay: '[aska g] LT',
            nextWeek: 'dddd [g] LT',
            lastDay: '[assant g] LT',
            lastWeek: 'dddd [g] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dadkh s yan %s',
            past: 'yan %s',
            s: 'imik',
            m: 'minu\u1E0D',
            mm: '%d minu\u1E0D',
            h: 'sa\u025Ba',
            hh: '%d tassa\u025Bin',
            d: 'ass',
            dd: '%d ossan',
            M: 'ayowr',
            MM: '%d iyyirn',
            y: 'asgas',
            yy: '%d isgasn'
        },
        week: {
            dow: 6,
            doy: 12
        }
    });
});

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/tzm-latn', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('tzm-latn', {
        months: 'innayr_br\u02E4ayr\u02E4_mar\u02E4s\u02E4_ibrir_mayyw_ywnyw_ywlywz_\u0263w\u0161t_\u0161wtanbir_kt\u02E4wbr\u02E4_nwwanbir_dwjnbir'.split('_'),
        monthsShort: 'innayr_br\u02E4ayr\u02E4_mar\u02E4s\u02E4_ibrir_mayyw_ywnyw_ywlywz_\u0263w\u0161t_\u0161wtanbir_kt\u02E4wbr\u02E4_nwwanbir_dwjnbir'.split('_'),
        weekdays: 'asamas_aynas_asinas_akras_akwas_asimwas_asi\u1E0Dyas'.split('_'),
        weekdaysShort: 'asamas_aynas_asinas_akras_akwas_asimwas_asi\u1E0Dyas'.split('_'),
        weekdaysMin: 'asamas_aynas_asinas_akras_akwas_asimwas_asi\u1E0Dyas'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd D MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[asdkh g] LT',
            nextDay: '[aska g] LT',
            nextWeek: 'dddd [g] LT',
            lastDay: '[assant g] LT',
            lastWeek: 'dddd [g] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'dadkh s yan %s',
            past: 'yan %s',
            s: 'imik',
            m: 'minu\u1E0D',
            mm: '%d minu\u1E0D',
            h: 'sa\u025Ba',
            hh: '%d tassa\u025Bin',
            d: 'ass',
            dd: '%d ossan',
            M: 'ayowr',
            MM: '%d iyyirn',
            y: 'asgas',
            yy: '%d isgasn'
        },
        week: {
            dow: 6,
            doy: 12
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/tzm', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('tzm', {
        months: '\u2D49\u2D4F\u2D4F\u2D30\u2D62\u2D54_\u2D31\u2D55\u2D30\u2D62\u2D55_\u2D4E\u2D30\u2D55\u2D5A_\u2D49\u2D31\u2D54\u2D49\u2D54_\u2D4E\u2D30\u2D62\u2D62\u2D53_\u2D62\u2D53\u2D4F\u2D62\u2D53_\u2D62\u2D53\u2D4D\u2D62\u2D53\u2D63_\u2D56\u2D53\u2D5B\u2D5C_\u2D5B\u2D53\u2D5C\u2D30\u2D4F\u2D31\u2D49\u2D54_\u2D3D\u2D5F\u2D53\u2D31\u2D55_\u2D4F\u2D53\u2D61\u2D30\u2D4F\u2D31\u2D49\u2D54_\u2D37\u2D53\u2D4A\u2D4F\u2D31\u2D49\u2D54'.split('_'),
        monthsShort: '\u2D49\u2D4F\u2D4F\u2D30\u2D62\u2D54_\u2D31\u2D55\u2D30\u2D62\u2D55_\u2D4E\u2D30\u2D55\u2D5A_\u2D49\u2D31\u2D54\u2D49\u2D54_\u2D4E\u2D30\u2D62\u2D62\u2D53_\u2D62\u2D53\u2D4F\u2D62\u2D53_\u2D62\u2D53\u2D4D\u2D62\u2D53\u2D63_\u2D56\u2D53\u2D5B\u2D5C_\u2D5B\u2D53\u2D5C\u2D30\u2D4F\u2D31\u2D49\u2D54_\u2D3D\u2D5F\u2D53\u2D31\u2D55_\u2D4F\u2D53\u2D61\u2D30\u2D4F\u2D31\u2D49\u2D54_\u2D37\u2D53\u2D4A\u2D4F\u2D31\u2D49\u2D54'.split('_'),
        weekdays: '\u2D30\u2D59\u2D30\u2D4E\u2D30\u2D59_\u2D30\u2D62\u2D4F\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D4F\u2D30\u2D59_\u2D30\u2D3D\u2D54\u2D30\u2D59_\u2D30\u2D3D\u2D61\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D4E\u2D61\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D39\u2D62\u2D30\u2D59'.split('_'),
        weekdaysShort: '\u2D30\u2D59\u2D30\u2D4E\u2D30\u2D59_\u2D30\u2D62\u2D4F\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D4F\u2D30\u2D59_\u2D30\u2D3D\u2D54\u2D30\u2D59_\u2D30\u2D3D\u2D61\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D4E\u2D61\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D39\u2D62\u2D30\u2D59'.split('_'),
        weekdaysMin: '\u2D30\u2D59\u2D30\u2D4E\u2D30\u2D59_\u2D30\u2D62\u2D4F\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D4F\u2D30\u2D59_\u2D30\u2D3D\u2D54\u2D30\u2D59_\u2D30\u2D3D\u2D61\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D4E\u2D61\u2D30\u2D59_\u2D30\u2D59\u2D49\u2D39\u2D62\u2D30\u2D59'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'dddd D MMMM YYYY LT'
        },
        calendar: {
            sameDay: '[\u2D30\u2D59\u2D37\u2D45 \u2D34] LT',
            nextDay: '[\u2D30\u2D59\u2D3D\u2D30 \u2D34] LT',
            nextWeek: 'dddd [\u2D34] LT',
            lastDay: '[\u2D30\u2D5A\u2D30\u2D4F\u2D5C \u2D34] LT',
            lastWeek: 'dddd [\u2D34] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '\u2D37\u2D30\u2D37\u2D45 \u2D59 \u2D62\u2D30\u2D4F %s',
            past: '\u2D62\u2D30\u2D4F %s',
            s: '\u2D49\u2D4E\u2D49\u2D3D',
            m: '\u2D4E\u2D49\u2D4F\u2D53\u2D3A',
            mm: '%d \u2D4E\u2D49\u2D4F\u2D53\u2D3A',
            h: '\u2D59\u2D30\u2D44\u2D30',
            hh: '%d \u2D5C\u2D30\u2D59\u2D59\u2D30\u2D44\u2D49\u2D4F',
            d: '\u2D30\u2D59\u2D59',
            dd: '%d o\u2D59\u2D59\u2D30\u2D4F',
            M: '\u2D30\u2D62o\u2D53\u2D54',
            MM: '%d \u2D49\u2D62\u2D62\u2D49\u2D54\u2D4F',
            y: '\u2D30\u2D59\u2D33\u2D30\u2D59',
            yy: '%d \u2D49\u2D59\u2D33\u2D30\u2D59\u2D4F'
        },
        week: {
            dow: 6,
            doy: 12
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/uk', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
                'mm': '\u0445\u0432\u0438\u043B\u0438\u043D\u0430_\u0445\u0432\u0438\u043B\u0438\u043D\u0438_\u0445\u0432\u0438\u043B\u0438\u043D',
                'hh': '\u0433\u043E\u0434\u0438\u043D\u0430_\u0433\u043E\u0434\u0438\u043D\u0438_\u0433\u043E\u0434\u0438\u043D',
                'dd': '\u0434\u0435\u043D\u044C_\u0434\u043D\u0456_\u0434\u043D\u0456\u0432',
                'MM': '\u043C\u0456\u0441\u044F\u0446\u044C_\u043C\u0456\u0441\u044F\u0446\u0456_\u043C\u0456\u0441\u044F\u0446\u0456\u0432',
                'yy': '\u0440\u0456\u043A_\u0440\u043E\u043A\u0438_\u0440\u043E\u043A\u0456\u0432'
            };
        if (key === 'm') {
            return withoutSuffix ? '\u0445\u0432\u0438\u043B\u0438\u043D\u0430' : '\u0445\u0432\u0438\u043B\u0438\u043D\u0443';
        } else if (key === 'h') {
            return withoutSuffix ? '\u0433\u043E\u0434\u0438\u043D\u0430' : '\u0433\u043E\u0434\u0438\u043D\u0443';
        } else {
            return number + ' ' + plural(format[key], +number);
        }
    }
    function monthsCaseReplace(m, format) {
        var months = {
                'nominative': '\u0441\u0456\u0447\u0435\u043D\u044C_\u043B\u044E\u0442\u0438\u0439_\u0431\u0435\u0440\u0435\u0437\u0435\u043D\u044C_\u043A\u0432\u0456\u0442\u0435\u043D\u044C_\u0442\u0440\u0430\u0432\u0435\u043D\u044C_\u0447\u0435\u0440\u0432\u0435\u043D\u044C_\u043B\u0438\u043F\u0435\u043D\u044C_\u0441\u0435\u0440\u043F\u0435\u043D\u044C_\u0432\u0435\u0440\u0435\u0441\u0435\u043D\u044C_\u0436\u043E\u0432\u0442\u0435\u043D\u044C_\u043B\u0438\u0441\u0442\u043E\u043F\u0430\u0434_\u0433\u0440\u0443\u0434\u0435\u043D\u044C'.split('_'),
                'accusative': '\u0441\u0456\u0447\u043D\u044F_\u043B\u044E\u0442\u043E\u0433\u043E_\u0431\u0435\u0440\u0435\u0437\u043D\u044F_\u043A\u0432\u0456\u0442\u043D\u044F_\u0442\u0440\u0430\u0432\u043D\u044F_\u0447\u0435\u0440\u0432\u043D\u044F_\u043B\u0438\u043F\u043D\u044F_\u0441\u0435\u0440\u043F\u043D\u044F_\u0432\u0435\u0440\u0435\u0441\u043D\u044F_\u0436\u043E\u0432\u0442\u043D\u044F_\u043B\u0438\u0441\u0442\u043E\u043F\u0430\u0434\u0430_\u0433\u0440\u0443\u0434\u043D\u044F'.split('_')
            }, nounCase = /D[oD]? *MMMM?/.test(format) ? 'accusative' : 'nominative';
        return months[nounCase][m.month()];
    }
    function weekdaysCaseReplace(m, format) {
        var weekdays = {
                'nominative': '\u043D\u0435\u0434\u0456\u043B\u044F_\u043F\u043E\u043D\u0435\u0434\u0456\u043B\u043E\u043A_\u0432\u0456\u0432\u0442\u043E\u0440\u043E\u043A_\u0441\u0435\u0440\u0435\u0434\u0430_\u0447\u0435\u0442\u0432\u0435\u0440_\u043F\u2019\u044F\u0442\u043D\u0438\u0446\u044F_\u0441\u0443\u0431\u043E\u0442\u0430'.split('_'),
                'accusative': '\u043D\u0435\u0434\u0456\u043B\u044E_\u043F\u043E\u043D\u0435\u0434\u0456\u043B\u043E\u043A_\u0432\u0456\u0432\u0442\u043E\u0440\u043E\u043A_\u0441\u0435\u0440\u0435\u0434\u0443_\u0447\u0435\u0442\u0432\u0435\u0440_\u043F\u2019\u044F\u0442\u043D\u0438\u0446\u044E_\u0441\u0443\u0431\u043E\u0442\u0443'.split('_'),
                'genitive': '\u043D\u0435\u0434\u0456\u043B\u0456_\u043F\u043E\u043D\u0435\u0434\u0456\u043B\u043A\u0430_\u0432\u0456\u0432\u0442\u043E\u0440\u043A\u0430_\u0441\u0435\u0440\u0435\u0434\u0438_\u0447\u0435\u0442\u0432\u0435\u0440\u0433\u0430_\u043F\u2019\u044F\u0442\u043D\u0438\u0446\u0456_\u0441\u0443\u0431\u043E\u0442\u0438'.split('_')
            }, nounCase = /(\[[ВвУу]\]) ?dddd/.test(format) ? 'accusative' : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(format) ? 'genitive' : 'nominative';
        return weekdays[nounCase][m.day()];
    }
    function processHoursFunction(str) {
        return function () {
            return str + '\u043E' + (this.hours() === 11 ? '\u0431' : '') + '] LT';
        };
    }
    return moment.lang('uk', {
        months: monthsCaseReplace,
        monthsShort: '\u0441\u0456\u0447_\u043B\u044E\u0442_\u0431\u0435\u0440_\u043A\u0432\u0456\u0442_\u0442\u0440\u0430\u0432_\u0447\u0435\u0440\u0432_\u043B\u0438\u043F_\u0441\u0435\u0440\u043F_\u0432\u0435\u0440_\u0436\u043E\u0432\u0442_\u043B\u0438\u0441\u0442_\u0433\u0440\u0443\u0434'.split('_'),
        weekdays: weekdaysCaseReplace,
        weekdaysShort: '\u043D\u0434_\u043F\u043D_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043F\u0442_\u0441\u0431'.split('_'),
        weekdaysMin: '\u043D\u0434_\u043F\u043D_\u0432\u0442_\u0441\u0440_\u0447\u0442_\u043F\u0442_\u0441\u0431'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY \u0440.',
            LLL: 'D MMMM YYYY \u0440., LT',
            LLLL: 'dddd, D MMMM YYYY \u0440., LT'
        },
        calendar: {
            sameDay: processHoursFunction('[\u0421\u044C\u043E\u0433\u043E\u0434\u043D\u0456 '),
            nextDay: processHoursFunction('[\u0417\u0430\u0432\u0442\u0440\u0430 '),
            lastDay: processHoursFunction('[\u0412\u0447\u043E\u0440\u0430 '),
            nextWeek: processHoursFunction('[\u0423] dddd ['),
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 5:
                case 6:
                    return processHoursFunction('[\u041C\u0438\u043D\u0443\u043B\u043E\u0457] dddd [').call(this);
                case 1:
                case 2:
                case 4:
                    return processHoursFunction('[\u041C\u0438\u043D\u0443\u043B\u043E\u0433\u043E] dddd [').call(this);
                }
            },
            sameElse: 'L'
        },
        relativeTime: {
            future: '\u0437\u0430 %s',
            past: '%s \u0442\u043E\u043C\u0443',
            s: '\u0434\u0435\u043A\u0456\u043B\u044C\u043A\u0430 \u0441\u0435\u043A\u0443\u043D\u0434',
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: '\u0433\u043E\u0434\u0438\u043D\u0443',
            hh: relativeTimeWithPlural,
            d: '\u0434\u0435\u043D\u044C',
            dd: relativeTimeWithPlural,
            M: '\u043C\u0456\u0441\u044F\u0446\u044C',
            MM: relativeTimeWithPlural,
            y: '\u0440\u0456\u043A',
            yy: relativeTimeWithPlural
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return '\u043D\u043E\u0447\u0456';
            } else if (hour < 12) {
                return '\u0440\u0430\u043D\u043A\u0443';
            } else if (hour < 17) {
                return '\u0434\u043D\u044F';
            } else {
                return '\u0432\u0435\u0447\u043E\u0440\u0430';
            }
        },
        ordinal: function (number, period) {
            switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
            case 'w':
            case 'W':
                return number + '-\u0439';
            case 'D':
                return number + '-\u0433\u043E';
            default:
                return number;
            }
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/uz', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('uz', {
        months: '\u044F\u043D\u0432\u0430\u0440\u044C_\u0444\u0435\u0432\u0440\u0430\u043B\u044C_\u043C\u0430\u0440\u0442_\u0430\u043F\u0440\u0435\u043B\u044C_\u043C\u0430\u0439_\u0438\u044E\u043D\u044C_\u0438\u044E\u043B\u044C_\u0430\u0432\u0433\u0443\u0441\u0442_\u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044C_\u043E\u043A\u0442\u044F\u0431\u0440\u044C_\u043D\u043E\u044F\u0431\u0440\u044C_\u0434\u0435\u043A\u0430\u0431\u0440\u044C'.split('_'),
        monthsShort: '\u044F\u043D\u0432_\u0444\u0435\u0432_\u043C\u0430\u0440_\u0430\u043F\u0440_\u043C\u0430\u0439_\u0438\u044E\u043D_\u0438\u044E\u043B_\u0430\u0432\u0433_\u0441\u0435\u043D_\u043E\u043A\u0442_\u043D\u043E\u044F_\u0434\u0435\u043A'.split('_'),
        weekdays: '\u042F\u043A\u0448\u0430\u043D\u0431\u0430_\u0414\u0443\u0448\u0430\u043D\u0431\u0430_\u0421\u0435\u0448\u0430\u043D\u0431\u0430_\u0427\u043E\u0440\u0448\u0430\u043D\u0431\u0430_\u041F\u0430\u0439\u0448\u0430\u043D\u0431\u0430_\u0416\u0443\u043C\u0430_\u0428\u0430\u043D\u0431\u0430'.split('_'),
        weekdaysShort: '\u042F\u043A\u0448_\u0414\u0443\u0448_\u0421\u0435\u0448_\u0427\u043E\u0440_\u041F\u0430\u0439_\u0416\u0443\u043C_\u0428\u0430\u043D'.split('_'),
        weekdaysMin: '\u042F\u043A_\u0414\u0443_\u0421\u0435_\u0427\u043E_\u041F\u0430_\u0416\u0443_\u0428\u0430'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY LT',
            LLLL: 'D MMMM YYYY, dddd LT'
        },
        calendar: {
            sameDay: '[\u0411\u0443\u0433\u0443\u043D \u0441\u043E\u0430\u0442] LT [\u0434\u0430]',
            nextDay: '[\u042D\u0440\u0442\u0430\u0433\u0430] LT [\u0434\u0430]',
            nextWeek: 'dddd [\u043A\u0443\u043D\u0438 \u0441\u043E\u0430\u0442] LT [\u0434\u0430]',
            lastDay: '[\u041A\u0435\u0447\u0430 \u0441\u043E\u0430\u0442] LT [\u0434\u0430]',
            lastWeek: '[\u0423\u0442\u0433\u0430\u043D] dddd [\u043A\u0443\u043D\u0438 \u0441\u043E\u0430\u0442] LT [\u0434\u0430]',
            sameElse: 'L'
        },
        relativeTime: {
            future: '\u042F\u043A\u0438\u043D %s \u0438\u0447\u0438\u0434\u0430',
            past: '\u0411\u0438\u0440 \u043D\u0435\u0447\u0430 %s \u043E\u043B\u0434\u0438\u043D',
            s: '\u0444\u0443\u0440\u0441\u0430\u0442',
            m: '\u0431\u0438\u0440 \u0434\u0430\u043A\u0438\u043A\u0430',
            mm: '%d \u0434\u0430\u043A\u0438\u043A\u0430',
            h: '\u0431\u0438\u0440 \u0441\u043E\u0430\u0442',
            hh: '%d \u0441\u043E\u0430\u0442',
            d: '\u0431\u0438\u0440 \u043A\u0443\u043D',
            dd: '%d \u043A\u0443\u043D',
            M: '\u0431\u0438\u0440 \u043E\u0439',
            MM: '%d \u043E\u0439',
            y: '\u0431\u0438\u0440 \u0439\u0438\u043B',
            yy: '%d \u0439\u0438\u043B'
        },
        week: {
            dow: 1,
            doy: 7
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/vi', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('vi', {
        months: 'th\xE1ng 1_th\xE1ng 2_th\xE1ng 3_th\xE1ng 4_th\xE1ng 5_th\xE1ng 6_th\xE1ng 7_th\xE1ng 8_th\xE1ng 9_th\xE1ng 10_th\xE1ng 11_th\xE1ng 12'.split('_'),
        monthsShort: 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
        weekdays: 'ch\u1EE7 nh\u1EADt_th\u1EE9 hai_th\u1EE9 ba_th\u1EE9 t\u01B0_th\u1EE9 n\u0103m_th\u1EE9 s\xE1u_th\u1EE9 b\u1EA3y'.split('_'),
        weekdaysShort: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysMin: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [n\u0103m] YYYY',
            LLL: 'D MMMM [n\u0103m] YYYY LT',
            LLLL: 'dddd, D MMMM [n\u0103m] YYYY LT',
            l: 'DD/M/YYYY',
            ll: 'D MMM YYYY',
            lll: 'D MMM YYYY LT',
            llll: 'ddd, D MMM YYYY LT'
        },
        calendar: {
            sameDay: '[H\xF4m nay l\xFAc] LT',
            nextDay: '[Ng\xE0y mai l\xFAc] LT',
            nextWeek: 'dddd [tu\u1EA7n t\u1EDBi l\xFAc] LT',
            lastDay: '[H\xF4m qua l\xFAc] LT',
            lastWeek: 'dddd [tu\u1EA7n r\u1ED3i l\xFAc] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s t\u1EDBi',
            past: '%s tr\u01B0\u1EDBc',
            s: 'v\xE0i gi\xE2y',
            m: 'm\u1ED9t ph\xFAt',
            mm: '%d ph\xFAt',
            h: 'm\u1ED9t gi\u1EDD',
            hh: '%d gi\u1EDD',
            d: 'm\u1ED9t ng\xE0y',
            dd: '%d ng\xE0y',
            M: 'm\u1ED9t th\xE1ng',
            MM: '%d th\xE1ng',
            y: 'm\u1ED9t n\u0103m',
            yy: '%d n\u0103m'
        },
        ordinal: function (number) {
            return number;
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/zh-cn', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('zh-cn', {
        months: '\u4E00\u6708_\u4E8C\u6708_\u4E09\u6708_\u56DB\u6708_\u4E94\u6708_\u516D\u6708_\u4E03\u6708_\u516B\u6708_\u4E5D\u6708_\u5341\u6708_\u5341\u4E00\u6708_\u5341\u4E8C\u6708'.split('_'),
        monthsShort: '1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708'.split('_'),
        weekdays: '\u661F\u671F\u65E5_\u661F\u671F\u4E00_\u661F\u671F\u4E8C_\u661F\u671F\u4E09_\u661F\u671F\u56DB_\u661F\u671F\u4E94_\u661F\u671F\u516D'.split('_'),
        weekdaysShort: '\u5468\u65E5_\u5468\u4E00_\u5468\u4E8C_\u5468\u4E09_\u5468\u56DB_\u5468\u4E94_\u5468\u516D'.split('_'),
        weekdaysMin: '\u65E5_\u4E00_\u4E8C_\u4E09_\u56DB_\u4E94_\u516D'.split('_'),
        longDateFormat: {
            LT: 'Ah\u70B9mm',
            L: 'YYYY-MM-DD',
            LL: 'YYYY\u5E74MMMD\u65E5',
            LLL: 'YYYY\u5E74MMMD\u65E5LT',
            LLLL: 'YYYY\u5E74MMMD\u65E5ddddLT',
            l: 'YYYY-MM-DD',
            ll: 'YYYY\u5E74MMMD\u65E5',
            lll: 'YYYY\u5E74MMMD\u65E5LT',
            llll: 'YYYY\u5E74MMMD\u65E5ddddLT'
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '\u51CC\u6668';
            } else if (hm < 900) {
                return '\u65E9\u4E0A';
            } else if (hm < 1130) {
                return '\u4E0A\u5348';
            } else if (hm < 1230) {
                return '\u4E2D\u5348';
            } else if (hm < 1800) {
                return '\u4E0B\u5348';
            } else {
                return '\u665A\u4E0A';
            }
        },
        calendar: {
            sameDay: function () {
                return this.minutes() === 0 ? '[\u4ECA\u5929]Ah[\u70B9\u6574]' : '[\u4ECA\u5929]LT';
            },
            nextDay: function () {
                return this.minutes() === 0 ? '[\u660E\u5929]Ah[\u70B9\u6574]' : '[\u660E\u5929]LT';
            },
            lastDay: function () {
                return this.minutes() === 0 ? '[\u6628\u5929]Ah[\u70B9\u6574]' : '[\u6628\u5929]LT';
            },
            nextWeek: function () {
                var startOfWeek, prefix;
                startOfWeek = moment().startOf('week');
                prefix = this.unix() - startOfWeek.unix() >= 7 * 24 * 3600 ? '[\u4E0B]' : '[\u672C]';
                return this.minutes() === 0 ? prefix + 'dddAh\u70B9\u6574' : prefix + 'dddAh\u70B9mm';
            },
            lastWeek: function () {
                var startOfWeek, prefix;
                startOfWeek = moment().startOf('week');
                prefix = this.unix() < startOfWeek.unix() ? '[\u4E0A]' : '[\u672C]';
                return this.minutes() === 0 ? prefix + 'dddAh\u70B9\u6574' : prefix + 'dddAh\u70B9mm';
            },
            sameElse: 'LL'
        },
        ordinal: function (number, period) {
            switch (period) {
            case 'd':
            case 'D':
            case 'DDD':
                return number + '\u65E5';
            case 'M':
                return number + '\u6708';
            case 'w':
            case 'W':
                return number + '\u5468';
            default:
                return number;
            }
        },
        relativeTime: {
            future: '%s\u5185',
            past: '%s\u524D',
            s: '\u51E0\u79D2',
            m: '1\u5206\u949F',
            mm: '%d\u5206\u949F',
            h: '1\u5C0F\u65F6',
            hh: '%d\u5C0F\u65F6',
            d: '1\u5929',
            dd: '%d\u5929',
            M: '1\u4E2A\u6708',
            MM: '%d\u4E2A\u6708',
            y: '1\u5E74',
            yy: '%d\u5E74'
        },
        week: {
            dow: 1,
            doy: 4
        }
    });
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('moment/lang/zh-tw', ['moment'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('../moment'));
    } else {
        factory(window.moment);
    }
}(function (moment) {
    return moment.lang('zh-tw', {
        months: '\u4E00\u6708_\u4E8C\u6708_\u4E09\u6708_\u56DB\u6708_\u4E94\u6708_\u516D\u6708_\u4E03\u6708_\u516B\u6708_\u4E5D\u6708_\u5341\u6708_\u5341\u4E00\u6708_\u5341\u4E8C\u6708'.split('_'),
        monthsShort: '1\u6708_2\u6708_3\u6708_4\u6708_5\u6708_6\u6708_7\u6708_8\u6708_9\u6708_10\u6708_11\u6708_12\u6708'.split('_'),
        weekdays: '\u661F\u671F\u65E5_\u661F\u671F\u4E00_\u661F\u671F\u4E8C_\u661F\u671F\u4E09_\u661F\u671F\u56DB_\u661F\u671F\u4E94_\u661F\u671F\u516D'.split('_'),
        weekdaysShort: '\u9031\u65E5_\u9031\u4E00_\u9031\u4E8C_\u9031\u4E09_\u9031\u56DB_\u9031\u4E94_\u9031\u516D'.split('_'),
        weekdaysMin: '\u65E5_\u4E00_\u4E8C_\u4E09_\u56DB_\u4E94_\u516D'.split('_'),
        longDateFormat: {
            LT: 'Ah\u9EDEmm',
            L: 'YYYY\u5E74MMMD\u65E5',
            LL: 'YYYY\u5E74MMMD\u65E5',
            LLL: 'YYYY\u5E74MMMD\u65E5LT',
            LLLL: 'YYYY\u5E74MMMD\u65E5ddddLT',
            l: 'YYYY\u5E74MMMD\u65E5',
            ll: 'YYYY\u5E74MMMD\u65E5',
            lll: 'YYYY\u5E74MMMD\u65E5LT',
            llll: 'YYYY\u5E74MMMD\u65E5ddddLT'
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 900) {
                return '\u65E9\u4E0A';
            } else if (hm < 1130) {
                return '\u4E0A\u5348';
            } else if (hm < 1230) {
                return '\u4E2D\u5348';
            } else if (hm < 1800) {
                return '\u4E0B\u5348';
            } else {
                return '\u665A\u4E0A';
            }
        },
        calendar: {
            sameDay: '[\u4ECA\u5929]LT',
            nextDay: '[\u660E\u5929]LT',
            nextWeek: '[\u4E0B]ddddLT',
            lastDay: '[\u6628\u5929]LT',
            lastWeek: '[\u4E0A]ddddLT',
            sameElse: 'L'
        },
        ordinal: function (number, period) {
            switch (period) {
            case 'd':
            case 'D':
            case 'DDD':
                return number + '\u65E5';
            case 'M':
                return number + '\u6708';
            case 'w':
            case 'W':
                return number + '\u9031';
            default:
                return number;
            }
        },
        relativeTime: {
            future: '%s\u5167',
            past: '%s\u524D',
            s: '\u5E7E\u79D2',
            m: '\u4E00\u5206\u9418',
            mm: '%d\u5206\u9418',
            h: '\u4E00\u5C0F\u6642',
            hh: '%d\u5C0F\u6642',
            d: '\u4E00\u5929',
            dd: '%d\u5929',
            M: '\u4E00\u500B\u6708',
            MM: '%d\u500B\u6708',
            y: '\u4E00\u5E74',
            yy: '%d\u5E74'
        }
    });
}));

(function (root) {
    function extend(target, source) {
        for (var key in source) {
            if (source.hasOwnProperty(key)) {
                target[key] = source[key];
            }
        }
        return target;
    }
    function Stack() {
        this.raw = [];
        this.length = 0;
    }
    Stack.prototype = {
        push: function (elem) {
            this.raw[this.length++] = elem;
        },
        pop: function () {
            if (this.length > 0) {
                var elem = this.raw[--this.length];
                this.raw.length = this.length;
                return elem;
            }
        },
        top: function () {
            return this.raw[this.length - 1];
        },
        bottom: function () {
            return this.raw[0];
        },
        find: function (condition) {
            var index = this.length;
            while (index--) {
                var item = this.raw[index];
                if (condition(item)) {
                    return item;
                }
            }
        }
    };
    var guidIndex = 178245;
    function generateGUID() {
        return '___' + guidIndex++;
    }
    function inherits(subClass, superClass) {
        var F = new Function();
        F.prototype = superClass.prototype;
        subClass.prototype = new F();
        subClass.prototype.constructor = subClass;
    }
    var HTML_ENTITY = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            '\'': '&#39;'
        };
    function htmlFilterReplacer(c) {
        return HTML_ENTITY[c];
    }
    var DEFAULT_FILTERS = {
            html: function (source) {
                return source.replace(/[&<>"']/g, htmlFilterReplacer);
            },
            url: encodeURIComponent,
            raw: function (source) {
                return source;
            }
        };
    function stringLiteralize(source) {
        return '"' + source.replace(/\x5C/g, '\\\\').replace(/"/g, '\\"').replace(/\x0A/g, '\\n').replace(/\x09/g, '\\t').replace(/\x0D/g, '\\r') + '"';
    }
    function regexpLiteral(source) {
        return source.replace(/[\^\[\]\$\(\)\{\}\?\*\.\+]/g, function (c) {
            return '\\' + c;
        });
    }
    function stringFormat(source) {
        var args = arguments;
        return source.replace(/\{([0-9]+)\}/g, function (match, index) {
            return args[index - 0 + 1];
        });
    }
    var RENDER_STRING_DECLATION = 'var r="";';
    var RENDER_STRING_ADD_START = 'r+=';
    var RENDER_STRING_ADD_END = ';';
    var RENDER_STRING_RETURN = 'return r;';
    if (typeof navigator !== 'undefined' && /msie\s*([0-9]+)/i.test(navigator.userAgent) && RegExp.$1 - 0 < 8) {
        RENDER_STRING_DECLATION = 'var r=[],ri=0;';
        RENDER_STRING_ADD_START = 'r[ri++]=';
        RENDER_STRING_RETURN = 'return r.join("");';
    }
    function toGetVariableLiteral(name) {
        name = name.replace(/^\s*\*/, '');
        return stringFormat('gv({0},["{1}"])', stringLiteralize(name), name.replace(/\[['"]?([^'"]+)['"]?\]/g, function (match, name) {
            return '.' + name;
        }).split('.').join('","'));
    }
    function parseTextBlock(source, open, close, greedy, onInBlock, onOutBlock) {
        var closeLen = close.length;
        var texts = source.split(open);
        var level = 0;
        var buf = [];
        for (var i = 0, len = texts.length; i < len; i++) {
            var text = texts[i];
            if (i) {
                var openBegin = 1;
                level++;
                while (1) {
                    var closeIndex = text.indexOf(close);
                    if (closeIndex < 0) {
                        buf.push(level > 1 && openBegin ? open : '', text);
                        break;
                    }
                    level = greedy ? level - 1 : 0;
                    buf.push(level > 0 && openBegin ? open : '', text.slice(0, closeIndex), level > 0 ? close : '');
                    text = text.slice(closeIndex + closeLen);
                    openBegin = 0;
                    if (level === 0) {
                        break;
                    }
                }
                if (level === 0) {
                    onInBlock(buf.join(''));
                    onOutBlock(text);
                    buf = [];
                }
            } else {
                text && onOutBlock(text);
            }
        }
        if (level > 0 && buf.length > 0) {
            onOutBlock(open);
            onOutBlock(buf.join(''));
        }
    }
    function compileVariable(source, engine, forText) {
        var code = [];
        var options = engine.options;
        var toStringHead = '';
        var toStringFoot = '';
        var wrapHead = '';
        var wrapFoot = '';
        var defaultFilter;
        if (forText) {
            toStringHead = 'ts(';
            toStringFoot = ')';
            wrapHead = RENDER_STRING_ADD_START;
            wrapFoot = RENDER_STRING_ADD_END;
            defaultFilter = options.defaultFilter;
        }
        parseTextBlock(source, options.variableOpen, options.variableClose, 1, function (text) {
            if (forText && text.indexOf('|') < 0 && defaultFilter) {
                text += '|' + defaultFilter;
            }
            var filterCharIndex = text.indexOf('|');
            var variableName = (filterCharIndex > 0 ? text.slice(0, filterCharIndex) : text).replace(/^\s+/, '').replace(/\s+$/, '');
            var filterSource = filterCharIndex > 0 ? text.slice(filterCharIndex + 1) : '';
            var variableRawValue = variableName.indexOf('*') === 0;
            var variableCode = [
                    variableRawValue ? '' : toStringHead,
                    toGetVariableLiteral(variableName),
                    variableRawValue ? '' : toStringFoot
                ];
            if (filterSource) {
                filterSource = compileVariable(filterSource, engine);
                var filterSegs = filterSource.split('|');
                for (var i = 0, len = filterSegs.length; i < len; i++) {
                    var seg = filterSegs[i];
                    if (/^\s*([a-z0-9_-]+)(\((.*)\))?\s*$/i.test(seg)) {
                        variableCode.unshift('fs["' + RegExp.$1 + '"](');
                        if (RegExp.$3) {
                            variableCode.push(',', RegExp.$3);
                        }
                        variableCode.push(')');
                    }
                }
            }
            code.push(wrapHead, variableCode.join(''), wrapFoot);
        }, function (text) {
            code.push(wrapHead, forText ? stringLiteralize(text) : text, wrapFoot);
        });
        return code.join('');
    }
    function TextNode(value, engine) {
        this.value = value;
        this.engine = engine;
    }
    TextNode.prototype = {
        getRendererBody: function () {
            var value = this.value;
            var options = this.engine.options;
            if (!value || options.strip && /^\s*$/.test(value)) {
                return '';
            }
            return compileVariable(value, this.engine, 1);
        },
        clone: function () {
            return this;
        }
    };
    function Command(value, engine) {
        this.value = value;
        this.engine = engine;
        this.children = [];
        this.cloneProps = [];
    }
    Command.prototype = {
        addChild: function (node) {
            this.children.push(node);
        },
        open: function (context) {
            var parent = context.stack.top();
            parent && parent.addChild(this);
            context.stack.push(this);
        },
        close: function (context) {
            if (context.stack.top() === this) {
                context.stack.pop();
            }
        },
        getRendererBody: function () {
            var buf = [];
            var children = this.children;
            for (var i = 0; i < children.length; i++) {
                buf.push(children[i].getRendererBody());
            }
            return buf.join('');
        },
        clone: function () {
            var node = new this.constructor(this.value, this.engine);
            for (var i = 0, l = this.children.length; i < l; i++) {
                node.addChild(this.children[i].clone());
            }
            for (var i = 0, l = this.cloneProps.length; i < l; i++) {
                var prop = this.cloneProps[i];
                node[prop] = this[prop];
            }
            return node;
        }
    };
    function autoCloseCommand(context, CommandType) {
        var stack = context.stack;
        var closeEnd = CommandType ? stack.find(function (item) {
                return item instanceof CommandType;
            }) : stack.bottom();
        if (closeEnd) {
            var node;
            while ((node = stack.top()) !== closeEnd) {
                if (!node.autoClose) {
                    throw new Error(node.type + ' must be closed manually: ' + node.value);
                }
                node.autoClose(context);
            }
            closeEnd.close(context);
        }
        return closeEnd;
    }
    var RENDERER_BODY_START = '' + 'data=data||{};' + 'var v={},fs=engine.filters,hg=typeof data.get=="function",' + 'gv=function(n,ps){' + 'var p=ps[0],d=v[p];' + 'if(d==null){' + 'if(hg){return data.get(n);}' + 'd=data[p];' + '}' + 'for(var i=1,l=ps.length;i<l;i++)if(d!=null)d = d[ps[i]];' + 'return d;' + '},' + 'ts=function(s){' + 'if(typeof s==="string"){return s;}' + 'if(s==null){s="";}' + 'return ""+s;' + '};';
    ;
    function TargetCommand(value, engine) {
        if (!/^\s*([a-z0-9\/_-]+)\s*(\(\s*master\s*=\s*([a-z0-9\/_-]+)\s*\))?\s*/i.test(value)) {
            throw new Error('Invalid ' + this.type + ' syntax: ' + value);
        }
        this.master = RegExp.$3;
        this.name = RegExp.$1;
        Command.call(this, value, engine);
        this.blocks = {};
    }
    inherits(TargetCommand, Command);
    function BlockCommand(value, engine) {
        if (!/^\s*([a-z0-9\/_-]+)\s*$/i.test(value)) {
            throw new Error('Invalid ' + this.type + ' syntax: ' + value);
        }
        this.name = RegExp.$1;
        Command.call(this, value, engine);
        this.cloneProps = ['name'];
    }
    inherits(BlockCommand, Command);
    function ImportCommand(value, engine) {
        if (!/^\s*([a-z0-9\/_-]+)\s*$/i.test(value)) {
            throw new Error('Invalid ' + this.type + ' syntax: ' + value);
        }
        this.name = RegExp.$1;
        Command.call(this, value, engine);
        this.cloneProps = [
            'name',
            'state',
            'blocks'
        ];
        this.blocks = {};
    }
    inherits(ImportCommand, Command);
    function VarCommand(value, engine) {
        if (!/^\s*([a-z0-9_]+)\s*=([\s\S]*)$/i.test(value)) {
            throw new Error('Invalid ' + this.type + ' syntax: ' + value);
        }
        this.name = RegExp.$1;
        this.expr = RegExp.$2;
        Command.call(this, value, engine);
        this.cloneProps = [
            'name',
            'expr'
        ];
    }
    inherits(VarCommand, Command);
    function FilterCommand(value, engine) {
        if (!/^\s*([a-z0-9_-]+)\s*(\(([\s\S]*)\))?\s*$/i.test(value)) {
            throw new Error('Invalid ' + this.type + ' syntax: ' + value);
        }
        this.name = RegExp.$1;
        this.args = RegExp.$3;
        Command.call(this, value, engine);
        this.cloneProps = [
            'name',
            'args'
        ];
    }
    inherits(FilterCommand, Command);
    function UseCommand(value, engine) {
        if (!/^\s*([a-z0-9\/_-]+)\s*(\(([\s\S]*)\))?\s*$/i.test(value)) {
            throw new Error('Invalid ' + this.type + ' syntax: ' + value);
        }
        this.name = RegExp.$1;
        this.args = RegExp.$3;
        Command.call(this, value, engine);
        this.cloneProps = [
            'name',
            'args'
        ];
    }
    inherits(UseCommand, Command);
    function ForCommand(value, engine) {
        var rule = new RegExp(stringFormat('^\\s*({0}[\\s\\S]+{1})\\s+as\\s+{0}([0-9a-z_]+){1}\\s*(,\\s*{0}([0-9a-z_]+){1})?\\s*$', regexpLiteral(engine.options.variableOpen), regexpLiteral(engine.options.variableClose)), 'i');
        if (!rule.test(value)) {
            throw new Error('Invalid ' + this.type + ' syntax: ' + value);
        }
        this.list = RegExp.$1;
        this.item = RegExp.$2;
        this.index = RegExp.$4;
        Command.call(this, value, engine);
        this.cloneProps = [
            'list',
            'item',
            'index'
        ];
    }
    inherits(ForCommand, Command);
    function IfCommand(value, engine) {
        Command.call(this, value, engine);
    }
    inherits(IfCommand, Command);
    function ElifCommand(value, engine) {
        IfCommand.call(this, value, engine);
    }
    inherits(ElifCommand, IfCommand);
    function ElseCommand(value, engine) {
        Command.call(this, value, engine);
    }
    inherits(ElseCommand, IfCommand);
    var TargetState = {
            READING: 1,
            READED: 2,
            APPLIED: 3,
            READY: 4
        };
    ImportCommand.prototype.applyMaster = TargetCommand.prototype.applyMaster = function (masterName) {
        if (this.state >= TargetState.APPLIED) {
            return 1;
        }
        var blocks = this.blocks;
        function replaceBlock(node) {
            var children = node.children;
            if (children instanceof Array) {
                for (var i = 0, len = children.length; i < len; i++) {
                    var child = children[i];
                    if (child instanceof BlockCommand && blocks[child.name]) {
                        child = children[i] = blocks[child.name];
                    }
                    replaceBlock(child);
                }
            }
        }
        var master = this.engine.targets[masterName];
        if (master && master.applyMaster(master.master)) {
            this.children = master.clone().children;
            replaceBlock(this);
            this.state = TargetState.APPLIED;
            return 1;
        }
    };
    TargetCommand.prototype.isReady = function () {
        if (this.state >= TargetState.READY) {
            return 1;
        }
        var engine = this.engine;
        var readyState = 1;
        function checkReadyState(node) {
            for (var i = 0, len = node.children.length; i < len; i++) {
                var child = node.children[i];
                if (child instanceof ImportCommand) {
                    var target = engine.targets[child.name];
                    readyState = readyState && target && target.isReady(engine);
                } else if (child instanceof Command) {
                    checkReadyState(child);
                }
            }
        }
        if (this.applyMaster(this.master)) {
            checkReadyState(this);
            readyState && (this.state = TargetState.READY);
            return readyState;
        }
    };
    TargetCommand.prototype.getRenderer = function () {
        if (this.renderer) {
            return this.renderer;
        }
        if (this.isReady()) {
            var realRenderer = new Function('data', 'engine', [
                    RENDERER_BODY_START,
                    RENDER_STRING_DECLATION,
                    this.getRendererBody(),
                    RENDER_STRING_RETURN
                ].join('\n'));
            var engine = this.engine;
            this.renderer = function (data) {
                return realRenderer(data, engine);
            };
            return this.renderer;
        }
        return null;
    };
    function addTargetToContext(target, context) {
        context.target = target;
        var engine = context.engine;
        var name = target.name;
        if (engine.targets[name]) {
            switch (engine.options.namingConflict) {
            case 'override':
                engine.targets[name] = target;
                context.targets.push(name);
            case 'ignore':
                break;
            default:
                throw new Error('Target exists: ' + name);
            }
        } else {
            engine.targets[name] = target;
            context.targets.push(name);
        }
    }
    TargetCommand.prototype.open = function (context) {
        autoCloseCommand(context);
        Command.prototype.open.call(this, context);
        this.state = TargetState.READING;
        addTargetToContext(this, context);
    };
    VarCommand.prototype.open = UseCommand.prototype.open = function (context) {
        context.stack.top().addChild(this);
    };
    BlockCommand.prototype.open = function (context) {
        Command.prototype.open.call(this, context);
        (context.imp || context.target).blocks[this.name] = this;
    };
    ElifCommand.prototype.open = function (context) {
        var elseCommand = new ElseCommand();
        elseCommand.open(context);
        var ifCommand = autoCloseCommand(context, IfCommand);
        ifCommand.addChild(this);
        context.stack.push(this);
    };
    ElseCommand.prototype.open = function (context) {
        var ifCommand = autoCloseCommand(context, IfCommand);
        ifCommand.addChild(this);
        context.stack.push(this);
    };
    ImportCommand.prototype.open = function (context) {
        this.parent = context.stack.top();
        this.target = context.target;
        Command.prototype.open.call(this, context);
        this.state = TargetState.READING;
        context.imp = this;
    };
    UseCommand.prototype.close = VarCommand.prototype.close = function () {
    };
    ImportCommand.prototype.close = function (context) {
        Command.prototype.close.call(this, context);
        this.state = TargetState.READED;
        context.imp = null;
    };
    TargetCommand.prototype.close = function (context) {
        Command.prototype.close.call(this, context);
        this.state = this.master ? TargetState.READED : TargetState.APPLIED;
        context.target = null;
    };
    ImportCommand.prototype.autoClose = function (context) {
        var parentChildren = this.parent.children;
        parentChildren.push.apply(parentChildren, this.children);
        this.children.length = 0;
        for (var key in this.blocks) {
            this.target.blocks[key] = this.blocks[key];
        }
        this.blocks = {};
        this.close(context);
    };
    UseCommand.prototype.beforeOpen = ImportCommand.prototype.beforeOpen = VarCommand.prototype.beforeOpen = ForCommand.prototype.beforeOpen = FilterCommand.prototype.beforeOpen = BlockCommand.prototype.beforeOpen = IfCommand.prototype.beforeOpen = TextNode.prototype.beforeAdd = function (context) {
        if (context.stack.bottom()) {
            return;
        }
        var target = new TargetCommand(generateGUID(), context.engine);
        target.open(context);
    };
    ImportCommand.prototype.getRendererBody = function () {
        this.applyMaster(this.name);
        return Command.prototype.getRendererBody.call(this);
    };
    UseCommand.prototype.getRendererBody = function () {
        return stringFormat('{0}engine.render({2},{{3}}){1}', RENDER_STRING_ADD_START, RENDER_STRING_ADD_END, stringLiteralize(this.name), compileVariable(this.args, this.engine).replace(/(^|,)\s*([a-z0-9_]+)\s*=/gi, function (match, start, argName) {
            return (start || '') + stringLiteralize(argName) + ':';
        }));
    };
    VarCommand.prototype.getRendererBody = function () {
        if (this.expr) {
            return stringFormat('v[{0}]={1};', stringLiteralize(this.name), compileVariable(this.expr, this.engine));
        }
        return '';
    };
    IfCommand.prototype.getRendererBody = function () {
        return stringFormat('if({0}){{1}}', compileVariable(this.value, this.engine), Command.prototype.getRendererBody.call(this));
    };
    ElseCommand.prototype.getRendererBody = function () {
        return stringFormat('}else{{0}', Command.prototype.getRendererBody.call(this));
    };
    ForCommand.prototype.getRendererBody = function () {
        return stringFormat('' + 'var {0}={1};' + 'if({0} instanceof Array)' + 'for (var {4}=0,{5}={0}.length;{4}<{5};{4}++){v[{2}]={4};v[{3}]={0}[{4}];{6}}' + 'else if(typeof {0}==="object")' + 'for(var {4} in {0}){v[{2}]={4};v[{3}]={0}[{4}];{6}}', generateGUID(), compileVariable(this.list, this.engine), stringLiteralize(this.index || generateGUID()), stringLiteralize(this.item), generateGUID(), generateGUID(), Command.prototype.getRendererBody.call(this));
    };
    FilterCommand.prototype.getRendererBody = function () {
        var args = this.args;
        return stringFormat('{2}fs[{5}]((function(){{0}{4}{1}})(){6}){3}', RENDER_STRING_DECLATION, RENDER_STRING_RETURN, RENDER_STRING_ADD_START, RENDER_STRING_ADD_END, Command.prototype.getRendererBody.call(this), stringLiteralize(this.name), args ? ',' + compileVariable(args, this.engine) : '');
    };
    var commandTypes = {};
    function addCommandType(name, Type) {
        commandTypes[name] = Type;
        Type.prototype.type = name;
    }
    addCommandType('target', TargetCommand);
    addCommandType('block', BlockCommand);
    addCommandType('import', ImportCommand);
    addCommandType('use', UseCommand);
    addCommandType('var', VarCommand);
    addCommandType('for', ForCommand);
    addCommandType('if', IfCommand);
    addCommandType('elif', ElifCommand);
    addCommandType('else', ElseCommand);
    addCommandType('filter', FilterCommand);
    function Engine(options) {
        this.options = {
            commandOpen: '<!--',
            commandClose: '-->',
            commandSyntax: /^\s*(\/)?([a-z]+)\s*(?::([\s\S]*))?$/,
            variableOpen: '${',
            variableClose: '}',
            defaultFilter: 'html'
        };
        this.config(options);
        this.targets = {};
        this.filters = extend({}, DEFAULT_FILTERS);
    }
    Engine.prototype.config = function (options) {
        extend(this.options, options);
    };
    Engine.prototype.compile = Engine.prototype.parse = function (source) {
        if (source) {
            var targetNames = parseSource(source, this);
            if (targetNames.length) {
                return this.targets[targetNames[0]].getRenderer();
            }
        }
        return new Function('return ""');
    };
    Engine.prototype.getRenderer = function (name) {
        var target = this.targets[name];
        if (target) {
            return target.getRenderer();
        }
    };
    Engine.prototype.render = function (name, data) {
        var renderer = this.getRenderer(name);
        if (renderer) {
            return renderer(data);
        }
        return '';
    };
    Engine.prototype.addFilter = function (name, filter) {
        if (typeof filter === 'function') {
            this.filters[name] = filter;
        }
    };
    function parseSource(source, engine) {
        var commandOpen = engine.options.commandOpen;
        var commandClose = engine.options.commandClose;
        var commandSyntax = engine.options.commandSyntax;
        var stack = new Stack();
        var analyseContext = {
                engine: engine,
                targets: [],
                stack: stack,
                target: null
            };
        var textBuf = [];
        function flushTextBuf() {
            var text;
            if (textBuf.length > 0 && (text = textBuf.join(''))) {
                var textNode = new TextNode(text, engine);
                textNode.beforeAdd(analyseContext);
                stack.top().addChild(textNode);
                textBuf = [];
                if (engine.options.strip && analyseContext.current instanceof Command) {
                    textNode.value = text.replace(/^[\x20\t\r]*\n/, '');
                }
                analyseContext.current = textNode;
            }
        }
        var NodeType;
        parseTextBlock(source, commandOpen, commandClose, 0, function (text) {
            var match = commandSyntax.exec(text);
            if (match && (NodeType = commandTypes[match[2].toLowerCase()]) && typeof NodeType === 'function') {
                flushTextBuf();
                var currentNode = analyseContext.current;
                if (engine.options.strip && currentNode instanceof TextNode) {
                    currentNode.value = currentNode.value.replace(/\r?\n[\x20\t]*$/, '\n');
                }
                if (match[1]) {
                    currentNode = autoCloseCommand(analyseContext, NodeType);
                } else {
                    currentNode = new NodeType(match[3], engine);
                    if (typeof currentNode.beforeOpen === 'function') {
                        currentNode.beforeOpen(analyseContext);
                    }
                    currentNode.open(analyseContext);
                }
                analyseContext.current = currentNode;
            } else if (!/^\s*\/\//.test(text)) {
                textBuf.push(commandOpen, text, commandClose);
            }
            NodeType = null;
        }, function (text) {
            textBuf.push(text);
        });
        flushTextBuf();
        autoCloseCommand(analyseContext);
        return analyseContext.targets;
    }
    var etpl = new Engine();
    etpl.Engine = Engine;
    if (typeof exports === 'object' && typeof module === 'object') {
        exports = module.exports = etpl;
    } else if (typeof define === 'function' && define.amd) {
        define('etpl/main', [], etpl);
    } else {
        root.etpl = etpl;
    }
}(this));

define('etpl', ['etpl/main'], function ( main ) { return main; });

define('etpl/tpl', [
    'require',
    'exports',
    'module',
    '.'
], function (require, exports, module) {
    var etpl = require('.');
    return {
        load: function (resourceId, req, load) {
            var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');
            xhr.open('GET', req.toUrl(resourceId), true);
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4) {
                    if (xhr.status >= 200 && xhr.status < 300) {
                        var source = xhr.responseText;
                        var moduleConfig = module.config();
                        if (moduleConfig.autoCompile || moduleConfig.autoCompile == null) {
                            etpl.compile(source);
                        }
                        load(source);
                    }
                    xhr.onreadystatechange = new Function();
                    xhr = null;
                }
            };
            xhr.send(null);
        }
    };
});

define('build/ui', [], function () {
});